<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI未来说-青年学术论坛（自然语言专场）</title>
    <url>/AI%E6%9C%AA%E6%9D%A5%E8%AF%B4-%E9%9D%92%E5%B9%B4%E5%AD%A6%E6%9C%AF%E8%AE%BA%E5%9D%9B-%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E4%B8%93%E5%9C%BA/</url>
    <content><![CDATA[<img data-src="/AI%E6%9C%AA%E6%9D%A5%E8%AF%B4-%E9%9D%92%E5%B9%B4%E5%AD%A6%E6%9C%AF%E8%AE%BA%E5%9D%9B-%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E4%B8%93%E5%9C%BA/%E5%85%A5%E5%9C%BA%E5%88%B8.jpg" class="" title="入场券">
<p>AI未来说-青年学术论坛（自然语言专场）。<a id="more"></a></p>
<h1 id="万小军-自然语言生成NLG"><a href="#万小军-自然语言生成NLG" class="headerlink" title="万小军-自然语言生成NLG"></a>万小军-自然语言生成NLG</h1><p>上次在<a href="https://vel.life/Byte-Tech-AI-Symposium/" target="_blank" rel="noopener external nofollow noreferrer">Bytedance</a>做过报告。（密码<code>byte</code>）</p>
<center><font color=red size=4>NLP=NLU+NLG</font></center>

<p><strong>四大领域</strong>：</p>
<ul>
<li>文本$\longrightarrow$文本</li>
<li>数据$\longrightarrow$文本</li>
<li>语义（结构）$\longrightarrow$文本<ul>
<li>难。需要先NLU，然后再NLG。（目前应用少）</li>
</ul>
</li>
<li>跨模态（多媒体）$\longrightarrow$文本<ul>
<li>交叉领域。</li>
</ul>
</li>
</ul>
<p><strong>应用</strong>：</p>
<ul>
<li>文本总结（压缩）</li>
<li>文本生成（膨胀）$\longrightarrow$写作</li>
<li>对话（online）<ul>
<li>$\longrightarrow$基于搜索$\longrightarrow$联想$\longrightarrow$思考的对话系统</li>
<li>先膨胀再搜索</li>
</ul>
</li>
<li>辩论</li>
</ul>
<p>方法：</p>
<ul>
<li>深度学习<ul>
<li>encoder-decoder / seq2seq（套路）</li>
<li>VAE / CVAE</li>
<li>RL / GAN</li>
</ul>
</li>
<li>非深度学习<ul>
<li>Classification &amp; ranking</li>
<li>Rule learning</li>
<li>Grammer based</li>
</ul>
</li>
<li>非学习<ul>
<li>人工规则</li>
</ul>
</li>
</ul>
<p>Data2text：</p>
<ul>
<li>template generation</li>
<li>slot filling（数据填充）</li>
<li>数据的保真性</li>
</ul>
<p>写诗（多层次马尔可夫？）</p>
<ul>
<li>图片——&gt;关键词——&gt;诗句</li>
<li><p>收缩——&gt;膨胀</p>
</li>
<li><p>NLG的Automatic evaluation（自动评价指标）是个难点！</p>
</li>
<li>NLG的核心还是联想规则和想界</li>
</ul>
<h1 id="张家俊-同步双向推断模型BERT"><a href="#张家俊-同步双向推断模型BERT" class="headerlink" title="张家俊-同步双向推断模型BERT"></a>张家俊-同步双向推断模型BERT</h1><p>BERT（Bidirectional Encoder Representation from Transformers）。</p>
<p>序列：</p>
<ul>
<li>表示（Encoder）——二分类</li>
<li>表示——序列标注</li>
</ul>
<p>核心：<strong>表示</strong>（representation）</p>
<p>1亿+参数，通过<strong>预训练</strong>。（随机化马尔可夫自动机？）</p>
<p>Bert优势：</p>
<ul>
<li><strong>pre-train</strong>, <strong>fine-tune</strong> some model</li>
<li>bidirectional LSTM representation</li>
<li>traditional language model</li>
<li>bigger data</li>
</ul>
<p>Bert vs. GPT:</p>
<ul>
<li><strong>Bidirectional decoder is the KEY!</strong></li>
</ul>
<p>GPT2.0:</p>
<ul>
<li>More data</li>
<li>NLG</li>
</ul>
<p>（GPT没有用到未来的数据）</p>
<hr>
<p>观察到的现象：生成质量从起点开始效果逐渐减弱。</p>
<p>策略：从左右双向进行生成。</p>
<p><strong>BIFT</strong>：（同步风筝）</p>
<ul>
<li>从左到右</li>
<li>从右到左</li>
<li>同步生成优化</li>
</ul>
<p>（进一步优化：提取关键节点，多方向同步生成？）</p>
<p>使用的结构：栈</p>
<p>信息的融合：插值（线性、非线性），激活</p>
<h1 id="李蕾-自动文本摘要"><a href="#李蕾-自动文本摘要" class="headerlink" title="李蕾-自动文本摘要"></a>李蕾-自动文本摘要</h1><p>研究：</p>
<ul>
<li>文本模型</li>
<li>摘要模型</li>
</ul>
<p>分类：</p>
<ul>
<li>单文档 vs. 多文档</li>
<li>单语言 vs. 多语言</li>
<li>抽取式 vs. 生成式</li>
<li>无监督 vs. 有监督</li>
<li>传统文本 vs. 网络新文本</li>
<li>新技术……</li>
</ul>
<h1 id="孙珂-对话技术-产业化应用UNIT"><a href="#孙珂-对话技术-产业化应用UNIT" class="headerlink" title="孙珂-对话技术/产业化应用UNIT"></a>孙珂-对话技术/产业化应用UNIT</h1><p>键盘+鼠标 $\longrightarrow$ 触屏 $\longrightarrow$ 语音 $\longrightarrow$ 思维</p>
<p>对话式人机交互技术已经进入产业爆发期！</p>
<p>核心技术：</p>
<ul>
<li>任务型</li>
<li>问答型</li>
<li>闲聊型$\longrightarrow$虚拟人物建模？用户停留时间越长越好？</li>
</ul>
<p><strong>协调性</strong>。</p>
<p>（多个机器人，具有不同性格？）</p>
<p>任务型对话系统的对话理解技术</p>
<ul>
<li>情感分析、成分分析</li>
</ul>
<p>成分分析技术：[分词、词性、专名]一体化联合识别模型</p>
<p>开源地址：<a href="https://github.com/baidu/lac（中文词法分析LAC）" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/baidu/lac（中文词法分析LAC）</a></p>
<p>语料扩充：20万$\longrightarrow$ 1.3亿（利用搜索结果进行标注「搜索+点击」）</p>
<p>爬取100万+异常检测$\longrightarrow$人工优化（众包）</p>
<p>语义：</p>
<ul>
<li>组合语义推导+分类策略</li>
</ul>
<p>一体化识别模型：</p>
<ul>
<li>准确率97%+</li>
</ul>
<p>面向消费者的技术服务：体验++，规模++</p>
<p>面向AI开发者的技术服务：快速迭代，成本- -</p>
<p>UNIT（多引擎融合对话理解技术）$\longrightarrow$多步迭代模型</p>
<ul>
<li>先开发一个准确率不高的baseline，等数据规模上来以后再用深度学习</li>
</ul>
<hr>
<p>问答系统：</p>
<ul>
<li>知识库/知识图谱</li>
<li>多文本阅读理解</li>
</ul>
<p>闲聊：</p>
<ul>
<li>生成式</li>
<li>检索式（基于深度注意力……）</li>
</ul>
<p>主流对话系统：</p>
<ul>
<li>消费产品</li>
<li>客服/企业——人机交互（语音模拟/虚拟已经相当成熟）</li>
</ul>
<p>平台：<a href="https://ai.baidu.com/unit/home（UNIT）" target="_blank" rel="noopener external nofollow noreferrer">https://ai.baidu.com/unit/home（UNIT）</a></p>
<h1 id="谭继伟-Seq2seq文本摘要"><a href="#谭继伟-Seq2seq文本摘要" class="headerlink" title="谭继伟-Seq2seq文本摘要"></a>谭继伟-Seq2seq文本摘要</h1><ul>
<li>单文档摘要</li>
<li>多文档摘要</li>
<li>句子摘要</li>
</ul>
<p>抽取式？生成式</p>
<p>Masked解码算法：</p>
<ul>
<li>每一步解码只允许有限的词表</li>
<li>增加生成某些词的概率</li>
</ul>
<h1 id="刘一佳-句法分析"><a href="#刘一佳-句法分析" class="headerlink" title="刘一佳-句法分析"></a>刘一佳-句法分析</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/57501266" target="_blank" rel="noopener external nofollow noreferrer">上下文预训练模型最全整理：原理、应用、开源代码、数据分享</a></p>
</blockquote>
<p>context2vec：正在探索</p>
<ul>
<li>能够有效对<a href="https://my.oschina.net/osandy/blog/496029" target="_blank" rel="noopener external nofollow noreferrer">未登录词</a>词性进行聚类</li>
</ul>
<p>上下文相关词向量——训练代价太高！</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>理想碰撞问题</title>
    <url>/A-Few-Thoughts-on-Collision/</url>
    <content><![CDATA[<p><img data-src="Newtons_cradle_animation_book_2.gif" alt="Newtons_cradle_animation_book_2"><a id="more"></a></p>
<h1 id="引述"><a href="#引述" class="headerlink" title="引述"></a>引述</h1><p>关于<a href="https://zh.wikipedia.org/wiki/%E7%A2%B0%E6%92%9E" target="_blank" rel="noopener external nofollow noreferrer"><strong>碰撞</strong></a>问题，可以说是一个经典物理学中已经被解释得通透的情景。</p>
<p>我将不注重讨论问题的细节，只记录一个很久之前就在脑海中成型的想法。</p>
<p>（以下考虑理想弹性碰撞）</p>
<p>由动能和动量两大守恒原理，得</p>
<script type="math/tex; mode=display">
\begin{split}
m_1v_1+m_2v_2&=m_1v_1'+m_2v_2'\\
\frac12m_1v_1^2+\frac12m_2v_2^2&=\frac12m_1v_1'^2+\frac12m_2v_2'^2
\end{split}</script><p>很容易得到</p>
<script type="math/tex; mode=display">
\begin{split}
v_1'&=\cfrac{(m_1-m_2)v_1+2m_2v_2}{m_1+m_2}\\
v_2'&=\cfrac{(m_2-m_1)v_2+2m_1v_1}{m_1+m_2}
\end{split}</script><blockquote>
<p>两式是对称的。</p>
</blockquote>
<h1 id="等价变换"><a href="#等价变换" class="headerlink" title="等价变换"></a>等价变换</h1><p>上述求解公式可以<strong>等价变换</strong>为</p>
<script type="math/tex; mode=display">
\begin{split}
v_1'&=v_1+\frac{2m_2}{m_1+m_2}(v_2-v_1) \\
v_2'&=v_2+\frac{2m_1}{m_1+m_2}(v_1-v_2) 
\end{split}</script><ul>
<li>记$M$为<strong><font color=red>系统质量</font></strong></li>
</ul>
<script type="math/tex; mode=display">
M=m_1+m_2</script><ul>
<li>记$\lambda_i为m_i$的<strong><font color=red>相对质量系数</font></strong>（无量纲）</li>
</ul>
<script type="math/tex; mode=display">
\lambda_i=\cfrac{m_i+m_i}{m_1+m_2}=\cfrac{2m_i}{M}</script><ul>
<li>记$\overline{v_i}$为<strong><font color=red>相对速度</font></strong></li>
</ul>
<script type="math/tex; mode=display">
\overline{v_i}=v_i-v_j</script><p><strong>最终我们得到了新的公式表达</strong>：</p>
<script type="math/tex; mode=display">
\bf\color{red}v_i'=v_i+\lambda_j\overline{v_j}\tag{F}</script><p><strong>$(F)$式</strong>的含义可以表述为</p>
<script type="math/tex; mode=display">
I的新速度=I的原速度+(J的相对质量系数*J的相对速度)</script><hr>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p><strong>注意</strong>：</p>
<ul>
<li>两物体的<strong>相对速度和为0</strong>（矢量）</li>
</ul>
<script type="math/tex; mode=display">
\bf\overline{v_i}+\overline{v_j}=0</script><ul>
<li>两物体的<strong>相对质量系数和为2</strong></li>
</ul>
<script type="math/tex; mode=display">
\bf\lambda_i+\lambda_j=2</script><ul>
<li>根据上面的恒等关系，<strong>你只需要先求一个物体的相对量，就能<font color=red>快速</font>得到另一个物体的相对量</strong>。</li>
</ul>
<blockquote>
<p>由于$0&lt;\lambda_i\leq2，\overline{v_i}\geq0$，碰撞的速度变化总在相对速度的2倍以内。</p>
<p>$\lambda_i\overline{v_i}$表征了物体相互之间的速度影响项。</p>
</blockquote>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p><strong>例</strong>：</p>
<p><img data-src="https://i.imgur.com/ApbDZnu.png" alt="Imgur"></p>
<ul>
<li><p>求A的相对速度为+3，相对质量系数为2*2/3=4/3。</p>
<ul>
<li>快速得到：B的相对速度为-3，相对质量系数为2-4/3=2/3。</li>
</ul>
</li>
<li><p>代入公式：</p>
<script type="math/tex; mode=display">
v_A'=v_A+\lambda_B\overline{v_B}=(+1)+\frac{2}{3}(-3)=-1\\
v_B'=v_B+\lambda_A\overline{v_A}=(-2)+\frac{4}{3}(+3)=+2</script></li>
<li><p>验证：结果显然满足动能、动量守恒</p>
</li>
</ul>
<hr>
<h1 id="猜想-虚体运动"><a href="#猜想-虚体运动" class="headerlink" title="猜想:虚体运动"></a>猜想:虚体运动</h1><p>文章最前面的配图是<a href="https://zh.wikipedia.org/zh-hans/%E7%89%9B%E9%A1%BF%E6%91%86" target="_blank" rel="noopener external nofollow noreferrer">牛顿球</a>。</p>
<p><img data-src="Newtons_cradle_animation_book_2.gif" alt="Newtons_cradle_animation_book_2"></p>
<p>这实际上是一个能量的传递过程。</p>
<blockquote>
<p>那么问题来了。</p>
</blockquote>
<p>【<strong>虚体运动猜想</strong>】：</p>
<ul>
<li><strong>是否可以认为有一个虚拟的球(能量)在这些表面现象的背后作用呢</strong>？</li>
</ul>
<p><img data-src="Newton.gif" alt="Newton"></p>
<blockquote>
<p>Source: <a href="https://www.jqhtml.com/19348.html" target="_blank" rel="noopener external nofollow noreferrer">CSS牛顿摆</a><br>（<del>绘图技术太渣，意会一下就好</del>，大概是一个虚拟的球先附着在左边的球上，碰撞发生以后，它脱离实体潜运行最右侧的球上，然后继续附着，周而复始）</p>
</blockquote>
<p>这样的话，相对物质实体，能量就是在场中运行的虚体了。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>阅《数学之美》</title>
    <url>/Beauty-of-Mathmatics/</url>
    <content><![CDATA[<blockquote>
<p>《<a href="https://book.douban.com/subject/10750155/" target="_blank" rel="noopener external nofollow noreferrer">数学之美</a>》是<a href="https://www.aminocapital.com/team/wu-jun-bo-shi" target="_blank" rel="noopener external nofollow noreferrer">吴军</a>的作品。<br>主要包括自然语言处理，信息学和搜索算法等内容。 <a id="more"></a></p>
</blockquote>
<p>这是Vel的读书笔记，收获+思考。</p>
<h1 id="自然语言"><a href="#自然语言" class="headerlink" title="自然语言"></a>自然语言</h1><h2 id="起源时期"><a href="#起源时期" class="headerlink" title="起源时期"></a>起源时期</h2><p>一个<strong>信息的原始传播模型</strong>：</p>
<script type="math/tex; mode=display">
【发送】信息 \rightarrow编码\rightarrow信息（信道）\rightarrow解码\rightarrow信息【接收】</script><p>等价地用幻想学语言表述为：</p>
<script type="math/tex; mode=display">
现实 \rightarrow幻想 \rightarrow联想\rightarrow信息\rightarrow逆联想\rightarrow幻想\rightarrow现实</script><p>对于$“现实\rightarrow幻想 \rightarrow联想\rightarrow信息<br>”$部分。</p>
<blockquote>
<p>在人类发展以后，逐渐出现了庞大的信息载体：<strong>象形文字</strong>。</p>
<p>然而象形文字太过于唯象（就是说，任何事物都用一个初等联想来表征），导致人类需要的记忆量很大，因此必须通过编码（联想）加以简化。</p>
<p>在联想过程中，又产生了复杂联想，如多方联想（<strong>聚类</strong>，一词多义），从而产生特征群。</p>
</blockquote>
<p>但当我们只研究$“联想\rightarrow信息\rightarrow逆联想”$部分时。可以得出另一个结论：</p>
<blockquote>
<p><strong>翻译</strong>的可行性，是因为<strong>不同的文字系统在记录信息上的能力是等价的</strong>。</p>
</blockquote>
<p>对比幻想学中对翻译的定义：</p>
<blockquote>
<p>翻译：根据任意给定的想界，对特定幻想的可想特征联想称为该想界下对该幻想的翻译。</p>
</blockquote>
<p>都可以发现，翻译的主要局限在于<strong>想界</strong>。也就是说，想界决定了文字的复杂度上限，而翻译并不依赖于特定的文字系统（联想群）。</p>
<p>接着书中介绍了<a href="https://zh.wikipedia.org/wiki/%E7%BE%85%E5%A1%9E%E5%A1%94%E7%9F%B3%E7%A2%91" target="_blank" rel="noopener external nofollow noreferrer">罗塞塔石碑</a>。（同名语言学习软件：<a href="http://www.rosettastone.cn/" target="_blank" rel="noopener external nofollow noreferrer">Rosettastone</a>）</p>
<ul>
<li>信息的冗余提高信息的安全性。</li>
<li>语言的数据（语料）对翻译至关重要。</li>
</ul>
<p>随着资源的丰富化，人类语言开始出现<strong>数字</strong>。</p>
<p>进一步，出现了<strong>进位制</strong>。（普遍10进制。玛雅文明使用了20进制）</p>
<ul>
<li>中国：个十百千万亿兆（<a href="https://blog.csdn.net/ce123_zhouwei/article/details/6971544" target="_blank" rel="noopener external nofollow noreferrer">大端</a>）</li>
<li>罗马：$IVXM$（大端相减，小端相加）</li>
<li>印度：0123456789（隐式进制单位）</li>
</ul>
<p>自然语言从此与数字分道扬镳。</p>
<p><a href="https://zh.wikipedia.org/zh-hans/%E6%A5%94%E5%BD%A2%E6%96%87%E5%AD%97" target="_blank" rel="noopener external nofollow noreferrer">楔形文字</a>是最早的拼音文字。</p>
<blockquote>
<p>若把中文中的拼音当作字母，则它也是一种（二维）拼音文字。<br>可以认为历史发展中，中文字体从抽象的图逐渐规整化，从而表意$\rightarrow$表音。</p>
</blockquote>
<p>从楔形文字中传播简化出的22个字母后来演变成欧亚非大陆语言体系的主体。</p>
<hr>
<p>词是有限而封闭的集合，语言则是无限而开放的集合。</p>
<blockquote>
<p>任何语言都有语法规则覆盖不到的地方。<br>从而引出了语言和语法之争。</p>
</blockquote>
<h2 id="转折时期"><a href="#转折时期" class="headerlink" title="转折时期"></a>转折时期</h2><ul>
<li>计算机能否处理自然语言？Yes。</li>
<li>处理方法是否与人一样？Yes。</li>
</ul>
<p>早期：</p>
<blockquote>
<p>1950-170。用电脑模拟人脑。成果几乎为0。</p>
</blockquote>
<p>中期：</p>
<blockquote>
<p>1970-21世纪。基于数学模型+统计方法。实质性突破。</p>
</blockquote>
<p>核心结论：<strong>计算机并不需要拥有类似人类的智能才能完成翻译</strong>。（<strong><font color=red>唯象派</font></strong>）</p>
<hr>
<p>早期的研究如下：</p>
<blockquote>
<ul>
<li>应用层：语音识别，机器翻译，自动问答</li>
<li>认知层：自然语言处理</li>
<li><strong>基础层</strong>：句法分析，语义分析</li>
</ul>
</blockquote>
<p>但是，由于基础分析的复杂性，研究迟迟没有进展。</p>
<p>可以参考：<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="noopener external nofollow noreferrer">抽象语法树</a>，以及<a href="http://huang-jerryc.com/2016/03/15/%E4%BD%95%E4%B8%BA%E8%AF%AD%E6%B3%95%E6%A0%91/" target="_blank" rel="noopener external nofollow noreferrer">何为语法树</a>。自然语言的语法树所需要定义的文法规则过多。</p>
<blockquote>
<p>实际上，就是因为幻想和幻想之间的联想<strong>被一个一个地处理</strong>，计算机并没有学会通用联想规则。</p>
<p>其次，由于文本的<strong>上下文相关</strong>，更加大难度。这类特征联想也没有被掌握。</p>
<ul>
<li>算法复杂度——上下文无关算法：$O(n^2)$；上下文相关算法：$O(n^6)$。</li>
</ul>
</blockquote>
<hr>
<p>基于统计的自然语言处理方法，在数学模型上和通信是相通的（甚至相同的）。</p>
<h2 id="统计模型"><a href="#统计模型" class="headerlink" title="统计模型"></a>统计模型</h2><h3 id="通用模型"><a href="#通用模型" class="headerlink" title="通用模型"></a>通用模型</h3><p>初衷：<strong>语音识别</strong>，判定一个文字序列是否可被理解并有意义。</p>
<blockquote>
<p>比如在上一章的例子中：</p>
<ul>
<li>美联储主席本·伯南克昨天告诉媒体7 000 亿美元的救助资金将借给上百家银行、保险公司和汽车公司。</li>
</ul>
<p>这句话就很通顺【语法】，意思【词义】也很明白。</p>
<p>如果改变一些词的顺序，或者替换掉一些词，将这句话变成：</p>
<ul>
<li>本·伯南克美联储主席昨天7 000 亿美元的救助资金告诉媒体将借给银行、保险公司和汽车公司上百家。</li>
</ul>
<p>意思就含混了，虽然多少还能猜到一点。【词义】</p>
<p>但是如果再换成：</p>
<ul>
<li>联主美储席本·伯诉体南将借天的救克告媒昨助资金70 元亿00 美给上百百百家银保行、汽车险公司公司和。</li>
</ul>
<p>基本上读者就不知所云了。【模糊】</p>
<p>上面的例子体现了一个转变过程：<strong>语法——词义——模糊</strong>。</p>
</blockquote>
<p><a href="https://baike.baidu.com/item/%E8%B4%BE%E9%87%8C%E5%B0%BC%E5%85%8B" target="_blank" rel="noopener external nofollow noreferrer">贾里尼克</a>提出：（拓展：<a href="https://baike.baidu.com/item/BCJR%E7%AE%97%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer">BCJR算法</a>）</p>
<blockquote>
<p><strong>一个句子是否合理，就看看它出现的可能性大小如何</strong>。至于可能性就用概率来衡量。<br>第一个句子出现的概率大致是10-20，第二个句子出现的概率是10-25 次方，第三个句子出现的概率是10-70。因此，第一个最有可能，它的可能是第二个句子的10 万倍，是第三个句子的一百亿亿亿亿亿亿倍。</p>
<p>（注：为避免值太小，可以使用对数概率）</p>
</blockquote>
<p>引入<strong>马尔可夫假设</strong>：（<a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE" target="_blank" rel="noopener external nofollow noreferrer">马尔可夫</a>）</p>
<ul>
<li>假设任意一个词出现的概率<strong>只同它前面的词</strong>有关。（<strong>前驱</strong>，联想链表）</li>
</ul>
<img data-src="/Beauty-of-Mathmatics/LiivAdu.png" class="" title="二元模型">
<blockquote>
<p>条件概率公式为</p>
<script type="math/tex; mode=display">
P(w_1,w_2,…,w_n)=P(w_1)P(w_2|w_1)…P(w_n|w_1,w_2,…,w_{n-1})</script><p>利用马尔可夫假设：</p>
<script type="math/tex; mode=display">
P(w_k|w_1,w_2,…,w_{k-1})=P(w_k|w_{k-1})</script><p>于是得到</p>
</blockquote>
<script type="math/tex; mode=display">
P(w_1,w_2,…,w_n)=P(w_1)P(w_2|w_1)P(w_3|w_2)…P(w_n|w_{n-1})</script><p>该公式对应着<strong><a href="https://zh.wikipedia.org/wiki/N%E5%85%83%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer">二元模型</a></strong>（<a href="https://zhuanlan.zhihu.com/p/29824784" target="_blank" rel="noopener external nofollow noreferrer">More</a>）。</p>
<blockquote>
<p>当所考虑的前驱不止一个时（一般为有限个），称为<strong>n元语法模型</strong>。</p>
</blockquote>
<img data-src="/Beauty-of-Mathmatics/uVGlpvL.png" class="" title="n元语法模型">
<blockquote>
<p>对应的简化公式为：（以三元为例）</p>
<script type="math/tex; mode=display">
P(w_1,w_2,…,w_n)=P(w_1)P(w_2)P(w_3|w_2,w_1)…P(w_n|w_{n-1},w_{n-2})</script></blockquote>
<p>这样的模型之所以在自然语言中很成功，是因为大多数自然语言都具有<strong><font color=red>局部性</font></strong>。（人类的联想大多是初等的）</p>
<blockquote>
<p>由于现实中，联想总是相对稀少，统计模型的成功也就不难理解了。事实上，越是重复度高，统计模型就越有用武之地。（大数定律）</p>
<blockquote>
<p>比如，翻译一个几乎很少被使用的生僻词汇，可能就需要非统计学的手段。（频率将不可靠）</p>
<p>对于跨越上下文的”长程依赖性（Long Distance Dependency）“，n元模型将很难解析。<br>（n元模型的复杂度为$O(|V|^n)$，$V$是词汇量）</p>
</blockquote>
<p>尽管联想稀少，但对于人工处理来说仍然是天文数字级的。（联想视界论）</p>
</blockquote>
<p>接下来只需要进行文本统计，确定各个概率就行了。</p>
<hr>
<p>为了解决统计样本不足时的概率估计问题，诞生了很多<a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%BB%91" target="_blank" rel="noopener external nofollow noreferrer">平滑</a>性的处理。</p>
<p>比如，<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E4%BC%B0%E8%AE%A1" target="_blank" rel="noopener external nofollow noreferrer"><strong>古德-图灵估计</strong></a>（<a href="https://blog.csdn.net/quicmous/article/details/52160940" target="_blank" rel="noopener external nofollow noreferrer">More</a>，<a href="http://www.shuang0420.com/2017/03/24/NLP%20%E7%AC%94%E8%AE%B0%20-%20%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95%28Smoothing%29%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener external nofollow noreferrer">More2</a>）：从已有事件中统一分配一部分的概率给未知事件。</p>
<script type="math/tex; mode=display">
d_r=\cfrac{(r+1)N_{r+1}}{N_r}</script><p>公式表述了Good-Turing估计的核心。其中，$N_r$指语料库中频率为$r$的词数。</p>
<p>$r$较大时，</p>
<ul>
<li>统计中频率$\approx$概率。</li>
</ul>
<p>$r$较小时，我们利用Good-Turing估计，将$r$较小的词的概率进行<strong>修正</strong>。</p>
<ul>
<li>一般$N_r$和$r$的关系呈现<strong>凹性负相关</strong>（<a href="https://zh.wikipedia.org/wiki/%E9%BD%8A%E5%A4%AB%E5%AE%9A%E5%BE%8B" target="_blank" rel="noopener external nofollow noreferrer">Zipf定律</a>）<br>因而<strong>$r$ 越小，$N_r$上升越快</strong>，故我们修正得到的$d_r$会比$r$小得多。（并且，有正定性：$d_0&gt;0$）<br>这样，我们实际上只把一些中等频率的词的概率分配给了生僻词。（<a href="https://en.wikipedia.org/wiki/Katz%27s_back-off_model" target="_blank" rel="noopener external nofollow noreferrer">卡茨退避法</a>）</li>
</ul>
<blockquote>
<p>为了更直观的理解，我们还可以用反证法。<br>假如我们把前面的公式写为</p>
<script type="math/tex; mode=display">
r=\cfrac{(r+1)N_{r+1}}{N_r}（这实际并不成立）</script><p>可以得到</p>
<script type="math/tex; mode=display">
\cfrac{r}{r+1}=\cfrac{N_{r+1}}{N_r}</script><blockquote>
<p>对于$\cfrac{r}{r+1}$，在$r\rightarrow0$时，极限趋于1。</p>
<p>而对于$\cfrac{N_{r+1}}{N_r}$，由于$N_r$和$r$<strong>凹性负相关</strong>，因此在$r\rightarrow0$时，极限趋于$\infty$。（仅负相关则不能推出）</p>
</blockquote>
<p>故原假设不成立。并且，$r\rightarrow0$时，$0&lt;d_r≪r$。</p>
</blockquote>
<p>接下来只需要进行语料收集，训练模型就行了。</p>
<h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><h4 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h4><p>查字典，单向遍历字符串，每次贪心地找到最长的（字典里有的）匹配。（梁南元守创）</p>
<p>但是，贪心法对<strong>二义分割</strong>失效。</p>
<blockquote>
<p>例：发展中国家。</p>
<blockquote>
<p>字典：发，展，中，国，家，发展，中国，国家。</p>
</blockquote>
<p>从左往右：发展-中国-家。<br>从右往左：发展-中-国家。</p>
</blockquote>
<h4 id="动态规划-统计"><a href="#动态规划-统计" class="headerlink" title="动态规划+统计"></a>动态规划+统计</h4><p>由底至上地利用统计数据获得最大概率出现的分词方法。（拓展：<a href="https://zh.wikipedia.org/zh-hans/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98" target="_blank" rel="noopener external nofollow noreferrer">背包问题</a>，<a href="https://raw.githubusercontent.com/tianyicui/pack/master/V2.pdf" target="_blank" rel="noopener external nofollow noreferrer">背包九讲</a>）</p>
<blockquote>
<p>例：发展中国家。</p>
<blockquote>
<p>频率字典：发（0.05），展（0.01），中（0.02），国（0.04），家（0.03），发展（0.1），中国（0.2），国家（0.15），发展中（0.4）。</p>
</blockquote>
<p><a href="https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener external nofollow noreferrer">状态转移方程</a>可描述为：</p>
<script type="math/tex; mode=display">
dp[i,j]=max_{k\in\{i,i+1,…,j-1\}}(dp[i,k]+dp[k+1,j])</script><p>其中$dp[i,j]$指分词法在区间$[i,j]$的最大概率。（仅用加法粗糙地表示）</p>
<p>下为初始的频率字典表。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">dp[i,j]</th>
<th style="text-align:center">j0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>i0</strong></td>
<td style="text-align:center">0.05</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">0.4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.01</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.02</td>
<td style="text-align:center">0.2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>3</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.04</td>
<td style="text-align:center">0.15</td>
</tr>
<tr>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.03</td>
</tr>
</tbody>
</table>
</div>
<p>经过状态转移方程（5）计算后得到：（仅利用了上三角。技巧：由底向上计算）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">dp[i,j]</th>
<th style="text-align:center">j0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>i0</strong></td>
<td style="text-align:center">0.05</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center"><strong>0.4</strong></td>
<td style="text-align:center">0.44</td>
<td style="text-align:center"><font color=red><strong>0.55</strong></font></td>
</tr>
<tr>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.01</td>
<td style="text-align:center">0.03</td>
<td style="text-align:center">0.21</td>
<td style="text-align:center">0.24</td>
</tr>
<tr>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.02</td>
<td style="text-align:center">0.2</td>
<td style="text-align:center">0.23</td>
</tr>
<tr>
<td style="text-align:center"><strong>3</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.04</td>
<td style="text-align:center"><strong>0.15</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.03</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>细节上可能还要实现回溯功能，dp[i,j]不为空时跳过……and so on</p>
</blockquote>
<p>更一般地，利用<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer"><strong>Viterbi算法</strong></a>（<a href="https://www.zhihu.com/question/20136144" target="_blank" rel="noopener external nofollow noreferrer">More</a>）。</p>
</blockquote>
<hr>
<p>介绍了颗粒度概念。</p>
<blockquote>
<p>机器翻译中大颗粒度更好；网页搜索中小颗粒度更好。</p>
</blockquote>
<h4 id="Viterbi算法"><a href="#Viterbi算法" class="headerlink" title="Viterbi算法"></a>Viterbi算法</h4><p><a href="https://blog.csdn.net/dearwind153/article/details/56009839" target="_blank" rel="noopener external nofollow noreferrer">维特比算法</a>是针对<a href="https://img-blog.csdn.net/20170220112902463" target="_blank" rel="noopener external nofollow noreferrer">篱笆网络</a>（Lattice）的有向图最短路径提出的。（动态规划，<strong>传播式算法</strong>）</p>
<blockquote>
<p>凡是使用隐马尔可夫模型描述的问题都可以用它来解码。</p>
</blockquote>
<p>维特比算法的核心在于：<strong>传播</strong>。</p>
<hr>
<p>由于维特比算法的传播特性，维特比算法可以等效为一个<strong><a href="https://zh.wikipedia.org/zh/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener external nofollow noreferrer">BFS</a></strong>。</p>
<p>如下图：（相当于一条马尔可夫链的状态伸展【上下伸展】，每一列代表原来的一个时刻）</p>
<img data-src="/Beauty-of-Mathmatics/U57DH6s.png" class="" title="篱笆图">
<blockquote>
<p>在两条竖线之间就是维特比算法的篱笆图。<br>维特比求的是最优值。其实就是求从左到右的最短路。<br>我们在左右端添加两个头尾节点（红色节点），连上一些0权的边（黄色边），即可以使用从节点$I$到$O$的BFS了。</p>
<p>设共有$N$列，每一列节点的最大数量记为$D$（篱笆高度），可以算出两列间边数的上限为$D^2$（篱笆间隙）。<br>维特比算法只须遍历所有的边，故算法复杂度为$O(ND^2)$。<br>（相比穷举的指数级复杂度：$O((D^2)^N)=O(D^N)$优化不少）</p>
</blockquote>
<p>总之，形象地说，BFS最短路径问题<strong>掐头去尾</strong>就得到了Viterbi算法。</p>
<p>由于任何的语音、文字的输入都是以流（Stream）的形式进行，只要处理每个状态的速度快过讲话、打字就行。此时，解码过程将是实时的。</p>
<hr>
<p>（我的思考）</p>
<p>纯粹幻想学中对幻想空间的纯化，就是一个逆向的BFS。</p>
<p>其次，为了结合BFS、DFS和统计学的优势，我构想了以下的算法。</p>
<p><strong>有限传播算法</strong>/有限优先算法（Finite First Search，FFS）：</p>
<ul>
<li>BFS只能无偏地传播，搜索进度慢，形成比较均衡的搜索树</li>
<li>DFS只能定向传播（又称为<strong>传递</strong>，因为仿佛有一个虚拟的信物/令牌在节点之间传递），容易陷入过于细分的领域，运气成分高，并且容易形成强烈失衡的搜索树</li>
<li>FFS综合了BFS和DFS，充分利用已知信息（通常信息集中于前几层），引入概率模型，在每一次搜索时选择概率最大的多个进行搜索，实现适度均衡的搜索树。（与<a href="https://blog.csdn.net/u010700335/article/details/44079069" target="_blank" rel="noopener external nofollow noreferrer">剪枝</a>策略相反）</li>
<li>类似思想：<a href="https://www.zhihu.com/question/264189719" target="_blank" rel="noopener external nofollow noreferrer">随机梯度下降</a>（Stochastic gradient descent，SGD）。<br>（在有限传播中可能找不到类似梯度这样局部的全面、精准的度量。有限传播算法考虑在有限资源的前提最大可能程度地获得答案）</li>
<li>类似算法：<a href="https://blog.csdn.net/v_JULY_v/article/details/6093380" target="_blank" rel="noopener external nofollow noreferrer">A*算法</a>。（<a href="https://www.gamedev.net/articles/programming/artificial-intelligence/a-pathfinding-for-beginners-r2003/" target="_blank" rel="noopener external nofollow noreferrer">More</a>，启发式搜索算法）</li>
</ul>
<hr>
<p>维特比本人还参与将<a href="https://baike.baidu.com/item/%E7%A0%81%E5%88%86%E5%A4%9A%E5%9D%80/2503754?fromtitle=CDMA&amp;fromid=185961" target="_blank" rel="noopener external nofollow noreferrer">CDMA技术</a>（码分多址）应用于3G移动通信（More，<a href="https://zh.wikipedia.org/zh-hans/%E9%AB%98%E9%80%9A" target="_blank" rel="noopener external nofollow noreferrer">高通公司</a>）。</p>
<ul>
<li>频分多址（FDMA）：将不同的频率（频道）一一对应地分给用户。</li>
<li>时分多址（TDMA）：类似<a href="https://blog.csdn.net/u013630349/article/details/47732731" target="_blank" rel="noopener external nofollow noreferrer">时间片轮转</a>，将同一频道切分为细小的时间片给不同用户。当切分得足够小，可近似具有实时性。</li>
<li>码分多址（CDMA）：类似<a href="https://zh.wikipedia.org/wiki/%E5%8F%A0%E5%8A%A0%E6%80%81" target="_blank" rel="noopener external nofollow noreferrer">量子态叠加</a>（或者<a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E5%88%86%E6%9E%90" target="_blank" rel="noopener external nofollow noreferrer">Fourier解析</a>），用户通过一个密匙从大量的信息中过滤出自己的信号。</li>
</ul>
<blockquote>
<p>注：可以认为，址就是用户，<strong>分多址就是分给多个用户</strong>（使用）。</p>
</blockquote>
<h3 id="隐马尔可夫"><a href="#隐马尔可夫" class="headerlink" title="隐马尔可夫"></a>隐马尔可夫</h3><p>上文已经提到过通信模型：$【发送】信息1 \rightarrow编码\rightarrow信息2（信道）\rightarrow解码\rightarrow信息3【接收】$。</p>
<p>具体的，我们认为信息3和信息1是<strong>相似</strong>的。为了求取最佳信息3（<strong>解码</strong>），通过最大概然法。</p>
<p>假设信息1的序列：$S_1,S_2,…S_n$；信息2的序列：$O_1,O_2,…O_n$；信息3的序列：$s_1,s_2,…s_n$。</p>
<blockquote>
<p>假定我们已经拥有信息1的所有可能序列（样本）。</p>
</blockquote>
<p>利用相似原理和贝叶斯公式有</p>
<script type="math/tex; mode=display">
P(s_1,s_2,…s_n)=\frac{P(O_1,O_2,…O_n|S_1,S_2,…S_n)\cdot P(S_1,S_2,…S_n)}{P(O_1,O_2,…O_n)}</script><p>我们要<strong>求左式$P(s_1,s_2,…s_n)$的最大值</strong>，而$P(O_1,O_2,…O_n)$是固定的，不影响最值求解。因而我们可以简化为</p>
<script type="math/tex; mode=display">
P(s_1,s_2,…s_n)=c \cdot \{P(O_1,O_2,…O_n|S_1,S_2,…S_n)\cdot P(S_1,S_2,…S_n)\}</script><hr>
<p>最后，我们使用<a href="https://zh.wikipedia.org/wiki/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener external nofollow noreferrer">隐含马尔可夫模型</a>来对上式进行估计。</p>
<p>马尔可夫链之前已经介绍过了。我们可以将其形成过程形象地称为“<strong>概率图灵机</strong>”。</p>
<blockquote>
<p>图灵机按照一定的规则在纸带上的状态上行走；概率图灵机将每一步固定的路线选择解析成有概率的事件。</p>
<p>记录这些事件发生概率的总表称为“<strong>概率转移矩阵</strong>”。（实质就是<strong>带权、归一</strong>的<a href="https://zh.wikipedia.org/zh-hans/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5" target="_blank" rel="noopener external nofollow noreferrer">邻接矩阵</a>）</p>
</blockquote>
<p>通过概率图灵机产生一个可观测的马尔可夫链：$S_1,S_2,…S_T$。</p>
<blockquote>
<p>显然，我们可以通过统计频率的方法来估计概率转移矩阵。</p>
</blockquote>
<p>但是，当观测条件受限时，则要引入隐马尔可夫。（可以想成<strong>唯象化</strong>的马尔可夫链）</p>
<p><strong>隐马尔可夫</strong>：<font color=red><strong>源</strong></font><strong>马尔可夫链</strong>（$S_1,S_2,…S_T$，隐序列）不可观测。我们将接收到一个新序列（$O_1,O_2,…O_n$，表序列），其中满足$O_i=f(S_i)$。</p>
<blockquote>
<p>注意，$O_i=f(S_i)$表示$O_i$是且仅是$S_i$的函数。（<strong>独立输出假设</strong>）</p>
</blockquote>
<p>如下图所示：</p>
<img data-src="/Beauty-of-Mathmatics/jW212Sg.png" class="" title="表序列和隐序列">
<p>计算特定S序列产生O序列的概率：</p>
<script type="math/tex; mode=display">
P(S_1,S_2,…S_n,O_1,O_2,…O_n)=\prod_tP(S_t|S_{t-1})\cdot P(O_t|S_t)</script><p>式右边利用了马尔可夫假设【$P(S<em>t|S</em>{t-1})$】和独立输出假设【$P(O_t|S_t)$】。</p>
<p>现在我们利用上式和前面的简化式的相似性完成对简化式的估计。</p>
<blockquote>
<p>相似性体现如下：</p>
</blockquote>
<script type="math/tex; mode=display">
翻译模型：P(O_1,O_2,…O_n|S_1,S_2,…S_n)=\prod_tP(O_t|S_t）</script><script type="math/tex; mode=display">
语言模型：P(S_1,S_2,…S_n)=\prod_tP(S_t|S_{t-1})</script><p>至此，解码问题将能利用隐马尔可夫模型解决。</p>
<hr>
<p>隐马尔可夫模型（<strong>HMM</strong>）有三个典型问题：</p>
<ul>
<li>（<font color=red><strong>预测</strong></font>）给定模型，计算特定O序列的概率【<a href="https://blog.csdn.net/allanjie/article/details/17884965" target="_blank" rel="noopener external nofollow noreferrer">Forward-Backward算法</a>】</li>
<li>（<font color=red><strong>溯源</strong></font>）给定模型+特定O序列，估计最佳似然S序列【<a href="https://www.jianshu.com/p/218c1e4f0891" target="_blank" rel="noopener external nofollow noreferrer">Viterbi算法</a>】</li>
<li>（<font color=red><strong>训练</strong></font>）<strong>给定观测数据，训练隐马尔可夫模型参数</strong>【<a href="https://blog.csdn.net/u014688145/article/details/53046765" target="_blank" rel="noopener external nofollow noreferrer">Baum-Welch算法</a>】</li>
</ul>
<p>对于训练，可以使用监督学习获得参数$P(S<em>t|S</em>{t-1})和P(O_t|S_t)$，但标注数据的获取成本高。</p>
<blockquote>
<p>于是有了无监督的Baum-Welch算法。</p>
</blockquote>
<p>同样的O序列可能对应多个HMM模型（记为$M_{i}$）。</p>
<p>Baum-Welch算法将试图找到其中最可能的模型$M_{\theta}$（最佳模型）。</p>
<p>Baum-Welch算法（<strong>迭代</strong>）：</p>
<ul>
<li>首先找到任意一个满足O序列的HMM模型$M_i$</li>
<li>通过$M_1$可以利用O序列<strong>反向生成</strong>一个标注数据集</li>
<li>利用标注数据集，根据隐马尔可夫（解码算法）<strong>生成</strong>新的模型$M_{i+1}$</li>
<li>再次反向生成、生成……</li>
<li>……</li>
<li>直到收敛。找到质量足够好的模型$M_n$（<a href="https://zh.wikipedia.org/zh-hans/%E6%9C%80%E5%A4%A7%E6%9C%9F%E6%9C%9B%E7%AE%97%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer">期望最大化</a>）<ul>
<li>用$M<em>n近似表示最佳模型M</em>{\theta}$。</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意，Baum-Welch算法证明了$P（O|M_{i+1}）&gt;P（O|M_i）$，即，每次迭代都更优。</p>
</blockquote>
<p>由于一般得到的是局部最优（极值），Baum-Welch算法生成的模型可能稍逊于监督学习模型。</p>
<blockquote>
<p>对于单峰的凸函数（如，信息熵），则将表现正常。</p>
</blockquote>
<p>若为了确保得到全局最优，可以考虑结合<a href="https://zh.wikipedia.org/wiki/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer">遗传算法</a>。</p>
<h1 id="信息学"><a href="#信息学" class="headerlink" title="信息学"></a>信息学</h1><h2 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C" target="_blank" rel="noopener external nofollow noreferrer">香农</a>创立的<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E6%81%AF%E8%AE%BA" target="_blank" rel="noopener external nofollow noreferrer">信息论</a>的基础内容不再介绍。只记录几个概念。</p>
<ul>
<li><p><strong>信息熵</strong>：$H(X)=-\sum_{x\in X}P(x)logP(x)$。</p>
</li>
<li><p><strong>条件熵</strong>：$H(X|Y)=-\sum_{x\in X,y\in Y}P(x,y)logP(x|y)$。</p>
</li>
</ul>
<blockquote>
<p>$H(X)\geq H(X|Y)$。（可以推广。意味着n元模型的精确度高于n-1元模型）</p>
</blockquote>
<ul>
<li><font color=red><strong>互信息</strong></font>：$I(X;Y)=\sum_{x\in X,y\in Y}P(x,y)log \cfrac{P(x,y)}{P(x)P(y)}$。</li>
</ul>
<blockquote>
<p>$I(X;Y)=H(X)-H(X|Y)$。</p>
</blockquote>
<ul>
<li><strong>交叉熵</strong>（相对熵）：$KL(f(x)\mid \mid g(x))=\sum_{x\in X}f(x)\cdot log\cfrac{f(x)}{g(x)}$。</li>
</ul>
<blockquote>
<p>交叉熵衡量<strong>差异度</strong>。差异越大，交叉熵越大。<br>交叉熵没有对称性。</p>
<p>为了获得对称性，提出了平均交叉熵：$JS(f(x)\mid\mid g(x))=\frac{1}{2}[KL(f(x)\mid \mid g(x))+KL(g(x)\mid \mid f(x))]$</p>
<p>应用：信号处理，同义词判断，<a href="https://blog.csdn.net/index20001/article/details/78884646" target="_blank" rel="noopener external nofollow noreferrer">语言模型复杂度</a>，<a href="https://zh.wikipedia.org/zh-hans/Tf-idf" target="_blank" rel="noopener external nofollow noreferrer">TF-IDF</a>，<del>似乎可以用来查重orz</del>。</p>
</blockquote>
<hr>
<p>内容学习参见：<a href="https://www.xuetangx.com/courses/course-v1:TsinghuaX+70230063X+sp/about" target="_blank" rel="noopener external nofollow noreferrer">学堂在线-《应用信息论基础》</a>。</p>
<p>指导读物：<a href="http://www.ituring.com.cn/book/download/00aab03a-451d-43a2-b4ba-ee0483f27529" target="_blank" rel="noopener external nofollow noreferrer">通信的数学理论</a>。（香农所著的信息论奠基性论文）</p>
<p>通俗读物：<a href="https://jackmk.ctfile.com/fs/14155983-203561084" target="_blank" rel="noopener external nofollow noreferrer">信息简史</a>。（英文版）</p>
<p>教材参考书如下，[2]和[3]可作为延伸阅读材料：</p>
<blockquote>
<p>[1] Thomas M. Cover与Joy A. Thomas著的无比经典的教材《Elements of Information Theory》（中文版书名为《信息论基础》，阮吉寿、张华等译）；<br>[2] Abbas El Gamal和Young-Han Kim合著的《Network Information Theory》（中文版书名为《网络信息论》，张林译）；<br>[3] Imre Csiszár和János Körner Csizar所著的学院派经典《Information Theory: Coding Theorems for Discrete Memoryless Systems》。</p>
</blockquote>
<h2 id="信息指纹"><a href="#信息指纹" class="headerlink" title="信息指纹"></a>信息指纹</h2><h3 id="爬虫应用"><a href="#爬虫应用" class="headerlink" title="爬虫应用"></a>爬虫应用</h3><p>爬取过的URL的直接存储，非常占用内存。</p>
<p>但通过一个散列函数，将长长的URL映射到一个128位（16字节）的随机数，将能有效地控制空间。</p>
<blockquote>
<p>关键算法：<a href="https://blog.csdn.net/dukai392/article/details/71155740" target="_blank" rel="noopener external nofollow noreferrer">伪随机数产生器算法</a>（Pseudo-Random Number Generator，<a href="https://blog.csdn.net/zmazon/article/details/17383521" target="_blank" rel="noopener external nofollow noreferrer">PRNG</a>）。</p>
<p>现在常用的PRNG算法是<a href="https://zh.wikipedia.org/zh-hans/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95" target="_blank" rel="noopener external nofollow noreferrer">梅森旋转算法</a>（Mersenne Twister）。</p>
</blockquote>
<p>这个随机数就称为URL的信息指纹。</p>
<h3 id="集合判等"><a href="#集合判等" class="headerlink" title="集合判等"></a>集合判等</h3><ul>
<li>暴力法：两两做比较，$O(N^2)$</li>
<li>排序法：先排序，再从头至尾比较，$O(NlogN)$</li>
<li>散列法：将第一个集合放到散列表中，然后拿第二个集合作对比，$O(N)$。但需要额外的$O(N)$空间。</li>
<li>指纹法：对集合$S$，定义指纹$FP(S)=FP(e_1)+FP(e_2)+…+FP(e_n)$。比较即可。就地算法。</li>
</ul>
<hr>
<p>如果集合只是相似。</p>
<p>可以按某些规则（比如，尾号是24的电子邮件地址）随机从集合中抽取几个元素，如果两个集合的抽查指纹相同，那么它们是相似的。</p>
<p>也可以使用<a href="https://blog.csdn.net/Androidlushangderen/article/details/47134393" target="_blank" rel="noopener external nofollow noreferrer">相似哈希</a>。</p>
<h4 id="反盗版（视频）"><a href="#反盗版（视频）" class="headerlink" title="反盗版（视频）"></a>反盗版（视频）</h4><p> 视频动辄上M、G的体量，几乎不可能采用普通的比较策略。</p>
<p>视频匹配的两个核心技术：</p>
<ul>
<li>关键帧提取<ul>
<li>尽管视频每秒可能有几十帧，但每一帧的差异不大。一般来说，每数秒才能提取出一个关键帧。</li>
</ul>
</li>
<li>特征提取<ul>
<li>利用信息指纹来表示关键帧，退化为集合判等问题</li>
</ul>
</li>
</ul>
<h4 id="指纹重复"><a href="#指纹重复" class="headerlink" title="指纹重复"></a>指纹重复</h4><p>信息指纹客观地存在着极小概率的重复可能性。</p>
<p>假设随机数范围是$0~N-1$，共$N$个。可以推出$k$个指纹不发生重复的概率：</p>
<script type="math/tex; mode=display">
P_k=\frac{(N-1)(N-2)…(N-k+1)}{N^{k-1}}</script><hr>
<p>（我的解法）</p>
<p>对上式，当N很大时，分子可以用<a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E7%89%B9%E6%9E%97%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener external nofollow noreferrer">斯特林公式</a>估计：$n!\approx \sqrt{2\pi n}(\frac{n}{e})^n$。</p>
<p>即：$(N-1)(N-2)…(N-k+1)=\cfrac{(N-1)!}{(N-k)!}\approx \cfrac{ \sqrt{2\pi (N-1)}(\frac{N-1}{e})^{N-1}}{ \sqrt{2\pi (N-k)}(\cfrac{N-k}{e})^{N-k}}$。</p>
<p>若我们有$k\ll N$（这一般是成立的，比如128位的指纹，$N=2^{128}$和$k\approx 10^{6}\approx 2^{20}$【百万级】），则可以进一步化简：（$c=e^{-(k-1)}$是一个关于$k$的小常数）</p>
<script type="math/tex; mode=display">
(N-1)(N-2)…(N-k+1)\approx \cfrac{ \sqrt{2\pi (N-1)}(\frac{N-1}{e})^{N-1}}{ \sqrt{2\pi (N-k)}(\cfrac{N-k}{e})^{N-k}}\approx  \cfrac{ (\cfrac{N-1}{e})^{N-1}}{ (\cfrac{N-k}{e})^{N-k}}\approx   c({N})^{k-1}</script><p>故我们得到原来的概率变为：</p>
<script type="math/tex; mode=display">
P_k=\frac{(N-1)(N-2)…(N-k+1)}{N^{k-1}}\approx \frac{c({N})^{k-1}}{N^{k-1}}=c=e^{-(k-1)}</script><p>即，当给定$N\gg 0$和$k\ll N$时，不冲突的概率$P_k$是与$k$强相关的指数衰减函数。（当然，数值上可能并不准确）</p>
<hr>
<p>在《数学之美》中采用的估计函数如下：</p>
<script type="math/tex; mode=display">
P_k=\frac{(N-1)(N-2)…(N-k+1)}{N^{k-1}}\approx e^{-\frac{1}{n}}e^{-\frac{2}{n}}…e^{-\frac{k}{n}}=exp(-\frac {k(k+1)}{2N})</script><p>同时，若要$k$个指纹重复的数学期望超过1，则$P_k<0.5$，此时可以解得$k>\frac {-1+\sqrt{1+8Nlog2}}{2}\approx2^{64}\approx 1.8\times 10^{19}$。可能性几乎为0。</p>
<h3 id="相似哈希"><a href="#相似哈希" class="headerlink" title="相似哈希"></a>相似哈希</h3><p>相似哈希是一种特殊的信息指纹。</p>
<p>假设一个网页有若干词$T：t_1,t_2,…t_k$，对应的权重（比如TF-IDF值）为$w_1,w_2,…_k$。计算出$T$向量的信息指纹$FP(T)$。（假设指纹为8位）</p>
<ul>
<li><p><strong>扩展</strong>【将8位指纹处理为8个实数$r_i$】</p>
<ul>
<li>```c++<br>for(int i=1;i&lt;=k;++i)<pre><code>r[i] = 0;  //初始化为0
</code></pre>for(int i=1;i&lt;=k;++i)  //这里在变量类型上是扩展的，但在信息上却是压缩的<pre><code>for(int j=1;j&lt;=8;++j)
    if(t[i][j]) r[j] += w[i];  //t[i][j]是词t_i的第j位
    else r[j] -= w[i];
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    经过上面的处理，我们将获得一个实数向量$R&#x3D;\&#123;r_i\&#125;$。</span><br><span class="line"></span><br><span class="line">- **收缩**【将8个实数$r_i$重新布尔化为8位指纹】</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;C++</span><br><span class="line">    bool P[9];</span><br><span class="line">    for(int i&#x3D;1;i&lt;&#x3D;8;++i)  &#x2F;&#x2F;进一步压缩信息</span><br><span class="line">        P[i]&#x3D;(bool)(r[i]);  &#x2F;&#x2F;P向量是文章的信息指纹</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>我们获得了可以进行相似性比较的信息指纹$P$（相似Hash）。<br>若两个网站雷同，则相似哈希接近。</p>
</li>
</ul>
<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>需求：<strong>判断一个元素是否在一个集合内</strong>。（联系之前的信息指纹部分——集合判等）</p>
<p>一般的散列表需要较多的容量才能存下集合中所有的元素。</p>
<p>布隆过滤器（Bloom Filter）仅需要散列表1/8到1/4的大小就能解决同样的问题。<br>它实际上是一个很长的二进制向量和一系列随机映射函数。</p>
<blockquote>
<p>例：假定存储1亿个电子邮件地址，先建立一个16亿bit的向量并清零。</p>
<ul>
<li>对每一个邮件地址$X$，用8个<strong>随机</strong>数产生器$F_i$先生成8个信息指纹$f_i$</li>
<li>然后将$f_i$用<strong>随机</strong>数产生器$G$将$f_i$映射到1~16亿的8个自然数$g_i$</li>
<li>将$g_i$对应的bit位设置为1</li>
<li>对1亿个电子邮件地址做相同处理</li>
</ul>
<p>这样，一个针对这些电子邮件地址的布隆过滤器就建好了。</p>
<p>检测可疑电子邮件：</p>
<ul>
<li>用$F_i$转换该地址，生成信息指纹$s_i$</li>
<li>将$s_i$用$G$映射到8个bit位，若对应为1，则命中</li>
</ul>
</blockquote>
<p>布隆过滤器能保证所有的命中，但可能会<strong>过度命中</strong>（一些不在集合中的元素也有极小的可能被命中）。</p>
<blockquote>
<p>补救：维护一个小的白名单。</p>
</blockquote>
<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><p>密码学的道：</p>
<ul>
<li>无论获取多少密文，也无法消除己方情报系统的不确定性。<br>为了这个目的，不仅要<strong>密文之间相互无关</strong>，同时密文还是<strong>看似完全随机的序列</strong>。</li>
</ul>
<blockquote>
<p>注：根据信息守恒，当密文的形式越混沌，其可以携带的信息量就越少，则为了保证信息不失真，必然会在密钥（解密方法）上集聚极高的信息量。这值得权衡。</p>
</blockquote>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>搜索之道</strong>：下载、索引和排序三大步骤。</p>
<hr>
<p>介绍<a href="https://zh.wikipedia.org/zh-hans/%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0" target="_blank" rel="noopener external nofollow noreferrer">布尔代数</a>。</p>
<p><strong>真值表示法</strong>：用一个2进制真值串表示关键字。（由于大量<code>0</code>，属于稀疏，可改用字典【关键字-真值位置】结构）</p>
<p>假设互联网上约$10^{10}$个有意义页面，词汇表大小约$3\times 10^5$，压缩比约$100:1$。则最终索引的大小约$3\times10^{13}$。</p>
<blockquote>
<p>为了排名方便，还存有词频、词的位置等。<br>由于存储量巨大，故一般要采用<strong>分布式系统</strong>。</p>
</blockquote>
<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><p>根据图论的两种典型遍历方法：<a href="https://zh.wikipedia.org/zh/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener external nofollow noreferrer">BFS</a>，<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener external nofollow noreferrer">DFS</a>。</p>
<p>互联网通过<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener external nofollow noreferrer">超链接</a>（有向边）的形式连成虚拟之海。</p>
<blockquote>
<p>注：可以查看我的文章了解更具体的技术：<a href="http://skvel.tk/Pyspider%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener external nofollow noreferrer">Pyspider操作指南</a>。</p>
</blockquote>
<h3 id="网络爬虫的构建"><a href="#网络爬虫的构建" class="headerlink" title="网络爬虫的构建"></a>网络爬虫的构建</h3><ol>
<li><strong>BFS或DFS</strong>？<ol>
<li>小容量爬虫，爬取首页即可，用BFS</li>
<li>考虑<a href="https://baike.baidu.com/item/%E6%8F%A1%E6%89%8B/5800282" target="_blank" rel="noopener external nofollow noreferrer">握手</a>（和网站建立连接）成本，在特定的网站适当采用DFS</li>
</ol>
</li>
<li><strong>页面分析和URL（链接）提取</strong><ol>
<li>通常采用队列，直接提取HTML中的URL标签</li>
<li>若网站采用了不规范的脚本（如JaveScript），需要通过高级模拟手段，利用浏览器内核解析网页</li>
</ol>
</li>
<li><strong>URL记录表</strong><ol>
<li>用一个散列表记录已经遍历过的网页（分摊复杂度$O(1)$）</li>
<li>分布式系统散列表的维护和访问是难题</li>
</ol>
</li>
</ol>
<h2 id="PageRank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h2><h3 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h3><p>对于特定查询，搜索结果的排名取决于两组信息：质量（Quality）信息和相关性（Relevance）信息。</p>
<p>早期搜索引擎的挫折：（按解决时间排序）</p>
<ul>
<li>收录网页少，只能对常见词索引</li>
<li>查询的结果相关性差</li>
</ul>
<p><strong>信任法则</strong>：指向一个网页的其它网页数量（节点的入度）越高，排名越高。（民主表决）</p>
<blockquote>
<p>为了更加合理地刻画高信任高权重的相关性，采用了权重。<br>即，一些被链接更多的网页，链接其它网页将具有更高的影响力。（可信度）</p>
</blockquote>
<p><strong>迭代原理</strong>：给定所有网页一个相同的初始排名，利用信任法则进行迭代计算，最终排名将收敛到真实值。</p>
<blockquote>
<p>由于互联网的链接是稀疏的，因此可以采用稀疏矩阵计算方法简化算法复杂度。<br>由于PageeRank更新一次很慢，因此诞生了并行计算方法（MapReduce）。<br>如果进一步考虑用户的点击数据，则可以进一步优化排名。</p>
<p>PageRank是一种<strong>整体化思维</strong>。</p>
</blockquote>
<p>对于PageRank，就是典型的联想图，如果一个幻想所链接的其它幻想越多，说明它更常见、更重要。但PageRank仍然有其局限所在，幻想的唯象程度太高了。</p>
<p>而且，由于是民主表决，PageRank将具有群体惯性，即，有偏向性。</p>
<p>搜索的目的是了解更广阔的世界，如果一个搜索引擎是有偏的，想界的扩张自然也就受限了。此时，用户更容易陷入神经制剂的纷扰当中。</p>
<p>另一方面，由于人类获取信息的能力有限，<strong>搜索引擎可能要在无偏和高效之前作出权衡</strong>。（联想公平和效率）</p>
<p><a href="https://blog.csdn.net/hguisu/article/details/7996185" target="_blank" rel="noopener external nofollow noreferrer">PageRank的计算方法</a>。</p>
<p>简单示意如下：</p>
<script type="math/tex; mode=display">
A=\left[
\begin{matrix}
 a_{11} &\cdots     &a_{1j} &\cdots &a_{1N}      \\
 \vdots &\cdots& \vdots & \ddots & \vdots \\
 a_{i1}      &\cdots&a_{ij}      & \cdots &a_{iN}      \\
 \vdots &\cdots& \vdots & \ddots & \vdots \\
 a_{M1}      &\cdots&a_{Mj}      & \cdots &a_{MN}      \\
\end{matrix}
\right]
，B=\left[
\begin{matrix}
 b_1\\
 b_2\\
 \vdots\\
 \vdots\\
 b_N\\
\end{matrix}
\right]\\</script><p>其中，$A$为带权邻接矩阵（刻画网页链接），$B$为排名向量。</p>
<p>设初始排名为$B_0=[\frac{1}{N},\frac{1}{N},…,\frac{1}{N}]^T$，迭代方程如下：</p>
<script type="math/tex; mode=display">
B_{i+1}=A\cdot B_i</script><p>一般迭代10次左右就基本收敛。</p>
<h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>上述问题已经抽象为了一个矩阵相乘的问题。</p>
<p>若要充分利用分布式系统的优势，可以采用<a href="https://blog.csdn.net/u011983557/article/details/51213640" target="_blank" rel="noopener external nofollow noreferrer">矩阵的分治法</a>。</p>
<p>另一种非严格意义上的分治是求结果矩阵的某一个元素。可以分出原两个矩阵中的对应行、列，然后再细分，将计算任务平均分配（此时分配是容易的），就能将计算时间缩短。这就是<a href="https://zh.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener external nofollow noreferrer">MapReduce</a>的原理。（Map，分解任务；Reduce，整合结果）</p>
<h3 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h3><p>为了解决之前提到的PageRank可能具有的唯象性，引入了相关性的度量和排序。</p>
<p>影响搜索引擎质量的因素：</p>
<ul>
<li>用户的点击数据</li>
<li>完备的索引</li>
<li>网页质量的度量（PageRank）</li>
<li>用户偏好</li>
<li><strong>网页与查询的相关性</strong></li>
</ul>
<h4 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h4><p><strong>TF</strong>：Term Frequency，词频。</p>
<blockquote>
<p>一般采用相对词频：$\cfrac{关键词次数}{网页总字数}$。查询的所有关键词的词频相加，得到网页的相关性。<br>为了避免某些无意义的词的干扰（如“的”、“是”等），引入了<strong>停止词</strong>（这样的词不计入相关性统计）。<br>为了让一些更专业的词汇有更大的权重，引入了<strong>主题词</strong>（这样的词具有权重系数）。</p>
</blockquote>
<p>由TF得到了相关性的计算公式：</p>
<script type="math/tex; mode=display">
相关性=TF_1+TF_2+TF_3+…+TF_N</script><p>为了进一步确认权重，引入了IDF。</p>
<p><strong>IDF</strong>：Inverse Document Frequency，逆文本频率指数。</p>
<blockquote>
<p>定义式：$IDF=log\cfrac{D}{D_w}$。（关键词$w$在$D_w$个网页中出现过，$D$是总网页数）</p>
<p>假如中文网页数是$D=10亿$，停止词“的”在所有网页中出现，则它的$IDF=log\frac{10亿}{10亿}=0$。<br>假如专用词“原子能”在200万个网页中出现，那么它的$IDF=log\frac{10亿}{100万}=8.96$。（以2为底）<br>假如通用词“应用”在5亿个网页中出现，那么它的$IDF=log\frac{10亿}{5亿}=1$。</p>
</blockquote>
<p>于是，得到引入权重后的相关性：</p>
<script type="math/tex; mode=display">
相关性=TF_1\cdot IDF_1+TF_2\cdot IDF_2+TF_3\cdot IDF_3+…+TF_N\cdot IDF_N</script><hr>
<p>从本质上讲，$IDF$是一个特定条件下关键词的概率分布的交叉熵。</p>
<h3 id="权威性"><a href="#权威性" class="headerlink" title="权威性"></a>权威性</h3><p><strong>提及</strong>（Mention）：在文章段落中，讨论某个主题，<u>提及</u>了某个名称。</p>
<blockquote>
<p>当提及越多，则认为某个名称越权威。</p>
<p>提及隐藏在自然句中，需要自然语言处理方法。<br>即使有了好的算法，提及的计算仍然巨大。</p>
</blockquote>
<p>另一个难点是搜索结果的权威性的排序与搜索的主题相关。</p>
<p>假设有$M$个网页，$N$个关键词，则需要计算和存储$O(MN)$的结果。</p>
<blockquote>
<p>非常依赖于云计算和大数据技术。</p>
</blockquote>
<hr>
<p>计算权威度的步骤：</p>
<ul>
<li>对网页标题、正文进行句法分析，获取Mention信息</li>
<li>利用互信息，找到主题短语和信息源的相关性</li>
<li>对主题短语进行聚类（可用矩阵奇异值分解）</li>
<li>对网页进行聚类，权威性的度量只能建立在子域（Subdomain）或子目录（Subdirectory）等<strong>粗略</strong>的级上。</li>
</ul>
<h4 id="新闻分类"><a href="#新闻分类" class="headerlink" title="新闻分类"></a>新闻分类</h4><p>更广义地讲，文本分类的任务都是基于同一个原理。</p>
<p>假设词汇表有N个词。</p>
<p>我们统计新闻中出现的词，计算它们的TF-IDF值（没有出现过的为0），就可以形成一个关于该新闻的TF-IDF向量（N维）。</p>
<p>利用两个新闻的TF-IDF向量的夹角，可以来反映新闻之间的相似度。</p>
<blockquote>
<p>这里利用余弦定理即可。</p>
</blockquote>
<p>通过这个的方法，我们可以设定一个相似度阀值，将小于阀值的新闻归到一类。在分好的小类里，又可以继续求类与类之间的相似度，从而获得更大的分类……</p>
<hr>
<p>大数据时余弦计算的额外处理：</p>
<ul>
<li>充分利用TF-IDF向量中的非零元素</li>
<li>删除虚词/停止词（消除了噪声）</li>
<li>考虑词的位置加权（比如，在标题、首尾进行额外加权）</li>
</ul>
<h4 id="奇异值分解"><a href="#奇异值分解" class="headerlink" title="奇异值分解"></a>奇异值分解</h4><p>上文中的余弦算法只适合于处理中大规模的文本（百万级），对于超大规模文本（亿级），则需要相对快速、粗糙的算法。</p>
<p>之前的新闻分类本质上是一个聚类问题，但是需要每个向量两两做计算。我们希望有一个办法——<strong>一次性地计算出所有的相关性</strong>——矩阵<strong><a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3" target="_blank" rel="noopener external nofollow noreferrer">奇异值分解</a></strong>（Singular Value Decomposition，<strong>SVD</strong>）。</p>
<p>我们需要一个超大的矩阵$A_{M\times N}$来描述成千上万的文章和上百万的词的关联性。</p>
<p>奇异值分解：（$r≪M,r≪N$）</p>
<script type="math/tex; mode=display">
A_{M\times N}=X_{M\times r}\cdot B_{r\times r}\cdot Y_{r\times N}</script><p>$X_{M\times r}$：每一行（M）代表一个词，每一列（r）表示一个语义相近的词类。（元素值代表相关度）</p>
<p>$Y_{r\times N}$：每一列（N）代表一篇文本， 每一行（r）对应一个主题。</p>
<p>$B_{r\times r}$：表示词类和文章类（主题）的相关性。</p>
<p>只要对$A_{M\times N}$做一次奇异值分解，就可以同时完成近义词分类和文章分类，还能得到相应的相关性。</p>
<h2 id="地图定位"><a href="#地图定位" class="headerlink" title="地图定位"></a>地图定位</h2><p>智能手机的定位、导航：</p>
<ul>
<li>利用卫星定位</li>
<li>地址的识别</li>
<li>根据起点和终点，规划最短或最快路线</li>
</ul>
<h3 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h3><p><a href="https://zh.wikipedia.org/zh-hans/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA" target="_blank" rel="noopener external nofollow noreferrer">有限状态机</a>用于地址的识别。</p>
<p>简单来说，有限状态机能够在有向无环状态图中不可逆地转换，当转换失败时则地址无效。</p>
<p>为了让识别具有一定的容错性（输错了一点仍然能够查询），提出了基于概率的有限状态机。（与马尔可夫链基本等效）</p>
<p>其它应用：<a href="https://www.google.co.uk/landing/now/" target="_blank" rel="noopener external nofollow noreferrer">Google Now</a>。</p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>对于导航系统，一般会采用动态规划的办法。</p>
<p>从A点到B点的路线，一定会经过一个里程数不断增长的过程。也就是说，这是一个<strong>传播问题</strong>。因此，全局的最优，一定也是局部里程圈的最优。至此，形成了状态转移。</p>
<h3 id="有限状态传感器"><a href="#有限状态传感器" class="headerlink" title="有限状态传感器"></a>有限状态传感器</h3><p><strong>加权有限状态传感器</strong>：Weighted Finite State Transducer，<a href="http://www.gavo.t.u-tokyo.ac.jp/~novakj/wfst-algorithms.pdf" target="_blank" rel="noopener external nofollow noreferrer">WFST</a>。有限状态机中的每个状态由输入和输出符号定义。</p>
<blockquote>
<p>任何一个词的前后二元组，都可以对应到WFST的一个状态。</p>
<p>若在符号序列中某个时刻前后出现了形如$AB$的有序对。（相当于A是输入，B是输出）<br>则根据在有限状态机中对应的$…\stackrel{A}{\longrightarrow}  STATE_i\stackrel{B}{\longrightarrow} …$结构，进入对应$STATE_i$状态。</p>
<p>可用于<a href="https://blog.csdn.net/l_b_yuan/article/details/50876340" target="_blank" rel="noopener external nofollow noreferrer">语音识别</a>。</p>
</blockquote>
<h2 id="SEO与作弊"><a href="#SEO与作弊" class="headerlink" title="SEO与作弊"></a>SEO与作弊</h2><p><a href="https://searchengineland.com/guide/what-is-seo" target="_blank" rel="noopener external nofollow noreferrer">SEO</a>就是搜索引擎优化。</p>
<blockquote>
<p>SEO一般要适当，遵循搜索引擎的规则。</p>
<p>一个<u>无所不用其极</u>的SEO优化就称为在搜索引擎中的作弊。</p>
</blockquote>
<hr>
<p>早期作弊手法：</p>
<ul>
<li>重复关键词<ul>
<li>利用TF的相对词频</li>
</ul>
</li>
<li>买卖链接<ul>
<li>识别链接的流通</li>
<li>利用出链（Out Links）向量，通过余弦算法聚类，识别卖链接的网站</li>
</ul>
</li>
</ul>
<p>利用通信模型解决搜索反作弊：</p>
<ul>
<li>从信息源出发，加强通信（编码）自身的<strong>抗干扰</strong>能力<ul>
<li>利用相反的信号抵消噪音</li>
<li>搜集一段时间的作弊信息后，还原其原有的排名</li>
</ul>
</li>
<li>从传输来看，<strong>过滤掉噪音</strong>，还原信息</li>
</ul>
<p>利用图论：</p>
<ul>
<li>互相链接的节点称为Clique，发现Clique并直接应用到反作弊中</li>
</ul>
<p>利用浏览内核解析：</p>
<ul>
<li>对于使用JavaScrpt跳转页面，其落地页（Landing Page）质量非常高，但进入之后会立即通过JS程序被跳转到商业网站</li>
</ul>
<hr>
<p>反作弊是自动、无偏的。根本是<strong>去噪声</strong>。<br>一个网站的内容质量，决定其排名。<br>越流行的搜索引擎，SEO越风行。</p>
<h2 id="搜索广告"><a href="#搜索广告" class="headerlink" title="搜索广告"></a>搜索广告</h2><p>搜索广告的三个阶段：</p>
<ul>
<li>竞价排名（Overture、百度）</li>
<li>利用经验预估点击率（Click Through Rate，CTR），预测用户的点击概率</li>
<li>逻辑回归模型</li>
</ul>
<p>逻辑回归模型：将一个事件出现的概率逐渐适应到一条逻辑曲线（Logistic Curve）上。</p>
<blockquote>
<p>一个简单的逻辑回归函数：$f(z)=\cfrac{e^Z}{e^Z+1}=\cfrac{1}{1+e^{-Z}}$。（指数模型）</p>
</blockquote>
<img data-src="/Beauty-of-Mathmatics/Logistic-curve.svg" class="" title="逻辑回归">
<blockquote>
<p>逻辑回归的定义域在$(-\infty ,+\infty)$，值域在$(0,1)$。</p>
<p>对于$(-\infty ,+\infty)$，对于任何信号都可进行回归。<br>而对于$[0,1]$，可以看作概率函数，于是逻辑回归与概率分布联系起来。</p>
</blockquote>
<p>对于预估点击率而言，假设$k$个影响变量$x_1,x_2,…,x_k$。</p>
<p>则可线性组合得到$z=\beta_0+\beta_1x_1+\beta_2x_2+…+\beta_kx_k$。</p>
<p>${\beta_i}$向量就是该模型的参数向量。可以通过神经网络训练得到。比如最大熵模型的$GIS$或者$IIS$算法。</p>
<h1 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h1><ul>
<li>一个正确的模型应当在形式上是简单的</li>
<li>一个正确的模型最开始可能并不如复杂的错误模型准确</li>
<li>大量的准确数据对研发很重要</li>
<li>正确的模型可能受到噪声干扰，此时应坚定信心，积极找寻噪声源</li>
</ul>
<h2 id="最大熵模型"><a href="#最大熵模型" class="headerlink" title="最大熵模型"></a>最大熵模型</h2><p><a href="https://wanghuaishi.wordpress.com/2017/02/21/%E5%9B%BE%E8%A7%A3%E6%9C%80%E5%A4%A7%E7%86%B5%E5%8E%9F%E7%90%86%EF%BC%88the-maximum-entropy-principle%EF%BC%89/" target="_blank" rel="noopener external nofollow noreferrer"><strong>最大熵原理</strong></a>（The Maximum Entropy Principle）：在已知信息的基础上，不做任何主观假设，使未知事件的预测信息熵最大。此时的概率分布称为最大熵模型。</p>
<blockquote>
<p>这里的熵是信息熵。</p>
<p>保留全部的不确定性，将风险降到最小。</p>
</blockquote>
<p>希萨证明：对任何一组不自相矛盾的信息，最大熵模型存在且唯一。（其形式是指数函数）</p>
<blockquote>
<p>例如：根据$w_1,w_2$预测$w_3$。</p>
<p>$P(w_3|w_1,w_2,s)=\cfrac{1}{Z(w_1,w_2,s)}e^{\lambda_1(w_1,w_2,w_3)+\lambda_2(s,w_3)}$.<br>（$Z$是<strong>归一</strong>化因子，保证$P$概率归一，与参数$\lambda_i$一起需要被训练出来）</p>
</blockquote>
<p>但是，<strong>最大熵模型的计算量相当大</strong>。</p>
<blockquote>
<p>比如，若搜索的排序需要考虑20种特征。</p>
<script type="math/tex; mode=display">
{x_1,x_2,…,x_{20}}</script><p>待排序的网页是$d$。</p>
<p>则有最大熵模型：</p>
<script type="math/tex; mode=display">
P(d|{x_1,x_2,…,x_{20}})=\cfrac{1}{Z({x_1,x_2,…,x_{20}})}e^{\lambda_1(x_1,d)+\lambda_1(x_2,d)+…+\lambda_1(x_{20},d)}</script><p>其中，归一化因子为</p>
<script type="math/tex; mode=display">
Z({x_1,x_2,…,x_{20}})=\sum^de^{\lambda_1(x_1,d)+\lambda_1(x_2,d)+…+\lambda_1(x_{20},d)}</script><p>（参数$\lambda_i$通过模型的训练得到）</p>
</blockquote>
<p>最原始的最大熵模型训练方法是<strong>通用迭代算法</strong>（Generalized Lterative Scaling，$GIS$）。</p>
<ul>
<li>假定第零次迭代的初始模型为等概率的均匀分布（类似PageRank的设定）</li>
<li>用第N次迭代的模型来估算每种信息特征在训练数据中的分布，比较并调节相应模型参数。</li>
<li>重复，直至收敛。</li>
</ul>
<blockquote>
<p>GIS算法是一个典型的期望值最大化算法（Expectation Maximization，EM）。</p>
<p>GIS收敛缓慢，而且不稳定，因此很少有人真的使用。</p>
</blockquote>
<p>后来出现了<a href="http://www.cs.cmu.edu/~aberger/pdf/scaling.pdf" target="_blank" rel="noopener external nofollow noreferrer">改进迭代算法</a>$IIS$（Improved Iterative Scaling），训练时间缩短了1至2个量级。</p>
<p>吴军提出了更快的<a href="https://www.cs.jhu.edu/~junwu/publications.html" target="_blank" rel="noopener external nofollow noreferrer">最大熵模型快速算法</a>，训练时间再次缩短了1至2个量级。</p>
<hr>
<p><a href="http://money.jrj.com.cn/2017/07/07101822712242.shtml" target="_blank" rel="noopener external nofollow noreferrer">文艺复兴公司</a>（Renaissance Technologies）：利用最大熵模型和其它一些先进的数学工具，成为了世界上最成功的<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E5%86%B2%E5%9F%BA%E9%87%91" target="_blank" rel="noopener external nofollow noreferrer">对冲基金</a>公司。</p>
<blockquote>
<p>注意：更多相关知识可了解<a href="https://wiki.mbalib.com/wiki/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93" target="_blank" rel="noopener external nofollow noreferrer">量化交易</a>。</p>
</blockquote>
<h2 id="条件随机场"><a href="#条件随机场" class="headerlink" title="条件随机场"></a>条件随机场</h2><p><strong>句法分析</strong>（Sentence Parsing）：</p>
<ul>
<li>一是指根据文法对一个句子进行分析，建立其语法树，即<strong>文法分析</strong>（Synatactic Parsing）；</li>
<li>二是指对一个句子中各成分的语义进行分析，得到对这个句子语义的一种描述（语义树），即<strong>语义分析</strong>（Semantic Parsing）。</li>
</ul>
<p>这里主要讨论文法分析。</p>
<hr>
<p>Eugene Charniack提出原则：选择文法规则，让被分析的句子的语法树概率达到最大。</p>
<p>拉纳帕提则进行了进一步的优化，真正将数学模型和文法分析结合起来。</p>
<ul>
<li>对任意一个句子进行分词<ul>
<li>美联储|主席|本·伯南克|昨天|告诉|媒体|7 000 亿|美元|的|救助|资金|将|借给|上百|家|银行|、|保险公司|和|汽车公司</li>
</ul>
</li>
<li>扫描（从左往右），整合出高一阶的词组<ul>
<li>（美联储主席）|本·伯南克|昨天|告诉|媒体|（7 000 亿美元）|的|（救助资金）|（将借给）|（上百家）|（银行、保险公司和汽车公司）</li>
</ul>
</li>
<li>重复扫描，整合……<ul>
<li>【美联储主席本·伯南克】|昨天|告诉|媒体|【7 000 亿美元的救助资金】|（将借给）|【上百家银行、保险公司和汽车公司】</li>
</ul>
</li>
<li>直到仅剩一个括号为止</li>
</ul>
<p>容易看出，每次扫描，句子成分数按一定比例缩减，因而这个方法的复杂度是$O(n)$线性的。</p>
<hr>
<p>上述方法对于模糊的语言处理能力较弱，为了处理更加随意的文法分析，逐渐形成了<strong>浅层分析</strong>（Shallow Parsing），找到句子中主要的词组已经它们对应的关系即可。</p>
<p><strong>条件随机场</strong>使得浅层分析的正确率大大提高。（栅栏图）</p>
<p><a href="https://www.jianshu.com/p/55755fc649b1" target="_blank" rel="noopener external nofollow noreferrer">条件随机场</a>是隐马尔可夫模型的多元推广版本，此时观测序列的Oi将与前后的状态都相关，即与$S<em>{i-1},S_i,S</em>{i+1}$相关。（S序列仍然是马尔可夫链，但独立输出假设被推广了）</p>
<blockquote>
<p>条件随机场是无向图。仍然遵循马尔可夫假设。</p>
</blockquote>
<p>整个条件随机场的量化模型就是O序列和S序列的联合概率分布$P(O,S)$：</p>
<script type="math/tex; mode=display">
P(O,S)=P(O_1,O_2,…,O_n,S_1,S_2,…,S_m)</script><p>由于变量过多，不可能有足够的数据来估计这个高维分布。因此，一般要降维处理，通过一些边缘分布（如$P(O_1)$，$P(S_2)$，$P(O_1,S_3)$等）来找出一个符合这些条件的概率分布（通常不止一个满足）。</p>
<p>根据最大熵原理，希望找到一个满足所有边缘分布的熵最大的模型（指数模型）。</p>
<p>每一个边缘分布对应指数模型中的一个特征$f_i$（Feature）。（$f_i$的参数可以使用最大熵算法训练）</p>
<blockquote>
<p>比如：边缘分布$f_i(O_1,O_2,…,O_n,S_1,S_2,…,S_m)=f_i(x_1)$。</p>
</blockquote>
<p>将特征运用到模型之中，有</p>
<script type="math/tex; mode=display">
P(O_1,O_2,…,O_n,S_1,S_2,…,S_m)=\cfrac{e^{f_1+f_2+…+f_k}}{Z}</script><p>这时就可以进行浅层文法分析了。（例：Google的文法分析器<a href="http://johng.cn/gf-gparser/" target="_blank" rel="noopener external nofollow noreferrer">Gparser</a>）</p>
<h2 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h2><p>马尔可夫链是状态序列，每个状态值取决于前面有限个状态。</p>
<p>在现实生活中，关系可能是复杂、错综的，形成一个有向图网络。</p>
<p>若在这个网络之中，每一个状态只跟与其直接相连的状态有关，则称为一个<strong>贝叶斯网络</strong>。</p>
<blockquote>
<p>贝叶斯网络是马尔可夫链的推广。</p>
</blockquote>
<p>使用贝叶斯网络必须确定网络的拓扑结构，和各种状态之间的转移概率。</p>
<blockquote>
<p>得到拓扑结构称为结构训练，得到转移概率称为参数训练。</p>
</blockquote>
<p>从理论上说，贝叶斯网络是一个NP完全问题（现有计算机不可计算）。</p>
<p>但对于某些应用，经过适当简化（如，贪心+蒙特卡洛，利用互信息简化网络等），训练也能被计算机完成。</p>
<blockquote>
<p>如Google的<a href="https://www.zhihu.com/question/22741652" target="_blank" rel="noopener external nofollow noreferrer">Rephil</a>，通过贝叶斯网络完成对词、概念（词类）、文章的联系，将上千万关键词合成了上百万概念的聚类。</p>
</blockquote>
<h3 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h3><p>下图来自<a href="https://towardsdatascience.com/what-the-hell-is-perceptron-626217814f53" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>，展示了一个典型的四层人工神经网络（多层感知机）的运作方式：</p>
<p><img data-src="https://cdn-images-1.medium.com/max/1600/1*eEKb2RxREV6-MtLz2DNWFQ.gif" alt="多层感知机"></p>
<p>可以认为<a href="https://en.wikipedia.org/wiki/Artificial_neural_network" target="_blank" rel="noopener external nofollow noreferrer">神经网络</a>是一种特殊的有向图（90度左旋后的篱笆图）。</p>
<ul>
<li>所有节点分层，每一层通过有向弧指向上一层节点，但同一层无弧连接，不跨层连接</li>
<li>每条弧有一个权重</li>
<li>完了</li>
</ul>
<blockquote>
<p><strong><a href="https://blog.csdn.net/dcrmg/article/details/73743742" target="_blank" rel="noopener external nofollow noreferrer">神经元函数</a></strong>：为线性模型增加一次非线性变换，从而增强神经网络的分类能力。</p>
</blockquote>
<h4 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h4><p><strong><a href="https://zh.wikipedia.org/wiki/%E6%84%9F%E7%9F%A5%E5%99%A8" target="_blank" rel="noopener external nofollow noreferrer">感知机</a></strong>：一个输出层，一个输入层。一个计算夹层。最简单的神经网络。</p>
<p><img data-src="https://cdn-images-1.medium.com/max/800/1*n6sJ4yZQzwKL9wnF5wnVNg.png" alt="感知机"></p>
<blockquote>
<p>详细内容直接参考<a href="https://towardsdatascience.com/what-the-hell-is-perceptron-626217814f53" target="_blank" rel="noopener external nofollow noreferrer">Here</a>吧。</p>
</blockquote>
<p>Minsky<a href="https://en.wikipedia.org/wiki/Perceptrons_(book" target="_blank" rel="noopener external nofollow noreferrer">指出</a>)：感知机无法解决异或问题。（<a href="https://skymind.ai/wiki/multilayer-perceptron" target="_blank" rel="noopener external nofollow noreferrer">More</a>）</p>
<h4 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h4><p>实际上神经网络的计算过程就是矩阵运算。相当于：</p>
<script type="math/tex; mode=display">
Vector_{output}=A_n\times A_{n-1}\times …\times A_1\times Vector_{inputr}</script><p>为了基于线性分类实现复杂的非线性分类，多层的神经网络采用复杂函数拟合，利用隐藏层完成非线性空间到线性的变换。</p>
<p>一般来说，层数越多，神经网络的效果越好。（如<a href="https://www.cnblogs.com/subconscious/p/5058741.html#sixth" target="_blank" rel="noopener external nofollow noreferrer">下图</a>）</p>
<img data-src="/Beauty-of-Mathmatics/lMn0aAi.jpg" class="" title="多层神经网络">
<hr>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2017/07/neural-network.html" target="_blank" rel="noopener external nofollow noreferrer">神经网络入门</a></p>
<p><a href="https://www.cnblogs.com/subconscious/p/5058741.html" target="_blank" rel="noopener external nofollow noreferrer">神经网络浅讲：从神经元到深度学习</a></p>
</blockquote>
<h2 id="期望最大化"><a href="#期望最大化" class="headerlink" title="期望最大化"></a>期望最大化</h2><blockquote>
<p>期望最大化算法（Expectation Maximization Algorithm，EM算法）是上帝的算法。</p>
</blockquote>
<p>前面已经介绍过两种文本分类算法：</p>
<ul>
<li>利用事先设定好的类别对新的文本进行分类<ul>
<li>需要事先设定好类别和文本中心（Centroids）</li>
</ul>
</li>
<li>自底向上地将文本两两比较进行聚类<ul>
<li>计算时间较长</li>
</ul>
</li>
</ul>
<p>基于EM算法，提出了一种新的迭代算法（无须事先设定，无须聚类）。</p>
<ul>
<li><strong>随机挑选类别的中心，然后反复优化直到收敛</strong><ul>
<li>要利用到文本TF-IDF向量和余弦算法</li>
</ul>
</li>
</ul>
<hr>
<p>记同一类中各个点到中心的平均距离为$d$，不同类中心之间的距离为$D$。</p>
<p><strong>我们希望每次迭代，$d$变小，$D$变大</strong>。</p>
<p>假设第1类到第K类中分别有$n_1,n_2,…,n_k$个点。每一类到中心的平均距离为$d_1,d_2,…,d_k$。</p>
<p>则有总平均距离</p>
<script type="math/tex; mode=display">
d=(n_1\times d_1+n_2\times d_2+…+n_k\times d_k)/k</script><p>同理</p>
<script type="math/tex; mode=display">
D=\sum_{i,j}\cfrac{D_{ij}}{k(k-1)}（D_{ij}为i类和j类的距离）</script><script type="math/tex; mode=display">
若考虑点的数量，则有D=\sum_{i,j}\cfrac{D_{ij}n_in_j}{n(n-1)}</script><p>假定有一个点$x$，它在前一次迭代中属于第$i$类，下一次迭代后被被安排到第$j$类。</p>
<p>不难<a href="https://blog.csdn.net/zouxy09/article/details/8537620" target="_blank" rel="noopener external nofollow noreferrer">证明</a>，</p>
<script type="math/tex; mode=display">
d(i+1)<d(i)且D(i+1)>D(i)</script><hr>
<p>Baum-Welch算法（隐马尔可夫链），GIS算法（最大熵模型）都是典型的EM算法。</p>
<p>EM算法的分布描述：</p>
<ul>
<li>E过程（Expectation）：根据已有模型，计算观测数据输入到模型的结果<ul>
<li>Baum-Welch：计算每个状态转移的次数和输出的次数</li>
<li>GIS：计算每一个特征的数学期望值</li>
</ul>
</li>
<li>M过程（Maximization）：重新计算模型参数，以最大化期望<ul>
<li>Baum-Welch：根据这些次数重新估计隐含马尔可夫模型的参数</li>
<li>GIS：根据数学期望值和实际观测值的比，调整最大熵模型参数</li>
</ul>
</li>
</ul>
<p>EM算法优化的目标函数必须是一个凸函数，才能确保得到全局最优解。</p>
<hr>
<p>就到这里吧。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>幻想学</tag>
      </tags>
  </entry>
  <entry>
    <title>2019机器智能前沿论坛</title>
    <url>/Byte-Tech-AI-Symposium/</url>
    <content><![CDATA[<img data-src="/Byte-Tech-AI-Symposium/1547898072596.png" class="" width="1547898072596">
<p>2019 Byte Tech AI Symposium机器智能前沿论坛记录。<br>本文多图，约200M，谨慎阅读。<br><a id="more"></a>如有需要，建议另存为HTML或者其它格式。</p>
<h1 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h1><p><a href="http://www.sigai.cn/index.php?r=front/knowledgelist&amp;cata=%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0" target="_blank" rel="noopener external nofollow noreferrer">SIGAI人工智能平台</a> （除技术栏目外需要<strong>付费</strong>），<a href="http://www.sigai.cn/paper_18.html" target="_blank" rel="noopener external nofollow noreferrer">机器学习算法地图</a></p>
<blockquote>
<p><a href="http://www.sigai.cn/upload/files/20190108/1546926457940115.jpg" target="_blank" rel="noopener external nofollow noreferrer">算法地图背面.jpg</a></p>
<p><a href="http://www.sigai.cn/upload/files/20190108/1546940703391949.jpeg" target="_blank" rel="noopener external nofollow noreferrer">算法地图正面.jpeg</a></p>
<p><a href="http://www.sigai.cn/upload/files/20190108/1546943320610818.jpg" target="_blank" rel="noopener external nofollow noreferrer">电脑桌面版.jpg</a></p>
<p>以下为预览：（桌面版）</p>
</blockquote>
<img data-src="/Byte-Tech-AI-Symposium/1547898987050.png" class="" width="1547898987050">
<p><a href="https://biendata.com/competition/icmechallenge2019/" target="_blank" rel="noopener external nofollow noreferrer">短视频内容理解与推荐竞赛</a> （ICME 2019 Grand Chanllenge）</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>天气稍冷。会议在8点半开始入场。门口已经排起了长队，想必对数据科学的向往已经深入人心。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547897522092.png" class="" width="1547897522092">
<p>时间悠然溜走。然而阳光乍起，暖色调迎面袭来，令人顿生期许。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547897994048.png" class="" width="1547897994048">
<h1 id="致辞"><a href="#致辞" class="headerlink" title="致辞"></a>致辞</h1><img data-src="/Byte-Tech-AI-Symposium/1547898072596.png" class="" width="1547898072596">
<p>孙茂松：介绍嘉宾。<br>致辞，致辞，致辞……</p>
<ul>
<li><strong>脑科学记忆机制研究进展缓慢</strong>。</li>
<li>创造算法，算法产生知识，则知识产权如何定义？（legal issues）</li>
<li><strong>网络安全大有所为</strong>。</li>
<li>CSranking(CMU,Tsinghua,…:smile:)</li>
<li>清华人工智能发展历史悠久。</li>
</ul>
<p>李航致辞：</p>
<ul>
<li>今日头条，抖音</li>
<li><strong>AIlab与产品线路相结合</strong>（落地型研究所）。ByteCUP</li>
</ul>
<h1 id="Dawn-Song-人工智能与安全：经验、挑战与未来方向"><a href="#Dawn-Song-人工智能与安全：经验、挑战与未来方向" class="headerlink" title="Dawn Song-人工智能与安全：经验、挑战与未来方向"></a>Dawn Song-人工智能与安全：经验、挑战与未来方向</h1><p>Dawn Song，加州大学伯克利分校，计算机系教授。清华物理系校友。</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>AI,Security 相互影响。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910472703.png" class="" width="1547910472703">
<img data-src="/Byte-Tech-AI-Symposium/1547899231619.png" class="" width="1547899231619">
<p>DDOS attack等网络攻击逐渐严重化。</p>
<p> 弱点检测，自动检查系统等。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547899395535.png" class="" width="1547899395535">
<p>人类常常造成基础性弱点 黑客可能利用社会工程学——Chatbot。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547899415915.png" class="" width="1547899415915">
<p>软件安全验证。例：verify programs 开源项目。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547908651488.png" class="" width="1547908651488">
<h2 id="Attacker"><a href="#Attacker" class="headerlink" title="Attacker"></a>Attacker</h2><p>讲述网络攻击者对机器学习的影响。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547908680243.png" class="" width="1547908680243">
<p>总览。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547908761493.png" class="" width="1547908761493">
<p>下面是一些对抗样本的展示。adversarial examples</p>
<img data-src="/Byte-Tech-AI-Symposium/1547908832052.png" class="" width="1547908832052">
<p>left  can lead to wrong classification label！<br>（下面视频中左边的复合成图像可以干扰AI，但人类却容易正确识别，<del>录的效果不好+HTML不支持orz，视频删掉了</del>）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547917533904.png" class="" width="1547917533904">
<img data-src="/Byte-Tech-AI-Symposium/1547908872938.png" class="" width="1547908872938">
<p>视觉问答系统中的对抗样本。VQA。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547908887626.png" class="" width="1547908887626">
<img data-src="/Byte-Tech-AI-Symposium/1547908941409.png" class="" width="1547908941409">
<img data-src="/Byte-Tech-AI-Symposium/1547909016413.png" class="" width="1547909016413">
<blockquote>
<p>我的猜测：容易被fool的根本解释可能是因为计算机识别的特征尺度与人类的直觉是不同的。<br>（也许它们认知到了一些底层特征）</p>
</blockquote>
<p>利用对抗样本诱骗强化学习器。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909099575.png" class="" width="1547909099575">
<h2 id="Secure"><a href="#Secure" class="headerlink" title="Secure"></a>Secure</h2><p>利用神经网络生成对抗样本。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909164994.png" class="" width="1547909164994">
<p>黑盒攻击模式总览。（不知道学习器的内部结构）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909602392.png" class="" width="1547909602392">
<p>对抗式机器学习总结。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909875432.png" class="" width="1547909875432">
<p>一个案例。（手段：spacial consistency）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909902008.png" class="" width="1547909902008">
<p>学习系统的安全级别分为三类：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547909986308.png" class="" width="1547909986308">
<p>一个对比。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910001052.png" class="" width="1547910001052">
<p>再来一个对比。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910059031.png" class="" width="1547910059031">
<p>使用递归（recursion）来生成神经算法，<del>这里指的是减治/分治</del>。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910070683.png" class="" width="1547910070683">
<img data-src="/Byte-Tech-AI-Symposium/1547910080974.png" class="" width="1547910080974">
<p>再回security level：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910091088.png" class="" width="1547910091088">
<p>神经网络是否只是强行记住了数据呢？</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910127200.png" class="" width="1547910127200">
<p>Looks like it。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910167531.png" class="" width="1547910167531">
<p>防护方法：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910185035.png" class="" width="1547910185035">
<p>好啦，回到主题上，今天主要讲了两个方面，AI和security互相的enabler。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910472703.png" class="" width="1547910472703">
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>最后，展望未来：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910511033.png" class="" width="1547910511033">
<h1 id="ByteCUP比赛颁奖仪式"><a href="#ByteCUP比赛颁奖仪式" class="headerlink" title="ByteCUP比赛颁奖仪式"></a>ByteCUP比赛颁奖仪式</h1><h2 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547910566593.png" class="" width="1547910566593">
<h2 id="颁奖"><a href="#颁奖" class="headerlink" title="颁奖~"></a>颁奖~</h2><img data-src="/Byte-Tech-AI-Symposium/1547910590416.png" class="" width="1547910590416">
<img data-src="/Byte-Tech-AI-Symposium/1547910783233.png" class="" width="1547910783233">
<img data-src="/Byte-Tech-AI-Symposium/1547910799583.png" class="" width="1547910799583">
<blockquote>
<p><del>第一名一个人领666。</del></p>
</blockquote>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享~"></a>分享~</h2><h3 id="Team-3th"><a href="#Team-3th" class="headerlink" title="Team 3th"></a>Team 3th</h3><img data-src="/Byte-Tech-AI-Symposium/1547910865006.png" class="" width="1547910865006">
<h3 id="Team-2nd"><a href="#Team-2nd" class="headerlink" title="Team 2nd"></a>Team 2nd</h3><p>模型融合。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910911823.png" class="" width="1547910911823">
<h3 id="Team-1st"><a href="#Team-1st" class="headerlink" title="Team 1st"></a>Team 1st</h3><p>有点像debug。。真简洁。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547910952574.png" class="" width="1547910952574">
<img data-src="/Byte-Tech-AI-Symposium/1547911003387.png" class="" width="1547911003387">
<img data-src="/Byte-Tech-AI-Symposium/1547911014827.png" class="" width="1547911014827">
<h1 id="李航-深度学习与NLP"><a href="#李航-深度学习与NLP" class="headerlink" title="李航-深度学习与NLP"></a>李航-深度学习与NLP</h1><h2 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h2><p><strong>为什么深度学习的效果如此之好？下一个方法是什么？</strong></p>
<p>人的语言处理——<strong>认知现象</strong>。神经网络，产生表象(image)<br>但大脑实质在做神经计算（下意识进行），符号在大脑中被编码储存(类似计算机)</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911147478.png" class="" width="1547911147478">
<img data-src="/Byte-Tech-AI-Symposium/1547911224748.png" class="" width="1547911224748">
<p>体验模拟假说——大猩猩是否有鼻子？鼻子是否被大猩猩所有？</p>
<blockquote>
<p>(鼻子似乎很难有一个image)，会不会造成过于的端到端——机制仍然是一个谜。</p>
</blockquote>
<img data-src="/Byte-Tech-AI-Symposium/1547911259141.png" class="" width="1547911259141">
<h2 id="Findings"><a href="#Findings" class="headerlink" title="Findings"></a>Findings</h2><p>一个二层神经网络就被证明为是万能函数近似器。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911272319.png" class="" width="1547911272319">
<p>样本效率：（深度网络可以充分利用样本？）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911285763.png" class="" width="1547911285763">
<p>泛化能力考量新进展。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911298245.png" class="" width="1547911298245">
<img data-src="/Byte-Tech-AI-Symposium/1547911317326.png" class="" width="1547911317326">
<p>鲁棒性。（<strong>最坏</strong>意义误差控制On）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911325968.png" class="" width="1547911325968">
<p>合理性。（如何避免bias？）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911336697.png" class="" width="1547911336697">
<p>可解释性。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911345638.png" class="" width="1547911345638">
<h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><img data-src="/Byte-Tech-AI-Symposium/1547911354983.png" class="" width="1547911354983">
<img data-src="/Byte-Tech-AI-Symposium/1547911364945.png" class="" width="1547911364945">
<img data-src="/Byte-Tech-AI-Symposium/1547911377399.png" class="" width="1547911377399">
<img data-src="/Byte-Tech-AI-Symposium/1547911393439.png" class="" width="1547911393439">
<h3 id="Soft"><a href="#Soft" class="headerlink" title="Soft"></a>Soft</h3><img data-src="/Byte-Tech-AI-Symposium/1547911403121.png" class="" width="1547911403121">
<h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><img data-src="/Byte-Tech-AI-Symposium/1547911814356.png" class="" width="1547911814356">
<img data-src="/Byte-Tech-AI-Symposium/1547911825948.png" class="" width="1547911825948">
<p>符号和统计这两种类型的结合仍然是一个非常新颖的课题。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547911862094.png" class="" width="1547911862094">
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><img data-src="/Byte-Tech-AI-Symposium/1547911928314.png" class="" width="1547911928314">
<img data-src="/Byte-Tech-AI-Symposium/1547911937899.png" class="" width="1547911937899">
<h1 id="朱军-不确定和对抗环境下的机器学习探讨"><a href="#朱军-不确定和对抗环境下的机器学习探讨" class="headerlink" title="朱军-不确定和对抗环境下的机器学习探讨"></a>朱军-不确定和对抗环境下的机器学习探讨</h1><p>清华计算机系教授。</p>
<h2 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547912036096.png" class="" width="1547912036096">
<img data-src="/Byte-Tech-AI-Symposium/1547912101775.png" class="" width="1547912101775">
<img data-src="/Byte-Tech-AI-Symposium/1547912111189.png" class="" width="1547912111189">
<img data-src="/Byte-Tech-AI-Symposium/1547912145530.png" class="" width="1547912145530">
<h2 id="珠算-zhusuan"><a href="#珠算-zhusuan" class="headerlink" title="珠算-zhusuan"></a>珠算-zhusuan</h2><p>珠算系统——概率学习</p>
<img data-src="/Byte-Tech-AI-Symposium/1547912155121.png" class="" width="1547912155121">
<p>调包示例：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547912196798.png" class="" width="1547912196798">
<img data-src="/Byte-Tech-AI-Symposium/1547912229893.png" class="" width="1547912229893">
<img data-src="/Byte-Tech-AI-Symposium/1547912241854.png" class="" width="1547912241854">
<p><a href="https://www.zhihu.com/question/59606929" target="_blank" rel="noopener external nofollow noreferrer">如何评价生成模型框架 ZhuSuan?</a></p>
<p><a href="https://arxiv.org/abs/1709.05870" target="_blank" rel="noopener external nofollow noreferrer">ZhuSuan: A Library for Bayesian Deep Learning</a></p>
<p><a href="https://zhusuan.readthedocs.io/en/latest/" target="_blank" rel="noopener external nofollow noreferrer">Welcome to ZhuSuan</a></p>
<h2 id="Triple-GAN"><a href="#Triple-GAN" class="headerlink" title="Triple GAN"></a>Triple GAN</h2><img data-src="/Byte-Tech-AI-Symposium/1547912364641.png" class="" width="1547912364641">
<img data-src="/Byte-Tech-AI-Symposium/1547912389316.png" class="" width="1547912389316">
<img data-src="/Byte-Tech-AI-Symposium/1547912398208.png" class="" width="1547912398208">
<img data-src="/Byte-Tech-AI-Symposium/1547912409970.png" class="" width="1547912409970">
<h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><img data-src="/Byte-Tech-AI-Symposium/1547912417989.png" class="" width="1547912417989">
<img data-src="/Byte-Tech-AI-Symposium/1547912427051.png" class="" width="1547912427051">
<img data-src="/Byte-Tech-AI-Symposium/1547912445739.png" class="" width="1547912445739">
<h2 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h2><blockquote>
<p>神经网络不怕白噪声，但怕对抗噪声<br>    正则化虽然削弱了收缩能力，却可能导致样本的正确率所对应的成功样本集具有随机性(尽管最后的正确率往往接近)<br>鲁棒性，增加样本距离</p>
</blockquote>
<img data-src="/Byte-Tech-AI-Symposium/1547912454125.png" class="" width="1547912454125">
<hr>
<p>茶歇（招聘通道）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547912586910.png" class="" width="1547912586910">
<h1 id="文林福-计算机视觉在移动端相机上的应用"><a href="#文林福-计算机视觉在移动端相机上的应用" class="headerlink" title="文林福-计算机视觉在移动端相机上的应用"></a>文林福-计算机视觉在移动端相机上的应用</h1><img data-src="/Byte-Tech-AI-Symposium/1547912681779.png" class="" width="1547912681779">
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><img data-src="/Byte-Tech-AI-Symposium/1547912790560.png" class="" width="1547912790560">
<img data-src="/Byte-Tech-AI-Symposium/1547912801729.png" class="" width="1547912801729">
<img data-src="/Byte-Tech-AI-Symposium/1547912812269.png" class="" width="1547912812269">
<img data-src="/Byte-Tech-AI-Symposium/1547912825848.png" class="" width="1547912825848">
<h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><img data-src="/Byte-Tech-AI-Symposium/1547912833506.png" class="" width="1547912833506">
<img data-src="/Byte-Tech-AI-Symposium/1547912840615.png" class="" width="1547912840615">
<p>稀疏化处理：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547912848649.png" class="" width="1547912848649">
<p>自动化：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547912870540.png" class="" width="1547912870540">
<img data-src="/Byte-Tech-AI-Symposium/1547912883343.png" class="" width="1547912883343">
<h2 id="Machine-Level"><a href="#Machine-Level" class="headerlink" title="Machine Level"></a>Machine Level</h2><img data-src="/Byte-Tech-AI-Symposium/1547912902817.png" class="" width="1547912902817">
<img data-src="/Byte-Tech-AI-Symposium/1547912961107.png" class="" width="1547912961107">
<blockquote>
<p>然后放了一堆抖音视频。。</p>
</blockquote>
<h1 id="王长虎-CV在内容审核、理解、推荐与搜索中的应用"><a href="#王长虎-CV在内容审核、理解、推荐与搜索中的应用" class="headerlink" title="王长虎-CV在内容审核、理解、推荐与搜索中的应用"></a>王长虎-CV在内容审核、理解、推荐与搜索中的应用</h1><img data-src="/Byte-Tech-AI-Symposium/1547912968331.png" class="" width="1547912968331">
<img data-src="/Byte-Tech-AI-Symposium/1547912977617.png" class="" width="1547912977617">
<img data-src="/Byte-Tech-AI-Symposium/1547913049406.png" class="" width="1547913049406">
<img data-src="/Byte-Tech-AI-Symposium/1547913058549.png" class="" width="1547913058549">
<img data-src="/Byte-Tech-AI-Symposium/1547913068121.png" class="" width="1547913068121">
<img data-src="/Byte-Tech-AI-Symposium/1547913077619.png" class="" width="1547913077619">
<img data-src="/Byte-Tech-AI-Symposium/1547913085358.png" class="" width="1547913085358">
<blockquote>
<p>后面没记。。</p>
</blockquote>
<h1 id="王井东-基于交错组卷积的高效神经网络"><a href="#王井东-基于交错组卷积的高效神经网络" class="headerlink" title="王井东-基于交错组卷积的高效神经网络"></a>王井东-基于交错组卷积的高效神经网络</h1><p>微软亚研院高级研究员。</p>
<p>看他的PPT吧。（<a href="./ANN.pdf">演讲PPT</a>）</p>
<img data-src="/Byte-Tech-AI-Symposium/1547913097024.png" class="" width="1547913097024">
<img data-src="/Byte-Tech-AI-Symposium/1547913113288.png" class="" width="1547913113288">
<h1 id="马泽君-音频理解与语音交互技术的应用"><a href="#马泽君-音频理解与语音交互技术的应用" class="headerlink" title="马泽君-音频理解与语音交互技术的应用"></a>马泽君-音频理解与语音交互技术的应用</h1><img data-src="/Byte-Tech-AI-Symposium/1547913869429.png" class="" width="1547913869429">
<img data-src="/Byte-Tech-AI-Symposium/1547913878008.png" class="" width="1547913878008">
<img data-src="/Byte-Tech-AI-Symposium/1547913885339.png" class="" width="1547913885339">
<img data-src="/Byte-Tech-AI-Symposium/1547913892997.png" class="" width="1547913892997">
<img data-src="/Byte-Tech-AI-Symposium/1547913929249.png" class="" width="1547913929249">
<img data-src="/Byte-Tech-AI-Symposium/1547913938219.png" class="" width="1547913938219">
<h1 id="王雨轩-语音合成的新进展及其应用"><a href="#王雨轩-语音合成的新进展及其应用" class="headerlink" title="王雨轩-语音合成的新进展及其应用"></a>王雨轩-语音合成的新进展及其应用</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><img data-src="/Byte-Tech-AI-Symposium/1547913970591.png" class="" width="1547913970591">
<img data-src="/Byte-Tech-AI-Symposium/1547913992116.png" class="" width="1547913992116">
<img data-src="/Byte-Tech-AI-Symposium/1547914002513.png" class="" width="1547914002513">
<img data-src="/Byte-Tech-AI-Symposium/1547914009538.png" class="" width="1547914009538">
<img data-src="/Byte-Tech-AI-Symposium/1547914016702.png" class="" width="1547914016702">
<h2 id="Tacotron"><a href="#Tacotron" class="headerlink" title="Tacotron"></a>Tacotron</h2><p>Tacotron真厉害。效果拔群。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547914057236.png" class="" width="1547914057236">
<img data-src="/Byte-Tech-AI-Symposium/1547914068355.png" class="" width="1547914068355">
<img data-src="/Byte-Tech-AI-Symposium/1547914076480.png" class="" width="1547914076480">
<img data-src="/Byte-Tech-AI-Symposium/1547914084524.png" class="" width="1547914084524">
<img data-src="/Byte-Tech-AI-Symposium/1547914092456.png" class="" width="1547914092456">
<img data-src="/Byte-Tech-AI-Symposium/1547914099951.png" class="" width="1547914099951">
<h2 id="Final-1"><a href="#Final-1" class="headerlink" title="Final"></a>Final</h2><img data-src="/Byte-Tech-AI-Symposium/1547914124249.png" class="" width="1547914124249">
<h1 id="谢磊-深度对抗学习在语音处理中的应用"><a href="#谢磊-深度对抗学习在语音处理中的应用" class="headerlink" title="谢磊-深度对抗学习在语音处理中的应用"></a>谢磊-深度对抗学习在语音处理中的应用</h1><p>西北工业大学计算机系教授。</p>
<p>深度学习+信号处理<br>深度对抗学习<br>对抗样本——数据扩充（数据增强，<em><a href="https://medium.com/nanonets/how-to-use-deep-learning-when-you-have-limited-data-part-2-data-augmentation-c26971dc8ced" target="_blank" rel="noopener external nofollow noreferrer"><strong><font color=red>Data Augmentation</font></strong></a></em>）！</p>
<blockquote>
<p>对抗样本的原理很可能跟高维空间的变形有关。添加一个小的全维平衡扰动，将极大地影响距离度量。</p>
</blockquote>
<h2 id="Overview-4"><a href="#Overview-4" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547914179280.png" class="" width="1547914179280">
<img data-src="/Byte-Tech-AI-Symposium/1547914192234.png" class="" width="1547914192234">
<img data-src="/Byte-Tech-AI-Symposium/1547914203409.png" class="" width="1547914203409">
<img data-src="/Byte-Tech-AI-Symposium/1547914212701.png" class="" width="1547914212701">
<img data-src="/Byte-Tech-AI-Symposium/1547914233972.png" class="" width="1547914233972">
<img data-src="/Byte-Tech-AI-Symposium/1547914245655.png" class="" width="1547914245655">
<h2 id="Deep-Adversarial-Learning"><a href="#Deep-Adversarial-Learning" class="headerlink" title="Deep Adversarial Learning"></a>Deep Adversarial Learning</h2><img data-src="/Byte-Tech-AI-Symposium/1547914280709.png" class="" width="1547914280709">
<img data-src="/Byte-Tech-AI-Symposium/1547914289609.png" class="" width="1547914289609">
<img data-src="/Byte-Tech-AI-Symposium/1547914298099.png" class="" width="1547914298099">
<img data-src="/Byte-Tech-AI-Symposium/1547914306463.png" class="" width="1547914306463">
<p>例子。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547914316244.png" class="" width="1547914316244">
<img data-src="/Byte-Tech-AI-Symposium/1547914328211.png" class="" width="1547914328211">
<img data-src="/Byte-Tech-AI-Symposium/1547914340297.png" class="" width="1547914340297">
<p>正则化。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547914370113.png" class="" width="1547914370113">
<h2 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h2><img data-src="/Byte-Tech-AI-Symposium/1547914420221.png" class="" width="1547914420221">
<img data-src="/Byte-Tech-AI-Symposium/1547914429620.png" class="" width="1547914429620">
<h1 id="Dan-Roth-附带监督的NLP"><a href="#Dan-Roth-附带监督的NLP" class="headerlink" title="Dan Roth-附带监督的NLP"></a>Dan Roth-附带监督的NLP</h1><p>宾夕法尼亚大学计算与信息科学杰出教授。</p>
<blockquote>
<p>跟不上节奏。。老老实实地当摄影师。</p>
</blockquote>
<img data-src="/Byte-Tech-AI-Symposium/1547914458715.png" class="" width="1547914458715">
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><img data-src="/Byte-Tech-AI-Symposium/1547914496057.png" class="" width="1547914496057">
<img data-src="/Byte-Tech-AI-Symposium/1547914512699.png" class="" width="1547914512699">
<img data-src="/Byte-Tech-AI-Symposium/1547914522188.png" class="" width="1547914522188">
<img data-src="/Byte-Tech-AI-Symposium/1547914548844.png" class="" width="1547914548844">
<img data-src="/Byte-Tech-AI-Symposium/1547914561711.png" class="" width="1547914561711">
<img data-src="/Byte-Tech-AI-Symposium/1547914576202.png" class="" width="1547914576202">
<img data-src="/Byte-Tech-AI-Symposium/1547914590525.png" class="" width="1547914590525">
<img data-src="/Byte-Tech-AI-Symposium/1547914610034.png" class="" width="1547914610034">
<img data-src="/Byte-Tech-AI-Symposium/1547914618642.png" class="" width="1547914618642">
<img data-src="/Byte-Tech-AI-Symposium/1547914628801.png" class="" width="1547914628801">
<img data-src="/Byte-Tech-AI-Symposium/1547914637092.png" class="" width="1547914637092">
<img data-src="/Byte-Tech-AI-Symposium/1547914645433.png" class="" width="1547914645433">
<img data-src="/Byte-Tech-AI-Symposium/1547914657537.png" class="" width="1547914657537">
<img data-src="/Byte-Tech-AI-Symposium/1547914667411.png" class="" width="1547914667411">
<img data-src="/Byte-Tech-AI-Symposium/1547914680598.png" class="" width="1547914680598">
<img data-src="/Byte-Tech-AI-Symposium/1547914692915.png" class="" width="1547914692915">
<img data-src="/Byte-Tech-AI-Symposium/1547914705823.png" class="" width="1547914705823">
<img data-src="/Byte-Tech-AI-Symposium/1547914719214.png" class="" width="1547914719214">
<img data-src="/Byte-Tech-AI-Symposium/1547914731847.png" class="" width="1547914731847">
<img data-src="/Byte-Tech-AI-Symposium/1547914745705.png" class="" width="1547914745705">
<img data-src="/Byte-Tech-AI-Symposium/1547914757787.png" class="" width="1547914757787">
<img data-src="/Byte-Tech-AI-Symposium/1547914777387.png" class="" width="1547914777387">
<img data-src="/Byte-Tech-AI-Symposium/1547914787523.png" class="" width="1547914787523">
<img data-src="/Byte-Tech-AI-Symposium/1547914809266.png" class="" width="1547914809266">
<img data-src="/Byte-Tech-AI-Symposium/1547914820010.png" class="" width="1547914820010">
<img data-src="/Byte-Tech-AI-Symposium/1547914833424.png" class="" width="1547914833424">
<img data-src="/Byte-Tech-AI-Symposium/1547914844320.png" class="" width="1547914844320">
<img data-src="/Byte-Tech-AI-Symposium/1547914858770.png" class="" width="1547914858770">
<img data-src="/Byte-Tech-AI-Symposium/1547914870609.png" class="" width="1547914870609">
<img data-src="/Byte-Tech-AI-Symposium/1547914879016.png" class="" width="1547914879016">
<img data-src="/Byte-Tech-AI-Symposium/1547914887648.png" class="" width="1547914887648">
<img data-src="/Byte-Tech-AI-Symposium/1547914897631.png" class="" width="1547914897631">
<img data-src="/Byte-Tech-AI-Symposium/1547914906772.png" class="" width="1547914906772">
<img data-src="/Byte-Tech-AI-Symposium/1547914917789.png" class="" width="1547914917789">
<img data-src="/Byte-Tech-AI-Symposium/1547914930398.png" class="" width="1547914930398">
<img data-src="/Byte-Tech-AI-Symposium/1547914939916.png" class="" width="1547914939916">
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><img data-src="/Byte-Tech-AI-Symposium/1547914951781.png" class="" width="1547914951781">
<h1 id="李磊-Learning-to-Generate-Better-News-Translation-and-Advertisement"><a href="#李磊-Learning-to-Generate-Better-News-Translation-and-Advertisement" class="headerlink" title="李磊-Learning to Generate Better News, Translation, and Advertisement"></a>李磊-Learning to Generate Better News, Translation, and Advertisement</h1><img data-src="/Byte-Tech-AI-Symposium/1547915367252.png" class="" width="1547915367252">
<h2 id="Overview-5"><a href="#Overview-5" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547915378667.png" class="" width="1547915378667">
<img data-src="/Byte-Tech-AI-Symposium/1547915457088.png" class="" width="1547915457088">
<img data-src="/Byte-Tech-AI-Symposium/1547915469100.png" class="" width="1547915469100">
<img data-src="/Byte-Tech-AI-Symposium/1547915477964.png" class="" width="1547915477964">
<h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><img data-src="/Byte-Tech-AI-Symposium/1547915485483.png" class="" width="1547915485483">
<img data-src="/Byte-Tech-AI-Symposium/1547915505687.png" class="" width="1547915505687">
<img data-src="/Byte-Tech-AI-Symposium/1547915512832.png" class="" width="1547915512832">
<img data-src="/Byte-Tech-AI-Symposium/1547915519790.png" class="" width="1547915519790">
<h2 id="Technologies"><a href="#Technologies" class="headerlink" title="Technologies"></a>Technologies</h2><img data-src="/Byte-Tech-AI-Symposium/1547915548597.png" class="" width="1547915548597">
<img data-src="/Byte-Tech-AI-Symposium/1547915565764.png" class="" width="1547915565764">
<img data-src="/Byte-Tech-AI-Symposium/1547915588118.png" class="" width="1547915588118">
<img data-src="/Byte-Tech-AI-Symposium/1547915603035.png" class="" width="1547915603035">
<img data-src="/Byte-Tech-AI-Symposium/1547915615979.png" class="" width="1547915615979">
<img data-src="/Byte-Tech-AI-Symposium/1547915625756.png" class="" width="1547915625756">
<img data-src="/Byte-Tech-AI-Symposium/1547915635017.png" class="" width="1547915635017">
<img data-src="/Byte-Tech-AI-Symposium/1547915651685.png" class="" width="1547915651685">
<h2 id="Conclusion-1"><a href="#Conclusion-1" class="headerlink" title="Conclusion"></a>Conclusion</h2><img data-src="/Byte-Tech-AI-Symposium/1547915660760.png" class="" width="1547915660760">
<img data-src="/Byte-Tech-AI-Symposium/1547915677222.png" class="" width="1547915677222">
<h1 id="张敏-个性化推荐研究新进展"><a href="#张敏-个性化推荐研究新进展" class="headerlink" title="张敏-个性化推荐研究新进展"></a>张敏-个性化推荐研究新进展</h1><p>清华计算机系教授。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547915711336.png" class="" width="1547915711336">
<h2 id="Overview-6"><a href="#Overview-6" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547915724273.png" class="" width="1547915724273">
<p>可解释性，鲁棒性，公平性（无偏性）。</p>
<hr>
<img data-src="/Byte-Tech-AI-Symposium/1547915763486.png" class="" width="1547915763486">
<h2 id="Explainability"><a href="#Explainability" class="headerlink" title="Explainability"></a>Explainability</h2><img data-src="/Byte-Tech-AI-Symposium/1547915774459.png" class="" width="1547915774459">
<img data-src="/Byte-Tech-AI-Symposium/1547915869467.png" class="" width="1547915869467">
<img data-src="/Byte-Tech-AI-Symposium/1547915878050.png" class="" width="1547915878050">
<img data-src="/Byte-Tech-AI-Symposium/1547915886432.png" class="" width="1547915886432">
<h2 id="Robustness"><a href="#Robustness" class="headerlink" title="Robustness"></a>Robustness</h2><img data-src="/Byte-Tech-AI-Symposium/1547915909305.png" class="" width="1547915909305">
<img data-src="/Byte-Tech-AI-Symposium/1547915947597.png" class="" width="1547915947597">
<img data-src="/Byte-Tech-AI-Symposium/1547915956259.png" class="" width="1547915956259">
<h2 id="Fairness"><a href="#Fairness" class="headerlink" title="Fairness"></a>Fairness</h2><img data-src="/Byte-Tech-AI-Symposium/1547915971674.png" class="" width="1547915971674">
<img data-src="/Byte-Tech-AI-Symposium/1547915990329.png" class="" width="1547915990329">
<img data-src="/Byte-Tech-AI-Symposium/1547916000865.png" class="" width="1547916000865">
<img data-src="/Byte-Tech-AI-Symposium/1547916014358.png" class="" width="1547916014358">
<h2 id="Conclusion-2"><a href="#Conclusion-2" class="headerlink" title="Conclusion"></a>Conclusion</h2><img data-src="/Byte-Tech-AI-Symposium/1547916032481.png" class="" width="1547916032481">
<h1 id="万小军-自然语言生成-NLG-技术研究进展"><a href="#万小军-自然语言生成-NLG-技术研究进展" class="headerlink" title="万小军-自然语言生成(NLG)技术研究进展"></a>万小军-自然语言生成(NLG)技术研究进展</h1><p>北大计算机系教授。</p>
<p><strong>NLG的评价指标研究是一个核心的挑战问题</strong>。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916261083.png" class="" width="1547916261083">
<h2 id="Overview-7"><a href="#Overview-7" class="headerlink" title="Overview"></a>Overview</h2><img data-src="/Byte-Tech-AI-Symposium/1547916272702.png" class="" width="1547916272702">
<img data-src="/Byte-Tech-AI-Symposium/1547916315941.png" class="" width="1547916315941">
<h2 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h2><p>交互，写诗集？</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916324340.png" class="" width="1547916324340">
<p>未来可能的应用方向：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916356913.png" class="" width="1547916356913">
<p>NLG方法：</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916380228.png" class="" width="1547916380228">
<p>目前来说，NLG领域还没有拿得出手的绝活。</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916427163.png" class="" width="1547916427163">
<img data-src="/Byte-Tech-AI-Symposium/1547916456511.png" class="" width="1547916456511">
<img data-src="/Byte-Tech-AI-Symposium/1547916466597.png" class="" width="1547916466597">
<img data-src="/Byte-Tech-AI-Symposium/1547916505375.png" class="" width="1547916505375">
<img data-src="/Byte-Tech-AI-Symposium/1547916517065.png" class="" width="1547916517065">
<img data-src="/Byte-Tech-AI-Symposium/1547916525636.png" class="" width="1547916525636">
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><img data-src="/Byte-Tech-AI-Symposium/1547916533954.png" class="" width="1547916533954">
<img data-src="/Byte-Tech-AI-Symposium/1547916551185.png" class="" width="1547916551185">
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>不知不觉一整天就过去了。获得了多少？消化了多少？</p>
<p>Ask myself that, and wall into the good night.</p>
<img data-src="/Byte-Tech-AI-Symposium/1547916669280.png" class="" width="1547916669280">
<h1 id="Arrangement"><a href="#Arrangement" class="headerlink" title="Arrangement"></a>Arrangement</h1><p><img data-src=Byte-Tech-AI-Symposium/30873302924033539.jpg width=650></p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据竞赛-练习篇</title>
    <url>/Data-Science-Contests/</url>
    <content><![CDATA[<p>这个练习篇主要记录的是我在<strong>学习《机器学习》阶段</strong>所练习过的竞赛练习项目。<a id="more"></a><br>按时间排序。</p>
<blockquote>
<p>你可以在<a href="https://vel.life/blog/Notes-of-Machine-Learning-Part1/" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>查看我关于机器学习的笔记。</p>
<p>一些竞赛频道：<a href="https://www.kaggle.com" target="_blank" rel="noopener external nofollow noreferrer"><strong>Kaggle</strong></a>，<a href="www.dcjingsai.com/static_page/cmpList.html"><strong>DataCastle</strong></a>，<a href="http://www.kdd.org/kdd-cup" target="_blank" rel="noopener external nofollow noreferrer">KDDCUP</a>，<a href="https://tianchi.aliyun.com/competition/gameList/activeList" target="_blank" rel="noopener external nofollow noreferrer">天池</a>，<a href="http://sofasofa.io/competitions.php" target="_blank" rel="noopener external nofollow noreferrer"><strong>Sofasofa</strong></a>，<a href="https://www.kesci.com/" target="_blank" rel="noopener external nofollow noreferrer">Kesci</a>……</p>
</blockquote>
<h1 id="SF-公共自行车使用量预测-10k"><a href="#SF-公共自行车使用量预测-10k" class="headerlink" title="SF-公共自行车使用量预测 10k"></a><a href="http://sofasofa.io/competition.php?id=1#c1" target="_blank" rel="noopener external nofollow noreferrer">SF-公共自行车使用量预测</a> 10k</h1><h2 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h2><p>回归问题，10k级数据量，较小。主要是看看已有的模型，自己尝试运行一下，了解基本函数的作用。</p>
<p><strong>比赛地址</strong>：<a href="http://sofasofa.io/competition.php?id=1#c1" target="_blank" rel="noopener external nofollow noreferrer">http://sofasofa.io/competition.php?id=1#c1</a></p>
<p><strong>比赛信息</strong>：</p>
<blockquote>
<p>本比赛为个人练习赛，主要针对于于数据新人进行自我练习、自我提高，与大家切磋。 </p>
<p>练习赛时限：2017-05-06 至 2019-05-06 </p>
<p>任务类型：回归 </p>
<p>背景介绍:<br>公共自行车低碳、环保、健康，并且解决了交通中“最后一公里”的痛点，在全国各个城市越来越受欢迎。本练习赛的数据取自于两个城市某街道上的几处公共自行车停车桩。我们希望根据时间、天气等信息，预测出该街区在一小时内的被借取的公共自行车的数量。 </p>
<p>数据来源：<br>Laboratory of Artificial Intelligence and Decision Support (LIAAD), University of Porto, Portugal。为了公平起见，数据已经进行脱敏加工处理。标题图片来源：36氪。   </p>
</blockquote>
<h3 id="评价方法"><a href="#评价方法" class="headerlink" title="评价方法"></a>评价方法</h3><img data-src="/Data-Science-Contests/1550219963764.png" class="" width="1550219963764">
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>线性回归</code>、<code>xgboost回归</code>、<code>决策树</code>代码摘自比赛网站。为公开代码。</p>
<h3 id="线性回归-39-132"><a href="#线性回归-39-132" class="headerlink" title="线性回归 39.132"></a>线性回归 39.132</h3><p>注意：<a href="https://segmentfault.com/a/1190000000322433" target="_blank" rel="noopener external nofollow noreferrer">https://segmentfault.com/a/1190000000322433</a></p>
<blockquote>
<p>在python2中，map会直接返回结果，比如说:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x: x, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>可以直接返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>但是到了python3, 返回的就是一个map对象:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;map object at <span class="number">0x7f381112ad50</span>&gt;</span><br></pre></td></tr></table></figure>
<p>如果要得到结果，必须用list作用于这个map对象。</p>
<p>如果说计算结果已经出来了，只是要用list来打印结果，那就算了。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立线性回归模型</span></span><br><span class="line">reg = LinearRegression()</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若预测值是负数，则取0</span></span><br><span class="line">y_pred = list(map(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, y_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LR_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'LR_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="岭回归-39-132"><a href="#岭回归-39-132" class="headerlink" title="岭回归 39.132"></a>岭回归 39.132</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立线性回归模型</span></span><br><span class="line">reg = Ridge(alpha=<span class="number">.5</span>)</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若预测值是负数，则取0</span></span><br><span class="line">y_pred = list(map(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, y_pred))</span><br><span class="line">print(y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LR_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'prediction_Ridge.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="贝叶斯岭回归"><a href="#贝叶斯岭回归" class="headerlink" title="贝叶斯岭回归"></a>贝叶斯岭回归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> BayesianRidge</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立线性回归模型</span></span><br><span class="line">reg = BayesianRidge()</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若预测值是负数，则取0</span></span><br><span class="line">y_pred = list(map(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, y_pred))</span><br><span class="line">print(y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LR_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'prediction_BayesianRidge.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Lasso回归-39-294"><a href="#Lasso回归-39-294" class="headerlink" title="Lasso回归 39.294"></a>Lasso回归 39.294</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立回归模型</span></span><br><span class="line">reg = Lasso()</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若预测值是负数，则取0</span></span><br><span class="line">y_pred = list(map(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, y_pred))</span><br><span class="line">print(y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LR_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'Lasso_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h3 id="决策树-28-818"><a href="#决策树-28-818" class="headerlink" title="决策树 28.818"></a>决策树 28.818</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立最大深度为5的决策树回归模型</span></span><br><span class="line">reg = DecisionTreeRegressor(max_depth=<span class="number">5</span>)</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_DT_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'prediction_DT.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h3 id="xgboost回归-18-947"><a href="#xgboost回归-18-947" class="headerlink" title="xgboost回归 18.947"></a>xgboost回归 18.947</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'id'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个默认的xgboost回归模型</span></span><br><span class="line">reg = XGBRegressor()</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_XGB_prediction.csv</span></span><br><span class="line">submit[<span class="string">'y'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'XGB_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>None.</p>
<h1 id="SF-交通事故理赔审核-100k"><a href="#SF-交通事故理赔审核-100k" class="headerlink" title="SF-交通事故理赔审核 100k"></a><a href="http://sofasofa.io/competition.php?id=2#c1" target="_blank" rel="noopener external nofollow noreferrer">SF-交通事故理赔审核</a> 100k</h1><p><strong>比赛地址</strong>：<a href="http://sofasofa.io/competition.php?id=2#c1" target="_blank" rel="noopener external nofollow noreferrer">http://sofasofa.io/competition.php?id=2#c1</a></p>
<h2 id="问题简述-1"><a href="#问题简述-1" class="headerlink" title="问题简述"></a>问题简述</h2><p>训练集中共有200000条样本，预测集中有80000条样本。</p>
<h3 id="比赛概述"><a href="#比赛概述" class="headerlink" title="比赛概述"></a>比赛概述</h3><p> 本比赛为个人练习赛，适用于入门二元分类模型，主要针对于数据新人进行自我练习、自我提高，与大家切磋。 </p>
<p> 练习赛时限：2017-06-03 至 2019-06-03 </p>
<p> 任务类型：二元分类</p>
<p> 背景介绍: </p>
<p> 在交通摩擦（事故）发生后，理赔员会前往现场勘察、采集信息，这些信息往往影响着车主是否能够得到保险公司的理赔。训练集数据包括理赔人员在现场对该事故方采集的36条信息，信息已经被编码，以及该事故方最终是否获得理赔。我们的任务是根据这36条信息预测该事故方没有被理赔的概率。 </p>
<p> 数据来源： </p>
<p> 我们低调的合作方——某汽车大数据网站。标题图片来源：搜狐汽车。  </p>
<h3 id="评价方法-1"><a href="#评价方法-1" class="headerlink" title="评价方法"></a>评价方法</h3><p> 你的提交结果为每个测试样本未通过审核的概率，也就是Evaluation为1的概率。评价方法为精度-召回曲线下面积(Precision-Recall AUC)，以下简称PR-AUC。 </p>
<p> PR-AUC的取值范围是0到1。越接近1，说明模型预测的结果越接近真实结果。 </p>
<p> 精度和召回的定义和计算方式可参考<a href="http://sofasofa.24xi.org/forum_main_post.php?postid=1000597" target="_blank" rel="noopener external nofollow noreferrer">问题：什么是混淆矩阵？</a>中的回答。 </p>
<p> PR-AUC的定义可参考<a href="http://sofasofa.24xi.org/forum_main_post.php?postid=1000768" target="_blank" rel="noopener external nofollow noreferrer">问题：精度-召回AUC是什么？</a> </p>
<p>PR-AUC的计算方法可以参考问题：<a href="http://sofasofa.24xi.org/forum_main_post.php?postid=1000577" target="_blank" rel="noopener external nofollow noreferrer">Python里如何计算召回精度AUC？</a></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>Lasso逻辑回归、随机森林分类模型为标杆模型。</p>
<h3 id="逻辑回归-0-632113"><a href="#逻辑回归-0-632113" class="headerlink" title="逻辑回归 0.632113"></a>逻辑回归 0.632113</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的Evaluation</span></span><br><span class="line">y_train = train.pop(<span class="string">'Evaluation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立线性回归模型</span></span><br><span class="line">reg = LogisticRegression()</span><br><span class="line">reg.fit(train, y_train)</span><br><span class="line">y_pred = reg.predict(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若预测值是负数，则取0</span></span><br><span class="line">y_pred = list(map(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, y_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LR_prediction.csv</span></span><br><span class="line">submit[<span class="string">'Evaluation'</span>] = y_pred</span><br><span class="line">print(submit)</span><br><span class="line">submit.to_csv(<span class="string">'LogisticRegression_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Lasso逻辑回归-0-714644"><a href="#Lasso逻辑回归-0-714644" class="headerlink" title="Lasso逻辑回归 0.714644"></a>Lasso逻辑回归 0.714644</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'Evaluation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立LASSO逻辑回归模型</span></span><br><span class="line">clf = LogisticRegression(penalty=<span class="string">'l1'</span>, C=<span class="number">1.0</span>, random_state=<span class="number">0</span>)</span><br><span class="line">clf.fit(train, y_train)</span><br><span class="line">y_pred = clf.predict_proba(test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_LASSO_prediction.csv</span></span><br><span class="line">submit[<span class="string">'Evaluation'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'LASSO_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h3 id="随机森林分类模型-0-850897"><a href="#随机森林分类模型-0-850897" class="headerlink" title="随机森林分类模型 0.850897"></a>随机森林分类模型 0.850897</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train = pd.read_csv(<span class="string">"train.csv"</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">"test.csv"</span>)</span><br><span class="line">submit = pd.read_csv(<span class="string">"sample_submit.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除id</span></span><br><span class="line">train.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">'CaseId'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出训练集的y</span></span><br><span class="line">y_train = train.pop(<span class="string">'Evaluation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立随机森林模型</span></span><br><span class="line">clf = RandomForestClassifier(n_estimators=<span class="number">100</span>, random_state=<span class="number">0</span>)</span><br><span class="line">clf.fit(train, y_train)</span><br><span class="line">y_pred = clf.predict_proba(test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出预测结果至my_RF_prediction.csv</span></span><br><span class="line">submit[<span class="string">'Evaluation'</span>] = y_pred</span><br><span class="line">submit.to_csv(<span class="string">'RF_prediction.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h2 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h2><h1 id="Kaggle-泰坦尼克Titanic-Disaster"><a href="#Kaggle-泰坦尼克Titanic-Disaster" class="headerlink" title="Kaggle-泰坦尼克Titanic: Disaster"></a><a href="https://www.kaggle.com/c/titanic" target="_blank" rel="noopener external nofollow noreferrer">Kaggle-泰坦尼克Titanic: Disaster</a></h1><h2 id="问题简述-2"><a href="#问题简述-2" class="headerlink" title="问题简述"></a>问题简述</h2><p>二分类。1k数据。</p>
<p><strong>比赛地址</strong>：<a href="https://www.kaggle.com/c/titanic" target="_blank" rel="noopener external nofollow noreferrer">https://www.kaggle.com/c/titanic</a></p>
<p><strong>比赛信息</strong>：</p>
<blockquote>
<h3 id="Competition-Description"><a href="#Competition-Description" class="headerlink" title="Competition Description"></a>Competition Description</h3><p>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p>
<p>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p>
<p>In this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.</p>
<h3 id="Practice-Skills"><a href="#Practice-Skills" class="headerlink" title="Practice Skills"></a>Practice Skills</h3><ul>
<li>Binary classification</li>
<li>Python and R basics</li>
</ul>
</blockquote>
<p><strong>BUG</strong>：</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多-2"><a href="#更多-2" class="headerlink" title="更多"></a>更多</h2><p><a href="https://github.com/HanXiaoyang/Kaggle_Titanic/blob/master/Titanic.ipynb" target="_blank" rel="noopener external nofollow noreferrer">机器学习系列(3)_逻辑回归应用之Kaggle泰坦尼克之灾</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/34213085" target="_blank" rel="noopener external nofollow noreferrer">Kaggle 泰坦尼克号生存预测分析（入门）</a></p>
<p><a href="https://bbs.huaweicloud.com/blogs/80ef17d5319c11e89fc57ca23e93a89f" target="_blank" rel="noopener external nofollow noreferrer">Kaggle机器学习入门实战 — Titanic乘客生还预测</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/31743196" target="_blank" rel="noopener external nofollow noreferrer">Kaggle Titanic 生存预测 — 详细流程吐血梳理</a></p>
<p><a href="https://www.kaggle.com/lvpeiyuan/titaniclvpeiyuan" target="_blank" rel="noopener external nofollow noreferrer">泰坦尼克幸存者预测TitanicLvPeiyuan</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/27655949" target="_blank" rel="noopener external nofollow noreferrer">Kaggle竞赛排名Top 6%——泰坦尼克号幸存预测</a></p>
<p><a href="https://www.kaggle.com/sashr07/kaggle-titanic-tutorial" target="_blank" rel="noopener external nofollow noreferrer">Kaggle Titanic Supervised Learning Tutorial</a></p>
<h1 id="Kaggle-房价预测House-Prices"><a href="#Kaggle-房价预测House-Prices" class="headerlink" title="Kaggle-房价预测House Prices"></a><a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques" target="_blank" rel="noopener external nofollow noreferrer">Kaggle-房价预测House Prices</a></h1><h2 id="问题简述-3"><a href="#问题简述-3" class="headerlink" title="问题简述"></a>问题简述</h2><p><strong>比赛地址</strong>：<a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques" target="_blank" rel="noopener external nofollow noreferrer">https://www.kaggle.com/c/house-prices-advanced-regression-techniques</a></p>
<h3 id="Start-here-if…"><a href="#Start-here-if…" class="headerlink" title="Start here if…"></a>Start here if…</h3><p>You have some experience with R or Python and machine learning  basics. This is a perfect competition for data science students who have  completed an online course in machine learning and are looking to  expand their skill set before trying a featured competition. </p>
<h3 id="Competition-Description-1"><a href="#Competition-Description-1" class="headerlink" title="Competition Description"></a>Competition Description</h3><p><img data-src="https://storage.googleapis.com/kaggle-competitions/kaggle/5407/media/housesbanner.png" alt="img"></p>
<p>Ask a home buyer to describe their dream house, and they probably  won’t begin with the height of the basement ceiling or the proximity to  an east-west railroad. But this playground competition’s dataset proves  that much more influences price negotiations than the number of bedrooms  or a white-picket fence.</p>
<p>With 79 explanatory variables describing (almost) every aspect of  residential homes in Ames, Iowa, this competition challenges you to  predict the final price of each home.</p>
<h3 id="Practice-Skills-1"><a href="#Practice-Skills-1" class="headerlink" title="Practice Skills"></a>Practice Skills</h3><ul>
<li>Creative feature engineering </li>
<li>Advanced regression techniques like random forest and gradient boosting</li>
</ul>
<h3 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h3><p>The <a href="http://www.amstat.org/publications/jse/v19n3/decock.pdf" target="_blank" rel="noopener external nofollow noreferrer">Ames Housing dataset</a> was  compiled by Dean De Cock for use in data science education. It’s an  incredible alternative for data scientists looking for a modernized and  expanded version of the often cited Boston Housing dataset. </p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多-3"><a href="#更多-3" class="headerlink" title="更多"></a>更多</h2><p><a href="https://www.kaggle.com/neviadomski/how-to-get-to-top-25-with-simple-model-sklearn" target="_blank" rel="noopener external nofollow noreferrer">https://www.kaggle.com/neviadomski/how-to-get-to-top-25-with-simple-model-sklearn</a></p>
<h1 id="Kaggle-数字识别Digit-Recognition"><a href="#Kaggle-数字识别Digit-Recognition" class="headerlink" title="Kaggle-数字识别Digit Recognition"></a><a href="https://www.kaggle.com/c/digit-recognizer" target="_blank" rel="noopener external nofollow noreferrer">Kaggle-数字识别Digit Recognition</a></h1><p><strong>比赛地址</strong>：<a href="https://www.kaggle.com/c/digit-recognizer" target="_blank" rel="noopener external nofollow noreferrer">https://www.kaggle.com/c/digit-recognizer</a></p>
<h2 id="问题简述-4"><a href="#问题简述-4" class="headerlink" title="问题简述"></a>问题简述</h2><h3 id="Start-here-if…-1"><a href="#Start-here-if…-1" class="headerlink" title="Start here if…"></a>Start here if…</h3><p>You have some experience with <strong>R</strong> or <strong>Python</strong> and machine learning  basics, but you’re <strong>new to computer vision</strong>. This competition is the  perfect introduction to techniques like neural networks using a classic  dataset including pre-extracted features.</p>
<h3 id="Competition-Description-2"><a href="#Competition-Description-2" class="headerlink" title="Competition Description"></a>Competition Description</h3><p><strong>MNIST</strong> (“Modified National Institute of Standards and Technology”) is  the de facto “hello world” dataset of computer vision. Since its release  in 1999, this classic dataset of handwritten images has served as the  basis for benchmarking classification algorithms. As new machine  learning techniques emerge, MNIST remains a reliable resource for  researchers and learners alike.</p>
<p>In this competition, your goal is to correctly identify digits from a  dataset of tens of thousands of handwritten images. We’ve curated a set  of tutorial-style kernels which cover everything from regression to  neural networks. We encourage you to experiment with different  algorithms to learn first-hand what works well and how techniques  compare.</p>
<h3 id="Practice-Skills-2"><a href="#Practice-Skills-2" class="headerlink" title="Practice Skills"></a>Practice Skills</h3><ul>
<li>Computer vision fundamentals including simple <strong>neural networks</strong></li>
<li><strong>Classification methods</strong> such as <strong>SVM</strong> and <strong>K-nearest neighbors</strong></li>
</ul>
<h3 id="Acknowledgements"><a href="#Acknowledgements" class="headerlink" title="Acknowledgements"></a>Acknowledgements</h3><p>More details about the dataset, including algorithms that have been tried on it and their levels of success, can be found at <a href="http://yann.lecun.com/exdb/mnist/index.html" target="_blank" rel="noopener external nofollow noreferrer">http://yann.lecun.com/exdb/mnist/index.html</a>. The dataset is made available under a <a href="https://creativecommons.org/licenses/by-sa/3.0/" target="_blank" rel="noopener external nofollow noreferrer">Creative Commons Attribution-Share Alike 3.0 license</a>.</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;ved=2ahUKEwjHgsnAur3gAhXVdt4KHY-gCPYQFjAFegQIAxAB&amp;url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F37613780&amp;usg=AOvVaw13hWb6wk8rymxDedlMsoKT" target="_blank" rel="noopener external nofollow noreferrer">kaggle入门| Digit Recognizer准确度100% - 知乎</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多-4"><a href="#更多-4" class="headerlink" title="更多"></a>更多</h2><p><a href="https://blog.csdn.net/u012162613/article/details/41929171" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/u012162613/article/details/41929171</a></p>
<h1 id="DC-“达观杯”文本智能处理挑战赛"><a href="#DC-“达观杯”文本智能处理挑战赛" class="headerlink" title="DC-“达观杯”文本智能处理挑战赛"></a><a href="http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html" target="_blank" rel="noopener external nofollow noreferrer">DC-“达观杯”文本智能处理挑战赛</a></h1><h2 id="问题简述-5"><a href="#问题简述-5" class="headerlink" title="问题简述"></a>问题简述</h2><p>多分类。100k级数据量。这是第一个练习项目，代码是已有的，只是熟悉数据竞赛的流程。</p>
<p><strong>比赛地址</strong>：<a href="http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html" target="_blank" rel="noopener external nofollow noreferrer">“达观杯”文本智能处理挑战赛</a>。</p>
<p><strong>比赛信息</strong>：</p>
<blockquote>
<p>2018年人工智能的发展在运算智能和感知智能已经取得了很大的突破和优于人类的表现。而在以理解人类语言为入口的认知智能上，目前达观数据<strong>自然语言处理</strong>技术已经可以实现文档自动解析、关键信息提取、文本分类审核、文本智能纠错等一定基础性的文字处理工作，并在各行各业得到充分应用。</p>
<p>自然语言处理一直是人工智能领域的重要话题，而人类语言的复杂性也给 NLP 布下了重重困难等待解决。长文本的智能解析就是颇具挑战性的任务，如何从纷繁多变、信息量庞杂的冗长文本中获取关键信息，一直是文本领域难题。随着深度学习的热潮来临，有许多新方法来到了 NLP 领域，给相关任务带来了更多优秀成果，也给大家带来了更多应用和想象的空间。</p>
<p>此次比赛，达观数据提供了一批<strong>长文本数据和分类信息</strong>，希望选手动用自己的智慧，结合当下最先进的NLP和人工智能技术，深入分析文本内在结构和语义信息，构建文本分类模型，实现精准<strong>分类</strong>。未来文本自动化处理的技术突破和应用落地需要人工智能从业者和爱好者的共同努力，相信文本智能处理技术因为你的算法，变得更加智能！</p>
<p>任务：<strong>建立模型通过长文本数据正文(article)，预测文本对应的类别(class)</strong>   </p>
<p>数据：</p>
<p>*注 : 报名参赛或加入队伍后，可获取数据下载权限。</p>
<p>数据包含2个csv文件： </p>
<ul>
<li><strong>train_set.csv</strong>：此数据集用于训练模型，每一行对应一篇文章。文章分别在“字”和“词”的级别上做了脱敏处理。共有四列： 第一列是文章的索引(id)，第二列是文章正文在“字”级别上的表示，即字符相隔正文(article)；第三列是在“词”级别上的表示，即词语相隔正文(word_seg)；第四列是这篇文章的标注(class)。 注：每一个数字对应一个“字”，或“词”，或“标点符号”。“字”的编号与“词”的编号是独立的！  </li>
<li><strong>test_set.csv</strong>：此数据用于测试。数据格式同train_set.csv，但不包含class。 注：test_set与train_test中文章id的编号是独立的。  友情提示：请不要尝试用excel打开这些文件！由于一篇文章太长，excel可能无法完整地读入某一行！</li>
</ul>
</blockquote>
<p><strong>BUG</strong>：</p>
<ul>
<li><p><code>csv_read()</code><strong>读入时文件较大</strong>（1G），<strong>python停止工作</strong>，但是<strong>查看电脑内存最高却使用了不到50%</strong>（同时读入时内存激增/飙升）</p>
<ul>
<li><p><del>解决方案</del>：<a href="https://blog.csdn.net/weixin_39750084/article/details/81501395" target="_blank" rel="noopener external nofollow noreferrer">解决Python memory error的问题（四种解决方案）</a>，似乎没有用！</p>
<ul>
<li><a href="http://docs.dask.org/en/latest/" target="_blank" rel="noopener external nofollow noreferrer">Dask</a>也没啥用！</li>
<li>还是<a href="https://blog.csdn.net/wld914674505/article/details/81431128" target="_blank" rel="noopener external nofollow noreferrer">分块读取</a>吧！可能要使用Python<a href="https://www.jianshu.com/p/3afe5305f6bd" target="_blank" rel="noopener external nofollow noreferrer">并行循环</a>。</li>
</ul>
</li>
<li><p><strong>【真】解决方案</strong>：（<a href="https://stackoverflow.com/questions/41303246/error-tokenizing-data-c-error-out-of-memory-pandas-python-large-file-csv" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>）</p>
<ul>
<li>首先<strong>分块读</strong><code>read_csv(&#39;xxx.csv&#39;, chunksize=XXX)</code></li>
<li>然后<strong>边读边合并 </strong><code>concat([df, chunk])</code></li>
<li>似乎本质上是因为<strong>内存调用过快</strong>引起的Python程序崩溃，只要放缓读入速度就能解决问题</li>
<li>如果物理内存真的不够，则可以<a href="https://jingyan.baidu.com/article/67508eb402aeb19cca1ce4a7.html" target="_blank" rel="noopener external nofollow noreferrer">增加虚拟内存</a>（一般设为物理内存的1~3倍）</li>
</ul>
</li>
<li><p><strong><font color=red>理论解释</font></strong>：<strong><font color=red>内存泄露</font></strong>（Memory leak）<del>也可能是<strong>内存溢出</strong></del></p>
<ul>
<li><p><a href="https://github.com/pandas-dev/pandas/issues/21516" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/pandas-dev/pandas/issues/21516</a></p>
</li>
<li><p><a href="https://github.com/pandas-dev/pandas/issues/21353" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/pandas-dev/pandas/issues/21353</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/40454362/pandas-read-csv-1-2gb-file-out-of-memory-on-vm-with-140gb-ram" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/40454362/pandas-read-csv-1-2gb-file-out-of-memory-on-vm-with-140gb-ram</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/38487334/pandas-python-memory-spike-while-reading-3-2-gb-file" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/38487334/pandas-python-memory-spike-while-reading-3-2-gb-file</a></p>
<ul>
<li><p>根据楼主获得的新解决方案</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dtypes = &#123;<span class="string">'id'</span>: pd.np.int8,</span><br><span class="line">          <span class="string">'article'</span>:pd.np.str,</span><br><span class="line">          <span class="string">'word_seg'</span>:pd.np.str,</span><br><span class="line">          <span class="string">'class'</span>:pd.np.int8&#125;</span><br><span class="line">df_train = pd.read_csv(<span class="string">'./train_set.csv'</span>, dtype=dtypes)</span><br><span class="line">df_test = pd.read_csv(<span class="string">'./test_set.csv'</span>, dtype=dtypes)</span><br></pre></td></tr></table></figure>
<p>奇怪的是，现在突然原版的<code>df_train = pd.read_csv(&#39;./train_set.csv&#39;)</code>也不报错了！<del>WTF！！！</del>读入表现得很平缓。</p>
</li>
<li><p>恐怕这是一个<strong>不可复现</strong>的程序漏洞……<del>折腾这么久突然自己好了，有毒啊</del></p>
</li>
</ul>
</li>
<li><p><a href="https://stackoverflow.com/questions/31886939/reduce-memory-usage-pandas/47577606#47577606" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/31886939/reduce-memory-usage-pandas/47577606#47577606</a></p>
<ul>
<li><p>pandas似乎有一个自动判断类型的过程，如果不用dtype事先指定，会额外消耗比较多的内存（但我实际测试感觉没什么区别，最后内存最大占用都3个g左右）</p>
<blockquote>
<ol>
<li>Pandas loads in <strong>string</strong> columns as <strong>object</strong> type by default. For all the columns which have the type <strong>object</strong>, try to assign the type <strong>category</strong> to these columns by passing a dictionary to parameter <strong>dtypes</strong> of the <strong>read_csv</strong> function. Memory usage decreases dramatically for columns with 50% or less unique values.</li>
<li>Pandas reads in numeric columns as <strong>float64</strong> by default. Use <strong>pd.to_numeric</strong> to downcast <strong>float64</strong> type to 32 or 16 if possible. This again saves you memory.</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Anyway，这个BUG就像<a href="https://zh.wikipedia.org/zh-hans/%E7%90%83%E7%8A%B6%E9%97%AA%E7%94%B5_(%E5%B0%8F%E8%AF%B4" target="_blank" rel="noopener external nofollow noreferrer"><strong><font color=red>球状闪电</font></strong></a>)一样消失了……</p>
</li>
<li><p>拓展：<a href="http://wulc.me/2017/11/18/%E5%88%86%E6%89%B9%E8%AE%AD%E7%BB%83%E8%BF%87%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/" target="_blank" rel="noopener external nofollow noreferrer">分批训练过大的数据集</a>，<a href="https://www.zhihu.com/question/38034287" target="_blank" rel="noopener external nofollow noreferrer">partial_fit增量式计算</a></p>
</li>
</ul>
</li>
<li><p>TypeError: drop() got an unexpected keyword argument ‘columns’</p>
<ul>
<li>Pandas<a href="https://github.com/ramp-kits/autism/issues/14" target="_blank" rel="noopener external nofollow noreferrer">版本过低</a>，至少要<strong>0.21</strong>版本，使用<code>conda update pandas</code>命令更新<ul>
<li>如果使用了镜像网站（更新源），<del>可能版本还是不够</del>，<code>使用pip install -U pandas</code>更新</li>
</ul>
</li>
</ul>
</li>
<li><p>Keword找不到错误</p>
<ul>
<li>如果在分块的时候，read_csv使用了奇怪的seg=’;‘参数则会出现此异常，从输出来看似乎是csv的表格系统被该分隔符所破坏，删去该参数即可</li>
</ul>
</li>
<li><p>第1次提交得分：<strong><font color=red>5%</font></strong>（最后运行了<strong>40分钟</strong>orz）</p>
<ul>
<li>发现代码写错了：x<em>test = vetorizer.transform(df</em><font color=red>test</font>[‘word_seg’])（原来复制粘贴的是train，WTF）</li>
</ul>
</li>
<li><p>CPU使用率只有25%</p>
<ul>
<li>4核，可能需要改写算法，形成多个thread（<a href="https://superuser.com/questions/679679/how-to-increase-pythons-cpu-usage" target="_blank" rel="noopener external nofollow noreferrer">More</a>）</li>
</ul>
</li>
</ul>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><h3 id="逻辑回归-分块读入-73"><a href="#逻辑回归-分块读入-73" class="headerlink" title="逻辑回归+分块读入 73%"></a>逻辑回归+分块读入 73%</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#import dask.dataframe as dd</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#Data pre-process</span></span><br><span class="line">ChunkSize = <span class="number">10000</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(<span class="string">'./train_set.csv'</span>, chunksize=ChunkSize): <span class="comment">#分块合并</span></span><br><span class="line">	df_train = chunk <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span>	pd.concat([df_train, chunk])</span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(<span class="string">'./test_set.csv'</span>, chunksize=ChunkSize):</span><br><span class="line">	df_test = chunk <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span>	pd.concat([df_test, chunk])</span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">df_train.drop(columns=[<span class="string">'article'</span>, <span class="string">'id'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">df_test.drop(columns=[<span class="string">'article'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Feature Enginnering</span></span><br><span class="line">vetorizer = CountVectorizer(ngram_range=(<span class="number">1</span>, <span class="number">2</span>), min_df=<span class="number">3</span>,max_df=<span class="number">0.9</span>,max_features=<span class="number">100000</span>)</span><br><span class="line">vetorizer.fit(df_train[<span class="string">'word_seg'</span>])</span><br><span class="line">x_train = vetorizer.transform(df_train[<span class="string">'word_seg'</span>])</span><br><span class="line">x_test = vetorizer.transform(df_test[<span class="string">'word_seg'</span>])</span><br><span class="line">y_train  = df_train[<span class="string">'class'</span>] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Train a classifier</span></span><br><span class="line">lg = LogisticRegression(C=<span class="number">4</span>, dual=<span class="literal">True</span>)</span><br><span class="line">lg.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Prediction</span></span><br><span class="line">y_test = lg.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Save results</span></span><br><span class="line">df_test[<span class="string">'class'</span>] = y_test.tolist()</span><br><span class="line">df_test[<span class="string">'class'</span>] = df_test[<span class="string">'class'</span>] + <span class="number">1</span></span><br><span class="line">df_result = df_test.loc[:, [<span class="string">'id'</span>, <span class="string">'class'</span>] ]</span><br><span class="line">df_result.to_csv(<span class="string">'./result.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>注释版：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#import dask.dataframe as dd</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#Data pre-process</span></span><br><span class="line">print(<span class="string">'Start...'</span>, time.clock())</span><br><span class="line">ChunkSize = <span class="number">10000</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(<span class="string">'./train_set.csv'</span>, chunksize=ChunkSize): <span class="comment">#分块合并</span></span><br><span class="line">	df_train = chunk <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span>	pd.concat([df_train, chunk])</span><br><span class="line">	print(<span class="string">'--&gt;Read Chunk...'</span>, i)</span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(<span class="string">'./test_set.csv'</span>, chunksize=ChunkSize):</span><br><span class="line">	df_test = chunk <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span>	pd.concat([df_test, chunk])</span><br><span class="line">	print(<span class="string">'--&gt;Read Chunk...'</span>, i)</span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">print(<span class="string">'Read Complete...'</span>, time.clock())</span><br><span class="line">df_train.drop(columns=[<span class="string">'article'</span>, <span class="string">'id'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">df_test.drop(columns=[<span class="string">'article'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">'Drop Complete'</span>, time.clock())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Feature Enginnering</span></span><br><span class="line">vetorizer = CountVectorizer(ngram_range=(<span class="number">1</span>, <span class="number">2</span>), min_df=<span class="number">3</span>,max_df=<span class="number">0.9</span>,max_features=<span class="number">100000</span>)</span><br><span class="line">vetorizer.fit(df_train[<span class="string">'word_seg'</span>])</span><br><span class="line">print(<span class="string">'--&gt;vetorizer-fit...'</span>, time.clock())</span><br><span class="line">x_train = vetorizer.transform(df_train[<span class="string">'word_seg'</span>])</span><br><span class="line">print(<span class="string">'--&gt;transform x_train...'</span>, time.clock())</span><br><span class="line">x_test = vetorizer.transform(df_test[<span class="string">'word_seg'</span>])</span><br><span class="line">print(<span class="string">'--&gt;transform x_test...'</span>, time.clock())</span><br><span class="line">y_train  = df_train[<span class="string">'class'</span>] - <span class="number">1</span></span><br><span class="line">print(<span class="string">'Feature Enginnering Complete...'</span>, time.clock())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Train a classifier</span></span><br><span class="line">lg = LogisticRegression(C=<span class="number">4</span>, dual=<span class="literal">True</span>)</span><br><span class="line">lg.fit(x_train, y_train)</span><br><span class="line">print(<span class="string">'Train Complete...'</span>, time.clock())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Prediction</span></span><br><span class="line">y_test = lg.predict(x_test)</span><br><span class="line">print(<span class="string">'Prediction Complete...'</span>, time.clock())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Save results</span></span><br><span class="line">df_test[<span class="string">'class'</span>] = y_test.tolist()</span><br><span class="line">df_test[<span class="string">'class'</span>] = df_test[<span class="string">'class'</span>] + <span class="number">1</span></span><br><span class="line">df_result = df_test.loc[:, [<span class="string">'id'</span>, <span class="string">'class'</span>] ]</span><br><span class="line">df_result.to_csv(<span class="string">'./result.csv'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h2 id="更多-5"><a href="#更多-5" class="headerlink" title="更多"></a>更多</h2><p><a href="https://zhuanlan.zhihu.com/p/29185180" target="_blank" rel="noopener external nofollow noreferrer">什么是<strong>Baseline Model</strong>？记和硅谷大佬的一次吃饭</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/54030260" target="_blank" rel="noopener external nofollow noreferrer">达观杯文本智能处理挑战赛冠军解决方案</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/52461173" target="_blank" rel="noopener external nofollow noreferrer">“达观杯”挑战赛：单模型带你上前10</a></p>
<p><a href="https://www.cnblogs.com/croso/p/5349517.html" target="_blank" rel="noopener external nofollow noreferrer">11 款开放中文分词引擎评测</a></p>
<p>文本分类任务基本框架：</p>
<p>文本——<strong><font color=red>特征工程</font></strong>（上限）——<strong><font color=red>分类器</font></strong>（效能）——类别。</p>
<p>文本特征提取：</p>
<ul>
<li>经典文本特征（前人研究）<ul>
<li>TF，TF-IDF，Doc2vec，Word2vec<ul>
<li><a href="https://blog.csdn.net/u012050154/article/details/60600499" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/u012050154/article/details/60600499</a></li>
</ul>
</li>
</ul>
</li>
<li>手工构造（数据挖掘）<ul>
<li>寻找可能影响分类的新特征<ul>
<li>比如，文章的长度</li>
</ul>
</li>
<li>相关构造<ul>
<li>多项式扩展</li>
</ul>
</li>
</ul>
</li>
<li>神经网络提取（利用某一层输出作为文本特征）<ul>
<li>对于10万量级，传统优于深度学习算法；当百万级数据时，反之。（不绝对）</li>
</ul>
</li>
</ul>
<p>特征选择：</p>
<ul>
<li>减少维数灾难，计算量降低</li>
<li>降低学习任务难度</li>
<li><strong>方法</strong>：包裹式，嵌入式，过滤式（见西瓜书特征选择部分）</li>
</ul>
<p>特征降维：</p>
<ul>
<li>有监督降维：LDA（西瓜书第三章）</li>
<li>无监督降维：LSA，Ida，NMF</li>
</ul>
<hr>
<p>主要分类器：</p>
<ul>
<li>基于sklearn实现<ul>
<li><strong>逻辑回归</strong><ul>
<li>简单快速，可解释（优先使用），稀疏特征</li>
</ul>
</li>
<li>支持向量机</li>
<li>朴素贝叶斯</li>
<li>随机森林</li>
<li>bagging</li>
</ul>
</li>
<li><strong>Lightgbm</strong>（和xgboost一样，效果更好，杀器！基于GBDT算法实现，见《统计学习方法》8.4.3节）</li>
<li><strong>xgboost</strong></li>
<li>神经网络</li>
</ul>
<p>提分关键：<strong>多个单模型进行融合</strong>。（必做，见西瓜书第八章）</p>
<ul>
<li>投票法</li>
<li>学习法</li>
</ul>
<blockquote>
<p>前提，各个模型<strong>好而不同</strong>。</p>
<p>保证差异：不同的数据集，不同的分类器。</p>
</blockquote>
<p>代码介绍：</p>
<p><a href="https://github.com/MLjian/TextClassificationImplement" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/MLjian/TextClassificationImplement</a></p>
<p>有两个方法，机器学习ML，和深度学习DL。</p>
<blockquote>
<p>可以先过一遍for beginner。</p>
</blockquote>
<h1 id="BD-短视频内容理解与推荐竞赛"><a href="#BD-短视频内容理解与推荐竞赛" class="headerlink" title="BD-短视频内容理解与推荐竞赛"></a>BD-短视频内容理解与推荐竞赛</h1><p><strong>比赛地址</strong>：<a href="https://biendata.com/competition/icmechallenge2019/" target="_blank" rel="noopener external nofollow noreferrer">https://biendata.com/competition/icmechallenge2019/</a></p>
<h2 id="问题简述-6"><a href="#问题简述-6" class="headerlink" title="问题简述"></a>问题简述</h2><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a><strong>背景介绍</strong></h3><p>近年来，机器学习在图像识别、语音识别等领域取得了重大进步，但在视频内容理解领域仍有许多问题需要探索。字节跳动公司旗下的TikTok（抖音海外版）短视频APP在全球范围内的用户中获得非常多的好评，短视频的内容理解与推荐技术成为了我们关注的焦点。</p>
<p>一图胜千言，仅一张图片就包含大量信息，难以用几个词来描述，更何况是短视频这种富媒体形态。面对短视频内容理解的难题，字节跳动作为一家拥有海量短视频素材和上亿级用户行为数据的公司，通过视频内容特征和用户行为数据，可以有充足的数据来预测用户对短视频的喜好。</p>
<p>本次竞赛提供多模态的短视频内容特征，包括视觉特征、文本特征和音频特征，同时提供了脱敏后的用户点击、喜爱、关注等交互行为数据。参赛者需要通过一个视频及用户交互行为数据集对用户兴趣进行建模，然后预测该用户在另一视频数据集上的点击行为。</p>
<p>竞赛最终根据参赛者提交的模型和预测结果，依据评分进行排名，具体见评估准则。</p>
<h3 id="竞赛任务"><a href="#竞赛任务" class="headerlink" title="竞赛任务"></a><strong>竞赛任务</strong></h3><p>通过构建深度学习模型，预测测试数据中每个用户id在对应作品id上<strong>是否浏览完作品和是否对作品点赞的概率加权结果</strong>。 本次比赛使用 AUC（ROC曲线下面积）作为评估指标。AUC 越高，代表结果越优，排名越靠前。</p>
<p><strong>赛道1</strong></p>
<p>大规模数据集，亿级别的数据信息。</p>
<p><strong>赛道2</strong></p>
<p>小规模数据集，千万级别的数据信息。</p>
<p>讨论区</p>
<p>参赛队伍可以在比赛页面的讨论区进行讨论。如有赛题和数据方面的问题，请发邮件至AI-Lab-challenge@bytedance.com。如有竞赛提交方面的问题，请发邮件至support@biendata.com。</p>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>格式</th>
<th>链接</th>
<th>提取码</th>
</tr>
</thead>
<tbody>
<tr>
<td>track1_sample_submission.zip</td>
<td>zip (377.7 MB)</td>
<td><a href="https://pan.baidu.com/s/1QvoRbJMizWZtLvBIT2B9Bg" target="_blank" rel="noopener external nofollow noreferrer">https://pan.baidu.com/s/1QvoRbJMizWZtLvBIT2B9Bg</a></td>
<td>8qrs</td>
</tr>
<tr>
<td>track2_sample_submission.zip</td>
<td>zip (24.5 MB)</td>
<td><a href="https://pan.baidu.com/s/1GeiRfQ0lV7NcC1JSQ5nTMA" target="_blank" rel="noopener external nofollow noreferrer">https://pan.baidu.com/s/1GeiRfQ0lV7NcC1JSQ5nTMA</a></td>
<td>667i</td>
</tr>
</tbody>
</table>
</div>
<p><img data-src="https://biendata-cdn.b0.upaiyun.com/media/competition/2019/02/14/20190214_NRMhEvI.png" alt=""></p>
<h3 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h3><blockquote>
<p> <a href="https://github.com/challenge-ICME2019-Bytedance/Bytedance_ICME_challenge" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/challenge-ICME2019-Bytedance/Bytedance_ICME_challenge</a></p>
</blockquote>
<p>竞赛提供的baseline方法使用到以下5个特征：user_id, user_city, item_id，author_id，item_city</p>
<p> <strong>- TRACK2 LIKE TASK:</strong><br>   auc: 86.5%<br>   #————————————params————————————-#<br>   embedding_size = 40<br>   optimizer = adam<br>   lr = 0.0005</p>
<p> <strong>- TRACK FINISH TASK:</strong><br>   auc: 69.8%<br>   #————————————params————————————-#<br>   embedding_size = 40<br>   optimizer = adam<br>   lr = 0.0001</p>
<p>主程序：（需要调用其它接口）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> get_dataset_path_list</span><br><span class="line"><span class="keyword">from</span> common.model_args <span class="keyword">import</span> init_model_args</span><br><span class="line"><span class="keyword">from</span> models.model <span class="keyword">import</span> RecommendModelHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># basic logging setup for tf</span></span><br><span class="line">  os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line">  tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># init necessary args</span></span><br><span class="line">  args = init_model_args()</span><br><span class="line"></span><br><span class="line">  <span class="comment">#train_dataset_path_list = get_dataset_path_list(train_dataset_path, sub_str="track2_train_time.txt")</span></span><br><span class="line">  train_dataset_path_list = [args.training_path]</span><br><span class="line"></span><br><span class="line">  val_dataset_path_list = [args.validation_path]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"training path list: &#123;&#125;"</span>.format(train_dataset_path_list)</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"training path list: &#123;&#125;"</span>.format(val_dataset_path_list)</span><br><span class="line"></span><br><span class="line">  save_model_dir = args.save_model_dir</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"saving model in ... &#123;&#125;"</span>.format(save_model_dir)</span><br><span class="line"></span><br><span class="line">  optimizer = args.optimizer</span><br><span class="line">  learning_rate  = args.lr</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"we use &#123;&#125; as optimizer"</span>.format(optimizer)</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"learning rate is set as  &#123;&#125;"</span>.format(learning_rate)</span><br><span class="line"></span><br><span class="line">  batch_size = args.batch_size</span><br><span class="line">  embedding_size = args.embedding_size</span><br><span class="line">  num_epochs = args.num_epochs</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"batch size: &#123;&#125;"</span>.format(batch_size)</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"embedding size: &#123;&#125;"</span>.format(embedding_size)</span><br><span class="line"></span><br><span class="line">  task = args.task</span><br><span class="line">  track = args.track</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"track: &#123;&#125;, task: &#123;&#125;"</span>.format(track, task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  model = RecommendModelHandler(</span><br><span class="line">      train_dataset_path=train_dataset_path_list,</span><br><span class="line">      val_dataset_path=val_dataset_path_list,</span><br><span class="line">      save_model_dir=save_model_dir,</span><br><span class="line">      num_epochs=num_epochs,</span><br><span class="line">      optimizer=optimizer,</span><br><span class="line">      batch_size= batch_size,</span><br><span class="line">      embedding_size=embedding_size,</span><br><span class="line">      task=task,</span><br><span class="line">      track=track,</span><br><span class="line">      learning_rate=args.lr)</span><br><span class="line"></span><br><span class="line">  model.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多-6"><a href="#更多-6" class="headerlink" title="更多"></a>更多</h2><h1 id="某某赛（待更新）"><a href="#某某赛（待更新）" class="headerlink" title="某某赛（待更新）"></a>某某赛（待更新）</h1><p><strong>比赛地址</strong>：</p>
<h2 id="问题简述-7"><a href="#问题简述-7" class="headerlink" title="问题简述"></a>问题简述</h2><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更多-7"><a href="#更多-7" class="headerlink" title="更多"></a>更多</h2>]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能小讲座简述</title>
    <url>/Intro-to-AI-Lecture/</url>
    <content><![CDATA[<ul>
<li>了解人工智能技术的基本内容</li>
<li>现有领域中如何应用（非常规的实现，如数据的深度挖掘）<a id="more"></a></li>
<li>共同构建在产品设计、制造优化中的应用</li>
</ul>
<h1 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h1><ul>
<li>决策【增强学习】<ul>
<li>算法辅助人工决策<ul>
<li>机器学习+专家系统螺旋式上升</li>
</ul>
</li>
</ul>
</li>
<li>知识【知识图谱、贝叶斯网络】<ul>
<li>推断预测，分析归因<ul>
<li>多维优化，数据可视化</li>
</ul>
</li>
</ul>
</li>
<li>信息【自然语言处理】<ul>
<li>机器阅读文本<ul>
<li>异常识别</li>
<li>利用NLP从资讯生成投资报告</li>
</ul>
</li>
</ul>
</li>
<li>数据【机器学习、深度学习】<ul>
<li>辅助发现关联性（非结构化数据）</li>
<li>时间序列的模式匹配</li>
<li>阿里公安大脑（POI的现实版）</li>
</ul>
</li>
<li>物联网【卷积神经网络】<ul>
<li>混沌效应（关键物体）</li>
<li>感知智能</li>
</ul>
</li>
</ul>
<p>More： 游戏AI，个性化3D服装匹配$\longrightarrow$个性化服饰推荐系统，医学辅助诊断，监督学习式AI教育……</p>
<h1 id="范畴简述"><a href="#范畴简述" class="headerlink" title="范畴简述"></a>范畴简述</h1><ul>
<li>AI<ul>
<li>符号主义$\longrightarrow$专家系统$\longrightarrow$知识图谱（保真联想）$\longrightarrow$认知智能$\longrightarrow$感知智能【视听味触嗅等】（潜联想）</li>
</ul>
</li>
<li>软件开发<ul>
<li>面向对象（初等联想，基础实界生成）</li>
</ul>
</li>
<li>数学$\longleftarrow$物理（宏观、微观）<ul>
<li>方差$\longrightarrow$贝叶斯$\longrightarrow$马尔可夫（局部性假设）</li>
</ul>
</li>
<li>哲学<ul>
<li>毕达哥拉斯（数化）$\longrightarrow$苏格拉底$\longrightarrow$柏拉图$\longrightarrow$亚里士多德（形式逻辑）【演绎，保真】</li>
<li>中式思维【辩证，不定联想】</li>
</ul>
</li>
<li>历史blablablabla……</li>
<li>佛学<ul>
<li>空，<code>0</code></li>
</ul>
</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>状态优化【节点图】<ul>
<li>过程优化</li>
<li>布局优化</li>
</ul>
</li>
<li>异常检测、预测运维<ul>
<li>基于分类</li>
<li>基于预测<ul>
<li><strong><a href="https://zh.wikipedia.org/zh-hans/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8" target="_blank" rel="noopener external nofollow noreferrer">朴素贝叶斯</a></strong>？</li>
</ul>
</li>
</ul>
</li>
<li>计算机视觉<ul>
<li>空间测量</li>
<li>空间建模</li>
</ul>
</li>
</ul>
<hr>
<p>多任务的资源最优选择。</p>
<ul>
<li>任务$\longrightarrow$画像$\longrightarrow$搜索$\longleftrightarrow$布局$\longleftarrow$模板$\longleftarrow$元素。</li>
</ul>
<h1 id="AI赋能企业"><a href="#AI赋能企业" class="headerlink" title="AI赋能企业"></a>AI赋能企业</h1><h2 id="爱智慧简介"><a href="#爱智慧简介" class="headerlink" title="爱智慧简介"></a>爱智慧简介</h2><ul>
<li>华为$\longrightarrow$爱智慧，金融$\longrightarrow$多行业化</li>
<li>专注人工智能（计算机、数学）</li>
<li>深圳市高新技术企业</li>
</ul>
<p>人工智能：</p>
<ul>
<li>感知（商汤、科大讯飞……）</li>
<li><strong>认知</strong></li>
<li>自动驾驶</li>
</ul>
<p><strong>——————统一框架——————</strong></p>
<p><img data-src="https://i.imgur.com/Syyp1b9.png" alt="统一框架"></p>
<h1 id="具体算法"><a href="#具体算法" class="headerlink" title="具体算法"></a>具体算法</h1><h2 id="Pareto优化"><a href="#Pareto优化" class="headerlink" title="Pareto优化"></a>Pareto优化</h2><p>多目标优化。</p>
<p>背景：九家物流供应链巨头成立合资公司，需要兼顾九家股东利益。</p>
<ul>
<li>海外工厂、仓储，清关，国内工厂、仓储，零售，消费者。</li>
</ul>
<p>使用<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E7%B4%AF%E6%89%98%E6%9C%80%E4%BC%98" target="_blank" rel="noopener external nofollow noreferrer"><strong>帕累托最优</strong></a>。（<strong>资源分配</strong>的一个最基本要求；提高效率）</p>
<ul>
<li><p><font color=red><strong>资源分配可视作一个市场</strong></font>（资源：人、资金、货物……）</p>
</li>
<li><p>设置多个<strong>目标函数</strong>（九家公司的利益，min、max、不等式……）</p>
<p>确定多个<strong>约束函数</strong>（一些参数关联，系统中固有的等式、不等式……） </p>
</li>
<li><p>在约束一定的情况下，找到一个状态，在这种状态下，增加任何一个目标，都会造成其它目标的损失</p>
<p>（ 帕累托改进：通过改变而使得某一方的福利提高，而没有任何其他一方的福利受损。）</p>
</li>
<li><p>充分利用遗传算法</p>
</li>
</ul>
<hr>
<p><strong>金融领域的应用</strong></p>
<p>基金收益率排序：按目标函数（区间收益率）排序$N$</p>
<p>影响因素排序：根据多因子，生成多个排序序列$S_i$</p>
<p>——计算序列相似度，选择出最相关、最重要的因子。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-hans/PageRank" target="_blank" rel="noopener external nofollow noreferrer">粗糙集</a>将股票间的优劣关系通过每只股票的Si的优势类[Si]体现出来。</p>
</blockquote>
<hr>
<p>利用相关性的离散排序：实质就是搜索算法的<a href="https://zh.wikipedia.org/zh-hans/PageRank" target="_blank" rel="noopener external nofollow noreferrer">PageRank</a>（TF-IDF指标）</p>
<h2 id="GP算法"><a href="#GP算法" class="headerlink" title="GP算法"></a>GP算法</h2><p><strong>基于单类分类<a href="https://zhuanlan.zhihu.com/p/27555501" target="_blank" rel="noopener external nofollow noreferrer">高斯过程</a>（密度）异常序列检测OCC_GP</strong>。</p>
<p><strong>目标</strong>：尽可能早地发现数据流的异常$\longrightarrow$尽可能早地预警。</p>
<p><strong>难度</strong>：</p>
<ul>
<li>高维度，<font color=red><strong>小样本</strong></font><ul>
<li>软件工程，程序调试能力（边界情况的预测）</li>
</ul>
</li>
<li>异常类的样本常常很难获取，缺少负例（失败）样本</li>
<li>自适应？</li>
<li>如何利用专业的领域故障分析能力<strong>解释</strong>结果？</li>
</ul>
<p>核心：【优化函数】基于4种高斯和函数。（混合高斯：就是叠加的正态函数）</p>
<ul>
<li>本质：函数变量f的任意组合，服从均值为0的高斯联合分布$p(f|X)=N(o,K)$。</li>
</ul>
<p>高斯过程GP算法【<strong>分类</strong>】：</p>
<ul>
<li>高斯过程即正态随机过程，具有灵活的非参数特性，对预测结果进行有效估计。</li>
<li>基于贝叶斯方法和训练数据来求出高斯和函数的参数（参数估计，同时利用EM算法迭代优化）。</li>
<li><strong>先验传递</strong>（转移）</li>
</ul>
<hr>
<p>思路：（如图）</p>
<p><img data-src="https://i.imgur.com/VOW2Qwm.png" alt="时序异常检测"></p>
<ul>
<li>参数离散化，构建样本空间</li>
<li>绘制<strong>时序参数包络线</strong></li>
<li>分析异常</li>
</ul>
<p>一些小问题：</p>
<ul>
<li>值的归一化（逻辑回归）$\longrightarrow$导向分类问题</li>
<li>包络线与时间序列位置相关，可能要利用（隐马尔可夫建模，以及<strong>模式识别</strong>的定位）</li>
<li>如何度量不确定性（检测的粗糙度）</li>
</ul>
<hr>
<p>发射任务：</p>
<ul>
<li>恒定路线预测</li>
<li>多路径预测</li>
</ul>
<h2 id="HTM算法"><a href="#HTM算法" class="headerlink" title="HTM算法"></a>HTM算法</h2><p><a href="https://numenta.org/resources/HTM_CorticalLearningAlgorithms_chn.pdf" target="_blank" rel="noopener external nofollow noreferrer">层级时序存储器算法</a>（Hierarchical Temporal Memory，HTM），皮质算法。</p>
<ul>
<li>模拟人体大脑新皮质层（noecortex）</li>
<li>时空<strong>数据流</strong>建模</li>
<li>持续学习（Online）幵依赖于储存的大量模式序列</li>
<li>自调节$\longrightarrow$（新常态？）</li>
<li>主要是检测<strong>波动式异常</strong></li>
</ul>
<p>长期序列高斯分布（基准函数），短期序列高斯分布（异常检测函数）。</p>
<ul>
<li>若检测到短期异常，还需要<strong>验证</strong>假阳性</li>
<li>需要调参：短期窗口大小的选择（颗粒度）</li>
</ul>
<h3 id="分布序列预测"><a href="#分布序列预测" class="headerlink" title="分布序列预测"></a>分布序列预测</h3><p>多个分支序列（映射到布隆过滤器？）。</p>
<ul>
<li>设置多个分支的<strong>误差函数</strong>（如方差），如果方差过高就异常。</li>
<li>也可以计算两个序列的<strong>联合概率</strong>异常加权得分。</li>
<li>多个联合相关性模型（<strong>短期异常压缩</strong>）【高斯协方差核函数】<ul>
<li>合并在时间上接近但不完全一致的分支异常</li>
</ul>
</li>
</ul>
<hr>
<p><strong>相似模式识别</strong>？（比如，设置一个短期窗口的<a href="https://blog.csdn.net/Androidlushangderen/article/details/47134393" target="_blank" rel="noopener external nofollow noreferrer">相似哈希</a>队列）</p>
<ul>
<li>一个混合的序列可能还需要<strong>基函数分解</strong>（如，Fourier解析。需要专业知识，必须要知道基函数）</li>
</ul>
<p>（<font color=red><strong>领域知识的应用</strong></font>）</p>
<hr>
<p>两类任务：</p>
<ul>
<li>时序$\longrightarrow$匹配、预测</li>
<li>平面数据（不带时序）$\longrightarrow$数据应用</li>
</ul>
<h2 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a><a href="https://zh.wikipedia.org/zh-hans/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB" target="_blank" rel="noopener external nofollow noreferrer">模拟退火算法</a></h2><p>（嵌套多约束条1件。）</p>
<p>数学模型：玻尔兹曼目标函数</p>
<script type="math/tex; mode=display">
f(\phi)=e^{\beta C(\phi)},\phi为状态空间，C为成本约束函数，\beta为退火温度控制参数</script><p>使用<a href="http://www.picb.ac.cn/~xiaohang/vimwiki/study/course/pattern_recognition/courses/10/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E6%B3%95.pdf" target="_blank" rel="noopener external nofollow noreferrer">Metropolis接受准则</a>。</p>
<script type="math/tex; mode=display">
p= \begin{cases} 1, & \text {if 温度高于临界温度} \\ exp (\frac{E(n-1)-E(n)}{T}), & \text{if 温度低于临界温度} \end{cases}</script><blockquote>
<p>例如：C指代了多个约束——6个约束函数。设计总成本函数。</p>
</blockquote>
<h2 id="知识图谱-思维导图"><a href="#知识图谱-思维导图" class="headerlink" title="知识图谱/思维导图"></a>知识图谱/思维导图</h2><p>即（一阶）联想图。</p>
<blockquote>
<p>树结构？最常用。</p>
<ul>
<li>降低新知识的搜索深度</li>
<li>保留全面性</li>
</ul>
<p>对于非层次的复杂联想图，知识图谱的表达能力相当有限。（SPARQL）</p>
<ul>
<li>只保留核心联想（保真联想）</li>
</ul>
</blockquote>
<p>现在没有一个有效的算法来生成<strong>联想</strong>。</p>
<blockquote>
<p>当前知识图谱中所有的联想必须人工生成。</p>
</blockquote>
<p>但可以基于给定的幻想生成元和一定数量的联想规则，利用NLP基于文献快速生成知识图谱。</p>
<h3 id="机器学习算法分类系统"><a href="#机器学习算法分类系统" class="headerlink" title="机器学习算法分类系统"></a>机器学习算法分类系统</h3><p>可采用知识图谱+四象限法。</p>
<ul>
<li>无监督学习<ul>
<li>聚类<ul>
<li>k-means<ul>
<li>图割</li>
</ul>
</li>
<li>SVM（<a href="https://blog.csdn.net/v_JULY_v/article/details/7624837" target="_blank" rel="noopener external nofollow noreferrer">支持向量机</a>）</li>
</ul>
</li>
<li>降维</li>
</ul>
</li>
<li>监督学习<ul>
<li>分类</li>
<li>回归</li>
</ul>
</li>
</ul>
<h2 id="视觉算法"><a href="#视觉算法" class="headerlink" title="视觉算法"></a>视觉算法</h2><h3 id="单孔相机成像原理"><a href="#单孔相机成像原理" class="headerlink" title="单孔相机成像原理"></a>单孔相机成像原理</h3><p>成像坐标系映射：</p>
<ul>
<li>图像物理坐标系$\longrightarrow$像素坐标系$\longrightarrow$相机坐标系$\longrightarrow$世界坐标系。</li>
</ul>
<p>考虑因素：径向畸变和切向畸变。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>测量身体尺寸（$&lt;1cm$）。（采用低成本紧身衣表面印制编码图【特征点】，利用计算机视觉<strong>还原立体</strong>尺寸，利用人体测量学，样条插值，最小二乘法，初期校正系统……）</p>
<p>数字孪生：游戏<a href="https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E4%BD%9C%E6%8D%95%E6%8D%89" target="_blank" rel="noopener external nofollow noreferrer">动态捕捉技术</a>？</p>
<hr>
<p>以上。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>CS挑战营</title>
    <url>/CS%E6%8C%91%E6%88%98%E8%90%A5/</url>
    <content><![CDATA[<p>CS挑战营。<a id="more"></a></p>
<h1 id="Pre-intro"><a href="#Pre-intro" class="headerlink" title="Pre-intro"></a>Pre-intro</h1><p>数学在CS中的重要性。《程序员面试宝典》，《编程之美》。</p>
<p>推荐资源：</p>
<ul>
<li>MIT-机器学习相关数学。（PPT-P20）</li>
<li>Video-计算机中的数学系列</li>
</ul>
<p>Interesting：直径恒定的异体图形（挑战者号事故）</p>
<p>Trick：<code>sizeof(dxy)/sizeof(dxy[0])</code>获取数组元素数量</p>
<p><img data-src=CS挑战营/1557722177514.png width=300></p>
<h1 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h1><p>Slides: <a href="./L01-计算思维-CS精英挑战营.pdf">L01-计算思维-CS精英挑战营</a> </p>
<div class="pdfobject-container" data-target="./L01-计算思维-CS精英挑战营.pdf" data-height="500px"></div>
<h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>CS精英挑战营第1期，2019。</p>
<p>似乎使用雨课堂作为教学工具已成为主流。现在几乎所有的线下课都离不开雨课堂的辅作用。</p>
<p>似乎人们还在等待最终时刻的到来，只剩下最后一分钟。</p>
<p>嗯。</p>
<p>可计算性的歧义：机器可理解性到实际运行可期望（在有限、有效时间内求解问题）。</p>
<p>课程定位：理解一下背后的<strong><font color=red>思想</font></strong>。</p>
<h2 id="引例：楼梯"><a href="#引例：楼梯" class="headerlink" title="引例：楼梯"></a>引例：楼梯</h2><p>经典例题：下楼梯（动态规划）。——<a href="https://en.wikipedia.org/wiki/And%E2%80%93or_tree" target="_blank" rel="noopener external nofollow noreferrer"><strong><font color=red>与或图</font></strong></a>。</p>
<ul>
<li>循环枚举法：语音识别例子，暴力匹配优化方法。可以写成迭代或递归。</li>
</ul>
<p>热身完毕。</p>
<h2 id="跳马"><a href="#跳马" class="headerlink" title="跳马"></a>跳马</h2><p>右向跳马。先数字化棋盘，使得位置可以被计算。同时操作的可计算化，坐标的增量变化。</p>
<p>将问题映射到数学空间中去！</p>
<p>确定：递归基+递归方程。</p>
<p>编程Tip：平行数组。两个数组，成对使用。用数组存储跳法，用循环实现遍历。</p>
<p><strong>算无遗策</strong>！！！</p>
<p>另外，可以用结构数组代替平行数组。</p>
<p><strong>重构</strong>！！！</p>
<h2 id="分书"><a href="#分书" class="headerlink" title="分书"></a>分书</h2><p>博弈与权衡。如何将问题数学化十分关键！</p>
<p>观察约束。获得二分图匹配。</p>
<p>回溯法实现遍历。（消除递归的耦合干扰）</p>
<p>通过临时变量（拷贝）分书方案状态，实现不用回溯。</p>
<h2 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h2><p>利用统计每行每列每对角线来判断是否合法。</p>
<h2 id="人鬼渡河"><a href="#人鬼渡河" class="headerlink" title="人鬼渡河"></a>人鬼渡河</h2><p>建立<strong>数学模型</strong>！！！考察变化的量，寻找可算的量。状态数字化。</p>
<h1 id="放球问题"><a href="#放球问题" class="headerlink" title="放球问题"></a>放球问题</h1><p>Slides: <a href="http://www.xuetangx.com/asset-v1:xuetangx+CS001+2019_T1+type@asset+block/Math-day1.pdf" target="_blank" rel="noopener external nofollow noreferrer">here</a></p>
<div class="pdfobject-container" data-target="./Math-day1.pdf" data-height="500px"></div>
<h1 id="抽象思维"><a href="#抽象思维" class="headerlink" title="抽象思维"></a>抽象思维</h1><p>Slides: <a href="./L03-抽象思维-CS精英挑战营">L03-抽象思维-CS精英挑战营</a> </p>
<div class="pdfobject-container" data-target="./L03-抽象思维-CS精英挑战营" data-height="500px"></div>
<h1 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h1><p>Slides: <a href="./day2-IEP.pdf">day2-IEP.pdf</a> </p>
<div class="pdfobject-container" data-target="./day2-IEP.pdf" data-height="500px"></div>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>Slides:  <a href="./190516.排序.pdf">190516.排序.pdf</a> </p>
<div class="pdfobject-container" data-target="./190516.排序.pdf" data-height="500px"></div>
<h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><p>Slides:  <a href="./190517.去重.pdf">190517.去重.pdf</a> </p>
<div class="pdfobject-container" data-target="190517.去重.pdf" data-height="500px"></div>
<h1 id="递推关系求解"><a href="#递推关系求解" class="headerlink" title="递推关系求解"></a>递推关系求解</h1><h1 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h1><h1 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h1><p><a href="./可持久化数据结构研究.pdf">可持久化数据结构研究.pdf</a></p>
<h1 id="OJ题集"><a href="#OJ题集" class="headerlink" title="OJ题集"></a>OJ题集</h1><h2 id="过河问题"><a href="#过河问题" class="headerlink" title="过河问题"></a>过河问题</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>农夫(Human)过河。一个农夫带着一只狼(Wolf)，一只羊(Sheep)和一些菜(Vegetable)过河。河边只有一条船，由于船太小，只能装下农夫和他的一样东西。在无人看管的情况下，狼要吃羊，羊要吃菜，请问农夫如何才能使三样东西平安过河?</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>没有输入</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>输出一行，为最终的过河方式，方案格式为 过河人员、回来人员、过河人员、回来人员、…、过河人员。</p>
<p>过去和回来的人员之间，用空格隔开。</p>
<p>以四个生物英文的首字母代指对应的生物(H-&gt;Human,W-&gt;Wolf,S-&gt;Sheep,V-&gt;Vegetable)</p>
<p>具体见样例输出。</p>
<p>输出任意可行方案即可。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><p>无</p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HS H HW H</span><br></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h3><p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<p>样例输出仅用于解释输出格式，非答案。</p>
<p>在此样例输出描述的方案为：</p>
<p>人和羊过去，人回来，人和狼过去，人回来，此时对岸狼把羊吃了，不符合题目要求，故非正确答案。</p>
<h3 id="Code-打表"><a href="#Code-打表" class="headerlink" title="Code 打表"></a>Code 打表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	printf(<span class="string">"HS H HW HS HV H HS\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分水问题"><a href="#分水问题" class="headerlink" title="分水问题"></a>分水问题</h2><hr>
<h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>有A、B和C三个杯子，容量依次为80ml、50ml和30ml。现在A杯中装满了80ml的水，B和C都是空杯。A中的水可以倒入B杯或C杯中，反之，B和C也可以往A中倒，还可以互相倒来倒去。为了计量，对于某一个杯子而言，不是被倒满，就是被倒空。也就是说，要么倒水的杯子空了，要么被倒水的杯子满了，这次倒水操作才会停止。请你编一个程序，将原来的80ml的酒分别倒入A和B两个杯子中，各有40ml。输出每一步的操作。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>没有输入</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>第一行输出一个整数n，表示步骤的数量。</p>
<p>之后有n行，每行表示一个操作，包含两个字母 x 和 y，表示将 x 杯的酒，倒入y中。</p>
<p>输出任意可行方案即可。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><p>无</p>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">A B</span><br><span class="line">A C</span><br><span class="line">B A</span><br><span class="line">C B</span><br></pre></td></tr></table></figure>
<h3 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a><strong>注释</strong></h3><p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<p>样例输出仅用于解释输出格式，非答案。</p>
<p>在此样例输出描述的方案为：</p>
<p>一共有4步</p>
<p>最初状态：（A:80, B:0, C:0）</p>
<ul>
<li>A 倒入 B。（A:30, B:50, C:0) </li>
<li>A 倒入 C。（A:0, B:50, C:30) </li>
<li>B 倒入 A。（A:50, B:0, C:30) </li>
<li>C 倒入 B。（A:50, B:30, C:0)</li>
</ul>
<p>最终，A中有50ml，B中有30ml，C中有0ml，不符合题目要求，故非正确答案。</p>
<h3 id="Code-打表-1"><a href="#Code-打表-1" class="headerlink" title="Code 打表"></a>Code 打表</h3><p><img data-src=CS挑战营/草稿纸-10.jpg width=350></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"7\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A B\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"B C\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"C A\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"B C\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A B\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"B C\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"C A\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带洞N皇后问题"><a href="#带洞N皇后问题" class="headerlink" title="带洞N皇后问题"></a>带洞N皇后问题</h2><hr>
<h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>N皇后问题是一个经典的问题，其目标是在一个N*N的棋盘上的每一行放置1个皇后，并使其不能互相攻击（同一行、同一列、同一斜线上的皇后都会自动攻击）。</p>
<p>现在，我们将棋盘上的一些位置挖洞，挖洞的位置不能放置棋子。此时，问一共有多少种可能的放置方法？</p>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>输入第一行有一个整数N，表示棋盘大小。 接下来会有N行，每行有N个被空格隔开的整数，表示该棋盘位置是否有洞。（0为正常，1为有洞）。</p>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>输出一行，包含一个整数，表示当前N皇后的放置方案数。</p>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 1 0 1</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>1 &lt;= N &lt;= 10</p>
<p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> valid[MAX_N][MAX_N];  <span class="comment">// 棋盘缺陷则为1</span></span><br><span class="line"><span class="keyword">int</span> Num; <span class="comment">// 方案数</span></span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// N 皇后</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">place_state</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> Q[MAX_N];</span><br><span class="line">	<span class="keyword">bool</span> S[MAX_N], L[<span class="number">2</span> * MAX_N + <span class="number">1</span>], R[<span class="number">2</span> * MAX_N + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsValid</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> valid[col][row];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSafe</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row, place_state state)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> state.S[row] &amp;&amp; state.R[col + row] &amp;&amp; state.L[col - row + N];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">place_state <span class="title">GetNewState</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row, place_state state)</span></span>&#123;</span><br><span class="line">	place_state next_state = state;</span><br><span class="line">	next_state.Q[col] = row;</span><br><span class="line">	next_state.S[row] = next_state.R[col + row] = next_state.L[col - row + N] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> next_state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintState</span><span class="params">(place_state state)</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"---------------"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!IsValid(i, j))</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(state.Q[i] == j)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"X"</span>;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" \n"</span>[j==N];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Try</span><span class="params">(<span class="keyword">int</span> col, place_state state)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (col == N + <span class="number">1</span>)&#123; <span class="comment">// 超限</span></span><br><span class="line">		Num ++;</span><br><span class="line">		<span class="comment">// PrintState(state);</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= N; row++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(IsValid(col, row))&#123;</span><br><span class="line">			<span class="keyword">if</span>(!IsSafe(col ,row, state)) <span class="keyword">continue</span>;</span><br><span class="line">			Try(col + <span class="number">1</span>, GetNewState(col, row, state));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">	<span class="keyword">bool</span> tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">			valid[i][j] = !tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	place_state _init;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_N; ++i) _init.S[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>*MAX_N + <span class="number">1</span>; ++i) _init.L[i] = _init.R[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	Try(<span class="number">1</span>, _init);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt; Num &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><hr>
<h3 id="题面描述"><a href="#题面描述" class="headerlink" title="题面描述"></a><strong>题面描述</strong></h3><p>九连环是一款经典的智力玩具，其规则与玩法见<a href="http://chinesepuzzles.org/zh/nine-linked-rings-puzzle/" target="_blank" rel="noopener external nofollow noreferrer">这里</a> 。一个经典的九连环如下图所示。我们按下图的示意，将环从左到右编号。</p>
<p><img data-src="https://dsa.cs.tsinghua.edu.cn/oj/attachment/737d/737d12ac05493543175802701d48fa572c3853dd.png" alt="img"></p>
<p>小C拿个一个九连环玩了七七四十九天，将其中一些环解下了。现在，你拿着这个小C玩过的九连环，问最少需要多少步，可以将所有环解下？其中，一步指将一个环解下，或将一个环挂上。</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a><strong>输入描述</strong></h3><p>第一行一个正整数 n</p>
<p>，表示被解下环的数量。</p>
<p>第二行有 n</p>
<p> 个正整数 </p>
<p>xi</p>
<p>，表示被解下的环的编号。</p>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a><strong>输出描述</strong></h3><p>输出将环解下的最少步数</p>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>0≤n≤9,1≤xi≤9</p>
<p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="翻译机"><a href="#翻译机" class="headerlink" title="翻译机"></a>翻译机</h2><hr>
<h3 id="题面描述-1"><a href="#题面描述-1" class="headerlink" title="题面描述"></a><strong>题面描述</strong></h3><p>为了和外星人愉快的唠嗑，小C准备编写一个全能语言翻译机。他的目标是能够翻译世界上所有的语言，让全世界、全宇宙的生物都无障碍交流！在热血澎湃的思考了一周以后，他迈出了第一步。他准备先写一个简单的语言翻译机。</p>
<p>作为一个简单的翻译机，小C希望其能够帮助人类小A、计算机小B和小C进行愉快的交流。下面是几个常见的话题：</p>
<p>关于星期：</p>
<ul>
<li>人类小A：”Today is Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.” </li>
<li>计算机小B：”Var day=1/2/3/4/5/6/7;” </li>
<li>小C：”Oh, my god. that’s incredible. You know what? I just found that  today is  MMMonday/TTTuesday/WWWednesday/TTThursday/FFFriday/SSSaturday/SSSunday!”</li>
</ul>
<p>关于今天的计划：</p>
<ul>
<li>人类小A：”I want to XXX.” </li>
<li>计算机小B：”Var plan=”XXX”;” </li>
<li>小C：”My god! What should I do today? Let me see. Well, I have an excellent idea! Let us go to XXX.”</li>
</ul>
<p>其中XXX为一个由空格和大小写字母组成的字符串。</p>
<p>关于点餐：</p>
<ul>
<li>人类小A: “N XXX, please.” </li>
<li>计算机小B: “Var item=”XXX”; Var num=N;” </li>
<li><p>小C：”I want one XXX, and one more, and one more, and one more …, and one more.” (共N-1个”and one more”)</p>
<p>其中N为一个整数，XXX为一个由空格和大小写字母组成的字符串。</p>
</li>
</ul>
<p>现在，有小A、小B、小C中有两个相遇了，请你编写程序，将其中一位的话翻译给另外一位听。</p>
<h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行为一个整数T，表示有T句话需要翻译。</p>
<p>接下来有T行，每行包含三个部分 X Y Z。其中X和Y为‘A’，’B‘，’C’中的一种，表示将X的话翻译到Y。(X,Y可能相同)。Z为一句由X说的话，格式如题意所述。</p>
<h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>对于每次翻译请求，输出翻译后的结果。</p>
<h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">A B Today is Monday.</span><br><span class="line">A B I want to buy some eggs.</span><br><span class="line">A B 2 cola, please.</span><br><span class="line">B C Var day&#x3D;3;</span><br><span class="line">B C Var plan&#x3D;&quot;shutdown&quot;;</span><br><span class="line">B C Var item&#x3D;&quot;battery&quot;; Var num&#x3D;3;</span><br><span class="line">C A Oh, my god. that&#39;s incredible. You know what? I just found that today is MMMonday!</span><br><span class="line">C A My god! What should I do today? Let me see. Well, I have an excellent idea! Let us go to eat the keyboard.</span><br><span class="line">C A I want one mountain, and one more.</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Var day&#x3D;1;</span><br><span class="line">Var plan&#x3D;&quot;buy some eggs&quot;;</span><br><span class="line">Var item&#x3D;&quot;cola&quot;; Var num&#x3D;2;</span><br><span class="line">Oh, my god. that&#39;s incredible. You know what? I just found that today is WWWednesday!</span><br><span class="line">My god! What should I do today? Let me see. Well, I have an excellent idea! Let us go to shutdown.</span><br><span class="line">I want one battery, and one more, and one more.</span><br><span class="line">Today is Monday.</span><br><span class="line">I want to eat the keyboard.</span><br><span class="line">2 mountain, please.</span><br></pre></td></tr></table></figure>
<h3 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>T ≤ 30</p>
<p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a><strong>提示</strong></h3><p>按照英语语法，可数名词单复数形式应不同。此处为了简便，忽略该语法，直接照搬原话中的词即可。</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>变态模拟题。</p>
<p>技巧：可以<strong>通过恒等映射来排查错误</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">string weekTable[8] &#x3D; &#123;&quot;&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;&#125;;</span><br><span class="line"></span><br><span class="line">class Idea&#123;</span><br><span class="line">public:</span><br><span class="line">	string task; &#x2F;&#x2F; week, plan, order</span><br><span class="line">	int var;</span><br><span class="line">	string varString, input;</span><br><span class="line">	char varCharString[100];</span><br><span class="line">	void GetIdea(char type)&#123;</span><br><span class="line">		cin &gt;&gt; input;</span><br><span class="line">		switch(type)&#123;</span><br><span class="line">			case &#39;A&#39;: &#x2F;&#x2F; human</span><br><span class="line">				if(input &#x3D;&#x3D; &quot;Today&quot;)&#123; &#x2F;&#x2F; week</span><br><span class="line">					cin &gt;&gt; input; cin &gt;&gt; varString;</span><br><span class="line">					varString &#x3D; varString.substr(0, varString.length()-1);</span><br><span class="line">					task &#x3D; &quot;week&quot;;</span><br><span class="line">					for(int i &#x3D; 1; i &lt; 8; ++i)</span><br><span class="line">						if(varString &#x3D;&#x3D; weekTable[i]) var &#x3D; i;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(input &#x3D;&#x3D; &quot;I&quot;)&#123; &#x2F;&#x2F; plan</span><br><span class="line">					cin &gt;&gt; input; cin &gt;&gt; input;</span><br><span class="line">					char tmp;</span><br><span class="line">					int i &#x3D; 0; scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;.&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line">					task &#x3D; &quot;plan&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					var &#x3D; stoi(input);</span><br><span class="line">					char tmp;</span><br><span class="line">					int i &#x3D; 0; scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;,&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line">					cin &gt;&gt; input;</span><br><span class="line">					task &#x3D; &quot;order&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">			case &#39;B&#39;: &#x2F;&#x2F; computer</span><br><span class="line">				char tmp;</span><br><span class="line">				cin &gt;&gt; tmp;</span><br><span class="line">				if(tmp &#x3D;&#x3D; &#39;d&#39;)&#123; &#x2F;&#x2F; week</span><br><span class="line">					cin &gt;&gt; input;</span><br><span class="line">					int pos1 &#x3D; input.find(&#39;&#x3D;&#39;);</span><br><span class="line">					int pos2 &#x3D; input.find(&#39;;&#39;);</span><br><span class="line">					var &#x3D; stoi(input.substr(pos1 + 1, pos2 - pos1 - 1));</span><br><span class="line">					task &#x3D; &quot;week&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(tmp &#x3D;&#x3D; &#39;p&#39;)&#123; &#x2F;&#x2F; plan</span><br><span class="line">					do&#123; cin &gt;&gt; tmp; &#125; while(tmp !&#x3D;&#39;&quot;&#39;);</span><br><span class="line">					int i &#x3D; 0;</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;&quot;&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line">					do&#123; cin &gt;&gt; tmp; &#125; while(tmp !&#x3D;&#39;;&#39;);</span><br><span class="line">					task &#x3D; &quot;plan&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					do&#123; cin &gt;&gt; tmp; &#125; while(tmp !&#x3D;&#39;&quot;&#39;);</span><br><span class="line">					int i &#x3D; 0;</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;&quot;&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line">					do&#123; cin &gt;&gt; tmp; &#125; while(tmp !&#x3D;&#39;;&#39;);</span><br><span class="line"></span><br><span class="line">					cin &gt;&gt; input; cin &gt;&gt; varString;</span><br><span class="line">					int pos3 &#x3D; varString.find(&#39;&#x3D;&#39;);</span><br><span class="line">					int pos4 &#x3D; varString.find(&#39;;&#39;);</span><br><span class="line">					var &#x3D; stoi(varString.substr(pos3 + 1, pos4 - pos3 - 1));</span><br><span class="line">					task &#x3D; &quot;order&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">			case &#39;C&#39;: &#x2F;&#x2F; dummy</span><br><span class="line">				if(input &#x3D;&#x3D; &quot;Oh,&quot;)&#123; &#x2F;&#x2F; week</span><br><span class="line">					do&#123;cin &gt;&gt; input;&#125; while(input !&#x3D; &quot;is&quot;);</span><br><span class="line">					cin &gt;&gt; varString;</span><br><span class="line">					varString &#x3D; varString.substr(2, varString.length()-1 - 2);</span><br><span class="line">					task &#x3D; &quot;week&quot;;</span><br><span class="line">					for(int i &#x3D; 1; i &lt; 8; ++i)</span><br><span class="line">						if(varString &#x3D;&#x3D; weekTable[i]) var &#x3D; i;</span><br><span class="line">					task &#x3D; &quot;week&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(input &#x3D;&#x3D; &quot;My&quot;)&#123; &#x2F;&#x2F; plan</span><br><span class="line">					do&#123;cin &gt;&gt; input;&#125; while(input !&#x3D; &quot;to&quot;);</span><br><span class="line">					int i &#x3D; 0; scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;.&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line">					task &#x3D; &quot;plan&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					do&#123;cin &gt;&gt; input;&#125; while(input !&#x3D; &quot;one&quot;);</span><br><span class="line">					int i &#x3D; 0; scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">					do&#123;</span><br><span class="line">						scanf(&quot;%c&quot;, &amp;tmp);</span><br><span class="line">						varCharString[i++] &#x3D; tmp;</span><br><span class="line">					&#125; while(tmp !&#x3D;&#39;,&#39; &amp;&amp; tmp !&#x3D;&#39;.&#39;);</span><br><span class="line">					varCharString[i - 1] &#x3D; &#39;\0&#39;;</span><br><span class="line"></span><br><span class="line">					var &#x3D; 1;</span><br><span class="line">					if(tmp !&#x3D; &#39;.&#39;)&#123;</span><br><span class="line">						do&#123;</span><br><span class="line">							cin &gt;&gt; input;</span><br><span class="line">							if(input &#x3D;&#x3D; &quot;and&quot;) var++;</span><br><span class="line">						&#125; while(input !&#x3D; &quot;more.&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					task &#x3D; &quot;order&quot;;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	void Print(char type)&#123;</span><br><span class="line">		switch(type)&#123;</span><br><span class="line">			case &#39;A&#39;: &#x2F;&#x2F; human</span><br><span class="line">				if(task &#x3D;&#x3D; &quot;week&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;Today is &quot;&lt;&lt; weekTable[var]&lt;&lt;&quot;.&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(task &#x3D;&#x3D; &quot;plan&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;I want to &quot;&lt;&lt; varCharString&lt;&lt;&quot;.&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					cout&lt;&lt; var &lt;&lt;&quot; &quot;&lt;&lt; varCharString &lt;&lt;&quot;, please.&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">			case &#39;B&#39;: &#x2F;&#x2F; computer</span><br><span class="line">				if(task &#x3D;&#x3D; &quot;week&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;Var day&#x3D;&quot;&lt;&lt; var&lt;&lt;&quot;;&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(task &#x3D;&#x3D; &quot;plan&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;Var plan&#x3D;\&quot;&quot;&lt;&lt; varCharString&lt;&lt;&quot;\&quot;;&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					cout&lt;&lt; &quot;Var item&#x3D;\&quot;&quot;&lt;&lt; varCharString &lt;&lt;&quot;\&quot;; Var num&#x3D;&quot;&lt;&lt; var &lt;&lt;&quot;;&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">			case &#39;C&#39;: &#x2F;&#x2F; dummy</span><br><span class="line">				if(task &#x3D;&#x3D; &quot;week&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;Oh, my god. that&#39;s incredible. You know what? I just found that today is &quot;&lt;&lt; weekTable[var][0] &lt;&lt; weekTable[var][0] &lt;&lt; weekTable[var]&lt;&lt;&quot;!&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else if(task &#x3D;&#x3D; &quot;plan&quot;)&#123;</span><br><span class="line">					cout&lt;&lt; &quot;My god! What should I do today? Let me see. Well, I have an excellent idea! Let us go to &quot;&lt;&lt; varCharString&lt;&lt;&quot;.&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123; &#x2F;&#x2F; order</span><br><span class="line">					cout&lt;&lt; &quot;I want one &quot;&lt;&lt;varCharString;</span><br><span class="line">					for(int i &#x3D; 1; i &lt; var; ++i) cout &lt;&lt; &quot;, and one more&quot;;</span><br><span class="line">					cout&lt;&lt;&quot;.&quot;&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	int n; cin&gt;&gt; n;</span><br><span class="line">	Idea idea;</span><br><span class="line">	for (int i &#x3D; 0; i &lt; n; ++i)&#123;</span><br><span class="line">		char m, n;</span><br><span class="line">		cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">		idea.GetIdea(m);</span><br><span class="line">		idea.Print(n);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="花里花哨的计算器"><a href="#花里花哨的计算器" class="headerlink" title="花里花哨的计算器"></a>花里花哨的计算器</h2><hr>
<h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>有一个花里花哨的计算器，它可以在输入的时候，指定输入的字体。每种字体的对应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字体a：</span><br><span class="line">	1234567890</span><br><span class="line">字体b：</span><br><span class="line">	!@#$%^&amp;*()</span><br><span class="line">字体c：</span><br><span class="line">	qwertyuiop</span><br><span class="line">字体d：</span><br><span class="line">	asdfghjkl;</span><br><span class="line">字体e：</span><br><span class="line">	zxcvbnm,.&#x2F;</span><br><span class="line">字体f：</span><br><span class="line">    ... .-. .-. ... .-. .-. .-. .-. .-. .-.</span><br><span class="line">    ..| ..| ..| |.| |.. |.. ..| |.| |.| |.|</span><br><span class="line">    ... .-. .-. .-. .-. .-. ... .-. .-. ...</span><br><span class="line">    ..| |.. ..| ..| ..| |.| ..| |.| ..| |.|</span><br><span class="line">    ... .-. .-. ... .-. .-. ... .-. .-. .-.</span><br></pre></td></tr></table></figure>
<p>现在告诉你输入的数字，以及每个数字所指定的字体。请显示正确的输出。</p>
<h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行为一个数字T，表示有T组数据。</p>
<p>接下来有T行，每行有一个字符串，表示输入的数字以及每个数字对应的字体，格式为n_1 A_1 n_2 A_2 n_3 A_3 …，其中n_i 为数字（0~9），A_i为其前面那个数字的字体（a~f）。数字个数小于100。</p>
<h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>输出正确的显示。注意，f字体为多行字体，其他字体为单行字体。若所有数字的字体均为单行字体，则输出为单行。若其中存在一个或多个多行字体，则输出多行，所有单行字体显示在最低行，上方用’.’填充。</p>
<h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1a2b3c4d5e</span><br><span class="line">1a2b3c4d5e6f7a</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1@efb</span><br><span class="line">......-..</span><br><span class="line">.....|...</span><br><span class="line">......-..</span><br><span class="line">.....|.|.</span><br><span class="line">1@efb.-.7</span><br></pre></td></tr></table></figure>
<h3 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>T ≤ 5</p>
<p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fontFamily</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> a = <span class="string">"1234567890"</span>;</span><br><span class="line">	<span class="built_in">string</span> b = <span class="string">"!@#$%^&amp;*()"</span>;</span><br><span class="line">	<span class="built_in">string</span> c = <span class="string">"qwertyuiop"</span>;</span><br><span class="line">	<span class="built_in">string</span> d = <span class="string">"asdfghjkl;"</span>;</span><br><span class="line">	<span class="built_in">string</span> e = <span class="string">"zxcvbnm,./"</span>;</span><br><span class="line">	<span class="built_in">string</span> f[<span class="number">10</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">		&#123;<span class="string">"..."</span>, <span class="string">"..|"</span>, <span class="string">"..."</span>, <span class="string">"..|"</span>, <span class="string">"..."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">".-."</span>, <span class="string">"|.."</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"..."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">"..."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"|.."</span>, <span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"|.."</span>, <span class="string">".-."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">"..."</span>, <span class="string">"..|"</span>, <span class="string">"..."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>, <span class="string">"..|"</span>, <span class="string">".-."</span>&#125;,</span><br><span class="line">		&#123;<span class="string">".-."</span>, <span class="string">"|.|"</span>, <span class="string">"..."</span>, <span class="string">"|.|"</span>, <span class="string">".-."</span>&#125;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFontF</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> a[<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"&#123;"</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"&#123;"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\""</span>&lt;&lt; a[i][j] &lt;&lt;<span class="string">"\""</span>;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"&#125;"</span>;</span><br><span class="line">			<span class="keyword">if</span>(i!=<span class="number">9</span> || j!=<span class="number">4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">","</span>;</span><br><span class="line">			<span class="keyword">if</span>(j!=<span class="number">4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i!=<span class="number">9</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;<span class="built_in">cout</span>&lt;&lt;<span class="string">"&#125;;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="built_in">string</span> input)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> Out[<span class="number">5</span>][<span class="number">305</span>];</span><br><span class="line">	fontFamily font;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); ++i)&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// PrintFontF();</span></span><br><span class="line">	<span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; ++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		Output(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><hr>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>给出n个整数，将它们从小到大排序后输出。</p>
<h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行为一个正整数n，第二行为n个整数。</p>
<h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>输出一行n个整数，表示排序后的n个整数。</p>
<h3 id="样例1输入"><a href="#样例1输入" class="headerlink" title="样例1输入"></a><strong>样例1输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">5 4 2 3 -1</span><br></pre></td></tr></table></figure>
<h3 id="样例1输出"><a href="#样例1输出" class="headerlink" title="样例1输出"></a><strong>样例1输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1 2 3 4 5</span><br></pre></td></tr></table></figure>
<h3 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a><strong>样例2</strong></h3><p><a href="https://dsa.cs.tsinghua.edu.cn/oj/attachment/4864/48640c5b804669da5ad22ba83c215b28e6280fe5.zip" target="_blank" rel="noopener external nofollow noreferrer">点击下载</a></p>
<h3 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>对于前30%的数据，n ≤ 100，给出的n个整数的绝对值不超过10；</p>
<p>对于前60%的数据，n ≤ 5000，给出的n个整数的绝对值不超过10^9；</p>
<p>对于另20%的数据，n ≤ 500000，给出的n个整数的绝对值不超过10^5；</p>
<p>对于100%的数据，n ≤ 500000，给出的n个整数的绝对值不超过10^9。</p>
<p>时间限制：2 s</p>
<p>空间限制：256 MB</p>
<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a><strong>提示</strong></h3><p>大家不妨使用各种排序算法进行测试。</p>
<p>C++的同学，请注意一下输入输出：</p>
<p>若大家使用cin、cout进行输入输出，则需在main函数里的第一行加入ios::sync_with_stdio(false)，否则可能会超时。</p>
<p>推荐大家使用scanf和printf进行输入输出。</p>
<p>Python的同学，建议使用PyPy，具体使用方法请查看新手村的 a+b 那题。</p>
<h3 id="Code-O-nlogn-快速排序"><a href="#Code-O-nlogn-快速排序" class="headerlink" title="Code $O(nlogn)$ 快速排序"></a>Code $O(nlogn)$ 快速排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _OJ_ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a,<span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=b,j=e,x=a[(b+e)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&lt;x) i++;</span><br><span class="line">        <span class="keyword">while</span>(a[j]&gt;x) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j) swap(a[i++],a[j--]);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;j);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;e) quickSort(a,i,e);</span><br><span class="line">    <span class="keyword">if</span>(b&lt;j) quickSort(a,b,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _OJ_</span></span><br><span class="line">    freopen(<span class="string">"OJ.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"OJ.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp; <span class="built_in">cin</span> &gt;&gt;tmp;</span><br><span class="line">        a.push_back(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(a, <span class="number">0</span>, a.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" \n"</span>[i==a.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a>间隙</h2><hr>
<h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>给定长度为 n 的数组 a，其中每个元素都为 [0,2^k) 之间的整数，请求出它们在实数轴上相邻两个数之间的最大值。</p>
<p>由于 n 可能很大，为了避免过大的输入、输出规模，我们会在程序内部生成数据，并要求你输出排序后序列的哈希值。具体方法如下（用c++代码展示）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned int nextInt(unsigned int x)&#123;</span><br><span class="line">    x ^&#x3D; x &lt;&lt; 13;</span><br><span class="line">    x ^&#x3D; x &gt;&gt; 17;</span><br><span class="line">    x ^&#x3D; x &lt;&lt; 5;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void initData(unsigned int *a, int n, int k, unsigned int seed)&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n; ++i) &#123;</span><br><span class="line">        seed &#x3D; nextInt(seed);</span><br><span class="line">        a[i] &#x3D; seed &gt;&gt; (32 - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入将会给定 n, k, seed。</p>
<p>你可以调用 initData(a, n, k, seed) 来获得需要排序的 a 数组。</p>
<h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>一行 3 个用空格隔开的整数 n, k, seed，意义见题目描述。</p>
<h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>一行一个整数，表示最大间隙。</p>
<h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 4 233333</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a><strong>样例解释</strong></h3><p>生成的序列应为 4 10 13 9 4，最大间隙为 9-4=5。</p>
<h3 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>本题共设置 4 组数据。</p>
<p>对于第 1 组数据，保证 n=1000，k=16。</p>
<p>对于第 2 组数据，保证 n=5*10^6，k=32。</p>
<p>对于第 3 组数据，保证 n=2^26=67108864，k=16。</p>
<p>对于第 4 组数据，保证 n=2^26=67108864，k=32。</p>
<p>保证给定的 seed 在 32 位<strong>无符号</strong>整数的范围内。</p>
<p>时间限制：5 s</p>
<p>空间限制：1 GB</p>
<h3 id="Code-O-nlogn-快排-50"><a href="#Code-O-nlogn-快排-50" class="headerlink" title="Code $O(nlogn)$ 快排 50%"></a>Code $O(nlogn)$ 快排 50%</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _OJ_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">67108864</span> + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">    x ^= x &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    x ^= x &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        seed = nextInt(seed);</span><br><span class="line">        a[i] = seed &gt;&gt; (<span class="number">32</span> - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a,<span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=b,j=e;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x=a[(b+e)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&lt;x) i++;</span><br><span class="line">        <span class="keyword">while</span>(a[j]&gt;x) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j) swap(a[i++],a[j--]);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;j);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;e) quickSort(a,i,e);</span><br><span class="line">    <span class="keyword">if</span>(b&lt;j) quickSort(a,b,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _OJ_</span></span><br><span class="line">    freopen(<span class="string">"OJ.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"OJ.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n, k ,seed;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; seed;</span><br><span class="line">    initData(a,n,k,seed);</span><br><span class="line">    quickSort(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Code-O-n-m-桶排"><a href="#Code-O-n-m-桶排" class="headerlink" title="Code $O(n+m)$ 桶排"></a>Code $O(n+m)$ 桶排</h3><p>m为桶的个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ================= 代码实现开始 =================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码不需要解释，你只需要知道这是用于生成数据的就行了</span></span><br><span class="line"></span><br><span class="line"><span class="function">u32 <span class="title">nextInt</span><span class="params">(u32 x)</span> </span>&#123;</span><br><span class="line">    x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">    x ^= x &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    x ^= x &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">(u32* a, <span class="keyword">int</span> n, <span class="keyword">int</span> k, u32 seed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        seed = nextInt(seed);</span><br><span class="line">        a[i] = seed &gt;&gt; (<span class="number">32</span> - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码不需要解释，你只需要知道这是用于生成数据的就行了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">67108864</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">1</span> &lt;&lt; <span class="number">22</span>; <span class="comment">//桶的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a：输入中给定的数组 </span></span><br><span class="line"><span class="comment">//l：每个“桶”中的最小值 </span></span><br><span class="line"><span class="comment">//r：每个“桶”中的最大值 </span></span><br><span class="line">u32 a[N + <span class="number">1</span>]; <span class="comment">//为了省去传入数据花费的时间，直接将需要求解的maxGap数组开设成了全局变量</span></span><br><span class="line">u32 l[m + <span class="number">1</span>], r[m + <span class="number">1</span>]; <span class="comment">// 本题的数据比较松</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是求解答案的函数，你需要对全局变量中的 a 数组求解 maxGap 问题</span></span><br><span class="line"><span class="comment">// n, k：意义与题目描述相符</span></span><br><span class="line"><span class="comment">// 返回值：即为答案（maxGap）</span></span><br><span class="line"><span class="function">u32 <span class="title">maxGap</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">memset</span>(l, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * m); <span class="comment">// 将l中的所有位置赋值为-1</span></span><br><span class="line">	<span class="built_in">memset</span>(r, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * m); <span class="comment">// 将r中的所有位置赋值为-1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> _k = <span class="built_in">max</span>(k <span class="number">-22</span>, <span class="number">0</span>); <span class="comment">//这是一个参数，辅助后续用位运算代替除法</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		u32 b1 = a[i] &gt;&gt; _k; <span class="comment">//(这个式子等价于a[i]除以2的_k次幂)求出a[i]所在的桶</span></span><br><span class="line">		<span class="comment">//更新对应桶的l,r</span></span><br><span class="line">		<span class="comment">//cout&lt;&lt;"k="&lt;&lt;k&lt;&lt;"; _k="&lt;&lt;_k&lt;&lt;"; 第"&lt;&lt;b1&lt;&lt;"桶：["&lt;&lt;l[b1]&lt;&lt;","&lt;&lt;r[b1]&lt;&lt;"]"&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">if</span>(l[b1] == <span class="number">-1</span><span class="comment">/*1*/</span>)</span><br><span class="line">			l[b1] = r[b1] = a[i]<span class="comment">/*2*/</span>;  <span class="comment">//当桶为空时，重设最大、最小元</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; l[b1])</span><br><span class="line">			l[b1] = a[i];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; r[b1])</span><br><span class="line">			r[b1] = a[i];</span><br><span class="line">		<span class="comment">//cout&lt;&lt;"第"&lt;&lt;i+1&lt;&lt;"个数："&lt;&lt;a[i]&lt;&lt;"===&gt;"&lt;&lt;"第"&lt;&lt;b1&lt;&lt;"桶：["&lt;&lt;l[b1]&lt;&lt;","&lt;&lt;r[b1]&lt;&lt;"]"&lt;&lt;endl; </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//统计答案</span></span><br><span class="line">	u32 last = <span class="number">-1</span>;</span><br><span class="line">	u32 ans = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;"=========统计答案："&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">//for(int i = 0; i &lt; n; ++i) cout&lt;&lt;"a["&lt;&lt;i&lt;&lt;"] = "&lt;&lt;a[i]&lt;&lt;"; "&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">		<span class="keyword">if</span>(l[i] != <span class="number">-1</span><span class="comment">/*3*/</span>)&#123;  <span class="comment">//非空桶 </span></span><br><span class="line">			<span class="comment">//cout&lt;&lt;"第"&lt;&lt;i+1&lt;&lt;"轮：last = "&lt;&lt;last&lt;&lt;"; ans = "&lt;&lt;ans&lt;&lt;endl; </span></span><br><span class="line">			<span class="keyword">if</span>(last &gt; l[i])  <span class="comment">//找最小元 </span></span><br><span class="line">				last = l[i];</span><br><span class="line">			<span class="keyword">if</span>(l[i] - last<span class="comment">/*4*/</span> &gt; ans)</span><br><span class="line">				ans = l[i] - last<span class="comment">/*4*/</span>;</span><br><span class="line">			last = r[i];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ================= 代码实现结束 =================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    u32 seed;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%u"</span>, &amp;n, &amp;k, &amp;seed);</span><br><span class="line">    initData(a, n, k, seed);</span><br><span class="line"></span><br><span class="line">    u32 ans = maxGap(n, k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h2><hr>
<h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>给定长度为 2n−1</p>
<p>  的数组，对于每个 </p>
<p>k=1,2,…,n</p>
<p>，求出前 </p>
<p>2k−1</p>
<p> 个数的中位数。</p>
<h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行一个正整数 n</p>
<p>。</p>
<p>接下来一行 2n−1</p>
<p> 个正整数，表示所给数组。</p>
<h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>输出 n</p>
<p> 行，第 </p>
<p>i</p>
<p> 行表示这个数组的前 </p>
<p>2i−1</p>
<p> 个数的中位数。</p>
<h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">8 7 6 9 9</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h3 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>对于 100% 的数据，n≤3×105</p>
<p>所有输入数据的数值都在 32 位整型范围内。</p>
<p>时间限制：1 s</p>
<p>空间限制：512 MB</p>
<h3 id="Code-O-nlogn-双堆-55"><a href="#Code-O-nlogn-双堆-55" class="headerlink" title="Code $O(nlogn)$ 双堆 55%"></a>Code $O(nlogn)$ 双堆 55%</h3><p>拿55%的原因居然是因为输入输出？？？WTF（把cin、cout全换掉就OK了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _OJ_ </span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; L;<span class="comment">// 大根左堆</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; R;<span class="comment">// 小根右堆</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> mid; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mid);; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mid);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">2</span>*n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);;</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; mid) L.push(tmp);</span><br><span class="line">        <span class="keyword">else</span> R.push(tmp);</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span>)&#123;</span><br><span class="line">        	<span class="keyword">while</span>(L.<span class="built_in">size</span>() != R.<span class="built_in">size</span>())&#123;</span><br><span class="line">        		<span class="keyword">if</span>(L.<span class="built_in">size</span>() &gt; R.<span class="built_in">size</span>())&#123;</span><br><span class="line">        			R.push(mid);</span><br><span class="line">        			mid = L.top(); L.pop();</span><br><span class="line">        		&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        			L.push(mid);</span><br><span class="line">        			mid = R.top(); R.pop();</span><br><span class="line">        		&#125;</span><br><span class="line">        	&#125;</span><br><span class="line">        	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="搭积木-toy"><a href="#搭积木-toy" class="headerlink" title="搭积木(toy)"></a>搭积木(toy)</h2><hr>
<h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>小Z有n块一模一样的正方体积木，他要把这些积木放到m×m的网格中。每块积木要么放到恰好一个格子上，要么叠到另一块积木上。好奇的他想知道，有多少种把这n块积木都放进网格的摆法？</p>
<h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>一行两个整数n,m</p>
<p>，分别表示积木的数量和网格的边长。</p>
<h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>一行一个整数，表示答案对109+7取模的结果。</p>
<h3 id="数据范围-7"><a href="#数据范围-7" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>1≤n≤1000,1≤m≤30</p>
<p>时间限制：1s；空间限制：512MiB。</p>
<h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a><strong>样例1</strong></h3><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2</span><br></pre></td></tr></table></figure>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="样例1解释"><a href="#样例1解释" class="headerlink" title="样例1解释"></a><strong>样例1解释</strong></h3><p>有两块积木，要放到2×2的网格中。将两块积木叠在一起有C14=4种方法，两个积木分开放有C24=6种方法，共10种。</p>
<h3 id="样例2-1"><a href="#样例2-1" class="headerlink" title="样例2"></a><strong>样例2</strong></h3><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000 30</span><br></pre></td></tr></table></figure>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">443860595</span><br></pre></td></tr></table></figure>
<h3 id="样例2解释"><a href="#样例2解释" class="headerlink" title="样例2解释"></a><strong>样例2解释</strong></h3><p>虽然答案很大，但是对109+7取了模，输出就很小了。</p>
<h3 id="Code-O-n-m-DP"><a href="#Code-O-n-m-DP" class="headerlink" title="Code $O(n*m)$ DP"></a>Code $O(n*m)$ DP</h3><p>迷之数据范围。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _OJ_ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CMem[<span class="number">10005</span>][<span class="number">10005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> CMem[a][b] ? CMem[a][b] : CMem[a][b] = (C(a<span class="number">-1</span>,b) + C(a<span class="number">-1</span>,b<span class="number">-1</span>)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> m; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, C(n + m*m - <span class="number">1</span>, n));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="凑零钱-money"><a href="#凑零钱-money" class="headerlink" title="凑零钱(money)"></a>凑零钱(money)</h2><hr>
<h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>小Z有n枚硬币，面值分别为w1,w2,⋯,wn。请问他总共有多少种办法凑出v块钱？</p>
<p>请注意，相同面值的硬币我们也认为是不同的。</p>
<h3 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行两个整数n,v，含义如题所述；</p>
<p>第二行n个整数，第i个整数为wi，表示第i个硬币的面值。</p>
<h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>一行一个整数，表示答案。特别地，如果没有合法方案，输出0。</p>
<h3 id="数据范围-8"><a href="#数据范围-8" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>1≤n≤30,1≤v≤900,∀i,1≤wi≤30。</p>
<p>时间限制：1s；空间限制：512MiB。</p>
<h3 id="样例1-1"><a href="#样例1-1" class="headerlink" title="样例1"></a><strong>样例1</strong></h3><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 2 4 4</span><br></pre></td></tr></table></figure>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="样例1解释-1"><a href="#样例1解释-1" class="headerlink" title="样例1解释"></a><strong>样例1解释</strong></h3><p>有两种选法：</p>
<ol>
<li>选1号、2号、3号硬币； </li>
<li>选1号、2号、4号硬币。</li>
</ol>
<h3 id="样例2-2"><a href="#样例2-2" class="headerlink" title="样例2"></a><strong>样例2</strong></h3><h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21 315</span><br><span class="line">28 26 26 24 10 26 30 4 26 5 21 17 18 7 11 12 16 8 6 30 8</span><br></pre></td></tr></table></figure>
<h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<h3 id="Code-DP"><a href="#Code-DP" class="headerlink" title="Code DP"></a>Code DP</h3><p>可以构造母函数：</p>
<script type="math/tex; mode=display">
G(x)=\prod_{i\in [0,n)} (1+x^{w_i})</script><p>答案就是$x^v$的系数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,v,w[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>] = &#123;<span class="number">1</span>&#125;; <span class="comment">// dp[0]=1，其它=0. dp[k]表示凑出k元的方法数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = v; j &gt;= w[i]; --j)&#123;  <span class="comment">// 反向DP</span></span><br><span class="line">			dp[j] += dp[j - w[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[v]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="观察-observe"><a href="#观察-observe" class="headerlink" title="观察(observe)"></a>观察(observe)</h2><hr>
<h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p>在一个二维平面上，每个满足1≤x≤n,1≤y≤m的整点(x,y)上都种有一棵树，共n×m棵。现在，小Z站在(0,0)处欣赏这些树。因为一棵树可能会挡住一些树，小Z能看到一棵树当且仅当他和树的连线上没有其他树。请问小Z总共能看见多少棵树？</p>
<h3 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>第一行两个整数n,m，含义如题所述。</p>
<h3 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>一行一个整数，表示小Z能看见的树的数量。</p>
<h3 id="数据范围-9"><a href="#数据范围-9" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h3><p>存在10%的数据，有1≤n,m≤10；</p>
<p>存在30%的数据，有1≤n,m≤1000；</p>
<p>存在80%的数据，有1≤n,m≤10000；</p>
<p>对于所有数据，有1≤n,m≤105。</p>
<p>时间限制：1s；空间限制：512MiB。</p>
<h3 id="样例1-2"><a href="#样例1-2" class="headerlink" title="样例1"></a><strong>样例1</strong></h3><h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure>
<h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<h3 id="样例1解释-2"><a href="#样例1解释-2" class="headerlink" title="样例1解释"></a><strong>样例1解释</strong></h3><p>(2,2)和(3,3)均被(1,1)挡住，共7棵能看见。</p>
<h3 id="样例2-3"><a href="#样例2-3" class="headerlink" title="样例2"></a><strong>样例2</strong></h3><h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a><strong>Input</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100000 100000</span><br></pre></td></tr></table></figure>
<h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a><strong>Output</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6079301507</span><br></pre></td></tr></table></figure>
<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a><strong>提示</strong></h3><p><a href="https://dsa.cs.tsinghua.edu.cn/oj/attachment/bf96/bf96f71fdded97ba8ee10a8c836d91b0567f2885.html" target="_blank" rel="noopener external nofollow noreferrer"> 点击查看</a></p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>无非就是求形如$\cfrac{x}{y}$的<strong><font color=red>最简分式</font></strong>数量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>P2P系统后端设计</title>
    <url>/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>P2P系统设计项目 - 服务器后端。使用JavaScript + MySQL搭建后端接口，提供数据交互功能。</p>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201216192812552.png" class="" title="仪表盘">
<a id="more"></a>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/BV1R4411w7f3" target="_blank" rel="noopener external nofollow noreferrer">【回形针PaperClip】别再问我什么是 BT 种子</a></p>
<p><a href="https://www.bilibili.com/video/av34370450" target="_blank" rel="noopener external nofollow noreferrer">【万物4分钟】磁力下载是什么原理？跟用种子下载的区别大不大？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/85652893" target="_blank" rel="noopener external nofollow noreferrer">求求你，别再问你的种子磁力为什么下不动了！</a></p>
<h1 id="种子文件-torrent"><a href="#种子文件-torrent" class="headerlink" title="种子文件 .torrent"></a>种子文件 <code>.torrent</code></h1><h2 id="BEncoding-编码格式"><a href="#BEncoding-编码格式" class="headerlink" title="BEncoding 编码格式"></a>BEncoding 编码格式</h2><blockquote>
<p><a href="https://fenying.gitbooks.io/bittorrent-specification-chinese-edition/content/chapter2.html" target="_blank" rel="noopener external nofollow noreferrer">第二篇：BEncoding</a></p>
<p><a href="https://www.cnblogs.com/hnrainll/archive/2011/07/26/2117423.html" target="_blank" rel="noopener external nofollow noreferrer">BT种子文件格式</a></p>
</blockquote>
<p><strong>BEncoding</strong> 是一种用于组织、描述数据的简洁编码格式，它支持 4 种数据类型 / 元素：</p>
<ul>
<li>字节串（Byte String）</li>
<li>整数（Integer）</li>
<li>列表（List, 线性表）</li>
<li>字典（Dictionary）</li>
</ul>
<h3 id="字节串"><a href="#字节串" class="headerlink" title="字节串"></a>字节串</h3><p>格式为 <code>长度:内容</code>。</p>
<p>例如：</p>
<ul>
<li><code>4:abcd</code>：”abcd”</li>
<li><code>0:</code>：空串</li>
</ul>
<blockquote>
<p> <strong>BE字节串</strong>，不是字符串，因此在字典中 <strong>key</strong> 的比较是二进制比较而不是字符串比较。</p>
</blockquote>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>格式为 <code>i + 整数 + e</code>。</p>
<p>例如：</p>
<ul>
<li><code>i1234e</code>：1234</li>
<li><code>i-1e</code>：-1</li>
<li><code>i0e</code>：0</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>格式为 <code>l + 元素:元素:...:元素 + e</code>。</p>
<p>例如：</p>
<ul>
<li><code>l4:spam4:eggse</code>：[ “spam”, “eggs” ]</li>
<li><code>li123e5:helloi111ee</code>：[ 123, “hello”, 111 ]</li>
<li><code>le</code>：空列表</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>格式为 <code>d + 字节串:元素:...:字节串:元素 + e</code>。</p>
<p>例如：</p>
<ul>
<li><code>d3:cow3:moo4:spam4:eggse</code>：{ “cow” =&gt; “moo”, “spam” =&gt; “eggs” }</li>
<li><code>d4:name5:Angus3:agei23ee</code>：{ “name” =&gt; “Angus”, “age” =&gt; 23 }</li>
<li><code>d4:spaml1:a1:bee</code>：{ “spam” =&gt; [ “a”, “b” ] }</li>
<li><code>de</code>：空列表</li>
</ul>
<h2 id="Torrent文件结构"><a href="#Torrent文件结构" class="headerlink" title="Torrent文件结构"></a>Torrent文件结构</h2><blockquote>
<p><strong><a href="https://www.cnblogs.com/rekent/p/13970413.html" target="_blank" rel="noopener external nofollow noreferrer">Torrent文件的解析与转换</a></strong></p>
</blockquote>
<p>Torrent整体是一个Bencoding编码的字典，其中有以下的属性名。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>键名称</th>
<th>数据类型</th>
<th>可选项</th>
<th>键值含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>announce</td>
<td>string</td>
<td>required</td>
<td>Tracker的Url</td>
</tr>
<tr>
<td>info</td>
<td>dictionary</td>
<td>required</td>
<td>该条映射到一个字典，该字典的键将取决于共享的一个或多个文件</td>
</tr>
<tr>
<td>announce-list</td>
<td>array[]</td>
<td>optional</td>
<td>备用Tracker的Url，以列表形式存在</td>
</tr>
<tr>
<td>comment</td>
<td>string</td>
<td>optional</td>
<td>备注</td>
</tr>
<tr>
<td>created by</td>
<td>string</td>
<td>optional</td>
<td>创建人或创建程序的信息</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Info字段"><a href="#Info字段" class="headerlink" title="Info字段"></a>Info字段</h3><p>在总体结构中有个info，其为字典格式。</p>
<blockquote>
<p>单文件、多文件的有不同的info属性。</p>
</blockquote>
<h4 id="单文件Info结构"><a href="#单文件Info结构" class="headerlink" title="单文件Info结构"></a>单文件Info结构</h4><div class="table-container">
<table>
<thead>
<tr>
<th>键名称</th>
<th>数据类型</th>
<th>可选项</th>
<th>键值含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
<td>required</td>
<td>建议保存到的文件名称</td>
</tr>
<tr>
<td>piceces</td>
<td>byte[]</td>
<td>required</td>
<td>每个文件块的SHA-1的集成Hash。</td>
</tr>
<tr>
<td>piece length</td>
<td>long</td>
<td>required</td>
<td>每个文件块的字节数</td>
</tr>
</tbody>
</table>
</div>
<h4 id="多文件Info结构"><a href="#多文件Info结构" class="headerlink" title="多文件Info结构"></a>多文件Info结构</h4><div class="table-container">
<table>
<thead>
<tr>
<th>键名称</th>
<th>数据类型</th>
<th>可选项</th>
<th>键值含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
<td>required</td>
<td>建议保存到的目录名称</td>
</tr>
<tr>
<td>piceces</td>
<td>byte[]</td>
<td>required</td>
<td>每个文件块的SHA-1的集成Hash。</td>
</tr>
<tr>
<td>piece length</td>
<td>long</td>
<td>required</td>
<td>每个文件块的字节数</td>
</tr>
<tr>
<td>files</td>
<td>array[]</td>
<td>required</td>
<td>文件列表，列表存储的内容是字典结构</td>
</tr>
</tbody>
</table>
</div>
<p><strong>files字典结构：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>键名称</th>
<th>数据类型</th>
<th>可选项</th>
<th>键值含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>array[]</td>
<td>required</td>
<td>一个对应子目录名的字符串列表，最后一项是实际的文件名称</td>
</tr>
<tr>
<td>length</td>
<td>long</td>
<td>required</td>
<td>文件的大小（以字节为单位）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Torrent解析"><a href="#Torrent解析" class="headerlink" title="Torrent解析"></a>Torrent解析</h2><blockquote>
<p><a href="https://github.com/ndroi/pytorrent" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ndroi/pytorrent</a> 不太好用</p>
<p><a href="https://www.npmjs.com/package/parse-torrent" target="_blank" rel="noopener external nofollow noreferrer"><strong>parse-torrent</strong></a> 这个是JS版本的</p>
<p><a href="https://github.com/7sDream/torrent_parser" target="_blank" rel="noopener external nofollow noreferrer">torrent_parser</a> python版本</p>
</blockquote>
<p>既可以解析磁力链接，也可以解析种子文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parseTorrent = <span class="built_in">require</span>(<span class="string">'parse-torrent'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(parseTorrent(<span class="string">'magnet:?xt=urn:btih:d2474e86c95b19b8bcfdb92bc12c9d44667cfa36&amp;tr=http%3A%2F%2Ftracker.example.com%2Fannounce'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------------------------------"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(parseTorrent(fs.readFileSync(__dirname + <span class="string">'/example.torrent'</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="开源torrent"><a href="#开源torrent" class="headerlink" title="开源torrent"></a>开源torrent</h2><h3 id="libtorrent-开源P2P"><a href="#libtorrent-开源P2P" class="headerlink" title="libtorrent 开源P2P"></a>libtorrent 开源P2P</h3><blockquote>
<p><a href="https://www.cnblogs.com/iczelion/p/13622602.html" target="_blank" rel="noopener external nofollow noreferrer">libtorrent-开源代码P2P协议库(BitTorrent)-linux下编译，测试</a></p>
<p><a href="https://erdgeist.org/arts/software/opentracker/" target="_blank" rel="noopener external nofollow noreferrer">opentracker – An open and free bittorrent tracker</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-libtorrent</span><br></pre></td></tr></table></figure>
<p>运行示例：<a href="https://github.com/arvidn/libtorrent/blob/libtorrent-1_0_7/bindings/python/client.py" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/arvidn/libtorrent/blob/libtorrent-1_0_7/bindings/python/client.py</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 client.py demo.torrent</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>demo.torrent</code>为一个测试种子文件。</p>
</blockquote>
<h3 id="WebTorrent-开源P2P"><a href="#WebTorrent-开源P2P" class="headerlink" title="WebTorrent  开源P2P"></a>WebTorrent  开源P2P</h3><blockquote>
<p><a href="https://webtorrent.io/" target="_blank" rel="noopener external nofollow noreferrer">https://webtorrent.io/</a></p>
<p><a href="https://github.com/webtorrent/webtorrent" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/webtorrent/webtorrent</a></p>
</blockquote>
<p>WebTorrent is a streaming torrent client for <strong>Node.js</strong> and the <strong>web</strong>. WebTorrent provides the same API in both environments.</p>
<blockquote>
<p>The WebTorrent protocol works just like <a href="https://wiki.theory.org/BitTorrentSpecification" target="_blank" rel="noopener external nofollow noreferrer">BitTorrent protocol</a>, except it uses <a href="https://en.wikipedia.org/wiki/WebRTC" target="_blank" rel="noopener external nofollow noreferrer">WebRTC</a> instead of <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener external nofollow noreferrer">TCP</a>/<a href="https://en.wikipedia.org/wiki/Micro_Transport_Protocol" target="_blank" rel="noopener external nofollow noreferrer">uTP</a> as the transport protocol.</p>
</blockquote>
<p>在<a href="https://webtorrent.io/docs" target="_blank" rel="noopener external nofollow noreferrer">Webtorrent的API</a>中支持直接访问种子中的各个字段：</p>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201213175204709.png" class="" title="comment">
<h1 id="JSON文件-json"><a href="#JSON文件-json" class="headerlink" title="JSON文件 .json"></a>JSON文件 <code>.json</code></h1><blockquote>
<p><a href="https://www.w3school.com.cn/json/json_syntax.asp" target="_blank" rel="noopener external nofollow noreferrer">JSON 语法</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/JSON" target="_blank" rel="noopener external nofollow noreferrer">使用JSON</a></p>
<p><a href="https://www.cnblogs.com/hwtblog/p/8483573.html" target="_blank" rel="noopener external nofollow noreferrer">json文件格式详解</a></p>
<p><a href="http://www.json.cn/" target="_blank" rel="noopener external nofollow noreferrer">JSON在线解析及格式化验证 - JSON.cn</a></p>
</blockquote>
<p>JSON（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一个数据交换协议规范。它的设计简约，从而在Web开发中得到大量的应用。JSON文件后缀为<code>.json</code>。不同的语言中存在不同的对JSON文件的解析器，如JavaScript中的<code>eval()</code>函数。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/27487096" target="_blank" rel="noopener external nofollow noreferrer">什么是数据交换语言?</a></p>
<blockquote>
<p><strong>在不同的系统不同的语言间交换数据时，我们一般倾向于使用无关于平台及语言的数据交换语言。此类语言主要包括XML，JSON，YAML，Protobuf等，常用于接口调用，配置文件，数据存储等场景。</strong></p>
</blockquote>
</blockquote>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>JSON允许以下基本元素 / 值（value）：</p>
<ul>
<li><strong>字符串</strong>（string）</li>
<li><strong>数值</strong>（number）</li>
<li><strong>布尔值</strong>（true、false）</li>
<li><strong>空值</strong>（null）</li>
</ul>
<p>以及嵌套元素：</p>
<ul>
<li><strong><font color=blue>对象</font></strong>（object）</li>
<li><strong><font color=blue>数组</font></strong>（array）</li>
</ul>
<blockquote>
<p><strong><font color=red>一个JSON文件就是一个元素（具有任意的复杂度）。</font></strong></p>
</blockquote>
<hr>
<p>在JavaScript中可以直接创建JSON格式的变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> employees = [</span><br><span class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Bill"</span> , <span class="string">"lastName"</span>:<span class="string">"Gates"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"George"</span> , <span class="string">"lastName"</span>:<span class="string">"Bush"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Thomas"</span> , <span class="string">"lastName"</span>: <span class="string">"Carter"</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>可以像这样访问 JavaScript 对象数组中的第一项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">employees[<span class="number">0</span>].lastName;</span><br></pre></td></tr></table></figure>
<p>返回的内容是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Gates</span><br></pre></td></tr></table></figure>
<p>可以像这样修改数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">employees[<span class="number">0</span>].lastName = <span class="string">"Jobs"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象 {}"></a>对象 <code>{}</code></h2><p>一个JSON对象就是一个字典，即，“键-值对”（<code>key: value</code>）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"firstName"</span>:<span class="string">"John"</span>,</span><br><span class="line">    <span class="attr">"lastName"</span>:<span class="string">"Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组 []"></a>数组 <code>[]</code></h2><p>JSON 数组在方括号中书写。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"employees"</span>: [</span><br><span class="line">        &#123; <span class="attr">"firstName"</span>:<span class="string">"John"</span> , <span class="attr">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"firstName"</span>:<span class="string">"Anna"</span> , <span class="attr">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"firstName"</span>:<span class="string">"Peter"</span> , <span class="attr">"lastName"</span>:<span class="string">"Jones"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="NPM-前端套件管理器"><a href="#NPM-前端套件管理器" class="headerlink" title="NPM 前端套件管理器"></a>NPM 前端套件管理器</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/24357770" target="_blank" rel="noopener external nofollow noreferrer">npm 是干什么的？（非教程）</a></p>
<p><a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener external nofollow noreferrer">NPM 使用介绍</a></p>
<p><a href="https://tw.alphacamp.co/blog/npm-node-package-manager" target="_blank" rel="noopener external nofollow noreferrer">NPM是什么？了解Node Package Manager套件管理机制</a></p>
</blockquote>
<p><strong>NPM</strong>（<strong>N</strong>ode <strong>P</strong>ackage <strong>M</strong>anager），前端套件管理工具。除此之外还有类似的<strong>Yarn</strong>。</p>
<blockquote>
<p>Node.js：一种javascript的运行环境，能够使得javascript脱离浏览器运行。它是一种提供给后端服务器的技术。</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/33578075/answer/57099264" target="_blank" rel="noopener external nofollow noreferrer">Node.js是用来做什么的？ - Gavin的回答 - 知乎</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025235359040" target="_blank" rel="noopener external nofollow noreferrer">Node.js - 廖雪峰</a></p>
</blockquote>
</blockquote>
<h2 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a><code>Package.json</code></h2><blockquote>
<p><a href="https://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener external nofollow noreferrer">package.json文件— JavaScript 标准参考教程（alpha）</a></p>
</blockquote>
<ul>
<li><strong>name</strong> - 包名。</li>
<li><strong>version</strong> - 包的版本号。</li>
<li><strong>description</strong> - 包的描述。</li>
<li><strong>homepage</strong> - 包的官网 url 。</li>
<li><strong>author</strong> - 包的作者姓名。</li>
<li><strong>contributors</strong> - 包的其他贡献者姓名。</li>
<li><strong>scripts</strong> - 指定了运行脚本命令的npm命令行缩写。比如start指定了运行<code>npm run start</code>时，所要执行的命令。</li>
<li><strong>dependencies</strong> - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>
<li><strong>repository</strong> - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>
<li><strong>main</strong> - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li>
<li><strong>keywords</strong> - 关键字</li>
</ul>
<h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a><code>npm init</code></h2><p>NPM通过初始化项目来填写基本信息，并创建<code>Package.json</code>文件。</p>
<h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a><code>npm install</code></h2><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener external nofollow noreferrer">npm 模块安装机制简介</a></p>
</blockquote>
<p><code>npm install</code> 检查当前位置下的<code>package.json</code>，并根据该文件计算缺少的套件，自动更新相关的依赖。并且生成<code>node_modules</code>文件夹用于保存下载的依赖包。</p>
<p>安装指定模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>
<p>安装并记录到<code>Package.json</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express --save	 # 将该模块写入dependencies属性</span><br><span class="line">npm install express --save-dev # 将该模块写入devDependencies属性</span><br></pre></td></tr></table></figure>
<p>全局安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>
<p>卸载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>
<p>查看依赖树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure>
<p>版本检查：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>升级：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure>
<h2 id="npm-run-lt-scripts-gt"><a href="#npm-run-lt-scripts-gt" class="headerlink" title="npm run &lt;scripts&gt;"></a><code>npm run &lt;scripts&gt;</code></h2><p>运行<code>Package.json</code>中”scripts”属性所设置的脚本。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
<h1 id="Qingqing-Share-前端"><a href="#Qingqing-Share-前端" class="headerlink" title="Qingqing Share 前端"></a>Qingqing Share 前端</h1><blockquote>
<p><a href="https://github.com/zouyansong/qingqingshare" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/zouyansong/qingqingshare</a> 清清共享</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zouyansong&#x2F;qingqingshare</span><br></pre></td></tr></table></figure>
<h2 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install npm</span><br><span class="line"></span><br><span class="line">cd qingqingshare&#x2F;</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">cd qqshare&#x2F;</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39311147/cannot-run-npm-commands" target="_blank" rel="noopener external nofollow noreferrer">Cannot run NPM Commands</a></p>
<blockquote>
<p>将 <code>PATH=$(echo &quot;$PATH&quot; | sed -e &#39;s/:\/mnt.*//g&#39;) # strip out problematic Windows %PATH%</code> 添加到 <code>~/.bashrc</code>.</p>
</blockquote>
</blockquote>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201213165255976.png" class="" title="try">
<h1 id="Tracker服务器"><a href="#Tracker服务器" class="headerlink" title="Tracker服务器"></a>Tracker服务器</h1><blockquote>
<p><a href="https://lala.im/4049.html" target="_blank" rel="noopener external nofollow noreferrer">使用OpenTracker自建高性能Tracker服务器</a></p>
<p><a href="http://erdgeist.org/arts/software/opentracker/" target="_blank" rel="noopener external nofollow noreferrer">OpenTracker</a></p>
</blockquote>
<h1 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/35318041" target="_blank" rel="noopener external nofollow noreferrer">Python实现简单的web服务器</a></p>
<p><a href="https://www.mkshell.com/how-to-build-web-server-python/" target="_blank" rel="noopener external nofollow noreferrer"><strong>由浅入深 | 如何一步步地搭建一个Web服务器</strong></a></p>
</blockquote>
<h1 id="数据库服务器"><a href="#数据库服务器" class="headerlink" title="数据库服务器"></a>数据库服务器</h1><blockquote>
<p><a href="https://luoxin1992.github.io/2017/01/01/install-mysql-server/" target="_blank" rel="noopener external nofollow noreferrer"><strong>搭建MySQL服务器</strong></a></p>
<p><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL 教程</a></p>
</blockquote>
<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><p>检查本地环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="comment"># sudo apt install rpm</span></span><br></pre></td></tr></table></figure>
<p>获取Mysql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://dev.mysql.com/get/mysql-apt-config_0.8.1-1_all.deb</span><br></pre></td></tr></table></figure>
<p>安装软件包：（<a href="https://man.linuxde.net/dpkg" target="_blank" rel="noopener external nofollow noreferrer">dpkg « Linux命令大全</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config_0.8.1-1_all.deb</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装mysql-server，选择5.7的稳定版本</p>
</blockquote>
<p>更新软件源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>安装mysql-server：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置数据库root用户的密码</p>
</blockquote>
<h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动mysql服务</span></span><br><span class="line">service mysql start</span><br><span class="line"><span class="comment"># 停止mysql服务</span></span><br><span class="line">service mysql stop</span><br><span class="line"><span class="comment"># 查看mysql服务当前状态</span></span><br><span class="line">service mysql status</span><br></pre></td></tr></table></figure>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201213212736992.png" class="" title="MySQL status">
<blockquote>
<p>mysql默认监听3306端口</p>
</blockquote>
<h2 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h2><p>以root用户进行登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后输入密码</p>
</blockquote>
<p>查看用户列表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">User</span>, Host, <span class="keyword">plugin</span> <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a> 初次安装后无法登录的处理</p>
</blockquote>
<p>管理员强制登陆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root <span class="comment"># I had to use "sudo" since is new installation</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a> JavaSccript mysql连接数据库失败的处理</p>
</blockquote>
<h3 id="用户生成"><a href="#用户生成" class="headerlink" title="用户生成"></a>用户生成</h3><blockquote>
<p><a href="https://www.runoob.com/mysql/mysql-administration.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL 管理 </a> 新版MySQL不再支持直接向user表中添加用户。需要使用<code>CREATE USER</code>声明。</p>
<p><a href="https://www.yiibai.com/mysql/create-user.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>MySQL中的用户帐户简介</strong></a></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> username@hostname <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="keyword">password</span>;</span><br></pre></td></tr></table></figure>
<p>例如：下面这个用户只允许从<code>localhost</code>主机并使用密码为<code>guest233</code>连接到MySQL数据库服务器。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> guest@localhost <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'guest233'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>@localhost</code>相当于访问地址的约束。</p>
<p><a href="https://stackoverflow.com/questions/30692812/mysql-user-db-does-not-have-password-columns-installing-mysql-on-osx" target="_blank" rel="noopener external nofollow noreferrer">MySQL user DB does not have password columns - Installing MySQL on OSX </a><code>mysql&gt; describe user;</code></p>
</blockquote>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><blockquote>
<p><a href="https://www.yiibai.com/mysql/grant.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL GRANT语句简介</a></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> privilege,[privilege],.. <span class="keyword">ON</span> privilege_level </span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="keyword">password</span>]</span><br><span class="line">[REQUIRE tsl_option]</span><br><span class="line">[<span class="keyword">WITH</span> [GRANT_OPTION | resource_option]];</span><br></pre></td></tr></table></figure>
<p>赋予<code>auditor</code>在某个数据库上的所有权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> somedb.* <span class="keyword">TO</span> auditor@localhost;</span><br></pre></td></tr></table></figure>
<h2 id="创建数据库和表单"><a href="#创建数据库和表单" class="headerlink" title="创建数据库和表单"></a>创建数据库和表单</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE qqshare;</span><br><span class="line">use qqshare;</span><br></pre></td></tr></table></figure>
<p>创建<code>qqshare_info</code>数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> qqshare_info(</span><br><span class="line">   filename <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   course <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">   teacher <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   downloadtime <span class="built_in">INT</span>,</span><br><span class="line">   filesize <span class="built_in">INT</span>,</span><br><span class="line">   uploadtime <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   fileformat <span class="built_in">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">   magnetURI <span class="built_in">VARCHAR</span>(<span class="number">700</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   description <span class="built_in">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( magnetURI )</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p>创建<code>user_info</code>数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> user_info(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">'Anonymous'</span>,</span><br><span class="line">   downloadrecord <span class="built_in">VARCHAR</span>(<span class="number">10000</span>),</span><br><span class="line">   uploadrecord <span class="built_in">VARCHAR</span>(<span class="number">10000</span>),</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">id</span> )</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> qqshare_info;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> user_info;</span><br></pre></td></tr></table></figure>
<h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line">desc qqshare_info;</span><br><span class="line">desc user_info;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------------------+</span><br><span class="line">| Tables_in_qqshare |</span><br><span class="line">+-------------------+</span><br><span class="line">| qqshare_info      |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( field1, field2,...fieldN )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>
<p>清洗测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> qqshare;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> qqshare_info;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> user_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> qqshare_info(</span><br><span class="line">   filename <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   course <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">   teacher <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   downloadtime <span class="built_in">INT</span>,</span><br><span class="line">   filesize <span class="built_in">INT</span>,</span><br><span class="line">   uploadtime <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   fileformat <span class="built_in">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">   magnetURI <span class="built_in">VARCHAR</span>(<span class="number">700</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   description <span class="built_in">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( magnetURI )</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> user_info(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">'Anonymous'</span>,</span><br><span class="line">   downloadrecord <span class="built_in">VARCHAR</span>(<span class="number">10000</span>) <span class="keyword">DEFAULT</span> <span class="string">','</span>,</span><br><span class="line">   uploadrecord <span class="built_in">VARCHAR</span>(<span class="number">10000</span>) <span class="keyword">DEFAULT</span> <span class="string">','</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">id</span> )</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime,filesize)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"Sintel"</span>, <span class="string">"组合数学"</span>, <span class="string">"马昱春"</span>, <span class="string">".docx"</span>, <span class="string">"magnet:?xt=urn:btih:08ada5a7a6183aae1e09d831df6748d566095a10&amp;dn=Sintel&amp;tr=udp%3A%2F%2Fexplodie.org%3A6969&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&amp;tr=wss%3A%2F%2Ftracker.btorrent.xyz&amp;tr=wss%3A%2F%2Ftracker.fastcast.nz&amp;tr=wss%3A%2F%2Ftracker.openwebtorrent.com&amp;ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F&amp;xs=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2Fsintel.torrent"</span>,<span class="number">3</span>,<span class="string">"这课真的难"</span>,<span class="string">"2020-12-01"</span>,<span class="number">124923</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime,filesize)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"组合数学2017期末A2我觉得很无聊"</span>, <span class="string">"组合数学"</span>, <span class="string">"马昱春"</span>, <span class="string">".pdf"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1367a88a"</span>,<span class="number">10</span>,<span class="string">"太难了~~"</span>,<span class="string">"2020-10-01"</span>,<span class="number">845634</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"微积分A2020期末答案"</span>, <span class="string">"微积分A"</span>, <span class="string">"苏爷爷"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1361288a"</span>,<span class="number">17</span>,<span class="string">"平均分90分"</span>,<span class="string">"2019-12-01"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"毛概展示PPT"</span>, <span class="string">"毛概"</span>, <span class="string">"Unknown"</span>, <span class="string">".ppt"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f515a345aa7c1367a88a"</span>,<span class="number">103</span>,<span class="string">"参考看看吧"</span>,<span class="string">"2020-11-09"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络项目3"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".pdf"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1361188a"</span>,<span class="number">10</span>,<span class="string">"zys永远滴神"</span>,<span class="string">"2020-12-01"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络项目1"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".pdf"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1362188a"</span>,<span class="number">10</span>,<span class="string">"wxh永远滴神"</span>,<span class="string">"2020-12-03"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络项目2"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa7c1362180a"</span>,<span class="number">11</span>,<span class="string">"tql"</span>,<span class="string">"2020-12-02"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"复变函数期末总结"</span>, <span class="string">"复变函数"</span>, <span class="string">"YY"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa7c1362187a"</span>,<span class="number">111</span>,<span class="string">"背出来你就不会挂了，拜杨幂是没用的"</span>,<span class="string">"2020-12-04"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"硕士生英语Schedule"</span>, <span class="string">"硕士生英语"</span>, <span class="string">"Kam"</span>, <span class="string">".pdf"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe8c06bga25559dc9f519b345aa7c1362182a"</span>,<span class="number">1</span>,<span class="string">"学英语~~"</span>,<span class="string">"2020-12-02"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime,filesize)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"离散数学A课件"</span>, <span class="string">"离散数学"</span>, <span class="string">"ZYSyyds!"</span>, <span class="string">".ppt"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa1c1362182a"</span>,<span class="number">121</span>,<span class="string">"数理逻辑与集合论"</span>,<span class="string">"2020-12-09"</span>,<span class="number">3145134</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"操作系统2020年期中A卷"</span>, <span class="string">"操作系统"</span>, <span class="string">"ABC"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa7c1362982a"</span>,<span class="number">61</span>,<span class="string">"送分题"</span>,<span class="string">"2020-10-01"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"人工智能导论大作业"</span>, <span class="string">"人工智能"</span>, <span class="string">"马少平"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:a12fe1c06bga25553dc9f519b345aa7c1362182a"</span>,<span class="number">51</span>,<span class="string">"四子棋的AI算法"</span>,<span class="string">"2020-12-14"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"线性代数2018年秋"</span>, <span class="string">"线性代数"</span>, <span class="string">"XD"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:c32fe1c06bga25559dc9f519b345aa7c1362182a"</span>,<span class="number">81</span>,<span class="string">"好多人挂科"</span>,<span class="string">"2020-12-16"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络项目5"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:a12fe1c06bba2g559dc9f519b345aa7c1362180a"</span>,<span class="number">11</span>,<span class="string">"永远滴神"</span>,<span class="string">"2020-12-06"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"数电A4小抄"</span>, <span class="string">"数字电路"</span>, <span class="string">"XX"</span>, <span class="string">".pdf"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba25559dc9f519b345aa7c1362180a"</span>,<span class="number">71</span>,<span class="string">"要带放大镜去看"</span>,<span class="string">"2020-12-05"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络课件"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".pptx"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba15559dc9f519b345aa7c1362180a"</span>,<span class="number">9</span>,<span class="string">"看不懂又能怎么办呢QAQ"</span>,<span class="string">"2020-12-11"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"自然辨证法作业"</span>, <span class="string">"自然辨证法"</span>, <span class="string">"XX"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba25559dc9f549b345aa7c1362180a"</span>,<span class="number">23</span>,<span class="string">"4000字以上，太卷了吧"</span>,<span class="string">"2020-11-05"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"高等计算机网络报告"</span>, <span class="string">"高等计算机网络"</span>, <span class="string">"徐恪"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba25559dd9f519b345aa7c1362180a"</span>,<span class="number">14</span>,<span class="string">"做一个项目花挺多时间"</span>,<span class="string">"2020-12-08"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"深入浅出统计学"</span>, <span class="string">"统计学原理"</span>, <span class="string">"Mr.H"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba25559dc9f619b345aa2c1362180a"</span>,<span class="number">7</span>,<span class="string">"统计学是AI的基础啊"</span>,<span class="string">"2020-12-09"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"疯狂学英语"</span>, <span class="string">"大学英语"</span>, <span class="string">"超神"</span>, <span class="string">".zip"</span>, <span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba255594c9f119b345aa7c1362190a"</span>,<span class="number">8</span>,<span class="string">"英语咋学"</span>,<span class="string">"2020-12-10"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"测试文件"</span>, <span class="string">"测试"</span>, <span class="string">"测"</span>, <span class="string">".test"</span>, <span class="string">"magnet:?fake"</span>,<span class="number">7</span>,<span class="string">"测试~~~"</span>,<span class="string">"2020-12-01"</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qqshare_info ( filename,course,teacher,fileformat,magnetURI,downloadtime ,description,uploadtime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"测试文件2"</span>, <span class="string">"测试2"</span>, <span class="string">"测2"</span>, <span class="string">".test2"</span>, <span class="string">"magnet:?fake2"</span>,<span class="number">5</span>,<span class="string">"测试2~~~"</span>,<span class="string">"2020-12-02"</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span> )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"2020210942"</span>,<span class="string">"123456"</span>,<span class="string">"zouyansong"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span>,downloadrecord )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"2020210041"</span>,<span class="string">"654321"</span>,<span class="string">"shenxi"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa7c1362180a"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span>,downloadrecord,uploadrecord )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"2020000000"</span>,<span class="string">"123456"</span>,<span class="string">"robot"</span>, <span class="string">",magnet:?xt=urn:btih:c12fe1c06bga25559dc9f519b345aa7c1362180a,magnet:?xt=urn:btih:cg2fe1c06bba25559dc9f549b345aa7c1362180a,magnet:?xt=urn:btih:c32fe1c06bga25559dc9f519b345aa7c1362182a"</span>, <span class="string">"magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1361288a"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span>,downloadrecord,uploadrecord )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"123"</span>,<span class="string">"123"</span>,<span class="string">"test123"</span>,<span class="string">"magnet:?xt=urn:btih:cg2fe1c06bba255594c9f119b345aa7c1362190a"</span>, <span class="string">",magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b345aa7c1367a88a,magnet:?xt=urn:btih:c12fe1c06bba25559dc9f519b335aa7c1367a88a"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span>,downloadrecord,uploadrecord )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"321"</span>,<span class="string">"321"</span>,<span class="string">"test321"</span>,<span class="string">"magnet:?fake,magnet:?fake2"</span>, <span class="string">""</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( <span class="keyword">id</span>,<span class="keyword">password</span>,<span class="keyword">name</span>,downloadrecord,uploadrecord )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">"912"</span>,<span class="string">"912"</span>,<span class="string">"test912"</span>,<span class="string">"magnet:?fake2"</span>, <span class="string">"magnet:?fake2,magnet:?fake"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure>
<h3 id="查看数据项"><a href="#查看数据项" class="headerlink" title="查看数据项"></a>查看数据项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> qqshare_info;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_info;</span><br></pre></td></tr></table></figure>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201213220909171.png" class="" title="查看数据项">
<h1 id="搜索初探"><a href="#搜索初探" class="headerlink" title="搜索初探"></a>搜索初探</h1><blockquote>
<p><a href="https://blog.csdn.net/geerniya/article/details/79025405" target="_blank" rel="noopener external nofollow noreferrer">django学习——如何实现简单的搜索功能</a></p>
</blockquote>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>用SQL查询代替搜索。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> qqshare_info</span><br><span class="line"><span class="keyword">WHERE</span> filename REGEXP <span class="string">"组合数学"</span> <span class="keyword">OR</span> course REGEXP <span class="string">"组合数学"</span> <span class="keyword">OR</span> teacher REGEXP <span class="string">"马昱春"</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> filename, course, teacher</span><br><span class="line"><span class="keyword">FROM</span> qqshare_info</span><br><span class="line"><span class="keyword">WHERE</span> filename REGEXP <span class="string">"组合数学"</span> <span class="keyword">OR</span> course REGEXP <span class="string">"组合数学"</span> <span class="keyword">OR</span> teacher REGEXP <span class="string">"马昱春"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Local种子匹配"><a href="#Local种子匹配" class="headerlink" title="Local种子匹配"></a>Local种子匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> torrent_parser</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    HOST, PORT = <span class="string">''</span>, <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    listen_socket.bind((HOST, PORT))</span><br><span class="line">    listen_socket.listen(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Serving HTTP on port %s ...'</span> % PORT)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_connection, client_address = listen_socket.accept()</span><br><span class="line">        request = client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#print(request.decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line">        http_response = <span class="string">"""\</span></span><br><span class="line"><span class="string">    HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        http_response += json_search_result_file</span><br><span class="line">        client_connection.sendall(http_response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        client_connection.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    torrent_path = <span class="string">"./torrents/"</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    torrent_list = os.listdir(torrent_path)</span><br><span class="line">    <span class="keyword">for</span> torrent_file_name <span class="keyword">in</span> torrent_list:</span><br><span class="line">        torrent_parser.parse_torrent_file(torrent_file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h1 id="Node-Express-后端"><a href="#Node-Express-后端" class="headerlink" title="Node Express 后端"></a>Node Express 后端</h1><blockquote>
<p><a href="https://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="noopener external nofollow noreferrer">Node.js Express 框架</a></p>
<p><a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener external nofollow noreferrer">https://www.npmjs.com/package/express</a></p>
<p><a href="https://expressjs.com/en/5x/api.html#req" target="_blank" rel="noopener external nofollow noreferrer">https://expressjs.com/en/5x/api.html#req</a></p>
</blockquote>
<h2 id="Node项目配置"><a href="#Node项目配置" class="headerlink" title="Node项目配置"></a>Node项目配置</h2><p>检查Node版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>测试JS程序<code>server.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8880</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://localhost:8880/'</span>);</span><br></pre></td></tr></table></figure>
<p><strong>运行测试程序</strong><code>server.js</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
<p>访问<code>http://localhost:8880/</code>即可得到结果。页面返回<code>&#39;Hello World\n&#39;</code>。</p>
<p>在测试完成之后按<code>Ctrl C</code>退出程序，<code>Ctrl Z</code>只是退出界面，会导致程序继续运行，端口号被占用。</p>
<blockquote>
<p><a href="http://nodejs.cn/learn/nodejs-accept-arguments-from-the-command-line" target="_blank" rel="noopener external nofollow noreferrer">Node.js 从命令行接收参数</a></p>
</blockquote>
<h3 id="Express风格"><a href="#Express风格" class="headerlink" title="Express风格"></a>Express风格</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//express_demo.js 文件</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.address().address</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>访问<code>http://localhost:8081/</code>得到结果。页面返回<code>&#39;Hello World&#39;</code>。</p>
<h2 id="服务器设计"><a href="#服务器设计" class="headerlink" title="服务器设计"></a>服务器设计</h2><blockquote>
<p><a href="https://github.com/stellarkey/server_engine" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/stellarkey/server_engine</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试查询链接：</span></span><br><span class="line"><span class="comment">// http://localhost:8081/api/search?filename=%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6&amp;course=%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6&amp;teacher=%E9%A9%AC%E6%98%B1%E6%98%A5</span></span><br><span class="line"><span class="comment">// 测试插入链接：（自行）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行：node server.js --port=8023  可自定义端口</span></span><br><span class="line"><span class="keyword">const</span> args = <span class="built_in">require</span>(<span class="string">'minimist'</span>)(process.argv.slice(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> port_number= args[<span class="string">'port'</span>] ? args[<span class="string">'port'</span>] : <span class="number">8081</span>; <span class="comment">// 端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/api/uservalid'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/uservalid'</span>);</span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">    postData = postData + chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">    postData = querystring.parse(postData);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'postData:'</span>, postData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> post_id = postData.id;</span><br><span class="line">    <span class="keyword">var</span> post_pwd = postData.pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">    <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    connection.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SQL_query = <span class="string">'SELECT id,password,name FROM user_info WHERE id=\''</span> + post_id + <span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    connection.query(SQL_query,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'----------------------SELECT------------------------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"SQL_query:"</span>, SQL_query);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"result:"</span>, result);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(result.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"用户存在"</span>);</span><br><span class="line">        <span class="keyword">if</span> (result[<span class="number">0</span>][<span class="string">'password'</span>] == <span class="built_in">Number</span>(postData[<span class="string">'pwd'</span>]))&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"密码正确"</span>);</span><br><span class="line">          resData = &#123;<span class="attr">flag</span>:<span class="number">1</span>,<span class="attr">name</span>:result[<span class="number">0</span>][<span class="string">'name'</span>]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"密码错误"</span>);</span><br><span class="line">          resData = &#123;<span class="attr">flag</span>:<span class="number">2</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"resData:"</span>, resData);</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"用户不存在"</span>);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>:<span class="number">3</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/hotfile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/hotfile'</span>);</span><br><span class="line">  <span class="comment">// 暂时设计为选择【所有时间中下载量最高的10个文件】</span></span><br><span class="line">  <span class="comment">// 如果需要获得近期的热门文件，可能需要维护一个定期更新的下载量数组，然后循环更新，暂时搁置</span></span><br><span class="line">  <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">  <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host     : <span class="string">'localhost'</span>,</span><br><span class="line">    user     : <span class="string">'root'</span>,</span><br><span class="line">    password : <span class="string">'123456'</span>,</span><br><span class="line">    database : <span class="string">'qqshare'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.connect();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> SQL_query = <span class="string">'SELECT filename,description FROM qqshare_info ORDER BY downloadtime DESC LIMIT 10;'</span>;</span><br><span class="line"></span><br><span class="line">  connection.query(SQL_query, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/search'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/search'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"req.query: "</span>, req.query);</span><br><span class="line">  <span class="comment">//console.log(req.query.filename);</span></span><br><span class="line">  <span class="comment">//res.send(req.query.filename);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">  <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host     : <span class="string">'localhost'</span>,</span><br><span class="line">    user     : <span class="string">'root'</span>,</span><br><span class="line">    password : <span class="string">'123456'</span>,</span><br><span class="line">    database : <span class="string">'qqshare'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.connect();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> filename_filter = req.query.filename ? req.query.filename : <span class="string">" "</span>;</span><br><span class="line">  <span class="keyword">var</span> course_filter = req.query.course ? req.query.course : <span class="string">" "</span>;</span><br><span class="line">  <span class="keyword">var</span> teacher_filter = req.query.teacher ? req.query.teacher : <span class="string">" "</span>;</span><br><span class="line">  <span class="comment">// if it's empty, then use: " " (with a space)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> SQL_query = <span class="string">'SELECT * FROM qqshare_info WHERE filename REGEXP "'</span></span><br><span class="line">              + filename_filter </span><br><span class="line">              + <span class="string">'" OR course REGEXP "'</span> </span><br><span class="line">              + course_filter </span><br><span class="line">              + <span class="string">'" OR teacher REGEXP "'</span></span><br><span class="line">              + teacher_filter</span><br><span class="line">              + <span class="string">'";'</span>;</span><br><span class="line"></span><br><span class="line">  connection.query(SQL_query, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(results);</span></span><br><span class="line">    <span class="comment">//console.log('The solution is: ', results[0].filename);</span></span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/api/upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/upload'</span>);</span><br><span class="line">  <span class="comment">// magnetURI中有特殊字符，可能需要转义：</span></span><br><span class="line">  <span class="comment">// https://segmentfault.com/a/1190000009492789</span></span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">""</span>;</span><br><span class="line">  req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">    postData = postData + chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">    postData = querystring.parse(postData);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'postData:'</span>,postData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在文件数据表中加入该文件</span></span><br><span class="line">    <span class="keyword">var</span> filename = postData.filename;</span><br><span class="line">    <span class="keyword">var</span> course = postData.course;</span><br><span class="line">    <span class="keyword">var</span> teacher = postData.teacher;</span><br><span class="line">    <span class="keyword">var</span> downloadtime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> filesize = postData.filesize;</span><br><span class="line">    <span class="keyword">var</span> uploadtime = getCurrDate();</span><br><span class="line">    <span class="keyword">var</span> fileformat = postData.fileformat;</span><br><span class="line">    <span class="keyword">var</span> description = postData.description;</span><br><span class="line">    <span class="keyword">var</span> magnetURI = postData.magnetURI;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"---------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"magnetURI.length"</span>, magnetURI.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">    <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    connection.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addSql = <span class="string">'INSERT INTO qqshare_info (filename,course,teacher,downloadtime,filesize,uploadtime,fileformat,description,magnetURI) VALUES(?,?,?,?,?,?,?,?,\''</span></span><br><span class="line">            + magnetURI +<span class="string">'\')'</span>;</span><br><span class="line">    <span class="keyword">var</span> addSqlParams = [filename,course,teacher,downloadtime,filesize,uploadtime,fileformat,description];</span><br><span class="line"></span><br><span class="line">    connection.query(addSql,addSqlParams,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[INSERT ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'--------------INSERT----------------'</span>);</span><br><span class="line">      <span class="comment">//console.log('INSERT ID:',result.insertId);        </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'INSERT ID:'</span>,result);        </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// resData = &#123;flag: 1&#125;;</span></span><br><span class="line">      <span class="comment">// res.setHeader("Content-Type", "application/json");</span></span><br><span class="line">      <span class="comment">// res.end(JSON.stringify(resData));</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connection.query("SELECT * FROM qqshare_info;",function (err, result) &#123;</span></span><br><span class="line">    <span class="comment">//   if(err)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log('[SELECT ERROR] - ',err.message);</span></span><br><span class="line">    <span class="comment">//     return;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在用户数据表中更新用户的历史上传记录</span></span><br><span class="line">    <span class="comment">// 为避免多次重传，这部分放在后，只有在成功插入文件数据库后才可能执行</span></span><br><span class="line">    <span class="keyword">var</span> id = postData.id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UPDATE user_info SET uploadrecord=concat(uploadrecord,',magnet:?fake') WHERE id='123';</span></span><br><span class="line">    <span class="keyword">var</span> SQL_query = <span class="string">'UPDATE user_info SET uploadrecord=concat(uploadrecord,\','</span></span><br><span class="line">              + magnetURI</span><br><span class="line">              + <span class="string">'\') WHERE id=\''</span></span><br><span class="line">              + id</span><br><span class="line">              + <span class="string">'\';'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    connection.query(SQL_query,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'--------------------------UPDATE----------------------------'</span>);    </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">1</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    connection.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/uploadrecord'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/uploadrecord'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"req.query: "</span>, req.query);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.query.id == <span class="string">''</span>)&#123;   <span class="comment">// 空查询处理</span></span><br><span class="line">    resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"查询为空，失败。"</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">  <span class="keyword">var</span> connection1 = mysql.createConnection(&#123;</span><br><span class="line">    host     : <span class="string">'localhost'</span>,</span><br><span class="line">    user     : <span class="string">'root'</span>,</span><br><span class="line">    password : <span class="string">'123456'</span>,</span><br><span class="line">    database : <span class="string">'qqshare'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection1.connect();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> SQL_query1 = <span class="string">'SELECT uploadrecord FROM user_info WHERE id=\''</span></span><br><span class="line">              + req.query.id + <span class="string">'\';'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"SQL_query1:"</span>, SQL_query1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> uploadrecord = <span class="string">""</span>;</span><br><span class="line">  connection1.query(SQL_query1, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"results: "</span>, results);</span><br><span class="line">    </span><br><span class="line">    uploadrecord = results[<span class="number">0</span>].uploadrecord;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"uploadrecord: "</span>, uploadrecord);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="keyword">if</span>(uploadrecord == <span class="string">""</span>)&#123;</span><br><span class="line">      <span class="comment">// 当没有下载过文件时返回[]</span></span><br><span class="line">      resData = [];</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> connection2 = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    connection2.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> upload_magnet_list = uploadrecord.split(<span class="string">','</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; <span class="keyword">return</span> el != <span class="string">''</span>; &#125;);    <span class="comment">// 清洗</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"upload_magnet_list: "</span>, upload_magnet_list);</span><br><span class="line"></span><br><span class="line">    upload_magnet_list = <span class="built_in">JSON</span>.stringify(upload_magnet_list).replace(<span class="string">'['</span>,<span class="string">'('</span>).replace(<span class="string">']'</span>,<span class="string">')'</span>).replace(<span class="regexp">/\"/g</span>,<span class="string">'\''</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"upload_magnet_list(after modify): "</span>, upload_magnet_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SQL_query2 = <span class="string">'SELECT filename,downloadtime,uploadtime FROM qqshare_info WHERE magnetURI IN '</span></span><br><span class="line">                    + upload_magnet_list + <span class="string">';'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SQL_query2:"</span>, SQL_query2);</span><br><span class="line"></span><br><span class="line">    connection2.query(SQL_query2, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    connection2.end();</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection1.end();</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/api/download'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/download'</span>);</span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">""</span>;</span><br><span class="line">  req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">    postData = postData + chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">    postData = querystring.parse(postData);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'postData:'</span>, postData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在文件数据表给该文件的downloadtime加一</span></span><br><span class="line">    <span class="keyword">var</span> magnetURI = postData.magnetURI;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"magnetURI:"</span>, magnetURI);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">    <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    connection.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SQL_query = <span class="string">'UPDATE qqshare_info SET downloadtime=downloadtime+1 WHERE magnetURI=\''</span></span><br><span class="line">                + magnetURI + <span class="string">'\';'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line"></span><br><span class="line">    connection.query(SQL_query,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'----------------UPDATE1----------------'</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line">      <span class="comment">// resData = &#123;flag: 1&#125;;</span></span><br><span class="line">      <span class="comment">// res.setHeader("Content-Type", "application/json");</span></span><br><span class="line">      <span class="comment">// res.end(JSON.stringify(resData));</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在用户数据表中把该文件的加入到用户的历史下载记录中</span></span><br><span class="line">    <span class="keyword">var</span> id = postData.id;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"id:"</span>, id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UPDATE user_info SET downloadrecord=concat(downloadrecord,',magnet:?fake') WHERE id='123';</span></span><br><span class="line">    <span class="keyword">var</span> SQL_query = <span class="string">'UPDATE user_info SET downloadrecord=concat(downloadrecord,\','</span></span><br><span class="line">              + magnetURI</span><br><span class="line">              + <span class="string">'\') WHERE id=\''</span></span><br><span class="line">              + id</span><br><span class="line">              + <span class="string">'\';'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line"></span><br><span class="line">    connection.query(SQL_query,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'----------------UPDATE2----------------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SQL:'</span>, SQL_query);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">1</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    connection.end();</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/downloadrecord'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/downloadrecord'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"req.query: "</span>, req.query);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.query.id == <span class="string">''</span>)&#123;   <span class="comment">// 空查询处理</span></span><br><span class="line">    resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"查询为空，失败。"</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">  <span class="keyword">var</span> connection1 = mysql.createConnection(&#123;</span><br><span class="line">    host     : <span class="string">'localhost'</span>,</span><br><span class="line">    user     : <span class="string">'root'</span>,</span><br><span class="line">    password : <span class="string">'123456'</span>,</span><br><span class="line">    database : <span class="string">'qqshare'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection1.connect();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> SQL_query1 = <span class="string">'SELECT downloadrecord FROM user_info WHERE id=\''</span></span><br><span class="line">              + req.query.id + <span class="string">'\';'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"SQL_query1:"</span>, SQL_query1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> downloadrecord = <span class="string">""</span>;</span><br><span class="line">  connection1.query(SQL_query1, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"results: "</span>, results);</span><br><span class="line">    </span><br><span class="line">    downloadrecord = results[<span class="number">0</span>].downloadrecord;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"downloadrecord: "</span>, downloadrecord);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    <span class="keyword">if</span>(downloadrecord == <span class="string">""</span>)&#123;</span><br><span class="line">      <span class="comment">// 当没有下载过文件时返回[]</span></span><br><span class="line">      resData = [];</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> connection2 = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    connection2.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> download_magnet_list = downloadrecord.split(<span class="string">','</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; <span class="keyword">return</span> el != <span class="string">''</span>; &#125;);    <span class="comment">// 清洗</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"download_magnet_list: "</span>, download_magnet_list);</span><br><span class="line"></span><br><span class="line">    download_magnet_list = <span class="built_in">JSON</span>.stringify(download_magnet_list).replace(<span class="string">'['</span>,<span class="string">'('</span>).replace(<span class="string">']'</span>,<span class="string">')'</span>).replace(<span class="regexp">/\"/g</span>,<span class="string">'\''</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"download_magnet_list(after modify): "</span>, download_magnet_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SQL_query2 = <span class="string">'SELECT filename,downloadtime,uploadtime FROM qqshare_info WHERE magnetURI IN '</span></span><br><span class="line">                    + download_magnet_list + <span class="string">';'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SQL_query2:"</span>, SQL_query2);</span><br><span class="line"></span><br><span class="line">    connection2.query(SQL_query2, <span class="function"><span class="keyword">function</span> (<span class="params">err, results, fields</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    connection2.end();</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection1.end();</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/api/changename'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/changename'</span>);</span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">""</span>;</span><br><span class="line">  req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">    postData = postData + chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">    postData = querystring.parse(postData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id = postData.id;</span><br><span class="line">    <span class="keyword">var</span> newname = postData.newname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">    <span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">      host     : <span class="string">'localhost'</span>,</span><br><span class="line">      user     : <span class="string">'root'</span>,</span><br><span class="line">      password : <span class="string">'123456'</span>,</span><br><span class="line">      database : <span class="string">'qqshare'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    connection.connect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SQL_query = <span class="string">'UPDATE user_info SET name=\''</span>+newname+<span class="string">'\' WHERE id=\''</span>+id+<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    connection.query(SQL_query,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class="line">        resData = &#123;<span class="attr">flag</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'--------------------------UPDATE----------------------------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"SQL_query:"</span>, SQL_query);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"newname:"</span>, postData.newname);</span><br><span class="line">      </span><br><span class="line">      resData = &#123;<span class="attr">flag</span>: <span class="number">1</span>&#125;;</span><br><span class="line">      res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    connection.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/test_getCurrDate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'/api/test_getCurrDate'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(getCurrDate());</span><br><span class="line">  res.send(getCurrDate());</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(port_number, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.address().address</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"QQShare is running at http://%s:%s"</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://blog.csdn.net/itmyhome1990/article/details/89372292</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	<span class="keyword">var</span> sep = <span class="string">"-"</span>;</span><br><span class="line">	<span class="keyword">var</span> year = date.getFullYear(); <span class="comment">//获取完整的年份(4位)</span></span><br><span class="line">	<span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">	<span class="keyword">var</span> day = date.getDate(); <span class="comment">//获取当前日</span></span><br><span class="line">	<span class="keyword">if</span> (month &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">		month = <span class="string">"0"</span> + month;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (day &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">		day = <span class="string">"0"</span> + day;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> currentdate = year + sep + month + sep + day;</span><br><span class="line">	<span class="keyword">return</span> currentdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务器持续运行"><a href="#服务器持续运行" class="headerlink" title="服务器持续运行"></a>服务器持续运行</h2><blockquote>
<p><a href="https://blog.csdn.net/zzpzheng/article/details/54427582" target="_blank" rel="noopener external nofollow noreferrer">关闭shell后如何保持程序继续运行</a></p>
<blockquote>
<p>在执行的命令之前增加nohup，在命令后增加&amp;。然后点任意键退回到shell，再exit，node.js程序仍然会在后台运行。</p>
<p>如；nohup npm start &amp;</p>
</blockquote>
<p><a href="https://blog.csdn.net/calvinpaean/article/details/91349024" target="_blank" rel="noopener external nofollow noreferrer">Linux下SSH远程连接断开后让程序继续运行解决办法、在后台运行</a></p>
<p><a href="https://www.zhihu.com/question/20709809" target="_blank" rel="noopener external nofollow noreferrer">Linux ssh状态下如何后台运行程序？</a></p>
<p><a href="https://huanghailiang.github.io/2017/09/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener external nofollow noreferrer"><strong>ssh连接服务器中断，如何让命令继续在服务器执行</strong></a></p>
<p><a href="https://blog.csdn.net/gatieme/article/details/52777721" target="_blank" rel="noopener external nofollow noreferrer">解决Linux关闭终端(关闭SSH等)后运行的程序自动停止</a></p>
</blockquote>
<h3 id="nohup命令"><a href="#nohup命令" class="headerlink" title="nohup命令"></a>nohup命令</h3><p>不挂断地运行命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup Command [ Arg … ] [　&amp; ]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nohup命令将当前指令的所有输出都输出到了当前文件夹下的nohup.out文件。加不加&amp;并不会影响这个命令。只是让程序前台或者后台运行而已。</p>
<p>使用 jobs 查看任务。<br>使用 fg %n　关闭。</p>
</blockquote>
<h3 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen</span><br></pre></td></tr></table></figure>
<p>Screen将创建一个执行shell的全屏窗口。你可以执行任意shell程序，就像在ssh窗口中那样。在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该screen会话退出，否则screen自动切换到前一个窗口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen vi test.c</span><br></pre></td></tr></table></figure>
<p>Screen创建一个执行vi test.c的单窗口会话，退出vi将退出该窗口/会话。</p>
<h3 id="byobu命令"><a href="#byobu命令" class="headerlink" title="byobu命令"></a>byobu命令</h3><p>Unbuntu图形界面可以使用，更加集成化，且可以使用快捷键。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install byobu</span><br></pre></td></tr></table></figure>
<h3 id="【pm2】"><a href="#【pm2】" class="headerlink" title="【pm2】"></a>【pm2】</h3><blockquote>
<p><a href="https://blog.csdn.net/qq_36938617/article/details/95679412" target="_blank" rel="noopener external nofollow noreferrer">pm2的基本使用</a></p>
</blockquote>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -y pm2 -g</span><br></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>如有必要，修改<code>Package.json</code>中的<code>start</code>接口：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"start": "node server.js"</span><br></pre></td></tr></table></figure>
<p>通过pm2运行项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 start server.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要忘记添加项目启动脚本<code>server.js</code>。</p>
<p>这个可以用~</p>
</blockquote>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>查看当前运行的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 ls  <span class="comment"># 或: sudo pm2 list</span></span><br></pre></td></tr></table></figure>
<h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>pm2生成的日志文件的默认路径在$ HOME /.pm2/logs /下面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.pm2/logs/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>
<p>查看历史日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 logs --lines 200         <span class="comment"># 查看历史日志</span></span><br></pre></td></tr></table></figure>
<p>查看实时日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 logs             <span class="comment"># 实时显示日志</span></span><br></pre></td></tr></table></figure>
<p>其他日志操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 logs --raw			<span class="comment"># 显示流中的所有进程日志</span></span><br><span class="line">sudo pm2 flush			<span class="comment"># 清空所有日志文件</span></span><br><span class="line">sudo pm2 reloadLogs		<span class="comment"># 重新加载所有日志</span></span><br></pre></td></tr></table></figure>
<h5 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h5><p>仪表盘可以显示实时监控的动态数据，退出Ctrl+C</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 monit          <span class="comment"># 查看仪表盘</span></span><br></pre></td></tr></table></figure>
<img data-src="/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20201216192812552.png" class="" title="仪表盘">
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><p>停止当前运行的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 stop server       <span class="comment"># 停止项目名为server的应用程序</span></span><br><span class="line"></span><br><span class="line">sudo pm2 stop 0            <span class="comment"># 停止项目id为0的应用程序</span></span><br><span class="line"></span><br><span class="line">sudo pm2 stop all          <span class="comment"># 停止pm2管理的所有应用程序</span></span><br></pre></td></tr></table></figure>
<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 restart all      <span class="comment"># 重启pm2管理的所有应用程序</span></span><br><span class="line"></span><br><span class="line">sudo pm2 reload all       <span class="comment"># 重载pm2管理的所有应用程序</span></span><br></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 delete server     <span class="comment"># 删除项目名为sever的应用程序的进程</span></span><br><span class="line"></span><br><span class="line">sudo pm2 delete 0          <span class="comment"># 删除项目id为0的应用程序的进程</span></span><br><span class="line"></span><br><span class="line">sudo pm2 delete all        <span class="comment"># 删除pm2管理的所有应用程序的进程</span></span><br></pre></td></tr></table></figure>
<h4 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h4><p>服务器开机自启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pm2 startup</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>全栈</tag>
        <tag>后端</tag>
        <tag>JavaScript</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Review of ICS</title>
    <url>/Notes-of-Intro-to-Computer-System/</url>
    <content><![CDATA[<p>“Intro to Computer Systems” is a CS course held by CMU with course number CS213. Its home page says:</p>
<blockquote>
<p>The ICS course provides <strong>a programmer’s view</strong> of how computer systems execute programs, store information, and communicate. It <u>enables students to become more effective programmers</u>, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: <strong>machine-level code</strong> and its generation by optimizing compilers, <strong>performance evaluation and optimization</strong>, computer arithmetic, <strong>memory organization and management</strong>, networking technology and protocols, and supporting concurrent computation.</p>
</blockquote>
<p>I note down some of the good stuff in case I forgot sometime. <del>But mostly just a review before final test, don’t expect too much LOL</del>.<a id="more"></a></p>
<blockquote>
<p>Video resource on bilibili is: <a href="https://www.bilibili.com/video/av10774914" target="_blank" rel="noopener external nofollow noreferrer">Here</a> (2015 Fall) or <a href="https://www.bilibili.com/video/av20304787?from=search&amp;seid=7510075707408543932" target="_blank" rel="noopener external nofollow noreferrer">Here</a>(2017 Fall). In case you need it.<br>Website of this course: <a href="https://www.cs.cmu.edu/~213/" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cmu.edu/~213/</a><br>Textbook PDF: <a href="http://www.codeman.net/wp-content/uploads/2011/12/Computer_Systems-A_Programmers_Perspective-2e.pdf" target="_blank" rel="noopener external nofollow noreferrer">Computer Systems: A Programmer’s Perspective</a>(2rd edition),<a href="https://jackmk.ctfile.com/fs/14155983-229707836" target="_blank" rel="noopener external nofollow noreferrer">Chinese version</a>; <a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X" target="_blank" rel="noopener external nofollow noreferrer">3rd edition on amazon</a>.<br>Lecture notes: <a href="https://www.cs.cmu.edu/~213/schedule.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cmu.edu/~213/schedule.html</a><br>Test PDF: <a href="https://www.cs.cmu.edu/~213/exams.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cmu.edu/~213/exams.html</a>, <a href="./Final_Test.pdf">test</a>(<a href="./Final_Test_Answer.pdf">answer</a>), <a href="https://piazza.com/class_profile/get_resource/h6pnypl43p84yo/hajuu47gcgg6hc" target="_blank" rel="noopener external nofollow noreferrer">Moc</a>, <a href="http://www.cs.northwestern.edu/~fabianb/classes/eecs-213-s07/finalSample-s07" target="_blank" rel="noopener external nofollow noreferrer">NE</a><br>Review Slides(Chinese): <a href="./Review.pdf">review</a></p>
</blockquote>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><strong>Ex.1</strong>: Is $x^2 \geq 0$ ?</p>
<ul>
<li>Float’s: Yes!</li>
<li>Int’s: Not quiet…<ul>
<li>40000$\times$40000=1600000000</li>
<li>50000$\times$50000=-179496729 (<strong><font color=red>overflow</font></strong>)</li>
</ul>
</li>
</ul>
<p><strong>Ex.2</strong>: Is (x+y)+z = x+(y+z) ?</p>
<ul>
<li>Float’s:<ul>
<li>(1e20+ -1e20) +2.14 = 3.14</li>
<li>1e20+ (-1e20 +2.14) = 0 (<strong><font color=red>lose precision</font></strong>)</li>
</ul>
</li>
</ul>
<p><strong>Sometimes this kind of issue(corner cases) can be essential</strong>! (Even though most of time it doesn’t matter)</p>
<p>Get to know <strong>assembly</strong>(汇编).</p>
<p>Get to know memory matters. </p>
<p><strong>Ex.3</strong>: (Memory referencing bugs)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547154674891.png" class="" width="1547154674891">
<blockquote>
<p>Double type has 2 bytes.( refer to a[2] &amp; a[3])</p>
<p>System can be <strong><font color=red>vulnerable</font></strong> by this.</p>
</blockquote>
<p><strong>Ex.4</strong>. (Memory system performance)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547155431530.png" class="" width="1547155431530">
<blockquote>
<p>Those two codes’  performance differs from each other as <strong>almost 10 times</strong> on speed.</p>
<p>Showing as follows: （See in the Memory-Cache chapter, called “Memory Mountain”）</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547155607657.png" class="" width="1547155607657">
</blockquote>
<p><strong><em><font color=red face=fantasy size=6>A programmer ‘s perspective</font></em></strong>.</p>
<ul>
<li>thing need to know for whom <strong>really do the coding</strong></li>
</ul>
<blockquote>
<p>David talks about how influential this course is. (Even a story about a bookstore  in Peking University)</p>
</blockquote>
<h2 id="MORE-Course-Resources"><a href="#MORE-Course-Resources" class="headerlink" title="MORE(Course Resources)"></a>MORE(Course Resources)</h2><p>There are more topics taught in this class about network programing including several chapter.</p>
<blockquote>
<p><del>Seems the course reschedule at Jan 15th. I can’t access the slides now. The note ends here</del>. (Still can, use the schedule below instead)</p>
</blockquote>
<h3 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h3><blockquote>
<p>from: <a href="https://www.cs.cmu.edu/~213/schedule.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cmu.edu/~213/schedule.html</a></p>
</blockquote>
<p><strong>15-213/18-213/15-513: Intro to Computer Systems, Fall 2018</strong></p>
<p><strong>Notes on links</strong></p>
<ul>
<li><strong>pptx</strong> links are to Powerpoint versions of the lectures</li>
<li><strong>pdf</strong> links are to Adobe Acrobat versions of the lectures</li>
<li><strong>code</strong> links are to directories containing code used for class demonstrations</li>
<li><strong>tar</strong> links are to archive files in TAR format. Use the tar command on a linux machine to unpack these</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>Lecture/Recitation</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 1: <strong>No recitation—Semester starts with first lecture</strong></em></td>
</tr>
<tr>
<td>Overview (<a href="https://www.cs.cmu.edu/~213/lectures/01-overview.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/01-overview.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/01-overview" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Bits, Bytes, &amp; Integers I (<a href="https://www.cs.cmu.edu/~213/lectures/02-bits-ints-part1.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/02-bits-ints-part1.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/02-03-bits-ints" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 2: <strong>No recitation—Labor Day</strong> / Linux Boot Camp</em> (<a href="https://www.cs.cmu.edu/~213/activities/linux-bootcamp/linux-bootcamp.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Bits, Bytes, &amp; Integers II (<a href="https://www.cs.cmu.edu/~213/lectures/03-bits-ints-part2.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/03-bits-ints-part2.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/02-03-bits-ints" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Floating Point (<a href="https://www.cs.cmu.edu/~213/lectures/04-float.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/04-float.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 3: Datalab and Data Representations</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation03-datalab.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/recitation03-datalab-handout.pdf" target="_blank" rel="noopener external nofollow noreferrer">handout</a> , <a href="https://www.cs.cmu.edu/~213/activities/recitation03-datalab-handout-solutions.pdf" target="_blank" rel="noopener external nofollow noreferrer">solution</a>)</td>
</tr>
<tr>
<td>Machine Prog: Basics (<a href="https://www.cs.cmu.edu/~213/lectures/05-machine-basics.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/05-machine-basics.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Machine Prog: Control (<a href="https://www.cs.cmu.edu/~213/lectures/06-machine-control.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/06-machine-control.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 4: Bomb Lab</em> (<a href="https://www.cs.cmu.edu/~213/activities/bomblab-rec/recitation03-bomblab.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/bomblab-recrecitation03-bomblab.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/activities/bomblab-rec/recitation03-bomblab-handout.pdf" target="_blank" rel="noopener external nofollow noreferrer">handout</a>)</td>
</tr>
<tr>
<td>Machine Prog: Procedures (<a href="https://www.cs.cmu.edu/~213/lectures/06-machine-control-wrapup.pptx" target="_blank" rel="noopener external nofollow noreferrer">catchup-pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/06-machine-control-wrapup.pdf" target="_blank" rel="noopener external nofollow noreferrer">catchup-pdf</a> , <a href="https://www.cs.cmu.edu/~213/lectures/07-machine-procedures.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/07-machine-procedures.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Machine Prog: Data (<a href="https://www.cs.cmu.edu/~213/lectures/08-machine-data.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/08-machine-data.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 5: Attack Lab and Stacks</em> (<a href="https://www.cs.cmu.edu/~213/activities/rec5_attacklab_handout.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation05-attacklab.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/activities/rec5.tar" target="_blank" rel="noopener external nofollow noreferrer">activity</a>)</td>
</tr>
<tr>
<td>Machine Prog: Advanced (<a href="https://www.cs.cmu.edu/~213/lectures/09-machine-advanced-new.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/09-machine-advanced.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/09-machine-advanced" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Code Optimization (<a href="https://www.cs.cmu.edu/~213/lectures/10-optimization.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/10-optimization.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/cbootcamp/cbootcamp-new.pdf" target="_blank" rel="noopener external nofollow noreferrer"><code>C</code> Bootcamp slides pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/cbootcamp/cbootcamp-new.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/activities/cbootcamp-new.tar.gz" target="_blank" rel="noopener external nofollow noreferrer">activity</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 6: C Review</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation06-creview.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/recitations/rec6.tar" target="_blank" rel="noopener external nofollow noreferrer">activity</a>)</td>
</tr>
<tr>
<td>The Memory Hierarchy (<a href="https://www.cs.cmu.edu/~213/lectures/11-memory-hierarchy.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/11-memory-hierarchy.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Cache Memories (<a href="https://www.cs.cmu.edu/~213/lectures/12-cache-memories.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/12-cache-memories.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 7: Cache Lab and blocking</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation07-cachelab.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation07-cachelab.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Linking (<a href="https://www.cs.cmu.edu/~213/lectures/13-linking.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/13-linking.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/13-linking" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>ECF: Exceptions &amp; Processes (<a href="https://www.cs.cmu.edu/~213/lectures/14-ecf-procs.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/14-ecf-procs.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/14-ecf-procs" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>7pm - 9pm <strong>Exam Review</strong> in Rashid Auditorium</td>
</tr>
<tr>
<td><em>Recitation 8: Exam Review</em> (<a href="https://www.cs.cmu.edu/~213/activities/rec8.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/activities/rec8.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>ECF: Signals &amp; Nonlocal Jumps (<a href="https://www.cs.cmu.edu/~213/lectures/15-ecf-signals.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/15-ecf-signals.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/15-ecf-signals" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>System Level I/O (<a href="https://www.cs.cmu.edu/~213/lectures/16-io.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/16-io.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/16-io" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 9: Shell lab, processes, signals, and I/O</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation08-tshlab.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation08-tshlab.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a>)</td>
</tr>
<tr>
<td>Virtual Memory: Concepts (<a href="https://www.cs.cmu.edu/~213/lectures/17-vm-concepts.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/17-vm-concepts.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Virtual Memory: Systems (<a href="https://www.cs.cmu.edu/~213/lectures/18-vm-systems.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/18-vm-systems.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 10: TSHLab and Virtual memory</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation09-tshlab-vm.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation09-tshlab-vm.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Dynamic Memory Allocation: Basic (<a href="https://www.cs.cmu.edu/~213/lectures/19-malloc-basic.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/19-malloc-basic.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Dynamic Memory Allocation: Advanced (<a href="https://www.cs.cmu.edu/~213/lectures/20-malloc-advanced.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/20-malloc-advanced.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 11: Malloc lab (Part I)</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation10-malloc1.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation10-malloc1.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/rec11.tar" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Network Programming (Part I) (<a href="https://www.cs.cmu.edu/~213/lectures/21-netprog1.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/21-netprog1.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/21-netprog1" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Network Programming (Part II) (<a href="https://www.cs.cmu.edu/~213/lectures/22-netprog2.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/22-netprog2.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/22-netprog2" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>7pm - 8pm <strong>Malloc Bootcamp</strong> in Rashid Auditorium (<a href="https://www.cs.cmu.edu/~213/activities/malloc-bootcamp.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 12: Malloc lab (Part II)</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation11-malloc2.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation11-malloc2.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/activities/rec11b.tar" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Concurrent programming (<a href="https://www.cs.cmu.edu/~213/lectures/23-concprog.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/23-concprog.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/23-concprog" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>Synchronization: Basic (<a href="https://www.cs.cmu.edu/~213/lectures/24-sync-basic.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/24-sync-basic.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/24-sync-basic" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 13: Proxy lab</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation12-proxylab1.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation12-proxylab1.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Synchronization: Advanced (<a href="https://www.cs.cmu.edu/~213/lectures/25-sync-advanced.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/25-sync-advanced.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a> , <a href="https://www.cs.cmu.edu/~213/code/25-sync-advanced" target="_blank" rel="noopener external nofollow noreferrer">code</a>)</td>
</tr>
<tr>
<td>No lecture—Thanksgiving</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 14: Synchronization</em> (<a href="https://www.cs.cmu.edu/~213/recitations/recitation14-proxylab2.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/recitations/recitation14-proxylab2.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Thread-Level Parallelism (<a href="https://www.cs.cmu.edu/~213/lectures/26-parallelism.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/26-parallelism.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td>Future of Computing I (<a href="https://www.cs.cmu.edu/~213/lectures/27-future1.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/27-future1.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td><em>Recitation 15: Exam review</em></td>
</tr>
<tr>
<td>Future of Computing II (<a href="https://www.cs.cmu.edu/~213/lectures/28-future2.pptx" target="_blank" rel="noopener external nofollow noreferrer">pptx</a> , <a href="https://www.cs.cmu.edu/~213/lectures/28-future2.pdf" target="_blank" rel="noopener external nofollow noreferrer">pdf</a>)</td>
</tr>
<tr>
<td><em>Final exam</em></td>
</tr>
</tbody>
</table>
</div>
<h3 id="Exam"><a href="#Exam" class="headerlink" title="Exam"></a>Exam</h3><p><a href="https://www.cs.cmu.edu/~213/exams.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cmu.edu/~213/exams.html</a></p>
<h1 id="Representing-amp-Processing-of-Information"><a href="#Representing-amp-Processing-of-Information" class="headerlink" title="Representing&amp;Processing of Information"></a>Representing&amp;Processing of Information</h1><h2 id="Bits"><a href="#Bits" class="headerlink" title="Bits"></a>Bits</h2><ul>
<li><strong>Binary</strong>: 11110001</li>
<li><strong>Decimal</strong>: 241</li>
<li><strong>Hexadecimal</strong>: <font color=red><strong>0x</strong></font>F1</li>
</ul>
<h2 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h2><p> <strong>And</strong>(<code>&amp;&amp;</code>), <strong>Or</strong>(<code>||</code>), <strong>Not</strong>(<code>~</code>/<code>!</code>), <strong>Exclusive-Or</strong> / Xor(<code>^</code>)</p>
<p>Opearte on bit vectors: <code>&amp;,</code> <code>|</code></p>
<ul>
<li>can be used to represent sets<ul>
<li>01101001 {0, 3, 5, 6}</li>
<li>7<strong>65</strong>4<strong>3</strong>21<strong>0 </strong> ———1 means the set contains the element, 0 otherwise</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Operation</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">Byte</th>
<th style="text-align:center">Set</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:center">Intersection</td>
<td style="text-align:center">01000001</td>
<td style="text-align:center">{0, 6}</td>
</tr>
<tr>
<td style="text-align:center"><code>&#124;</code></td>
<td style="text-align:center">Union</td>
<td style="text-align:center">01111101</td>
<td style="text-align:center">{0, 2, 3, 4, 5, 6}</td>
</tr>
<tr>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:center">Symmetric difference</td>
<td style="text-align:center">00111100</td>
<td style="text-align:center">{2, 3, 4, 5}</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code>/<code>!</code></td>
<td style="text-align:center">Complement</td>
<td style="text-align:center">10101010</td>
<td style="text-align:center">{1, 3, 5, 7}</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p><code>p &amp;&amp; *p</code>: avoids null pointer access</p>
</blockquote>
<h2 id="Shift-Operators"><a href="#Shift-Operators" class="headerlink" title="Shift Operators"></a>Shift Operators</h2><ul>
<li>Left shift: <code>&lt;&lt;</code></li>
<li>Right shift: <code>&gt;&gt;</code></li>
</ul>
<blockquote>
<p>There is a difference between logical shift and arithmetical shift, see in the following pic: The <u>negative num’s arithmetical right shift</u> will fill in <strong>1</strong>s. (Others are <strong>0</strong>s)</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547159998158.png" class="" width="1547159998158">
<h2 id="Intergers"><a href="#Intergers" class="headerlink" title="Intergers"></a>Intergers</h2><h3 id="Unsigned-amp-Signed"><a href="#Unsigned-amp-Signed" class="headerlink" title="Unsigned &amp; Signed"></a>Unsigned &amp; Signed</h3><ul>
<li><strong>Unsigned</strong> Values<ul>
<li>$U_{Min} = 0$<ul>
<li>000…0</li>
</ul>
</li>
<li>$U_{Max} = 2^w - 1    $<ul>
<li>111…1</li>
</ul>
</li>
</ul>
</li>
<li><strong>Two’s Complement</strong> Values【求负：<strong>取反加一</strong>】<ul>
<li>$T_{Min} = -2^{w-1}$<ul>
<li>100…0</li>
</ul>
</li>
<li>$T_{Max} = 2^{w-1} -1$<ul>
<li>011…1</li>
</ul>
</li>
</ul>
</li>
<li>Other Values<ul>
<li>Minus 1<ul>
<li>111…1</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Here is a graph: (4 bits)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547162047772.png" class="" width="1547162047772">
<p><font color=red>Notice</font>:</p>
<script type="math/tex; mode=display">
\begin{split}
&-T_{Min}=T_{Min}\quad\quad\text{(Not symmetrical)}\\
&|T_{Min}|=T_{Max}+1\\
&U_{Max}=2*T_{Max}+1
\end{split}</script><h4 id="Conversion-Visualization"><a href="#Conversion-Visualization" class="headerlink" title="Conversion Visualization"></a>Conversion Visualization</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547162367485.png" class="" width="1547162367485">
<h3 id="Casting-转换"><a href="#Casting-转换" class="headerlink" title="Casting(转换)"></a>Casting(转换)</h3><p>Principle: If there is a mix of unsigned and signed in single expression, <strong><em><font color=red>signed values implicitly cast to unsigned</font></em></strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547167241637.png" class="" width="1547167241637">
<blockquote>
<p>Examples above are for W=32: TMIN=-2,147,483,648  ; TMAX=2,147,483,647.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	do_sth(i);</span><br><span class="line"><span class="comment">//if i is unsigned, this loop will run forever!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = n<span class="number">-1</span>; i - <span class="keyword">sizeof</span>(str)&gt;= <span class="number">0</span>; i--)</span><br><span class="line">	do_sth(i);</span><br><span class="line"><span class="comment">//sizeof() return an unsigned value, this loop will crash very strangely!</span></span><br></pre></td></tr></table></figure>
<h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><h4 id="Sign-Extension"><a href="#Sign-Extension" class="headerlink" title="Sign Extension"></a>Sign Extension</h4><p>Principle: Add all <strong><font color=red>1</font></strong>s for the new blank.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547168305282.png" class="" width="1547168305282">
<h4 id="Unsigned"><a href="#Unsigned" class="headerlink" title="Unsigned"></a>Unsigned</h4><p>Principle: Add all <strong><font color=red>0</font></strong>s for the new blank. (Similarly)</p>
<h3 id="Truncation-截断"><a href="#Truncation-截断" class="headerlink" title="Truncation(截断)"></a>Truncation(截断)</h3><p>Unsigned: <strong>mod</strong> operation, <del>Just drop it</del>.<br>Signed: similar to mod (sign can be converted in the process)</p>
<h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><h4 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h4><h5 id="Unsigned-Addition"><a href="#Unsigned-Addition" class="headerlink" title="Unsigned Addition"></a>Unsigned Addition</h5><p><strong>Drop the overflowed part</strong>. (But when computing use extra bits)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547170397354.png" class="" width="1547170397354">
<h5 id="Two’s-Complement-Addition"><a href="#Two’s-Complement-Addition" class="headerlink" title="Two’s Complement Addition"></a>Two’s Complement Addition</h5><p><strong>Drop the overflowed part as well</strong>. (Will get the <u>exact correct answer</u>)</p>
<blockquote>
<p>TAdd and UAdd have identical bit-level behavior.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547170932559.png" class="" width="1547170932559">
<p>Visualizing 2’s complement addition:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547171039590.png" class="" width="1547171039590">
<h4 id="Multiplication"><a href="#Multiplication" class="headerlink" title="Multiplication"></a>Multiplication</h4><h5 id="Unsigned-multiplication"><a href="#Unsigned-multiplication" class="headerlink" title="Unsigned multiplication"></a>Unsigned multiplication</h5><p>Still drop the overflowed part.</p>
<h5 id="Signed-multiplication"><a href="#Signed-multiplication" class="headerlink" title="Signed multiplication"></a>Signed multiplication</h5><p>Drop the overflowed part. (sign can be converted in the process)</p>
<blockquote>
<p>For negative numbers: drop the overflowed part will somehow  <u>still get right answer</u>.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">1101</th>
<th>-3</th>
<th>13(U)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1110</td>
<td>-4</td>
<td>14(U)</td>
</tr>
<tr>
<td style="text-align:center"><font color=red>1</font>0110</td>
<td><strong><font color=red>6</font></strong></td>
<td>6(U)</td>
</tr>
</tbody>
</table>
</div>
<p>Cause the actual effective bits are <u>not really overflowed</u>. (1101=101, 1110=10)</p>
</blockquote>
<h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><h4 id="Power-of-2-Multiply-with-Shift"><a href="#Power-of-2-Multiply-with-Shift" class="headerlink" title="Power-of-2 Multiply with Shift"></a>Power-of-2 Multiply with Shift</h4><p><code>u&lt;&lt;k</code> gives <code>u*2^k</code>（both signed and unsigned）</p>
<blockquote>
<p>Shift is much faster than multiplication.</p>
</blockquote>
<h4 id="Unsigned-Power-of-2-Divide-with-Shift"><a href="#Unsigned-Power-of-2-Divide-with-Shift" class="headerlink" title="Unsigned Power-of-2 Divide with Shift"></a>Unsigned Power-of-2 Divide with Shift</h4><p>Use logical shift.(0s)</p>
<h4 id="Signed-Power-of-2-Divide-with-Shift"><a href="#Signed-Power-of-2-Divide-with-Shift" class="headerlink" title="Signed Power-of-2 Divide with Shift"></a>Signed Power-of-2 Divide with Shift</h4><p>Use <strong>arithmetical shift</strong>.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>(&gt;&gt;)1010</th>
<th>-6</th>
</tr>
</thead>
<tbody>
<tr>
<td>(&gt;&gt;)1101—-&gt;<strong><font color=blue>1110</font></strong></td>
<td>-3—-&gt;<strong><font color=blue>-2</font></strong></td>
</tr>
<tr>
<td>1110—-&gt;<strong><font color=blue>1111</font></strong></td>
<td>-2—-&gt;<strong><font color=blue>-1</font></strong></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>Trick: before you shift, you should add a <strong><font color=blue>bias</font></strong>.(For this example—-&gt;<strong><font color=blue>1</font></strong>)<br>But for c, it seems we don’t use bias. (<strong>右移向下舍入</strong>)</p>
</blockquote>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><strong>Why should I Use Unsigned?</strong></p>
<blockquote>
<p>In java there is no unsigned.</p>
</blockquote>
<p>A new principle: Don’t use <u>without understanding implications</u>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547173603445.png" class="" width="1547173603445">
<p><strong>Counting down with Unsigned</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547173911825.png" class="" width="1547173911825">
<p>Finally, <strong>Why should I Use Unsigned?</strong></p>
<ul>
<li><strong>Do Use</strong> When Performing <strong>Modular Arithmetic</strong><ul>
<li>Multiprecision arithmetic</li>
</ul>
</li>
<li>Do Use When Using Bits to Represent <strong>Sets</strong><ul>
<li>Logical right shift, no sign extension</li>
</ul>
</li>
<li>Do Use In <strong>System Programming</strong><ul>
<li>Bit masks, device commands,…</li>
</ul>
</li>
</ul>
<h3 id="Representation-in-memory-pointers-strings"><a href="#Representation-in-memory-pointers-strings" class="headerlink" title="Representation in memory, pointers, strings"></a>Representation in memory, pointers, strings</h3><h4 id="Byte-Oriented-Memory-Organization"><a href="#Byte-Oriented-Memory-Organization" class="headerlink" title="Byte-Oriented Memory Organization"></a>Byte-Oriented Memory Organization</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547174591516.png" class="" width="1547174591516">
<p>BUG: SegmentFault.</p>
<blockquote>
<p>Trick: $2^{10}=1024\approx 1000=10^{3}$.</p>
</blockquote>
<p>Machine Words: <strong>Any given computer has a “Word Size”</strong>.(32bit, 64bit)</p>
<blockquote>
<p>For 32bits: limits addresses to 4GB(2^32 bytes)<br>For 64bits: limits addresses to 18PB(2^64 bytes)</p>
</blockquote>
<h4 id="Word-Oriented-Memory-Organization"><a href="#Word-Oriented-Memory-Organization" class="headerlink" title="Word-Oriented Memory Organization"></a>Word-Oriented Memory Organization</h4><p><strong>Addresses Specify Byte Locations</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547175024211.png" class="" width="1547175024211">
<p>Example Data Representations:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547175059616.png" class="" width="1547175059616">
<h4 id="Byte-Ordering-Endianness"><a href="#Byte-Ordering-Endianness" class="headerlink" title="Byte Ordering(Endianness)"></a>Byte Ordering(Endianness)</h4><ul>
<li><strong>Big Endian</strong>: Sun (Oracle SPARC), PPC Mac, Internet<ul>
<li>Least significant byte has highest address</li>
</ul>
</li>
<li><strong>Little Endian</strong>: x86, ARM processors running Android, iOS, and Linux<ul>
<li>Least significant byte has lowest address</li>
</ul>
</li>
</ul>
<p>Ex:(Variable x has 4-byte value of <strong>0x01234567</strong>, Address given by &amp;x is <strong>0x100</strong>)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547175239609.png" class="" width="1547175239609">
<p>Other representation can be see in the <a href="https://www.cs.cmu.edu/~213/lectures/03-bits-ints-part2.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
<hr>
<p><strong>Puzzles</strong>: (32 bits for int)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547175886966.png" class="" width="1547175886966">
<blockquote>
<p>For <code>x &gt; y ---&gt; -x &lt; y</code>, note that there is a special occasion:</p>
<script type="math/tex; mode=display">
-T_{Min}=T_{Min}</script><p>For<code>(x|-x)&gt;&gt;31==-1</code>, consider <code>x=0</code>.</p>
<p>For<code>x&gt;&gt;3==x/8</code>, using the <a href="https://en.wikipedia.org/wiki/Floor_and_ceiling_functions" target="_blank" rel="noopener external nofollow noreferrer">ceil function</a>（round down）</p>
<ul>
<li>for<code>/</code>, always map close to <strong>0</strong></li>
<li>for<code>&gt;&gt;</code>, always map with ceil function</li>
</ul>
</blockquote>
<h2 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h2><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p><strong>What is 1011.101(2)</strong> ?</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547200593806.png" class="" width="1547200593806">
<p>Representation:</p>
<ul>
<li>Bits to right of “binary point” represent fractional powers of 2</li>
<li>Represents <strong>rational number</strong></li>
</ul>
<p>Here are some examples:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Value</th>
<th>Representation</th>
</tr>
</thead>
<tbody>
<tr>
<td>5 3/4</td>
<td>101.11</td>
</tr>
<tr>
<td>2 7/8</td>
<td>10.111</td>
</tr>
<tr>
<td>1 7/16</td>
<td>1.0111</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>Limitation:</p>
<ul>
<li>Can <u>only exactly represent numbers</u> of the form x/2^k<ul>
<li>Other rational numbers have repeating bit representations</li>
</ul>
</li>
<li>Just <u>one setting of binary point</u> within the w <ul>
<li>Limited range of numbers (very small values? very large ( ——&gt; <strong>floating point</strong>)</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="IEEE-standard"><a href="#IEEE-standard" class="headerlink" title="IEEE standard"></a>IEEE standard</h3><p><strong>Numerical Form</strong>:</p>
<script type="math/tex; mode=display">
(–1)^s M 2^E</script><ul>
<li><strong>Sign bit <font color=red>s</font></strong> determines whether number is negative or positive</li>
<li><strong>Significand <font color=red>M</font></strong> normally a <strong>frac</strong>tional value in range [1.0, 2.0).</li>
<li><strong>Exponent <font color=red>E</font></strong> weights value by power of two</li>
</ul>
<img data-src="/Notes-of-Intro-to-Computer-System/1547201117356.png" class="" width="1547201117356">
<p>There are mainly <strong>two types of floats</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547201287683.png" class="" width="1547201287683">
<p>Three “kinds” of floating point numbers:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547201477780.png" class="" width="1547201477780">
<p><strong><font color=red>“Normalized” Values</font></strong>: (Very large and small numbers)</p>
<ul>
<li>When: <u>exp ≠ 000…0 and exp ≠ 111…1</u></li>
<li><strong>Exponent</strong> coded as a <strong>biased value</strong>: <strong><font color=red>E = exp – Bias</font></strong> (To <u>represent small float numbers</u>, just like 2’s complement)<ul>
<li>exp: <strong>unsigned</strong> value of exp field (Also: <strong>exp = E + Bias</strong>)</li>
<li><strong>Bias = $2^{k-1} - 1$</strong>, where k is number of exponent bits<ul>
<li>Single precision: <strong>127</strong> (exp: 1…254, E: -126…127</li>
<li>▪ Double precision: <strong>1023</strong> (exp: 1…2046, E: -1022…1023)</li>
</ul>
</li>
</ul>
</li>
<li><strong>Significand</strong> coded with <strong><font color=red>implied leading 1</font></strong>: M = 1.xxx…x<ul>
<li>xxx…x: bits of frac field<ul>
<li>Minimum when frac=000…0 (M = 1.0)</li>
<li>Maximum when frac=111…1 (M = 2.0 – ε)</li>
</ul>
</li>
<li>Get extra leading bit for “free”</li>
</ul>
</li>
</ul>
<p><strong>Ex</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547202141338.png" class="" width="1547202141338">
<p>Note: 0&lt;=Exp&lt;=255, -127&lt;=E&lt;=128</p>
<p><strong><font color=red>Denormalized Values</font></strong>: ( represent values in $[0,1)$, especially <strong>0</strong>)</p>
<ul>
<li>Condition: <u>exp = 000…0</u></li>
<li>Exponent value: <strong>E = 1 – Bias=$2-2^{k-1}$ =-126</strong> (instead of exp – Bias) (why?)</li>
<li>Significand coded with <strong>implied leading 0</strong>: M = 0.xxx…x<ul>
<li>xxx…x: bits of frac</li>
</ul>
</li>
<li>Case<ul>
<li>exp = 000…0, frac = 000…0<ul>
<li>Represents <strong>zero value</strong></li>
<li>Note distinct values: +0 and –0 (why? - signed)</li>
</ul>
</li>
<li>exp = 000…0, frac ≠ 000…0<ul>
<li><strong>Numbers closest to 0.0</strong></li>
<li>Equispaced (mean distribution)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong><font color=red>Special Values</font></strong>: (Too Large to represent)</p>
<ul>
<li>Condition: exp = 111…1</li>
<li>Case: exp = 111…1, frac = 000…0<ul>
<li><font color=red>Represents value $\infty$ (infinity)</font></li>
<li>Operation that overflows</li>
<li>Both positive and negative</li>
<li>E.g., $1.0/0.0 = +\infty ,−1.0/−0.0 = + \infty, 1.0/−0.0 = − \infty$ (Not number)</li>
</ul>
</li>
<li>Case: exp = 111…1, frac ≠ 000…0<ul>
<li><font color=red>Not-a-Number (NaN)</font></li>
<li>Represents case when no numeric value can be determined</li>
<li>E.g., sqrt(–1), </li>
</ul>
</li>
</ul>
<p><strong>Ex</strong>: (Do this and you will get the idea)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547216351183.png" class="" width="1547216351183">
<h4 id="Example-and-properties"><a href="#Example-and-properties" class="headerlink" title="Example and properties"></a>Example and properties</h4><p><strong>Tiny Floating Point Example</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547217197184.png" class="" width="1547217197184">
<blockquote>
<p>8-bit Floating Point Representation<br>▪ the sign bit is in the most significant bit<br>▪ the next four bits are the exp, with <strong>a bias of 7</strong><br>▪ the last three bits are the frac</p>
</blockquote>
<p>As you can see as follows, look at the <font color=red>red arrows</font>. The mechanism actually give <u>a smooth change</u> from De. to Nor.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547217437064.png" class="" width="1547217437064">
<p>the distribution gets denser toward zero: (1s-3e-2f)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547217624711.png" class="" width="1547217624711">
<p>6-bit IEEE-like format (close-up view): (1s-3e-2f)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547217776981.png" class="" width="1547217776981">
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><p>Floating Point Operations: <strong>Basic Idea</strong><br>▪ First <font color=red>compute exact result</font><br>▪ Make it fit into desired precision<br>▪ Possibly overflow if exponent too large<br>▪ Possibly  <font color=red>round to fit into</font> frac</p>
<h4 id="Rounding（取整）"><a href="#Rounding（取整）" class="headerlink" title="Rounding（取整）"></a>Rounding（取整）</h4><p><strong><font color=red>Rounding Modes</font></strong>: (illustrate with $ rounding)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547218082911.png" class="" width="1547218082911">
<blockquote>
<p>Round to nearest, but if half-way in-between then round to nearest even(偶)</p>
</blockquote>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547218728343.png" class="" width="1547218728343">
<h4 id="Addition-1"><a href="#Addition-1" class="headerlink" title="Addition"></a>Addition</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547219148576.png" class="" width="1547219148576">
<h4 id="Multiplication-1"><a href="#Multiplication-1" class="headerlink" title="Multiplication"></a>Multiplication</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547219129898.png" class="" width="1547219129898">
<blockquote>
<p>Lecture note: <a href="https://www.cs.cmu.edu/~213/lectures/04-float.pdf" target="_blank" rel="noopener external nofollow noreferrer">here</a>.</p>
</blockquote>
<h3 id="Floating-point-in-C"><a href="#Floating-point-in-C" class="headerlink" title="Floating point in C"></a>Floating point in C</h3><ul>
<li>C Guarantees Two Levels<ul>
<li><strong>float single precision</strong></li>
<li><strong>double double precision</strong></li>
</ul>
</li>
<li>Conversions/Casting<ul>
<li>Casting between int, float, and double changes bit representation</li>
<li>double/float → int<ul>
<li>Truncates fractional part</li>
<li>Like rounding toward zero</li>
<li>Not defined when out of range or NaN: Generally sets to TMin</li>
</ul>
</li>
<li>int → double<ul>
<li>Exact conversion, as long as int has ≤ 53 bit word size</li>
</ul>
</li>
<li>int → float<ul>
<li>Will round according to rounding mode</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Floating Point Puzzles</strong>: </p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547219829755.png" class="" width="1547219829755">
<h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547220077346.png" class="" width="1547220077346">
<h1 id="Machine-Programming"><a href="#Machine-Programming" class="headerlink" title="Machine Programming"></a>Machine Programming</h1><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><p><strong><font color=red>Intel x86 Processors</font></strong> : Complex instruction set computer (<strong>CISC</strong>).</p>
<blockquote>
<p>The class will mainly use gcc complier.</p>
</blockquote>
<p>2018 State of the Art: (Coffee Lake)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547220973797.png" class="" width="1547220973797">
<blockquote>
<p>History blablabla…</p>
</blockquote>
<h3 id="C-assembly-machine-code"><a href="#C-assembly-machine-code" class="headerlink" title="C, assembly, machine code"></a>C, assembly, machine code</h3><h4 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h4><ul>
<li><strong><font color=red>Architecture</font>: (also ISA: instruction set architecture) The parts of a processor design that one needs to understand for writing correct machine/assembly code</strong><ul>
<li>Examples: instruction set specification, registers</li>
<li><strong><font color=red>Machine Code</font></strong>: The byte-level programs that a processor executes</li>
<li><strong><font color=red>Assembly Code</font></strong>: A text representation of machine code</li>
</ul>
</li>
<li><strong><font color=red>Microarchitecture</font>: Implementation of the architecture</strong><ul>
<li>Examples: cache sizes and core frequency</li>
</ul>
</li>
<li>Example ISAs:<br>▪ Intel: x86, IA32, Itanium, x86-64<br>▪ ARM: Used in almost all mobile phones<br>▪ RISC V: New open-source ISA</li>
</ul>
<p><strong>Assembly/Machine Code View</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547221546090.png" class="" width="1547221546090">
<h4 id="Turning-C-into-Object-Code"><a href="#Turning-C-into-Object-Code" class="headerlink" title="Turning C into Object Code"></a>Turning C into Object Code</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547221638010.png" class="" width="1547221638010">
<p><strong>Ex</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -Og -S sum.c</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Use gcc to comply<br>-S: stop for the 1st step<br>-Og: what kind of <u>optimization on code</u> you choose (for debugging)<br>-O1: a lot of optimization( pretty hard to understand)</p>
</blockquote>
<h4 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h4><div class="table-container">
<table>
<thead>
<tr>
<th>C</th>
<th>Data Type</th>
<th>assembly suffix</th>
<th>byte</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>byte</td>
<td>b</td>
<td>1</td>
</tr>
<tr>
<td>short</td>
<td>word</td>
<td>w</td>
<td>2</td>
</tr>
<tr>
<td>int</td>
<td>(two) word</td>
<td>l</td>
<td>4</td>
</tr>
<tr>
<td>char *</td>
<td>(two) word</td>
<td>l</td>
<td>4</td>
</tr>
<tr>
<td>float</td>
<td>single precision</td>
<td>s</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>bio-precision</td>
<td>l</td>
<td>8</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Disassembly（反汇编）"><a href="#Disassembly（反汇编）" class="headerlink" title="Disassembly（反汇编）"></a>Disassembly（反汇编）</h4><p><strong>Ex</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -Og -S sum.c -o sum</span><br><span class="line">objdump -d sum &gt; sum.d <span class="comment">//disassemly</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>sum is a binary file(to disassembly the origin function)</p>
</blockquote>
<h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><p><strong><font color=red>x86-64 Integer Registers</font></strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547223757301.png" class="" width="1547223757301">
<blockquote>
<p>%rax(%eax) reserves the function’s <strong>return value</strong>.<br>$eip stands for instruction register and can not be changed. (Not in the picture)</p>
<p><strong>%rsp(%esp): stack pointer</strong>.<br>%rbp(%ebp): base pointer.</p>
<p>Note: (the stack’s in memory top has lower address) (See more in the Procedures)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pushl %ebp  <span class="comment">#equal to</span></span><br><span class="line">	subl $<span class="number">4</span>,%esp</span><br><span class="line">	movl %ebp,(%esp)</span><br><span class="line">popl %ebp   <span class="comment">#equal to</span></span><br><span class="line">	movl (%esp),%ebp</span><br><span class="line">    addl $<span class="number">4</span>,%esp</span><br></pre></td></tr></table></figure>
<p><strong>IA32 Registers</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547223798589.png" class="" width="1547223798589">
<blockquote>
<p>Just a legacy thing.</p>
</blockquote>
<h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">movq Source,Dest</span><br></pre></td></tr></table></figure>
<img data-src="/Notes-of-Intro-to-Computer-System/1547224139238.png" class="" width="1547224139238">
<blockquote>
<p>Operand types showing above,</p>
</blockquote>
<p>Ex: (Understanding Swap())</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547224429434.png" class="" width="1547224429434">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">swap:</span><br><span class="line">    movq (%rdi), %rax <span class="comment"># t0 = *xp</span></span><br><span class="line">    movq (%rsi), %rdx <span class="comment"># t1 = *yp</span></span><br><span class="line">    movq %rdx, (%rdi) <span class="comment"># *xp = t1</span></span><br><span class="line">    movq %rax, (%rsi) <span class="comment"># *yp = t0</span></span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<h3 id="Addressing-Modes"><a href="#Addressing-Modes" class="headerlink" title="Addressing Modes"></a>Addressing Modes</h3><p><strong>Simple Memory Addressing Modes</strong></p>
<ul>
<li>Normal      (R)      <strong>Mem[Reg[R]]</strong><ul>
<li>Register R specifies memory address<br>Aha! Pointer dereferencing in C</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movq (%rcx),%rax</span><br></pre></td></tr></table></figure>
<ul>
<li>Displacement     D(R)    <strong>Mem[Reg[R]+D]</strong><ul>
<li>Register R specifies start of memory region<br>Constant displacement D specifies offset</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movq 8(%rbp),%rdx</span><br></pre></td></tr></table></figure>
<p><strong>Complete Memory Addressing Modes</strong></p>
<ul>
<li><strong>Most General Form</strong>        D(Rb,Ri,S)        <strong>Mem[Reg[Rb]+S*Reg[Ri]+ D]</strong><ul>
<li>▪ D: Constant “displacement” 1, 2, or 4 bytes<br>▪ Rb: Base register: Any of 16 integer registers<br>▪ Ri: Index register: Any, <strong>except for %rsp</strong><br>▪ S: Scale: 1, 2, 4, or 8 (why these numbers?)</li>
</ul>
</li>
<li>Special Cases<ul>
<li>(Rb,Ri)           Mem[Reg[Rb]+Reg[Ri]]<br>D(Rb,Ri)        Mem[Reg[Rb]+Reg[Ri]+D]<br>(Rb,Ri,S)        Mem[Reg[Rb]+S*Reg[Ri]]</li>
</ul>
</li>
</ul>
<p><strong>Ex</strong>. (Addressing Modes)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547224793696.png" class="" width="1547224793696">
<h3 id="Arithmetic-amp-logical-operations"><a href="#Arithmetic-amp-logical-operations" class="headerlink" title="Arithmetic &amp; logical operations"></a>Arithmetic &amp; logical operations</h3><h4 id="Address-Computation-Instruction"><a href="#Address-Computation-Instruction" class="headerlink" title="Address Computation Instruction"></a>Address Computation Instruction</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leaq Src, Dst</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Src is <strong>address</strong> mode expression<br>Set Dst to address denoted by expression</p>
<p>Uses: (Actually similar to move op)<br>▪ Computing addresses <strong><font color=red>without a memory reference</font></strong><br>▪ E.g., translation of p = &amp;x[i];<br>▪ Computing arithmetic expressions of the form x + k*y<br>▪ k = 1, 2, 4, or 8</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547224928978.png" class="" width="1547224928978">
<p><strong>Difference from mov</strong>: (example)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mov <span class="number">1</span>(%eax),%ebx</span><br><span class="line">	<span class="comment"># b = *(a + 1)</span></span><br><span class="line">lea <span class="number">1</span>(%eax),%ebx</span><br><span class="line">	<span class="comment"># b = a + 1</span></span><br><span class="line">    <span class="comment"># equal to add &amp; mov without reference</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="comment"># Consider %eax actually reserve an address, then lea load an address instead of load address's  reference value in memory like mov</span></span><br></pre></td></tr></table></figure>
<h4 id="Some-Arithmetic-Operations"><a href="#Some-Arithmetic-Operations" class="headerlink" title="Some Arithmetic Operations"></a>Some Arithmetic Operations</h4><p><strong>Two Operand Instructions</strong>: (src=source)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547224970370.png" class="" width="1547224970370">
<blockquote>
<p>Watch out for argument order! Src,Dest<br>(Warning: Intel docs use “op Dest,Src”)<br>No distinction between signed and unsigned int (why?)</p>
</blockquote>
<p>One Operand Instructions: (See book for more instructions)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547225374772.png" class="" width="1547225374772">
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547225425648.png" class="" width="1547225425648">
<h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><h3 id="Control-Condition-codes"><a href="#Control-Condition-codes" class="headerlink" title="Control: Condition codes"></a>Control: Condition codes</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547226503605.png" class="" width="1547226503605">
<p><strong>Compare Instruction</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmpq Src2,Src1 <span class="comment"># Src1 - Src2</span></span><br></pre></td></tr></table></figure>
<p><strong>Test Instruction</strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">testq Src2,Src1 <span class="comment"># Src1 &amp; Src2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Those instructions doesn’t change the value of registers.</p>
</blockquote>
<p><strong>SetX Instructions</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547227143624.png" class="" width="1547227143624">
<blockquote>
<p>Help to change bit level values(t low-order byte of destination) for arithmetic.</p>
</blockquote>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547227290214.png" class="" width="1547227290214">
<blockquote>
<p>Note: (Intel x86 machine sets the upper bits to zeros implicitly)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547227329427.png" class="" width="1547227329427">
</blockquote>
<h3 id="Conditional-branches"><a href="#Conditional-branches" class="headerlink" title="Conditional branches"></a>Conditional branches</h3><h4 id="Jumping"><a href="#Jumping" class="headerlink" title="Jumping"></a>Jumping</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jmp .L1 <span class="comment">#address</span></span><br></pre></td></tr></table></figure>
<img data-src="/Notes-of-Intro-to-Computer-System/1547227524003.png" class="" width="1547227524003">
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547227649631.png" class="" width="1547227649631">
<blockquote>
<p>It’s behavior is just like to “goto” statement in C.</p>
</blockquote>
<p><strong>Condition move</strong>: (if the instruction is simple, calculate it first and then judge)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547274552015.png" class="" width="1547274552015">
<h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><p>“<strong>Do-While</strong>” Loop Example: (it’s not often used)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547274736995.png" class="" width="1547274736995">
<p><strong>While Loop</strong> Example: (there is an initial test)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547275528661.png" class="" width="1547275528661">
<p><strong>“For” Loop</strong> Form: (can be converted into other 2 kinds of loops)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547275625693.png" class="" width="1547275625693">
<h3 id="Switch-Statements"><a href="#Switch-Statements" class="headerlink" title="Switch Statements"></a>Switch Statements</h3><p><strong>Ex</strong>. (use “break” to end early)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547275962727.png" class="" width="1547275962727">
<p><strong><font color=red>Jump Table</font></strong> Structure: (Avoid to step though all the codes)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547276298488.png" class="" width="1547276298488">
<p><strong>Ex</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547276450387.png" class="" width="1547276450387">
<blockquote>
<p><strong>ja</strong>: jump above. (x&gt;6 and x&lt;0 will jump to default case)<br><strong>jmp</strong>: goto jump table</p>
<p>.quad: state that need a 8byte value here.</p>
<p><strong>Jump table</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547276715940.png" class="" width="1547276715940">
<p>Code Blocks (x == 2, x == 3): (Note that the block doesn’t have some orders)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547277014211.png" class="" width="1547277014211">
<p>Code Blocks (x == 5, x == 6, default):</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547277085015.png" class="" width="1547277085015">
</blockquote>
<p>Summary:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547277972355.png" class="" width="1547277972355">
<h2 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h2><p>Function, method, procedure….</p>
<h3 id="Mechanisms"><a href="#Mechanisms" class="headerlink" title="Mechanisms"></a>Mechanisms</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547279264175.png" class="" width="1547279264175">
<h3 id="Stack-Structure"><a href="#Stack-Structure" class="headerlink" title="Stack Structure"></a>Stack Structure</h3><p><strong>x86-64 Stack</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547279413442.png" class="" width="1547279413442">
<blockquote>
<p>Note: the direction are <strong>controversial</strong> maybe.<br>(The memory doesn’t change, only the value of %rsp)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#the %ebp contains a value to save</span></span><br><span class="line">pushl %ebp  <span class="comment">#equal to</span></span><br><span class="line">	subl $<span class="number">4</span>,%esp</span><br><span class="line">	movl %ebp,(%esp)</span><br><span class="line">popl %ebp   <span class="comment">#equal to</span></span><br><span class="line">	movl (%esp),%ebp</span><br><span class="line">    addl $<span class="number">4</span>,%esp</span><br><span class="line">----------------------</span><br><span class="line">pushl %rbp  <span class="comment">#equal to</span></span><br><span class="line">	subl $<span class="number">8</span>,%rsp</span><br><span class="line">	movl %rbp,(%rsp)</span><br><span class="line">popl %rbp   <span class="comment">#equal to</span></span><br><span class="line">	movl (%rsp),%rbp</span><br><span class="line">    addl $<span class="number">8</span>,%rsp</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">leave <span class="comment">#equal to</span></span><br><span class="line">	movl %ebp,%esp</span><br><span class="line">	popl %ebp</span><br></pre></td></tr></table></figure>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547279843850.png" class="" width="1547279843850">
<blockquote>
<p>A example: <a href="https://www.jianshu.com/p/e7a22923867f" target="_blank" rel="noopener external nofollow noreferrer">Here</a>. (Chinese)</p>
</blockquote>
<h3 id="Calling-Conventions"><a href="#Calling-Conventions" class="headerlink" title="Calling Conventions"></a>Calling Conventions</h3><h4 id="Passing-control"><a href="#Passing-control" class="headerlink" title="Passing control"></a>Passing control</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">callq address &lt;func_name&gt;</span><br></pre></td></tr></table></figure>
<img data-src="/Notes-of-Intro-to-Computer-System/1547280032115.png" class="" width="1547280032115">
<h4 id="Passing-data"><a href="#Passing-data" class="headerlink" title="Passing data"></a>Passing data</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547280231780.png" class="" width="1547280231780">
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547280313959.png" class="" width="1547280313959">
<h4 id="Managing-local-data"><a href="#Managing-local-data" class="headerlink" title="Managing local data"></a>Managing local data</h4><p><strong>Call Chain</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547280660054.png" class="" width="1547280660054">
<p><strong>Stack Frames</strong>: (<strong>%rsp</strong>)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547280713807.png" class="" width="1547280713807">
<blockquote>
<p>Example see in the <a href="https://www.cs.cmu.edu/~213/lectures/07-machine-procedures.pdf" target="_blank" rel="noopener external nofollow noreferrer">slide</a>s.(Also the Illustration of Recursion part)</p>
</blockquote>
<h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/08-machine-data.pdf" target="_blank" rel="noopener external nofollow noreferrer">silde</a>.</p>
</blockquote>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><blockquote>
<p>Easy.</p>
</blockquote>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547283990640.png" class="" width="1547283990640">
<h3 id="Structures"><a href="#Structures" class="headerlink" title="Structures"></a>Structures</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547286561100.png" class="" width="1547286561100">
<p><strong><font color=red>Alignment</font></strong>: (对齐)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547286715157.png" class="" width="1547286715157">
<blockquote>
<p>Alignment is depending on the next data type.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547287192695.png" class="" width="1547287192695">
<p>Save space:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547287260503.png" class="" width="1547287260503">
</blockquote>
<h3 id="Floating-Point-1"><a href="#Floating-Point-1" class="headerlink" title="Floating Point"></a>Floating Point</h3><p>Similarly.</p>
<h2 id="Advanced-Topics"><a href="#Advanced-Topics" class="headerlink" title="Advanced Topics"></a>Advanced Topics</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/09-machine-advanced.pdf" target="_blank" rel="noopener external nofollow noreferrer">slide</a>.</p>
</blockquote>
<h3 id="Memory-Layout"><a href="#Memory-Layout" class="headerlink" title="Memory Layout"></a>Memory Layout</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547288158389.png" class="" width="1547288158389">
<h3 id="Buffer-Overflow"><a href="#Buffer-Overflow" class="headerlink" title="Buffer Overflow"></a>Buffer Overflow</h3><blockquote>
<p>when exceeding the memory size allocated for an array.</p>
</blockquote>
<p>String Library Code:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547319959091.png" class="" width="1547319959091">
<p><strong>Ex</strong>; (Buffer Overflow Disassembly)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547320185281.png" class="" width="1547320185281">
<blockquote>
<p>Things can go wrong without a crash.</p>
<p>For string, note that there is a byte order.</p>
</blockquote>
<p><strong>Avoid Overflow Vulnerabilities in Code</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fgets(buf, <span class="number">4</span>, <span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>System-Level Protections can help.</p>
<ul>
<li><strong>Randomized</strong> stack offsets</li>
</ul>
<p>Nonexecutable code segments.</p>
<p> Stack Canaries can help.</p>
<ul>
<li>Idea<br>▪ Place special value (“canary”) on stack just beyond buffer<br>▪ Check for corruption before exiting function</li>
<li>GCC Implementation<br>▪ -fstack-protector<br>▪ Now the default (disabled earlier)</li>
</ul>
</blockquote>
<h3 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547322998178.png" class="" width="1547322998178">
<hr>
<p><font color=red>Byte Ordering Example</font>: (only ordered <strong><u>inside a single data</u></strong>)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547323271495.png" class="" width="1547323271495">
<img data-src="/Notes-of-Intro-to-Computer-System/1547323296428.png" class="" width="1547323296428">
<img data-src="/Notes-of-Intro-to-Computer-System/1547323287363.png" class="" width="1547323287363">
<h1 id="Code-Optimization"><a href="#Code-Optimization" class="headerlink" title="Code Optimization"></a>Code Optimization</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/10-optimization.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<h2 id="Generally-Useful-Optimizations"><a href="#Generally-Useful-Optimizations" class="headerlink" title="Generally Useful Optimizations"></a>Generally Useful Optimizations</h2><blockquote>
<p>Optimizations that you or the compiler should do regardless of processor / compiler.</p>
</blockquote>
<h3 id="Code-Motion"><a href="#Code-Motion" class="headerlink" title="Code Motion"></a>Code Motion</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547323914397.png" class="" width="1547323914397">
<h3 id="Reduction-in-Strength"><a href="#Reduction-in-Strength" class="headerlink" title="Reduction in Strength"></a>Reduction in Strength</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547324007937.png" class="" width="1547324007937">
<h3 id="Share-Common-Subexpressions"><a href="#Share-Common-Subexpressions" class="headerlink" title="Share Common Subexpressions"></a>Share Common Subexpressions</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547324041845.png" class="" width="1547324041845">
<p><strong>Optimization Example: Bubblesort</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547324174042.png" class="" width="1547324174042">
<h2 id="Optimization-Blockers"><a href="#Optimization-Blockers" class="headerlink" title="Optimization Blockers"></a>Optimization Blockers</h2><h3 id="Procedure-calls"><a href="#Procedure-calls" class="headerlink" title="Procedure calls"></a>Procedure calls</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547324425190.png" class="" width="1547324425190">
<blockquote>
<p>Note the function <code>strlen()</code>, it will be running the whole time and make the program perform badly.($O(n^2)$)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547324625791.png" class="" width="1547324625791">
</blockquote>
<h3 id="Memory-aliasing"><a href="#Memory-aliasing" class="headerlink" title="Memory aliasing"></a>Memory aliasing</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547324933006.png" class="" width="1547324933006">
<p><strong>Removing Aliasing</strong>: (don’t use reference unless you have to)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547325042701.png" class="" width="1547325042701">
<h2 id="Exploiting-Instruction-Level-Parallelism"><a href="#Exploiting-Instruction-Level-Parallelism" class="headerlink" title="Exploiting Instruction-Level Parallelism"></a>Exploiting Instruction-Level Parallelism</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547325479644.png" class="" width="1547325479644">
<h3 id="Cycles-Per-Element-CPE"><a href="#Cycles-Per-Element-CPE" class="headerlink" title="Cycles Per Element (CPE)"></a>Cycles Per Element (CPE)</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547325731482.png" class="" width="1547325731482">
<p><strong>Benchmark Performance</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547325930622.png" class="" width="1547325930622">
<h3 id="Loop-Unrolling"><a href="#Loop-Unrolling" class="headerlink" title="Loop Unrolling"></a>Loop Unrolling</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547327034519.png" class="" width="1547327034519">
<h3 id="Multiple-Accumulators"><a href="#Multiple-Accumulators" class="headerlink" title="Multiple Accumulators"></a>Multiple Accumulators</h3><p>Loop Unrolling with Separate Accumulators (2x2):</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547327354252.png" class="" width="1547327354252">
<p><strong>Summary</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547331350241.png" class="" width="1547331350241">
<h1 id="The-Memory-Hierarchy"><a href="#The-Memory-Hierarchy" class="headerlink" title="The Memory Hierarchy"></a>The Memory Hierarchy</h1><h2 id="Storage-technologies-and-trends"><a href="#Storage-technologies-and-trends" class="headerlink" title="Storage technologies and trends"></a>Storage technologies and trends</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/11-memory-hierarchy.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<p>Random-Access Memory(RAM).</p>
<p>RAM comes in two varieties:<br>▪ SRAM (Static RAM)<br>▪ DRAM (Dynamic RAM)</p>
<p>Disk.</p>
<p>Solid State Disks(SSD).</p>
<p>Bus.(总线)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547333849790.png" class="" width="1547333849790">
<h2 id="Locality-of-reference"><a href="#Locality-of-reference" class="headerlink" title="Locality of reference"></a>Locality of reference</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547333277107.png" class="" width="1547333277107">
<h2 id="Caching-in-the-memory-hierarchy"><a href="#Caching-in-the-memory-hierarchy" class="headerlink" title="Caching in the memory hierarchy"></a>Caching in the memory hierarchy</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547334354630.png" class="" width="1547334354630">
<p><strong>General Cache Concepts</strong>:</p>
<blockquote>
<p>See in the slides.</p>
</blockquote>
<p>3 Types of Cache Misses:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547335369033.png" class="" width="1547335369033">
<blockquote>
<p>For conflict miss, <strong><u>each block represent one specific next level cache block</u></strong>. (Can’t use to save other values)</p>
</blockquote>
<h2 id="Cache-Memories"><a href="#Cache-Memories" class="headerlink" title="Cache Memories"></a>Cache Memories</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/12-cache-memories.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547335909700.png" class="" width="1547335909700">
<hr>
<h3 id="Cache-organization-and-operation"><a href="#Cache-organization-and-operation" class="headerlink" title="Cache organization and operation"></a>Cache organization and operation</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547335981511.png" class="" width="1547335981511">
<img data-src="/Notes-of-Intro-to-Computer-System/1547335994312.png" class="" width="1547335994312">
<p> <strong><font color=red>Direct Mapped Cache</font></strong> (E = 1): (<strong>One line per set</strong>. Assume: cache block size B=8 bytes)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547336274671.png" class="" width="1547336274671">
<blockquote>
<p>• <strong>Locate set</strong><br>• <strong>Check if any line in set</strong>has matching tag<br>• <strong>Yes + line valid</strong>: <strong><font color=red>hit</font></strong><br>• <strong>Locate data</strong> starting at offset</p>
<p><strong><font color=red>If tag doesn’t match (= miss)</font></strong>: old line is evicted and replaced</p>
</blockquote>
<p><strong>Ex</strong>. (Direct-Mapped Cache Simulation)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547337293519.png" class="" width="1547337293519">
<p><strong><font color=red>E-way Set Associative Cache</font></strong> (Here: E = 2): </p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547338153960.png" class="" width="1547338153960">
<p><strong>Ex</strong>. (2-Way Set Associative Cache Simulation)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547338419283.png" class="" width="1547338419283">
<blockquote>
<p>What about writes?</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547339208689.png" class="" width="1547339208689">
</blockquote>
<h3 id="Performance-impact-of-caches"><a href="#Performance-impact-of-caches" class="headerlink" title="Performance impact of caches"></a>Performance impact of caches</h3><h4 id="The-memory-mountain"><a href="#The-memory-mountain" class="headerlink" title="The memory mountain"></a>The memory mountain</h4><p><strong>Read throughput</strong> (read bandwidth)<br>▪ Number of bytes read from memory per second (MB/s)<br><strong>Memory mountain</strong>: Measured <strong>read throughput</strong> as a function of spatial and temporal locality.<br>▪ Compact way to characterize memory system performance. </p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547339979979.png" class="" width="1547339979979">
<h4 id="Rearranging-loops-to-improve-spatial-locality"><a href="#Rearranging-loops-to-improve-spatial-locality" class="headerlink" title="Rearranging loops to improve spatial locality"></a>Rearranging loops to improve spatial locality</h4><p><strong>Ex</strong>. (Matrix Multiply Performance)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547340307928.png" class="" width="1547340307928">
<img data-src="/Notes-of-Intro-to-Computer-System/1547340272596.png" class="" width="1547340272596">
<h4 id="Using-blocking-to-improve-temporal-locality"><a href="#Using-blocking-to-improve-temporal-locality" class="headerlink" title="Using blocking to improve temporal locality"></a>Using blocking to improve temporal locality</h4><blockquote>
<p>See in the slides.</p>
</blockquote>
<h1 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/13-linking.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<p><strong>Ex</strong>. (Example C Program)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547340841183.png" class="" width="1547340841183">
<blockquote>
<p>Programs are translated and linked using a compiler driver:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux&gt; gcc -Og -o prog main.c sum.c</span><br><span class="line">linux&gt; .&#x2F;prog</span><br></pre></td></tr></table></figure>
<img data-src="/Notes-of-Intro-to-Computer-System/1547340897117.png" class="" width="1547340897117">
<p><strong>Why Linkers</strong>?</p>
<ul>
<li>Reason 1: Modularity</li>
<li>Reason 2: Efficiency (time/space)</li>
</ul>
<p><strong>What Do Linkers Do</strong>?</p>
<ul>
<li>Step 1: <strong><font color=red>Symbol resolution</font></strong> (During symbol resolution step, the linker associates each symbol reference<br>with exactly one symbol definition.)</li>
<li>Step 2: <strong><font color=red>Relocation</font></strong> (Merges separate code and data sections into single sections)</li>
</ul>
<hr>
<p>Three Kinds of Object Files (Modules)</p>
<ul>
<li>Relocatable object file (.o file)</li>
<li>Executable object file (a.out file)</li>
<li>Shared object file (.so file)</li>
</ul>
<h2 id="Linker-Symbols"><a href="#Linker-Symbols" class="headerlink" title="Linker Symbols"></a>Linker Symbols</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547341535201.png" class="" width="1547341535201">
<blockquote>
<p>just like: <strong>public, friend, and private</strong>.</p>
</blockquote>
<p>Program symbols are either strong or weak：</p>
<ul>
<li><strong><font color=red>Strong</font></strong>: <u>procedures and initialized globals</u></li>
<li><strong><font color=red>Weak</font></strong>: <u>uninitialized globals</u><br>Or ones declared with specifier <strong>extern</strong></li>
</ul>
<img data-src="/Notes-of-Intro-to-Computer-System/1547372123409.png" class="" width="1547372123409">
<blockquote>
<p>Rule 1: <strong>Multiple strong symbols are not allowed</strong></p>
<ul>
<li>Each item can be defined only once<br>Otherwise: Linker error</li>
</ul>
<p>Rule 2: <strong>Given a strong symbol and multiple weak symbols, choose the strong symbol</strong></p>
<ul>
<li>References to the weak symbol resolve to the strong symbol</li>
</ul>
<p>Rule 3: <strong>If there are multiple weak symbols, pick an arbitrary</strong><br><strong>one</strong></p>
<ul>
<li>Can override this with gcc –fno-common</li>
</ul>
</blockquote>
<p><strong>Ex</strong>. (Linker Puzzles)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547372584466.png" class="" width="1547372584466">
<blockquote>
<p>Global Variables: (caution)</p>
<ul>
<li><strong>Avoid if you can</strong></li>
<li>Otherwise<br>§ Use <strong>static</strong> if you can<br>§ <strong>Initialize</strong> if you define a global variable<br>§ Use <strong>extern</strong> if you reference an external global variable<pre><code> § Treated as weak symbol
 § But also causes linker error if not defined in some file
</code></pre></li>
</ul>
</blockquote>
<p><a href="https://blog.csdn.net/unix21/article/details/8456801" target="_blank" rel="noopener external nofollow noreferrer">关于text段、data段和bss段</a></p>
<p><a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html" target="_blank" rel="noopener external nofollow noreferrer">Shared Library</a> (Modern Solution)</p>
<p><a href="https://blog.csdn.net/spaceyqy/article/details/39393877" target="_blank" rel="noopener external nofollow noreferrer">地址重定位：静态重定位和动态重定位</a></p>
<h2 id="Case-study-Library-interpositioning"><a href="#Case-study-Library-interpositioning" class="headerlink" title="Case study: Library interpositioning"></a>Case study: Library interpositioning</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547376541373.png" class="" width="1547376541373">
<img data-src="/Notes-of-Intro-to-Computer-System/1547376555472.png" class="" width="1547376555472">
<h1 id="ECF-Exceptional-Control-Flow"><a href="#ECF-Exceptional-Control-Flow" class="headerlink" title="ECF(Exceptional    Control    Flow)"></a>ECF(Exceptional    Control    Flow)</h1><h2 id="Exceptions-amp-Processes"><a href="#Exceptions-amp-Processes" class="headerlink" title="Exceptions &amp; Processes"></a>Exceptions &amp; Processes</h2><h3 id="Exceptional-Control-Flow"><a href="#Exceptional-Control-Flow" class="headerlink" title="Exceptional    Control    Flow"></a>Exceptional    Control    Flow</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547377173686.png" class="" width="1547377173686">
<h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547377211891.png" class="" width="1547377211891">
<h4 id="Interrupts-Asynchronous-Exceptions"><a href="#Interrupts-Asynchronous-Exceptions" class="headerlink" title="Interrupts(Asynchronous Exceptions)"></a>Interrupts(Asynchronous Exceptions)</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547377607727.png" class="" width="1547377607727">
<h4 id="Synchronous-Exceptions"><a href="#Synchronous-Exceptions" class="headerlink" title="Synchronous Exceptions"></a>Synchronous Exceptions</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547377563056.png" class="" width="1547377563056">
<h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547378100305.png" class="" width="1547378100305">
<h3 id="Process-Control"><a href="#Process-Control" class="headerlink" title="Process    Control"></a>Process    Control</h3><h4 id="Obtaining-Process-IDs"><a href="#Obtaining-Process-IDs" class="headerlink" title="Obtaining Process IDs"></a>Obtaining Process IDs</h4><p><code>pid_t getpid(void)</code></p>
<ul>
<li>Returns PID of current process</li>
</ul>
<p><code>pid_t getppid(void)</code></p>
<ul>
<li>Returns PID of parent process    </li>
</ul>
<h4 id="Creating-and-Terminating-Processes"><a href="#Creating-and-Terminating-Processes" class="headerlink" title="Creating and Terminating Processes"></a>Creating and Terminating Processes</h4><p><code>void exit(int status)</code></p>
<blockquote>
<p>terminated.</p>
<p>Convention: normal return status is 0, nonzero on error</p>
</blockquote>
<p><code>int fork(void)</code></p>
<blockquote>
<p><strong><u>Returns 0 to the child process</u></strong>, child’s PID to parent process。（called once, <strong><font color=red>return twice</font></strong>）</p>
<p><strong>Ex</strong>. (can’t predict the exact return value of fork)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547381165003.png" class="" width="1547381165003">
<p>Two    consecutive fork:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547391612972.png" class="" width="1547391612972">
<p>Nested forks in parent: (Similar)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547391661619.png" class="" width="1547391661619">
<img data-src="/Notes-of-Intro-to-Computer-System/1547391679091.png" class="" width="1547391679091">
<p>More exercise: <a href="http://condor.depaul.edu/glancast/374class/hw/samplefinal.html" target="_blank" rel="noopener external nofollow noreferrer">Sample</a>, <a href="http://condor.depaul.edu/glancast/374class/docs/midterm_ans.html" target="_blank" rel="noopener external nofollow noreferrer">Modor</a></p>
</blockquote>
<p><code>int wait(int *child_status)</code></p>
<blockquote>
<p>return <code>child’s PID</code> if succeed, <code>-1</code> otherwise.</p>
</blockquote>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547393088942.png" class="" width="1547393088942">
<p><strong>Ex</strong>. (fork + wait)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547392851262.png" class="" width="1547392851262">
<blockquote>
<p>Note: (<u>The processes will run <strong><font color=red>parallelly</font></strong> unless some of them have to wait</u>)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547395602746.png" class="" width="1547395602746">
</blockquote>
<p><code>int execve(char *filename, char *argv[], char *envp[])</code></p>
<ul>
<li>never returns.</li>
</ul>
<h2 id="Signals-amp-Nonlocal-Jumps"><a href="#Signals-amp-Nonlocal-Jumps" class="headerlink" title="Signals &amp; Nonlocal Jumps"></a>Signals &amp; Nonlocal Jumps</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/15-ecf-signals.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<p><code>setjmp</code></p>
<ul>
<li>use once, return twice</li>
</ul>
<p><code>longjmp</code></p>
<ul>
<li>use once and <strong>never return</strong></li>
</ul>
<h1 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h1><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/17-vm-concepts.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<h3 id="Address-spaces"><a href="#Address-spaces" class="headerlink" title="Address spaces"></a>Address spaces</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547397352855.png" class="" width="1547397352855">
<p>Why Virtual Memory (VM)?</p>
<ul>
<li>Uses main memory efficiently</li>
<li>Simplifies memory management</li>
<li>Isolates address spaces</li>
</ul>
<h4 id="VM-as-a-tool-for-caching"><a href="#VM-as-a-tool-for-caching" class="headerlink" title="VM as a tool for caching"></a>VM as a tool for caching</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547397695292.png" class="" width="1547397695292">
<p><strong>Enabling Data Structure: Page Table</strong></p>
<p><strong>A page table is an array of page table entries (<font color=red>PTE</font>s)</strong> that maps virtual pages to physical pages.<br>▪ Per-process kernel data structure in DRAM</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547398071042.png" class="" width="1547398071042">
<blockquote>
<p><strong>Page hit</strong>:  reference to VM word that is in physical memory (DRAM cache hit)<br><strong>Page fault</strong>: reference to VM word that is not in physical memory (DRAM cache miss)<br><strong>Handling Page Fault</strong>: Page miss causes page fault (an exception)</p>
</blockquote>
<p><strong><font color=red>Locality to the Rescue Again!</font></strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547398461378.png" class="" width="1547398461378">
<h4 id="VM-as-a-tool-for-memory-management"><a href="#VM-as-a-tool-for-memory-management" class="headerlink" title="VM as a tool for memory management"></a>VM as a tool for memory management</h4><blockquote>
<p>Key idea: each process has its own virtual address space</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547399758879.png" class="" width="1547399758879">
<h4 id="VM-as-a-tool-for-memory-protection"><a href="#VM-as-a-tool-for-memory-protection" class="headerlink" title="VM as a tool for memory protection"></a>VM as a tool for memory protection</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547400232218.png" class="" width="1547400232218">
<h3 id="Address-translation"><a href="#Address-translation" class="headerlink" title="Address translation"></a>Address translation</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547400371064.png" class="" width="1547400371064">
<p><strong>Address Translation: Page Hit</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547400749761.png" class="" width="1547400749761">
<p><strong>Address Translation: Page Fault</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547400731481.png" class="" width="1547400731481">
<hr>
<p><strong>Integrating VM and Cache</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547400842787.png" class="" width="1547400842787">
<blockquote>
<p>VA: virtual address, PA: physical address, PTE: page table entry, PTEA = PTE address.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547401434276.png" class="" width="1547401434276">
<h4 id="Multi-Level-Page-Tables"><a href="#Multi-Level-Page-Tables" class="headerlink" title="Multi-Level Page Tables"></a>Multi-Level Page Tables</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547401541948.png" class="" width="1547401541948">
<p><strong>A Two-Level Page Table Hierarchy</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547401630774.png" class="" width="1547401630774">
<p><strong>Translating with a k-level Page Table</strong></p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547401741126.png" class="" width="1547401741126">
<h2 id="Systems"><a href="#Systems" class="headerlink" title="Systems"></a>Systems</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547401893430.png" class="" width="1547401893430">
<h3 id="Case-study-Core-i7-Linux-memory-system"><a href="#Case-study-Core-i7-Linux-memory-system" class="headerlink" title="Case study: Core i7/Linux memory system"></a>Case study: Core i7/Linux memory system</h3><p>None.</p>
<blockquote>
<p>Some page were marked to be protected by core so that the user can’t alter.</p>
</blockquote>
<p>There are L1~L4 page tables.</p>
<p><strong>Trick</strong>: VPO=PPO=Physical Address. (The lower bits of Block address)</p>
<h3 id="Memory-mapping"><a href="#Memory-mapping" class="headerlink" title="Memory mapping"></a>Memory mapping</h3><blockquote>
<p>The address translation is always running.</p>
</blockquote>
<h1 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547632217288.png" class="" width="1547632217288">
<p><code>void* malloc(size_t size)</code></p>
<ul>
<li>get a block by given size</li>
</ul>
<p><code>void free(void *p)</code></p>
<ul>
<li>free the block at the address</li>
</ul>
<blockquote>
<p><code>calloc</code>: version of malloc that initializes block to 0</p>
<p><code>realloc</code>: change the size of it</p>
<p><code>sbrk</code>: control allocators to grow or shrink the heap</p>
</blockquote>
<p><strong>Throughout</strong>: number of complete requests per unit time.</p>
<blockquote>
<p>5000 malloc + 5000 free in 10 sec, then throughout will be 1000 operation/sec.</p>
</blockquote>
<p><strong>Peak Memory Utilization</strong>: </p>
<ul>
<li><p>aggregate payload $P_k$.</p>
</li>
<li><p>Current heap size $H_k$</p>
</li>
<li>$U<em>k=max</em>{i\leq k}P_i/H_k$</li>
</ul>
<blockquote>
<p>Can cause by <strong>fragmentation</strong>.(internal or external)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547633458529.png" class="" width="1547633458529">
</blockquote>
<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Explicit-free-lists"><a href="#Explicit-free-lists" class="headerlink" title="Explicit free lists"></a>Explicit free lists</h3><p><strong>Keeping Track of Free Blocks</strong>：</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547632384923.png" class="" width="1547632384923">
<p>Explicit free lists：</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547632763444.png" class="" width="1547632763444">
<p><strong>Freeing With Explicit Free Lists</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547632870380.png" class="" width="1547632870380">
<blockquote>
<p>Often use BBST to manage the allocated memory.</p>
</blockquote>
<p><strong>Explicit List Summary</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547633702762.png" class="" width="1547633702762">
<h3 id="Segregated-free-lists"><a href="#Segregated-free-lists" class="headerlink" title="Segregated free lists"></a>Segregated free lists</h3><p><strong>Each <font color=red>size class</font> of blocks has its own free list</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547633841902.png" class="" width="1547633841902">
<img data-src="/Notes-of-Intro-to-Computer-System/1547633866174.png" class="" width="1547633866174">
<img data-src="/Notes-of-Intro-to-Computer-System/1547633877113.png" class="" width="1547633877113">
<h3 id="Garbage-collection"><a href="#Garbage-collection" class="headerlink" title="Garbage collection"></a>Garbage collection</h3><p><strong>Garbage collection</strong> :automatic reclamation of heap-allocated storage—application never has to explicitly free memory.</p>
<blockquote>
<p>Common in many dynamic languages:</p>
<p>▪Python, Ruby, Java, Perl, ML, Lisp, Mathematica</p>
<p>The tech is still ongoing.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634384794.png" class="" width="1547634384794">
</blockquote>
<p>Graph:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634341801.png" class="" width="1547634341801">
<p><strong>Mark and Sweep Collecting</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634660319.png" class="" width="1547634660319">
<p>Assumptions For a Simple Implementation：</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634676657.png" class="" width="1547634676657">
<p>Mark and Sweep (cont.)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634637283.png" class="" width="1547634637283">
<h3 id="Memory-related-perils-and-pitfalls"><a href="#Memory-related-perils-and-pitfalls" class="headerlink" title="Memory-related perils and pitfalls"></a>Memory-related perils and pitfalls</h3><h4 id="Dereferencing-Bad-Pointers"><a href="#Dereferencing-Bad-Pointers" class="headerlink" title="Dereferencing Bad Pointers"></a>Dereferencing Bad Pointers</h4><p>The classic scanf bug:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634921046.png" class="" width="1547634921046">
<h4 id="Reading-Uninitialized-Memory"><a href="#Reading-Uninitialized-Memory" class="headerlink" title="Reading Uninitialized Memory"></a>Reading Uninitialized Memory</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635004089.png" class="" width="1547635004089">
<h4 id="Overwriting-Memory"><a href="#Overwriting-Memory" class="headerlink" title="Overwriting Memory"></a>Overwriting Memory</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635074780.png" class="" width="1547635074780">
<img data-src="/Notes-of-Intro-to-Computer-System/1547635083354.png" class="" width="1547635083354">
<img data-src="/Notes-of-Intro-to-Computer-System/1547635094290.png" class="" width="1547635094290">
<img data-src="/Notes-of-Intro-to-Computer-System/1547635106717.png" class="" width="1547635106717">
<img data-src="/Notes-of-Intro-to-Computer-System/1547635130333.png" class="" width="1547635130333">
<h4 id="Referencing-Nonexistent-Variables"><a href="#Referencing-Nonexistent-Variables" class="headerlink" title="Referencing Nonexistent Variables"></a>Referencing Nonexistent Variables</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635148682.png" class="" width="1547635148682">
<h4 id="Freeing-Blocks-Multiple-Times"><a href="#Freeing-Blocks-Multiple-Times" class="headerlink" title="Freeing Blocks Multiple Times"></a>Freeing Blocks Multiple Times</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635163203.png" class="" width="1547635163203">
<h4 id="Referencing-Freed-Blocks"><a href="#Referencing-Freed-Blocks" class="headerlink" title="Referencing Freed Blocks"></a>Referencing Freed Blocks</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635195448.png" class="" width="1547635195448">
<h4 id="Failing-to-Free-Blocks-Memory-Leaks"><a href="#Failing-to-Free-Blocks-Memory-Leaks" class="headerlink" title="Failing to Free Blocks (Memory Leaks)"></a>Failing to Free Blocks (Memory Leaks)</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547635216062.png" class="" width="1547635216062">
<img data-src="/Notes-of-Intro-to-Computer-System/1547635226516.png" class="" width="1547635226516">
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547634870116.png" class="" width="1547634870116">
<img data-src="/Notes-of-Intro-to-Computer-System/1547634883889.png" class="" width="1547634883889">
<h1 id="System-Level-I-O"><a href="#System-Level-I-O" class="headerlink" title="System-Level I/O"></a>System-Level I/O</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/16-io.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547636269869.png" class="" width="1547636269869">
<h2 id="Unix-I-O"><a href="#Unix-I-O" class="headerlink" title="Unix I/O"></a>Unix I/O</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547636283880.png" class="" width="1547636283880">
<p><strong>Unix I/O Overview</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547636304283.png" class="" width="1547636304283">
<h3 id="File-Types"><a href="#File-Types" class="headerlink" title="File Types"></a>File Types</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547636442697.png" class="" width="1547636442697">
<h3 id="Regular-Files"><a href="#Regular-Files" class="headerlink" title="Regular Files"></a>Regular Files</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547636488286.png" class="" width="1547636488286">
<blockquote>
<p>Windows type <code>\r\n</code> actually relates to the usage of typewriter.</p>
</blockquote>
<h3 id="Pathname"><a href="#Pathname" class="headerlink" title="Pathname"></a>Pathname</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547637170160.png" class="" width="1547637170160">
<h3 id="Opening-Files"><a href="#Opening-Files" class="headerlink" title="Opening Files"></a>Opening Files</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547637196057.png" class="" width="1547637196057">
<h3 id="Closing-Files"><a href="#Closing-Files" class="headerlink" title="Closing Files"></a>Closing Files</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547637230296.png" class="" width="1547637230296">
<h3 id="Reading-Files"><a href="#Reading-Files" class="headerlink" title="Reading Files"></a>Reading Files</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547637274563.png" class="" width="1547637274563">
<h3 id="Writing-Files"><a href="#Writing-Files" class="headerlink" title="Writing Files"></a>Writing Files</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547637288790.png" class="" width="1547637288790">
<p><strong>Ex</strong>. (sample)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547637342089.png" class="" width="1547637342089">
<h2 id="Metadata-sharing-and-redirection"><a href="#Metadata-sharing-and-redirection" class="headerlink" title="Metadata. sharing, and redirection"></a>Metadata. sharing, and redirection</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547637499977.png" class="" width="1547637499977">
<img data-src="/Notes-of-Intro-to-Computer-System/1547638259903.png" class="" width="1547638259903">
<p><strong>Ex</strong>. (Example of Accessing File Metadata)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547639415439.png" class="" width="1547639415439">
<h3 id="File-Sharing"><a href="#File-Sharing" class="headerlink" title="File Sharing"></a>File Sharing</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547638324632.png" class="" width="1547638324632">
<img data-src="/Notes-of-Intro-to-Computer-System/1547638404001.png" class="" width="1547638404001">
<h3 id="I-O-Redirection"><a href="#I-O-Redirection" class="headerlink" title="I/O Redirection"></a>I/O Redirection</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547638494620.png" class="" width="1547638494620">
<h2 id="Standard-I-O"><a href="#Standard-I-O" class="headerlink" title="Standard I/O"></a>Standard I/O</h2><p><strong>Functions</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547639071441.png" class="" width="1547639071441">
<p>Std. I/O Streams:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547639102970.png" class="" width="1547639102970">
<p>Buffering in Standard I/O:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547639217650.png" class="" width="1547639217650">
<img data-src="/Notes-of-Intro-to-Computer-System/1547639252437.png" class="" width="1547639252437">
<h2 id="RIO-robust-I-O-package"><a href="#RIO-robust-I-O-package" class="headerlink" title="RIO(robust I/O) package"></a>RIO(robust I/O) package</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547637720207.png" class="" width="1547637720207">
<p><strong>Buffered I/O: Implementation</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547637828298.png" class="" width="1547637828298">
<h2 id="Closing-remarks"><a href="#Closing-remarks" class="headerlink" title="Closing remarks"></a>Closing remarks</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547639020855.png" class="" width="1547639020855">
<blockquote>
<p>For more information:</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547639383577.png" class="" width="1547639383577">
<h1 id="Network-Programing"><a href="#Network-Programing" class="headerlink" title="Network Programing"></a>Network Programing</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/21-netprog1.pdf" target="_blank" rel="noopener external nofollow noreferrer">slide1</a>, <a href="https://www.cs.cmu.edu/~213/lectures/22-netprog2.pdf" target="_blank" rel="noopener external nofollow noreferrer">slide2</a>.</p>
</blockquote>
<h2 id="A-Client-Server-Transaction"><a href="#A-Client-Server-Transaction" class="headerlink" title="A Client-Server Transaction"></a>A Client-Server Transaction</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547639774401.png" class="" width="1547639774401">
<h3 id="Computer-Networks"><a href="#Computer-Networks" class="headerlink" title="Computer Networks"></a>Computer Networks</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547639820521.png" class="" width="1547639820521">
<img data-src="/Notes-of-Intro-to-Computer-System/1547639834807.png" class="" width="1547639834807">
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><h3 id="Lowest-Level-Ethernet-Segment"><a href="#Lowest-Level-Ethernet-Segment" class="headerlink" title="Lowest Level: Ethernet Segment"></a>Lowest Level: Ethernet Segment</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547640042340.png" class="" width="1547640042340">
<blockquote>
<p>Broadcast mechanism.</p>
</blockquote>
<h3 id="Next-Level-Bridged-Ethernet-Segment"><a href="#Next-Level-Bridged-Ethernet-Segment" class="headerlink" title="Next Level: Bridged Ethernet Segment"></a>Next Level: Bridged Ethernet Segment</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547640030470.png" class="" width="1547640030470">
<blockquote>
<p>LAN: Local area network.<br>WLAN: Wireless local area network.</p>
</blockquote>
<h3 id="Next-Level-internets"><a href="#Next-Level-internets" class="headerlink" title="Next Level: internets"></a>Next Level: internets</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547640194691.png" class="" width="1547640194691">
<img data-src="/Notes-of-Intro-to-Computer-System/1547640020500.png" class="" width="1547640020500">
<p>Transferring internet Data Via Encapsulation:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547640403914.png" class="" width="1547640403914">
<h2 id="Global-IP-Internet"><a href="#Global-IP-Internet" class="headerlink" title="Global IP Internet"></a>Global IP Internet</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547640557961.png" class="" width="1547640557961">
<h3 id="Internet-Domain-Name"><a href="#Internet-Domain-Name" class="headerlink" title="Internet Domain Name"></a>Internet Domain Name</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547641215724.png" class="" width="1547641215724">
<h3 id="Domain-Naming-System-DNS"><a href="#Domain-Naming-System-DNS" class="headerlink" title="Domain Naming System (DNS)"></a>Domain Naming System (DNS)</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547641252464.png" class="" width="1547641252464">
<blockquote>
<p>can be multi-multi mapping.</p>
</blockquote>
<h2 id="Sockets"><a href="#Sockets" class="headerlink" title="Sockets"></a>Sockets</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547642020101.png" class="" width="1547642020101">
<img data-src="/Notes-of-Intro-to-Computer-System/1547642053038.png" class="" width="1547642053038">
<img data-src="/Notes-of-Intro-to-Computer-System/1547642145169.png" class="" width="1547642145169">
<img data-src="/Notes-of-Intro-to-Computer-System/1547642156153.png" class="" width="1547642156153">
<h3 id="Socket-Interface"><a href="#Socket-Interface" class="headerlink" title="Socket Interface"></a>Socket Interface</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547642365345.png" class="" width="1547642365345">
<blockquote>
<p>The advanced topic can be seen in the video and related slides.</p>
</blockquote>
<h1 id="Concurrent-programming"><a href="#Concurrent-programming" class="headerlink" title="Concurrent programming"></a>Concurrent programming</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/23-concprog.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
<p><del>The lecturer always says “good to see you”</del>.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547646573504.png" class="" width="1547646573504">
<h2 id="Situation-Examples"><a href="#Situation-Examples" class="headerlink" title="Situation Examples"></a>Situation Examples</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547646713486.png" class="" width="1547646713486">
<p><strong>Data Race</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547646641411.png" class="" width="1547646641411">
<p><strong>Deadlock</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547646688116.png" class="" width="1547646688116">
<p><strong>Starvation</strong>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547646755864.png" class="" width="1547646755864">
<img data-src="/Notes-of-Intro-to-Computer-System/1547646950976.png" class="" width="1547646950976">
<h2 id="Iterative-Servers"><a href="#Iterative-Servers" class="headerlink" title="Iterative Servers"></a>Iterative Servers</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547647075791.png" class="" width="1547647075791">
<p><strong>Iterative servers process <font color=red size=4>one request at a time</font></strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547647023405.png" class="" width="1547647023405">
<p><strong>Fundamental Flaw of Iterative Servers</strong>: (example)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547647298201.png" class="" width="1547647298201">
<h2 id="Writing-Concurrent-Servers"><a href="#Writing-Concurrent-Servers" class="headerlink" title="Writing Concurrent Servers"></a>Writing Concurrent Servers</h2><p><font color=brown size=5>Approaches for Writing Concurrent Servers</font>:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547647413898.png" class="" width="1547647413898">
<h3 id="Approach-1-Process-based-Servers-进程"><a href="#Approach-1-Process-based-Servers-进程" class="headerlink" title="Approach 1: Process-based Servers(进程)"></a>Approach 1: Process-based Servers(进程)</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547647627512.png" class="" width="1547647627512">
<h3 id="Approach-2-Event-based-Servers"><a href="#Approach-2-Event-based-Servers" class="headerlink" title="Approach 2: Event-based Servers"></a>Approach 2: Event-based Servers</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547649281259.png" class="" width="1547649281259">
<p>I/O Multiplexed Event Processing:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547649302626.png" class="" width="1547649302626">
<h3 id="Approach-3-Thread-based-Servers-线程"><a href="#Approach-3-Thread-based-Servers-线程" class="headerlink" title="Approach 3: Thread-based Servers(线程)"></a>Approach 3: Thread-based Servers(线程)</h3><blockquote>
<p>Very similar to approach #1 (process-based)</p>
<p>…but using threads instead of processes</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547649366445.png" class="" width="1547649366445">
<img data-src="/Notes-of-Intro-to-Computer-System/1547649399772.png" class="" width="1547649399772">
<img data-src="/Notes-of-Intro-to-Computer-System/1547650144510.png" class="" width="1547650144510">
<img data-src="/Notes-of-Intro-to-Computer-System/1547650155901.png" class="" width="1547650155901">
<p>Summary: Approaches to Concurrency</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547650200705.png" class="" width="1547650200705">
<h1 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/24-sync-basic.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides-basic</a>, <a href="https://www.cs.cmu.edu/~213/lectures/25-sync-advanced.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides-advanced</a>.</p>
</blockquote>
<h2 id="Threads-review"><a href="#Threads-review" class="headerlink" title="Threads review"></a>Threads review</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547650418667.png" class="" width="1547650418667">
<img data-src="/Notes-of-Intro-to-Computer-System/1547650457857.png" class="" width="1547650457857">
<h2 id="Sharing"><a href="#Sharing" class="headerlink" title="Sharing"></a>Sharing</h2><p><strong>Ex</strong>. (Example Program to Illustrate Sharing)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547650532298.png" class="" width="1547650532298">
<p>Mapping Variable Instances to Memory:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547650564204.png" class="" width="1547650564204">
<blockquote>
<p><strong>Ex</strong>.</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547650619028.png" class="" width="1547650619028">
<p><strong>Ex</strong>. (Shared Variable Analysis)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547650823729.png" class="" width="1547650823729">
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547652937800.png" class="" width="1547652937800">
<h2 id="Mutual-exclusion"><a href="#Mutual-exclusion" class="headerlink" title="Mutual exclusion"></a>Mutual exclusion</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547652958297.png" class="" width="1547652958297">
<h2 id="Semaphores"><a href="#Semaphores" class="headerlink" title="Semaphores"></a>Semaphores</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547652991943.png" class="" width="1547652991943">
<p>Summary:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547653037579.png" class="" width="1547653037579">
<h2 id="Using-semaphores-to-schedule-shared-resources"><a href="#Using-semaphores-to-schedule-shared-resources" class="headerlink" title="Using semaphores to schedule shared resources"></a>Using semaphores to schedule shared resources</h2><h3 id="Producer-consumer-problem"><a href="#Producer-consumer-problem" class="headerlink" title="Producer-consumer problem"></a>Producer-consumer problem</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547653614225.png" class="" width="1547653614225">
<blockquote>
<p>Note: <strong><em><font color=red size=5>limited buffer</font></em></strong></p>
</blockquote>
<p>Maintain two semaphores: full + empty</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547653662469.png" class="" width="1547653662469">
<h4 id="Circular-Buffer"><a href="#Circular-Buffer" class="headerlink" title="Circular Buffer"></a>Circular Buffer</h4><img data-src="/Notes-of-Intro-to-Computer-System/1547654854691.png" class="" width="1547654854691">
<img data-src="/Notes-of-Intro-to-Computer-System/1547654864042.png" class="" width="1547654864042">
<h3 id="Readers-writers-problem"><a href="#Readers-writers-problem" class="headerlink" title="Readers-writers problem"></a>Readers-writers problem</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547657321523.png" class="" width="1547657321523">
<h2 id="Other-concurrency-issues"><a href="#Other-concurrency-issues" class="headerlink" title="Other concurrency issues"></a>Other concurrency issues</h2><h3 id="Thread-safety"><a href="#Thread-safety" class="headerlink" title="Thread safety"></a>Thread safety</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547657606023.png" class="" width="1547657606023">
<h3 id="Races"><a href="#Races" class="headerlink" title="Races"></a>Races</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547657467677.png" class="" width="1547657467677">
<h3 id="Deadlocks"><a href="#Deadlocks" class="headerlink" title="Deadlocks"></a>Deadlocks</h3><img data-src="/Notes-of-Intro-to-Computer-System/1547657507570.png" class="" width="1547657507570">
<p>Avoid:</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547657532124.png" class="" width="1547657532124">
<h1 id="Thread-Level-Parallelism"><a href="#Thread-Level-Parallelism" class="headerlink" title="Thread-Level Parallelism"></a>Thread-Level Parallelism</h1><blockquote>
<p><a href="https://www.cs.cmu.edu/~213/lectures/26-parallelism.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a>.</p>
<p>Longer term perspective. <strong><em><font color=red size=6>Think bigger!</font></em></strong></p>
</blockquote>
<h2 id="Today"><a href="#Today" class="headerlink" title="Today"></a>Today</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547657871360.png" class="" width="1547657871360">
<img data-src="/Notes-of-Intro-to-Computer-System/1547658046864.png" class="" width="1547658046864">
<blockquote>
<p>Just see the video.</p>
</blockquote>
<h1 id="Future-of-Computing"><a href="#Future-of-Computing" class="headerlink" title="Future of Computing"></a>Future of Computing</h1><blockquote>
<p>slides: <a href="https://www.cs.cmu.edu/~213/lectures/27-future1.pdf" target="_blank" rel="noopener external nofollow noreferrer">part1</a>, <a href="https://www.cs.cmu.edu/~213/lectures/28-future2.pdf" target="_blank" rel="noopener external nofollow noreferrer">part2</a>.</p>
</blockquote>
<h2 id="Moore’s-Law"><a href="#Moore’s-Law" class="headerlink" title="Moore’s Law"></a>Moore’s Law</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547665746325.png" class="" width="1547665746325">
<hr>
<img data-src="/Notes-of-Intro-to-Computer-System/1547660408168.png" class="" width="1547660408168">
<blockquote>
<p>The blue ones are actually for celphones.<br>The general trend is produced by regression.</p>
<p>It’s a prediction rather than a law.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547666287044.png" class="" width="1547666287044">
<p><a href="https://en.wikipedia.org/wiki/Technological_singularity" target="_blank" rel="noopener external nofollow noreferrer">Technological singularity</a>:</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/NLQNBfI97Ck" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<img data-src="/Notes-of-Intro-to-Computer-System/1547666579930.png" class="" width="1547666579930">
<img data-src="/Notes-of-Intro-to-Computer-System/1547667467170.png" class="" width="1547667467170">
<img data-src="/Notes-of-Intro-to-Computer-System/1547668381602.png" class="" width="1547668381602">
<p><strong>Ex</strong>. (3D structure)</p>
<img data-src="/Notes-of-Intro-to-Computer-System/1547668475898.png" class="" width="1547668475898">
<img data-src="/Notes-of-Intro-to-Computer-System/1547668534807.png" class="" width="1547668534807">
<h2 id="High-Performance-Computing"><a href="#High-Performance-Computing" class="headerlink" title="High-Performance Computing"></a>High-Performance Computing</h2><img data-src="/Notes-of-Intro-to-Computer-System/1547668699471.png" class="" width="1547668699471">
<img data-src="/Notes-of-Intro-to-Computer-System/1547668729420.png" class="" width="1547668729420">
<h2 id="What’s-So-Special-About-Big-Learning"><a href="#What’s-So-Special-About-Big-Learning" class="headerlink" title="What’s So Special About Big Learning?"></a>What’s So Special About Big Learning?</h2><blockquote>
<p>This part is available only on 2017 Fall version or after.</p>
<p>Please just see the <a href="https://www.cs.cmu.edu/~213/lectures/28-future2.pdf" target="_blank" rel="noopener external nofollow noreferrer">slides</a> and watch the video.</p>
<p><a href="https://turi.com/" target="_blank" rel="noopener external nofollow noreferrer">GraphLab</a>, <a href="https://wdxtub.com/2016/04/13/graphlab-guide/" target="_blank" rel="noopener external nofollow noreferrer">GraphLab-Guide_Chinese</a>.</p>
</blockquote>
<img data-src="/Notes-of-Intro-to-Computer-System/1547669478016.png" class="" width="1547669478016">
<img data-src="/Notes-of-Intro-to-Computer-System/1547669717022.png" class="" width="1547669717022">
<hr>
<img data-src="/Notes-of-Intro-to-Computer-System/1547669625241.png" class="" width="1547669625241">]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>m×n矩阵的行列式</title>
    <url>/m%C3%97n%E7%9F%A9%E9%98%B5%E7%9A%84%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>偶然想到了行列式。<br>众所周知，行列式都是方阵，$n \times n$。</p>
<p>那么，<font color=red><strong>存不存在$m \times n$的行列式</strong></font>呢？甚至，如何求解呢？<a id="more"></a></p>
<p>有了这个想法以后，我决定从行列式的几何意义出发。</p>
<ul>
<li>2阶行列式，代表了2个2维向量张成的<strong>面积</strong>（<em>张，即伸展</em>）</li>
<li>3阶行列式，代表3个3维向量张成的平行六面体的<strong>体积</strong></li>
<li>1阶行列式，代表了1维向量的<strong>长度</strong></li>
<li>……</li>
</ul>
<hr>
<h1 id="从2、3维出发"><a href="#从2、3维出发" class="headerlink" title="从2、3维出发~"></a>从2、3维出发~</h1><blockquote>
<p>由于矩阵可以转置，行列式不变（不证），因此，以下<strong>默认$m&lt;n$</strong>。</p>
</blockquote>
<p>叉积的行列式表示：（向量$\vec u = [a,b,c]$和$\vec v=[d,e,f]$得到$\vec w$）</p>
<script type="math/tex; mode=display">
\vec w=\begin{bmatrix} \vec i& \vec j& \vec k \\ a&b&c\\ d&e&f\\ \end{bmatrix}</script><p>$\vec w$的长度一般可以等效地看作：</p>
<script type="math/tex; mode=display">
|\vec w|=\begin{vmatrix} a&b&c\\ d&e&f\\ 0&0 & 1 \\  \end{vmatrix}</script><p>（不作证明。前提是$\vec u$，$\vec v$与$[0,0,1]$线性无关）</p>
<p>那么！难道，不就是下面的式子吗？。。。</p>
<script type="math/tex; mode=display">
\begin{vmatrix} a&b&c\\ d&e&f\ \\  \end{vmatrix}=\begin{vmatrix} a&b&c\\ d&e&f\\ 0&0 & 1 \\  \end{vmatrix}</script><p><strong>推广</strong>！！！</p>
<hr>
<h1 id="一般规律"><a href="#一般规律" class="headerlink" title="一般规律"></a>一般规律</h1><p>对于任意的$m \times n$矩阵A，</p>
<script type="math/tex; mode=display">
A=\begin{bmatrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}&{\ddots}&{\vdots}\\
{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\
\end{bmatrix}</script><p><strong>先采用<code>Guass消去法</code>，得到行阶梯矩阵</strong>B（此时$a_{ij}$的值可能已经发生变化。and不考虑不满秩的情况~）</p>
<script type="math/tex; mode=display">
B= \begin{bmatrix}
{a_{11}}&{a_{12}}&{a_{13}}&{a_{14}}&{\cdots}&{a_{1n}}\\
0&{a_{22}}&{a_{23}}&{a_{24}}&{\cdots}&{a_{2n}}\\
0&0&0&{a_{24}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}&{\vdots}&{\vdots}&{\ddots}&{\vdots}\\
{0}&{0}&{0}&{0}&{\cdots}&{a_{mn}}\\
\end{bmatrix}</script><p>然后为该矩阵<strong>补上<code>n-m</code>个线性无关的单位行向量</strong>，按照方阵行列式求解即可（将$B_{more}$称为B的<font color=red><strong>补充矩阵</strong></font>）</p>
<script type="math/tex; mode=display">
|A|=B_{more}=\begin{vmatrix}
{a_{11}}&{a_{12}}&{a_{13}}&{a_{14}}&{\cdots}&{a_{1n}}\\
0&{a_{22}}&{a_{23}}&{a_{24}}&{\cdots}&{a_{2n}}\\
0&0&1&0&{\cdots}&0\\
0&0&0&{a_{44}}&{\cdots}&{a_{4n}}\\
{\vdots}&{\vdots}&{\vdots}&{\vdots}&{\ddots}&{\vdots}\\
{0}&{0}&{0}&{0}&{\cdots}&{a_{nn}}\\
\end{vmatrix}
= {a_{11}}{a_{22}}{a_{44}}·…·{a_{nn}}</script><p>完美求解！</p>
<h2 id="广义迹"><a href="#广义迹" class="headerlink" title="广义迹"></a>广义迹</h2><p>实际上，由（5）、（6）式，容易看出，行阶梯矩阵中的阶梯角上的元素之积就是所求值。</p>
<p>因此，行阶梯矩阵中的阶梯角上的元素之和可以被称为广义迹。</p>
<h2 id="广义特征值"><a href="#广义特征值" class="headerlink" title="广义特征值"></a>广义特征值</h2><p>既然存在广义行列式，广义迹，那么难道不应该存在广义特征值吗？</p>
<p>特征值只需满足$|\lambda E - A|=0$。</p>
<p>但$E$的一般定义只有方阵，因此我们需要额外得到关于A的<font color=red><strong>广义相关单位矩阵</strong></font>$E_A$。</p>
<p>即有</p>
<script type="math/tex; mode=display">
|\lambda E_A - A|=0</script><p>显然，$E_A$满足，</p>
<ul>
<li>$m \times n$</li>
<li>与A的状态有强烈相关性</li>
</ul>
<p>结合（5）式及其前后的推导过程，我们不难得到，</p>
<script type="math/tex; mode=display">
E_A=\begin{bmatrix}
1&{0}&{0}&{0}&{\cdots}&0\\
0&1&{0}&{0}&{\cdots}&0\\
0&{0}&{0}&1&{\cdots}&0\\
{\vdots}&{\vdots}&{\vdots}&{\vdots}&{\ddots}&{\vdots}\\
{0}&{0}&{0}&{0}&{\cdots}&1\\
\end{bmatrix}</script><p>可以代入验证，此时（7）式在$\lambda_i$处成立，且$\lambda_i$的取值就是（6）式结果中的因子。</p>
<p>我们知道了A的特征值。</p>
<p>可不可以进一步求A的特征向量呢？</p>
<script type="math/tex; mode=display">
A\xi_n=\lambda \xi_m</script><p>……似乎引申出了一种广义的<font color=red><strong>特征变换</strong></font>。（相似变换）</p>
<blockquote>
<p>特征变换可以将不同维度的向量联系起来，即，<strong>$\xi_n$和$\xi_m$关于A矩阵相似</strong>。</p>
</blockquote>
<p>我们不妨这样思考，按照（4）、（5）、（6）式的变换，求得A的补充矩阵$A_{more}$。显然，必有</p>
<script type="math/tex; mode=display">
A_{more}\xi_n=\lambda \xi^{'}_n</script><p>（由定义，补充矩阵必是方阵）</p>
<p>现在，我们需要验证是否有$\xi_n = \xi^{‘}_n$。若成立，则$\xi_m$也必然是$\xi_n$的分量。</p>
<p>由一般性的方阵特征向量的属性（如方程组的解向量），容易知道，$\xi_n = \xi^{‘}_n$是成立的。</p>
<p>显然，<strong>$\xi_n$和$\xi_m$是相似的</strong>，它们关于A的分量相同。称，$\xi_n$根据变换法则$A$相似变换到$\xi_m$。</p>
<hr>
<h2 id="（线性）特征变换-相似变换"><a href="#（线性）特征变换-相似变换" class="headerlink" title="（线性）特征变换/相似变换"></a>（线性）特征变换/相似变换</h2><p>前面我们都默认了$m&lt;n$。根据转置规律，总可以保证成立。</p>
<p>但是这时，对于（9）式而言，<u>总是从更<strong>长</strong>向量相似变换到更<strong>短</strong>向量</u>。</p>
<p>因此，不由得会思考，是否可以从更<strong>短</strong>向量相似变换到更<strong>长</strong>向量呢？</p>
<blockquote>
<p>比如，可以举出例子：</p>
<script type="math/tex; mode=display">
\begin{bmatrix} 2&0\\0&1\\3&1\\  \end{bmatrix}\begin{bmatrix} 0\\k\\ \end{bmatrix}=1·\begin{bmatrix} 0\\k\\k\\ \end{bmatrix}</script><p>特征值：1，从$[0,k]^T$变换到$[0,k,k]^T$。（$k$为任意实数）</p>
<p>同时，也有</p>
<script type="math/tex; mode=display">
\begin{bmatrix} 2&0&3\\0&1&1\\  \end{bmatrix}\begin{bmatrix} 0\\k\\0\end{bmatrix}=1·\begin{bmatrix} 0\\k\\\end{bmatrix}</script><p>特征值：1，从$[0,k,0]^T$变换到$[0,k]^T$。</p>
<p>求解过程可以参考之前的分析。这里省略。</p>
</blockquote>
<p>如何推广？留待思考~</p>
<hr>
<blockquote>
<p>PS.写之前百度了一下，发现已经有人做过这方面的工作了，“广义行列式”。有论文发表，但写得过于枯燥。。。处理方法也与我所想不甚相同。</p>
<p>于是把自己的想法记下来了~</p>
</blockquote>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>FastText体验笔记</title>
    <url>/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>FastText体验笔记。<a id="more"></a></p>
<p>TODO: <a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener external nofollow noreferrer">docker</a>，<a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener external nofollow noreferrer">flask</a>。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/facebookresearch/fastText/" target="_blank" rel="noopener external nofollow noreferrer"><code>fastText</code></a>，<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=2ahUKEwiVw8L7r6bhAhUwEqYKHTHhAfkQFjADegQIAxAB&amp;url=http%3A%2F%2Ffasttext.apachecn.org%2F&amp;usg=AOvVaw0e_GoEfza9DXuK4-g4DUxG" target="_blank" rel="noopener external nofollow noreferrer">FastText 中文文档 - ApacheCN</a>，<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;ved=2ahUKEwiVw8L7r6bhAhUwEqYKHTHhAfkQFjAHegQIBxAB&amp;url=https%3A%2F%2Fblog.xingwudao.me%2F2018%2F04%2F23%2Ffastext%2F&amp;usg=AOvVaw3ck2M2kE5GQXVxciX6IeB-" target="_blank" rel="noopener external nofollow noreferrer">FastText使用指南| 竹园山庄</a></p>
<p>Paper: </p>
<ul>
<li><p><a href="https://arxiv.org/pdf/1607.04606v1.pdf" target="_blank" rel="noopener external nofollow noreferrer">Enriching Word Vectors with Subword Information</a></p>
<blockquote>
<p>这篇论文提出了用 word n-gram 的向量之和来代替简单的词向量的方法，以解决简单 word2vec 无法处理同一词的不同形态的问题。fastText 中提供了 maxn 这个参数来确定 word n-gram 的 n 的大小。</p>
</blockquote>
</li>
</ul>
<div class="pdfobject-container" data-target="Enriching_Word_Vectors_with_Subword_Information.pdf" data-height="500px"></div>
<ul>
<li><p><a href="https://arxiv.org/pdf/1607.01759v2.pdf" target="_blank" rel="noopener external nofollow noreferrer"><strong>Bag of Tricks for Efficient Text Classification</strong></a></p>
<blockquote>
<p>这篇论文提出了 fastText 算法，该算法实际上是将目前用来算 word2vec 的网络架构做了个小修改，原先使用一个词的上下文的所有词向量之和来预测词本身（CBOW 模型），现在改为用一段短文本的词向量之和来对文本进行分类。</p>
</blockquote>
</li>
</ul>
<div class="pdfobject-container" data-target="Bag_of_Tricks_for_Efficient_Text_Classification.pdf" data-height="500px"></div>
<ul>
<li><p><a href="https://arxiv.org/pdf/1612.03651.pdf" target="_blank" rel="noopener external nofollow noreferrer">FastText.zip: Compressing text classification models</a></p>
<blockquote>
<p>这篇论文讲fastText的模型压缩（存储空间）。这样，fastText甚至可以移植到手机端。</p>
</blockquote>
</li>
</ul>
<div class="pdfobject-container" data-target="FastText_compression.pdf" data-height="500px"></div>
<hr>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=5&amp;ved=2ahUKEwik1eKdrKbhAhWDHqYKHW-NAWsQFjAEegQIBxAB&amp;url=https%3A%2F%2Fwww.jiqizhixin.com%2Farticles%2F2018-06-05-3&amp;usg=AOvVaw39P0L9K-LqK4un-hUivpre" target="_blank" rel="noopener external nofollow noreferrer">fastText，智慧与美貌并重的文本分类及向量化工具| 机器之心</a></p>
<blockquote>
<p>fastText能够做到效果好，速度快，主要依靠两个秘密武器：一是利用了词内的n-gram信息(<strong>subword n-gram information</strong>)，二是用到了层次化Softmax回归(<strong>Hierarchical Softmax</strong>)的训练trick。</p>
</blockquote>
<p><a href="https://www.jiqizhixin.com/articles/2018-12-03-6" target="_blank" rel="noopener external nofollow noreferrer">fastText原理及实践 - 达观</a></p>
<p><a href="https://towardsdatascience.com/fasttext-ea9009dba0e8" target="_blank" rel="noopener external nofollow noreferrer">Learning FastText</a></p>
<p><a href="https://hackernoon.com/text-classification-simplified-with-facebooks-fasttext-b9d3022ac9cb" target="_blank" rel="noopener external nofollow noreferrer">Text Classification Simplified with Facebook’s FastText</a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=2ahUKEwik1eKdrKbhAhWDHqYKHW-NAWsQFjADegQIBRAB&amp;url=https%3A%2F%2Fblog.csdn.net%2Fsinat_26917383%2Farticle%2Fdetails%2F54850933&amp;usg=AOvVaw13-0y3Npvz1tOzbi1zuy97" target="_blank" rel="noopener external nofollow noreferrer">NLP︱高级词向量表达（二）——FastText（简述、学习笔记） - 素质云笔记 …</a></p>
<p><a href="https://blog.csdn.net/ymaini/article/details/81489599" target="_blank" rel="noopener external nofollow noreferrer">FastText学习笔记</a></p>
<p><a href="https://heleifz.github.io/14732610572844.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>fastText <font color=red>源码分析</font>- Helei’s Tech Notes</strong></a></p>
<p><a href="https://www.bookstack.cn/read/fasttext-doc-zh/doc-zh-faqs.md#常问问题" target="_blank" rel="noopener external nofollow noreferrer">常问问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36872508" target="_blank" rel="noopener external nofollow noreferrer">中文训练好的词向量</a></p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>FastText可以进行：</p>
<ul>
<li><strong>表示学习</strong>（学习词语的embedding向量）<ul>
<li>word2vec优化版，用了Subword的信息，速度是不会提升的，只是效果方面的改进，对于中文貌似完全没用</li>
</ul>
</li>
<li><strong>文本分类</strong>（尤其是句子分类）<ul>
<li>把句子每个word的vec求平均，然后直接用简单的LR分类就行（单层神经网络）</li>
</ul>
</li>
</ul>
<blockquote>
<p>An author: <a href="https://research.fb.com/people/mikolov-tomas/" target="_blank" rel="noopener external nofollow noreferrer">https://research.fb.com/people/mikolov-tomas/</a></p>
</blockquote>
<h2 id="特性表"><a href="#特性表" class="headerlink" title="特性表"></a>特性表</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">Liblinear</th>
<th style="text-align:center">深度学习</th>
<th style="text-align:center">fastText</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">梯度下降方法</td>
<td style="text-align:center">newGLMNET</td>
<td style="text-align:center">BGD*depth</td>
<td style="text-align:center"><strong>SGD</strong>+线衰<code>lr</code></td>
</tr>
<tr>
<td style="text-align:center">NGram</td>
<td style="text-align:center">训练</td>
<td style="text-align:center"></td>
<td style="text-align:center">训练+<strong>Hash</strong>存储</td>
</tr>
<tr>
<td style="text-align:center">Softmax</td>
<td style="text-align:center">S</td>
<td style="text-align:center">S</td>
<td style="text-align:center"><strong>HS</strong></td>
</tr>
<tr>
<td style="text-align:center">深度</td>
<td style="text-align:center">单层</td>
<td style="text-align:center">多层</td>
<td style="text-align:center"><strong>单层</strong></td>
</tr>
<tr>
<td style="text-align:center">架构</td>
<td style="text-align:center"></td>
<td style="text-align:center">全连接</td>
<td style="text-align:center"><strong>平均</strong></td>
</tr>
<tr>
<td style="text-align:center">词向量</td>
<td style="text-align:center">可选</td>
<td style="text-align:center"></td>
<td style="text-align:center">可选</td>
</tr>
<tr>
<td style="text-align:center">Thread</td>
<td style="text-align:center">单线程</td>
<td style="text-align:center">多线程</td>
<td style="text-align:center">多线程</td>
</tr>
</tbody>
</table>
</div>
<p>传统学习指：<a href="https://www.csie.ntu.edu.tw/~cjlin/papers/liblinear.pdf" target="_blank" rel="noopener external nofollow noreferrer"> LIBLINEAR: A library for large linear classification </a></p>
<div class="pdfobject-container" data-target="liblinear.pdf" data-height="500px"></div>
<div class="pdfobject-container" data-target="newGLMNET_for_L1-regularized_Linear_Classification.pdf" data-height="500px"></div>
<div class="pdfobject-container" data-target="Trust_region_Newton_method_for_large-scale_logistic_regression.pdf" data-height="500px"></div>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>第一步当然是安装环境辣。</p>
<blockquote>
<p>FastText源码采用<code>C++</code>实现。</p>
</blockquote>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>进入Linux服务器<code>实验目录</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;fastText.git</span><br><span class="line">$ cd fastText</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>make</code> 寻找目录下的<code>Makefile</code>文件，并根据其内容进行项目<strong>编译</strong>。</p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwjD8aiEu6bhAhXhIqYKHfT6A7YQFjAAegQIBhAB&amp;url=http%3A%2F%2Fwww.cnblogs.com%2Fhazir%2Fp%2Flinux_make_examples.html&amp;usg=AOvVaw1fr6g6jeSa9f9h1oknrMGZ" target="_blank" rel="noopener external nofollow noreferrer">例解Linux 下Make 命令- hazir - 博客园</a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=2ahUKEwjD8aiEu6bhAhXhIqYKHfT6A7YQFjACegQIBRAB&amp;url=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F02%2Fmake.html&amp;usg=AOvVaw1PwCr52DdvVMV4ZhEFi-E_" target="_blank" rel="noopener external nofollow noreferrer">Make 命令教程- 阮一峰的网络日志</a></p>
</blockquote>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><blockquote>
<p><a href="https://www.cnblogs.com/jkmiao/p/7041106.html" target="_blank" rel="noopener external nofollow noreferrer">fastext 中文文本分类</a></p>
<p><a href="https://radimrehurek.com/gensim/models/fasttext.html" target="_blank" rel="noopener external nofollow noreferrer">models.fasttext – FastText model</a></p>
</blockquote>
<p><code>fasttext</code>也能在python上便捷地使用：<a href="https://github.com/facebookresearch/fastText/tree/master/python" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/facebookresearch/fastText/tree/master/python</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;fastText.git</span><br><span class="line">$ cd fastText</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=2ahUKEwjoxbXny6bhAhW9KqYKHWAXA04QFjACegQIARAB&amp;url=https%3A%2F%2Fblog.csdn.net%2Fbbhdeal%2Farticle%2Fdetails%2F81144783&amp;usg=AOvVaw3ThX5JRL3r96KAOqde8TJ0" target="_blank" rel="noopener external nofollow noreferrer">Microsoft Visual C++ Build Tools下载/解决Visual C++ 14.0 is required …</a></p>
</blockquote>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><blockquote>
<p><a href="https://blog.csdn.net/weixin_36604953/article/details/78195462" target="_blank" rel="noopener external nofollow noreferrer">文本分类需要CNN？ No！fastText完美解决你的需求（前篇）</a></p>
<p><a href="https://blog.csdn.net/weixin_36604953/article/details/78324834" target="_blank" rel="noopener external nofollow noreferrer"><strong>文本分类需要CNN？No！fastText完美解决你的需求（后篇）</strong></a></p>
<p><a href="https://blog.csdn.net/john_bh/article/details/79268850" target="_blank" rel="noopener external nofollow noreferrer"><strong>FastText：快速的文本分类器</strong></a></p>
<p><a href="https://www.zhihu.com/question/48345431" target="_blank" rel="noopener external nofollow noreferrer">如何评价Word2Vec作者提出的fastText算法？深度学习是否在文本分类等简单任务上没有优势？</a></p>
<p><a href="https://towardsdatascience.com/fasttext-bag-of-tricks-for-efficient-text-classification-513ba9e302e7" target="_blank" rel="noopener external nofollow noreferrer">How does FastText classifier work under the hood?</a></p>
<p><a href="https://www.quora.com/Is-FastText-faster-than-Word2vec-Why" target="_blank" rel="noopener external nofollow noreferrer">Is FastText faster than Word2vec? Why?</a></p>
<p><a href="https://blog.csdn.net/AckClinkz/article/details/81907555" target="_blank" rel="noopener external nofollow noreferrer">fastText入门</a></p>
<p><a href="https://blog.csdn.net/AckClinkz/article/details/81907695" target="_blank" rel="noopener external nofollow noreferrer">fastText(二)：微博短文本下fastText的应用（一）</a></p>
<p><a href="https://blog.csdn.net/AckClinkz/article/details/81907903" target="_blank" rel="noopener external nofollow noreferrer">fastText(三)：微博短文本下fastText的应用（二）</a></p>
<p><a href="https://blog.eson.org/pub/657edf81/" target="_blank" rel="noopener external nofollow noreferrer">词向量 - fastText</a></p>
</blockquote>
<p>fasttext是facebook开源的一个词向量与文本分类工具，在2016年开源，典型应用场景是“带监督的文本分类问题”。提供简单而高效的文本分类和表征学习的方法，性能比肩深度学习而且速度更快。</p>
<p>fastText结合了自然语言处理和机器学习中最成功的理念。这些包括了使用词袋以及n-gram袋表征语句，还有使用子字(subword)信息，并通过隐藏表征在类别间共享信息。我们另外采用了一个softmax层级(利用了类别不均衡分布的优势)来加速运算过程！</p>
<p>fastText方法包含三部分，<strong>模型架构，层次SoftMax和N-gram特征。</strong></p>
<h2 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h2><p>fasttext是一个<strong>单层网络</strong>。</p>
<blockquote>
<p>fasttext将Ngrams也当做词训练word2vec模型；用CBOW的思路来做分类。（fasttext有一个有监督的模式，但是模型等同于<code>cbow</code>，只是target变成了label而不是word）</p>
</blockquote>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/fasttext-arch.png" class="" title="fasttext-arch">
<p>fasttext只有1层神经网络，属于所谓的shallow learning，但是fasttext的效果并不差，而且具备学习和预测速度快的优势，在工业界这点非常重要。它比一般的神经网络模型的精确度还要高。</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p><img data-src="https://heleifz.github.io/media/14732610572844/fasttext-model-arch.png" alt="fasttext-model-arch"></p>
<h3 id="DAN-deep-averaging-network"><a href="#DAN-deep-averaging-network" class="headerlink" title="DAN (deep averaging network)"></a>DAN (deep averaging network)</h3><blockquote>
<p><a href="https://aclweb.org/anthology/P15-1162" target="_blank" rel="noopener external nofollow noreferrer">Deep Unordered Composition Rivals Syntactic Methods for Text Classification</a></p>
<p><a href="https://github.com/llhthinker/NLP-Papers/blob/master/text%20classification/2017-11/Deep%20Unordered%20Composition%20Rivals%20Syntactic%20Methods%20for%20Text%20Classification/note.md" target="_blank" rel="noopener external nofollow noreferrer">论文笔记：Deep Unordered Composition Rivals Syntactic Methods for Text Classification</a></p>
<p>fastText简而言之，就是把文档中所有词通过lookup table变成向量，取平均后直接用线性分类器得到分类结果。fastText和ACL-15上的deep averaging network (<strong>DAN</strong>，如下图)非常相似，区别就是<u>去掉了中间的隐层</u>。两篇文章的结论也比较类似，也是指出对一些简单的分类任务，没有必要使用太复杂的网络结构就可以取得差不多的结果。</p>
</blockquote>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1553936021538.png" class="" width="1553936021538">
<p><strong>RecNN</strong>: Recursive Neural Nets（递归神经网络）。</p>
<p>对于任意数量的词语（n），DAN计算<code>2</code>层非线性层，而RecNN需要计算<code>n-1</code>层。</p>
<h3 id="fastText"><a href="#fastText" class="headerlink" title="fastText"></a>fastText</h3><p>下面是fastText的架构：</p>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1553945064441.png" class="" width="1553945064441">
<h2 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h2><blockquote>
<p><a href="https://www.cnblogs.com/peghoty/p/3857839.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>word2vec 中的数学原理详解</strong></a></p>
<p><a href="https://arxiv.org/pdf/1301.3781.pdf" target="_blank" rel="noopener external nofollow noreferrer">Efficient Estimation of Word Representations in Vector Space</a></p>
<p><a href="https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf" target="_blank" rel="noopener external nofollow noreferrer">Distributed Representations of Words and Phrases and their Compositionality</a></p>
</blockquote>
<p>fastText 提供了两种用于计算词表示的模型：<code>skipgram</code> 和 <code>cbow</code> (‘<strong>c</strong>ontinuous-<strong>b</strong>ag-<strong>o</strong>f-<strong>w</strong>ords’)。</p>
<p><strong>上下文</strong>：指在目标词左边和右边的固定单词数和。</p>
<p> <code>cbow</code> 模型是<strong>根据目标词的上下文来预测目标词</strong>。<code>skipgram</code> 模型是<strong>学习近邻的单词来预测目标单词</strong>。</p>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/cbo_vs_skipgram.png" class="" title="cbow vs skipgram">
<blockquote>
<p><code>skipgram</code> 模型会比 <code>cbow</code> 模型在 subword information（子词信息）方面效果更好。</p>
</blockquote>
<h3 id="神经语言模型"><a href="#神经语言模型" class="headerlink" title="神经语言模型"></a>神经语言模型</h3><img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1554273776416.png" class="" width="1554273776416">
<p>神经语言模型又常常被简记为下图：</p>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1554273816475.png" class="" width="1554273816475">
<h3 id="CBOW"><a href="#CBOW" class="headerlink" title="CBOW"></a>CBOW</h3><img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1554273658779.png" class="" width="1554273658779">
<h3 id="Skip-gram"><a href="#Skip-gram" class="headerlink" title="Skip-gram"></a>Skip-gram</h3><img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1554275902231.png" class="" width="1554275902231">
<h2 id="层次softmax"><a href="#层次softmax" class="headerlink" title="层次softmax"></a>层次softmax</h2><img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/20180206115602122.jpg" class="" title="层次softmax">
<h2 id="N-gram"><a href="#N-gram" class="headerlink" title="N-gram"></a>N-gram</h2><p>来源于马尔可夫链。</p>
<p><img data-src="https://cdn-images-1.medium.com/max/1600/1*tufb2Ea4ZBVydTuvrIUT5A.png" alt="img"></p>
<p><strong>N-gram features</strong>：</p>
<ul>
<li>只用unigram的话会丢掉word order信息，所以通过加入N-gram features进行补充</li>
<li>用hashing来减少N-gram的存储</li>
</ul>
<p>由于n-gram的量远比word大的多，完全存下所有的n-gram也不现实。Fasttext采用了Hash桶的方式，把所有的n-gram都哈希到buckets个桶中，哈希到同一个桶的所有n-gram共享一个embedding vector。如下图所示：</p>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1554292920220.png" class="" width="1554292920220">
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>fastText在实现上很考究。源码采用<code>C++</code>实现。</p>
<blockquote>
<p><a href="https://heleifz.github.io/14732610572844.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>fastText <font color=red>源码分析</font>- Helei’s Tech Notes</strong></a></p>
</blockquote>
<h1 id="Text-Classification-文本分类"><a href="#Text-Classification-文本分类" class="headerlink" title="Text Classification 文本分类"></a>Text Classification 文本分类</h1><p>确认进入实验目录：<code>***/***/fastTest</code>.</p>
<p>运行以下命令：（不加参数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;fasttext</span><br></pre></td></tr></table></figure>
<p>则可以显示功能列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; .&#x2F;fasttext</span><br><span class="line">usage: fasttext &lt;command&gt; &lt;args&gt;</span><br><span class="line"></span><br><span class="line">The commands supported by fasttext are:</span><br><span class="line"></span><br><span class="line">  supervised              训练一个监督分类器</span><br><span class="line">  quantize                量化模型以减少内存使用量</span><br><span class="line">  test                    评估一个监督分类器</span><br><span class="line">  predict                 预测最有可能的标签</span><br><span class="line">  predict-prob            用概率预测最可能的标签</span><br><span class="line">  skipgram                训练一个 skipgram 模型</span><br><span class="line">  cbow                    训练一个 cbow 模型</span><br><span class="line">  print-word-vectors      给定一个训练好的模型，打印出所有的单词向量</span><br><span class="line">  print-sentence-vectors  给定一个训练好的模型，打印出所有的句子向量</span><br><span class="line">  nn                      查询最近邻居</span><br><span class="line">  analogies               查找所有同类词</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>supervised</td>
<td>分类任务，训练模型</td>
</tr>
<tr>
<td>quantize</td>
<td>压缩模型</td>
</tr>
<tr>
<td>test</td>
<td>分类任务，测试模型</td>
</tr>
<tr>
<td>predict</td>
<td>分类任务，预测</td>
</tr>
<tr>
<td>predict-prob</td>
<td>分类任务，预测，并带着预测概率输出</td>
</tr>
<tr>
<td>skipgram</td>
<td>词embedding任务，skipgram模型</td>
</tr>
<tr>
<td>cbow</td>
<td>词embedding任务，cbow 模型</td>
</tr>
<tr>
<td>print-word-vectors</td>
<td>打印词embedding向量，需要输入一个模型</td>
</tr>
<tr>
<td>print-sentence-vectors</td>
<td>打印句子embedding向量，需要输入一个模型</td>
</tr>
<tr>
<td>print-ngrams</td>
<td>打印ngram，需要输入一个模型和一个词</td>
</tr>
<tr>
<td>nn</td>
<td>搜索最近邻向量</td>
</tr>
<tr>
<td>analogies</td>
<td>对向量做一些加减运算，比如“北京 - 中国 + 日本”，会搜出“东京”</td>
</tr>
<tr>
<td>dump</td>
<td>导出训练的参数和模型</td>
</tr>
</tbody>
</table>
</div>
<p>文本分类教程中, we mainly use the <strong><code>supervised</code>, <code>test</code> and <code>predict</code>subcommands</strong>, which corresponds to <strong>learning (and using) text classifier</strong>. </p>
<blockquote>
<p>For an introduction to the other functionalities of fastText, please see the <a href="https://fasttext.cc/docs/en/unsupervised-tutorial.html" target="_blank" rel="noopener external nofollow noreferrer">tutorial about learning word vectors</a>.</p>
</blockquote>
<h2 id="Cooking-实验"><a href="#Cooking-实验" class="headerlink" title="Cooking 实验"></a>Cooking 实验</h2><h3 id="获得数据"><a href="#获得数据" class="headerlink" title="获得数据"></a>获得数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; wget https:&#x2F;&#x2F;dl.fbaipublicfiles.com&#x2F;fasttext&#x2F;data&#x2F;cooking.stackexchange.tar.gz &amp;&amp; tar xvzf cooking.stackexchange.tar.gz</span><br><span class="line">&gt;&gt; head cooking.stackexchange.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p> <strong><font color=red>All the labels start by the <code>__label__</code> prefix</font>, which is how fastText recognize what is a label or what is a word.</strong>（其实后面也可以在训练里通过<code>-label</code>参数改改）</p>
<p> <code>wget [url]</code>获取云端文件，<code>&amp;&amp;</code>是<strong>短路</strong>写法，<code>tar xvzf</code>解压缩。</p>
<p> <a href="https://www.cnblogs.com/peida/archive/2012/11/06/2756278.html" target="_blank" rel="noopener external nofollow noreferrer">每天一个linux命令（14）：head 命令</a></p>
<blockquote>
<p>head 用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。 </p>
</blockquote>
<p> <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwjvxOSCvqbhAhVmwIsBHc0ADRwQFjAAegQIARAB&amp;url=https%3A%2F%2Fmy.oschina.net%2Fhanzhankang%2Fblog%2F202754&amp;usg=AOvVaw2-ngL-D3pyNY1wVSLao1yo" target="_blank" rel="noopener external nofollow noreferrer">Linux Shell的&amp; 、&amp;&amp; 、 || - 华兹格的个人空间- 开源中国</a></p>
</blockquote>
<h3 id="数据切分"><a href="#数据切分" class="headerlink" title="数据切分"></a>数据切分</h3><p>观测数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; wc cooking.stackexchange.txt</span><br><span class="line">  15404  169582 1401900 cooking.stackexchange.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>输出说明：</strong>行数 单词数 字节数 文件名</p>
</blockquote>
<p>切分：（Our full dataset contains <code>15404</code> examples.）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; head -n 12404 cooking.stackexchange.txt &gt; cooking.train</span><br><span class="line">&gt;&gt; tail -n 3000 cooking.stackexchange.txt &gt; cooking.valid</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-n</code>输入行数，<code>&gt;</code>输出重定向。</p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwjrr_i0yKbhAhUKK6YKHawuDA4QFjAAegQIBhAB&amp;url=http%3A%2F%2Fwww.runoob.com%2Flinux%2Flinux-shell-io-redirections.html&amp;usg=AOvVaw0EPa5TYCZV-HZDxp9Ke4eU" target="_blank" rel="noopener external nofollow noreferrer">Shell 输入/输出重定向| 菜鸟教程</a></p>
</blockquote>
<h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; .&#x2F;fasttext supervised -input cooking.train -output model_cooking</span><br><span class="line">Read 0M words</span><br><span class="line">Number of words:  14598</span><br><span class="line">Number of labels: 734</span><br><span class="line">Progress: 100.0%  words&#x2F;sec&#x2F;thread: 75109  lr: 0.000000  loss: 5.708354  eta: 0h0m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The <code>-input</code> command line option indicates the file containing the training examples, while the <code>-output</code> option indicates where to save the model. At the end of training, a file <code>model_cooking.bin</code>, containing the trained classifier, is created in the current directory.</p>
</blockquote>
<p>训练参数表：（Or <a href="https://www.bookstack.cn/read/fasttext-doc-zh/doc-zh-options.md" target="_blank" rel="noopener external nofollow noreferrer">here</a>）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><font color=red>-input</font></strong></td>
<td>训练数据</td>
<td></td>
</tr>
<tr>
<td><strong><font color=red>-output</font></strong></td>
<td>模型输出，会输出模型和embedding结果，后缀是.vec和.bin</td>
<td></td>
</tr>
<tr>
<td><strong><font color=red>-lr</font></strong></td>
<td>学习率</td>
<td><strong>0.1</strong></td>
</tr>
<tr>
<td><strong><font color=red>-epoch</font></strong></td>
<td>迭代次数</td>
<td><strong>5</strong></td>
</tr>
<tr>
<td><strong>-neg</strong></td>
<td>负采样个数</td>
<td><strong>5</strong></td>
</tr>
<tr>
<td><strong>-label</strong></td>
<td>类别前缀</td>
<td><strong><code>__label__</code></strong></td>
</tr>
<tr>
<td><strong>-loss</strong></td>
<td>损失函数 {ns, <strong>hs</strong>, <strong>softmax</strong>}，负采样, 霍夫曼层次softmax，softmax</td>
<td>softmax</td>
</tr>
<tr>
<td>-ws</td>
<td>学习embedding模型时，考虑上下文词的个数，窗口宽度</td>
<td>5</td>
</tr>
<tr>
<td>-pretrainedVectors</td>
<td>引入预训练的词向量</td>
<td></td>
</tr>
<tr>
<td>-dim</td>
<td>embedding的向量维度</td>
<td>100</td>
</tr>
<tr>
<td><strong>-bucket</strong></td>
<td>哈希桶（样本量很大时提速）</td>
<td></td>
</tr>
<tr>
<td>-thread</td>
<td>线程数</td>
<td>12</td>
</tr>
<tr>
<td>-saveOutput</td>
<td>是否输出参数需要保存</td>
<td>false</td>
</tr>
<tr>
<td>-verbose</td>
<td>冗长等级</td>
<td>2</td>
</tr>
<tr>
<td>-minCount</td>
<td>最小词频过滤</td>
<td>0</td>
</tr>
<tr>
<td>-minCountLabel</td>
<td>最小类别样本数过滤</td>
<td></td>
</tr>
<tr>
<td>-wordNgrams</td>
<td>最大ngram</td>
<td>1</td>
</tr>
<tr>
<td>-minn</td>
<td>字符ngram最小长度</td>
<td>0</td>
</tr>
<tr>
<td>-maxn</td>
<td>字符ngram最大长度</td>
<td>0</td>
</tr>
<tr>
<td>-t</td>
<td>采样阈值</td>
<td>0.0001</td>
</tr>
<tr>
<td>-lrUpdateRate</td>
<td>多少次更新后改变学习率</td>
<td>100</td>
</tr>
<tr>
<td>-cutoff</td>
<td>最大保留的词和ngram串数量</td>
<td>0</td>
</tr>
<tr>
<td>-retrain</td>
<td>如果 cutoff 设置了，是否需要优化embedding输出</td>
<td>false</td>
</tr>
<tr>
<td>-qnorm</td>
<td>whether the norm is quantized separately</td>
<td>false</td>
</tr>
<tr>
<td>-qout</td>
<td>分类器是否需要quantized</td>
<td>false</td>
</tr>
<tr>
<td>-dsub</td>
<td>每个子向量的数量</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="直接测试"><a href="#直接测试" class="headerlink" title="直接测试"></a>直接测试</h4><p>It is possible to directly test our classifier interactively, by running the command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ./fasttext predict model_cooking.bin -</span><br></pre></td></tr></table></figure>
<p>and then typing a sentence.  Let’s first try the sentence:</p>
<p><em>Which baking dish is best to bake a banana bread ?</em></p>
<p>The predicted tag is <code>baking</code>  which fits well to this question. Let us now try a second example:</p>
<p><em>Why not put knives in the dishwasher?</em></p>
<p>The label predicted by the model is <code>food-safety</code>, which  is not relevant. （实测这里也是<code>baking</code>，而且，该模型似乎对大小写敏感，见下图）Somehow, the model seems to fail on simple examples.</p>
<img data-src="/fastText%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/1553827693158.png" class="" width="1553827693158">
<p>To  get a better sense of its quality, let’s test it on the validation data  by running:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; .&#x2F;fasttext test model_cooking.bin cooking.valid                 </span><br><span class="line">N  3000</span><br><span class="line">P@1  0.124</span><br><span class="line">R@1  0.0541</span><br><span class="line">Number of examples: 3000</span><br></pre></td></tr></table></figure>
<p>The output of fastText are <strong><font color=red>the precision at one (<code>P@1</code>) and the recall at one (<code>R@1</code>)</font></strong>. We can also compute the precision at five and recall at five with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ./fasttext <span class="built_in">test</span> model_cooking.bin cooking.valid 5 0.1              </span><br><span class="line">N  3000</span><br><span class="line">P@5  0.0668</span><br><span class="line">R@5  0.146</span><br><span class="line">Number of examples: 3000</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwitpt3_q6bhAhVuyosBHe2FAw4QFjAAegQIAxAB&amp;url=https%3A%2F%2Fdatascience.stackexchange.com%2Fquestions%2F13327%2Fwhat-does-prec1-in-fasttext-mean&amp;usg=AOvVaw0ndx98AGbKY-PDVy4Gk0dy" target="_blank" rel="noopener external nofollow noreferrer">machine learning - What does Prec@1 in fastText mean? - Data …</a></p>
<p><a href="https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval" target="_blank" rel="noopener external nofollow noreferrer">Evaluation measures (information retrieval) - Wikipedia</a>#Precision_at_K) </p>
</blockquote>
<h2 id="文本分类实验"><a href="#文本分类实验" class="headerlink" title="文本分类实验"></a>文本分类实验</h2><h3 id="实验记录表"><a href="#实验记录表" class="headerlink" title="实验记录表"></a>实验记录表</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">实验</th>
<th style="text-align:center">分词方式</th>
<th style="text-align:center">测试结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">无分词</td>
<td style="text-align:center">N    61363<br>P@1    0.264<br>R@1    0.264</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">分字[default]</td>
<td style="text-align:center">N    61363<br>P@1    <strong>0.772</strong><br>R@1    <strong>0.772</strong></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Jieba[common]</td>
<td style="text-align:center">N    61363<br>P@1    0.768<br>R@1    0.768</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">分字[default] + <code>-epoch 25</code></td>
<td style="text-align:center">N    61363<br>P@1    <strong><font color=red>0.827</font></strong><br>R@1    <strong><font color=red>0.827</font></strong></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">分字[default] + <code>-lr 0.3</code></td>
<td style="text-align:center">N    61363<br>P@1    0.748<br>R@1    0.748</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">分字[default] + <code>-epoch 30 -wordNgrams 2</code><br>运行速度骤降</td>
<td style="text-align:center">N    61363<br>P@1    <strong>0.821</strong><br>R@1    <strong>0.821</strong></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">分字[default] + <code>-epoch 30 -wordNgrams 2 -loss hs</code><br/>运行速度明显提升，性能下降<br>层次sortmax</td>
<td style="text-align:center">N    61363<br>P@1    0.761<br>R@1    0.761</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">分字[default] + 标点过滤 +<code>-epoch 25</code></td>
<td style="text-align:center">N    61363<br>P@1    0.801<br>R@1    0.801</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">分字[default] + 预训练词向量[300维]<br><code>-dim 300</code></td>
<td style="text-align:center">N    61363<br>P@1    <strong><font color=red>0.862</font></strong><br/>R@1    <strong><font color=red>0.862</font></strong></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">分字[default] + 预训练词向量[300维]+<code>-epoch 30 -wordNgrams 2</code></td>
<td style="text-align:center">N    61363<br>P@1    <strong><font color=red>0.909</font></strong><br>R@1    <strong><font color=red>0.909</font></strong></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>实验的测试结果波动在5%左右。</p>
<p>分层 softmax 是完全 softmax 损失函数的一种近似, 它能够在大量类的数据上高效训练. 这通常会损失一些精确度.</p>
</blockquote>
<h3 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h3><p>将修改后的文件传到服务器上。</p>
<blockquote>
<p>先修改意图label的形式，与fastText的API进行配对。</p>
</blockquote>
<h4 id="分字"><a href="#分字" class="headerlink" title="分字"></a>分字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">df[<span class="string">"raw_query"</span>] = df[<span class="string">"raw_query"</span>].apply(list)	</span><br><span class="line">df[<span class="string">"raw_query"</span>] = df[<span class="string">"raw_query"</span>].apply(<span class="string">" "</span>.join)</span><br></pre></td></tr></table></figure>
<h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><p>类似的。用<code>jieba</code>。</p>
<h3 id="输出概率"><a href="#输出概率" class="headerlink" title="输出概率"></a>输出概率</h3><p><code>predict-prob</code> + <code>&gt;</code>输出重定向到文件。</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><blockquote>
<p><a href="http://fasttext.apachecn.org/#/doc/zh/supervised-tutorial?id=%e8%8e%b7%e5%8f%96%e5%92%8c%e5%87%86%e5%a4%87%e6%95%b0%e6%8d%ae" target="_blank" rel="noopener external nofollow noreferrer">http://fasttext.apachecn.org/#/doc/zh/supervised-tutorial?id=%e8%8e%b7%e5%8f%96%e5%92%8c%e5%87%86%e5%a4%87%e6%95%b0%e6%8d%ae</a></p>
<p><a href="https://www.zhihu.com/question/265357659" target="_blank" rel="noopener external nofollow noreferrer">在文本分类任务中，有哪些论文中很少提及却对性能有重要影响的tricks？</a></p>
<p><a href="https://ver217.github.io/2018/04/23/nlp-text-classification/" target="_blank" rel="noopener external nofollow noreferrer"><strong>NLP 文本分类问题</strong></a></p>
</blockquote>
<ul>
<li>预处理数据 ;</li>
<li>改变迭代次数 (使用选项 <code>-epoch</code>, 标准范围 <code>[5 - 50]</code>) ;</li>
<li>改变学习速率 (使用选项 <code>-lr</code>, 标准范围 <code>[0.1 - 1.0]</code>) ;</li>
<li>使用 word n-grams (使用选项 <code>-wordNgrams</code>, 标准范围 <code>[1 - 5]</code>).</li>
<li>引入预训练的字向量</li>
</ul>
<h2 id="预处理数据"><a href="#预处理数据" class="headerlink" title="预处理数据"></a>预处理数据</h2><blockquote>
<p><a href="https://blog.csdn.net/spring_willow/article/details/80211243" target="_blank" rel="noopener external nofollow noreferrer">NLP-中文文本去除标点符号</a></p>
<p><a href="https://blog.csdn.net/qq_35203425/article/details/80830939" target="_blank" rel="noopener external nofollow noreferrer"><strong>NLP文本预处理去除标点符号</strong></a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">punc = punctuation + <span class="string">r" u‘.,;《》？！“”‘’@#￥%…&amp;×（）——+【】&#123;&#125;;；●，。&amp;～、|\s:：‘"</span></span><br><span class="line">df[<span class="string">"raw_query"</span>] = df[<span class="string">"raw_query"</span>].apply(<span class="keyword">lambda</span> line: re.sub(<span class="string">r"[&#123;&#125;]+"</span>.format(punc),<span class="string">" "</span>,line))</span><br></pre></td></tr></table></figure>
<p>实测没有明显效果。</p>
<h2 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h2><p>fasttext存在过拟合问题，在训练集上的精度（98）远高于测试集（90%）。</p>
<p>但fasttext并没有引入正则化。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ucore实验</title>
    <url>/ucore%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>ucore实验记录。<a id="more"></a></p>
<blockquote>
<p><a href="https://www.gitbook.com/book/chyyuu/ucore_os_docs/details" target="_blank" rel="noopener external nofollow noreferrer">实验指导书</a>。</p>
<blockquote>
<p>因为时间不够所以实验没来得及做了~建议留出足够时间。</p>
</blockquote>
</blockquote>
<h1 id="实验0-环境"><a href="#实验0-环境" class="headerlink" title="实验0 环境"></a>实验0 环境</h1><blockquote>
<p><a href="https://www.shiyanlou.com/courses/reports/1368923/" target="_blank" rel="noopener external nofollow noreferrer">https://www.shiyanlou.com/courses/reports/1368923/</a></p>
<p><a href="https://github.com/kiukotsu/ucore" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/kiukotsu/ucore</a></p>
<p><a href="https://zhanghuimeng.github.io/post/os-mooc-lecture-2-summary/" target="_blank" rel="noopener external nofollow noreferrer">https://zhanghuimeng.github.io/post/os-mooc-lecture-2-summary/</a></p>
</blockquote>
<p><code>qemu</code>的安装需要特别注意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></table></figure>
<p>在完成安装以后，直接<code>qemu</code>可能<a href="https://blog.csdn.net/u013045749/article/details/53575639" target="_blank" rel="noopener external nofollow noreferrer">找不到命令</a>。运行以下语句进行链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;qemu-system-i386 &#x2F;usr&#x2F;bin&#x2F;qemu</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/kiukotsu/ucore" target="_blank" rel="noopener external nofollow noreferrer">实验环境（5种）</a></p>
<p>踩坑：x86架构的unbantu不能装在arm架构的树莓派上。</p>
</blockquote>
<p><strong>装虚拟机太慢</strong>。弃。</p>
<p><strong>在树莓派上跑</strong>，gcc版本不对，装gcc遇到极大困难。弃。</p>
<blockquote>
<p>使用了<strong>树莓派</strong>而window平台上搭载虚拟机的方法来做实验。</p>
<p>Raspbian需要更换软件下载源（更新源）。搜索即可。</p>
<p>OS系统：<a href="https://zh.wikipedia.org/wiki/Raspbian" target="_blank" rel="noopener external nofollow noreferrer">Raspbian</a>。（基于<a href="https://zh.wikipedia.org/wiki/Debian" target="_blank" rel="noopener external nofollow noreferrer">Debian</a>的操作系统，linux系）</p>
</blockquote>
<p>准备<strong>在电脑上装ubantu</strong>。</p>
<blockquote>
<p>成功。</p>
<ul>
<li>网上下载ubuntu14.04 iso文件</li>
<li>准备一个U（闪）盘<ul>
<li>利用<em>SD Card Formatter 5.0.1 Setup（格式化工具）</em> 进行格式化</li>
<li>用 <em>Universal-USB（刻录工具）</em> 将ubuntu14.04刻录到闪盘</li>
<li>插入U盘，重启电脑</li>
</ul>
</li>
<li>在开机完成前，按快捷键进入BOOT模式<ul>
<li>在设置中找到，修改BOOT启动顺序，将从U盘硬件启动设到第1位</li>
<li>保存设置，退出，开始装ubuntu</li>
</ul>
</li>
<li>按<a href="https://github.com/kiukotsu/ucore" target="_blank" rel="noopener external nofollow noreferrer">实验环境（5种）</a>一键安装相应软件</li>
<li>开始做实验</li>
</ul>
</blockquote>
<hr>
<p>关于understand：</p>
<ul>
<li>到<a href="http://scitools.com/download/all-builds/" target="_blank" rel="noopener external nofollow noreferrer">此处</a>下载4.0版本</li>
<li>安装教程：<a href="http://scitools.com/documents/unix_install.php" target="_blank" rel="noopener external nofollow noreferrer">Here</a></li>
<li>registery code: D59E41A3360B<br>E-mail: a123@163.com</li>
</ul>
<h1 id="实验1-启动"><a href="#实验1-启动" class="headerlink" title="实验1 启动"></a>实验1 启动</h1><blockquote>
<p><a href="https://www.cnblogs.com/linkzijun/p/9249743.html" target="_blank" rel="noopener external nofollow noreferrer">关于ucore实验一的资料查找</a></p>
<p><a href="https://blog.csdn.net/jasonyuchen/article/details/76254480" target="_blank" rel="noopener external nofollow noreferrer">Makefile代码分析</a></p>
<p><a href="https://yuerer.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-uCore-Lab-1/" target="_blank" rel="noopener external nofollow noreferrer">操作系统 uCore Lab 1 含 Challenge</a> 比较完整 and <a href="https://github.com/twd2/ucore_os_lab/blob/master/labcodes/lab1/report.md" target="_blank" rel="noopener external nofollow noreferrer">Here</a>[sim]</p>
<p><a href="https://xr1s.me/2018/05/15/ucore-lab1-report/" target="_blank" rel="noopener external nofollow noreferrer">ucore lab1 实验报告</a> 比较通俗</p>
<p><a href="http://qiaoin.github.io/ucore-ex1-notes.html" target="_blank" rel="noopener external nofollow noreferrer">uCore实验1笔记整理</a> 比较通俗</p>
</blockquote>
<p>等设备~到了~</p>
<hr>
<font color=red>**Caution：lab1的答案里面都有`report`文件，挺详细，记录参考答案。**</font>

<h2 id="附录-lab1参考答案"><a href="#附录-lab1参考答案" class="headerlink" title="附录 lab1参考答案"></a>附录 lab1参考答案</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="[练习1]"></a>[练习1]</h3><p>[练习1.1] 操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中<br>每一条相关命令和命令参数的含义,以及说明命令导致的结果)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;ucore.img</span><br><span class="line">| 生成ucore.img的相关代码为</span><br><span class="line">| $(UCOREIMG): $(kernel) $(bootblock)</span><br><span class="line">|	$(V)dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;$@ count&#x3D;10000</span><br><span class="line">|	$(V)dd if&#x3D;$(bootblock) of&#x3D;$@ conv&#x3D;notrunc</span><br><span class="line">|	$(V)dd if&#x3D;$(kernel) of&#x3D;$@ seek&#x3D;1 conv&#x3D;notrunc</span><br><span class="line">|</span><br><span class="line">| 为了生成ucore.img，首先需要生成bootblock、kernel</span><br><span class="line">|</span><br><span class="line">|&gt;	bin&#x2F;bootblock</span><br><span class="line">|	| 生成bootblock的相关代码为</span><br><span class="line">|	| $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)</span><br><span class="line">|	|	@echo + ld $@</span><br><span class="line">|	|	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \</span><br><span class="line">|	|		-o $(call toobj,bootblock)</span><br><span class="line">|	|	@$(OBJDUMP) -S $(call objfile,bootblock) &gt; \</span><br><span class="line">|	|		$(call asmfile,bootblock)</span><br><span class="line">|	|	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) \</span><br><span class="line">|	|		$(call outfile,bootblock)</span><br><span class="line">|	|	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)</span><br><span class="line">|	|</span><br><span class="line">|	| 为了生成bootblock，首先需要生成bootasm.o、bootmain.o、sign</span><br><span class="line">|	|</span><br><span class="line">|	|&gt;	obj&#x2F;boot&#x2F;bootasm.o, obj&#x2F;boot&#x2F;bootmain.o</span><br><span class="line">|	|	| 生成bootasm.o,bootmain.o的相关makefile代码为</span><br><span class="line">|	|	| bootfiles &#x3D; $(call listf_cc,boot) </span><br><span class="line">|	|	| $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\</span><br><span class="line">|	|	|	$(CFLAGS) -Os -nostdinc))</span><br><span class="line">|	|	| 实际代码由宏批量生成</span><br><span class="line">|	|	| </span><br><span class="line">|	|	| 生成bootasm.o需要bootasm.S</span><br><span class="line">|	|	| 实际命令为</span><br><span class="line">|	|	| gcc -Iboot&#x2F; -fno-builtin -Wall -ggdb -m32 -gstabs \</span><br><span class="line">|	|	| 	-nostdinc  -fno-stack-protector -Ilibs&#x2F; -Os -nostdinc \</span><br><span class="line">|	|	| 	-c boot&#x2F;bootasm.S -o obj&#x2F;boot&#x2F;bootasm.o</span><br><span class="line">|	|	| 其中关键的参数为</span><br><span class="line">|	|	| 	-ggdb  生成可供gdb使用的调试信息。这样才能用qemu+gdb来调试bootloader or ucore。</span><br><span class="line">|	|	|	-m32  生成适用于32位环境的代码。我们用的模拟硬件是32bit的80386，所以ucore也要是32位的软件。</span><br><span class="line">|	|	| 	-gstabs  生成stabs格式的调试信息。这样要ucore的monitor可以显示出便于开发者阅读的函数调用栈信息</span><br><span class="line">|	|	| 	-nostdinc  不使用标准库。标准库是给应用程序用的，我们是编译ucore内核，OS内核是提供服务的，所以所有的服务要自给自足。</span><br><span class="line">|	|	|	-fno-stack-protector  不生成用于检测缓冲区溢出的代码。这是for 应用程序的，我们是编译内核，ucore内核好像还用不到此功能。</span><br><span class="line">|	|	| 	-Os  为减小代码大小而进行优化。根据硬件spec，主引导扇区只有512字节，我们写的简单bootloader的最终大小不能大于510字节。</span><br><span class="line">|	|	| 	-I&lt;dir&gt;  添加搜索头文件的路径</span><br><span class="line">|	|	| </span><br><span class="line">|	|	| 生成bootmain.o需要bootmain.c</span><br><span class="line">|	|	| 实际命令为</span><br><span class="line">|	|	| gcc -Iboot&#x2F; -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \</span><br><span class="line">|	|	| 	-fno-stack-protector -Ilibs&#x2F; -Os -nostdinc \</span><br><span class="line">|	|	| 	-c boot&#x2F;bootmain.c -o obj&#x2F;boot&#x2F;bootmain.o</span><br><span class="line">|	|	| 新出现的关键参数有</span><br><span class="line">|	|	| 	-fno-builtin  除非用__builtin_前缀，</span><br><span class="line">|	|	|	              否则不进行builtin函数的优化</span><br><span class="line">|	|</span><br><span class="line">|	|&gt;	bin&#x2F;sign</span><br><span class="line">|	|	| 生成sign工具的makefile代码为</span><br><span class="line">|	|	| $(call add_files_host,tools&#x2F;sign.c,sign,sign)</span><br><span class="line">|	|	| $(call create_target_host,sign,sign)</span><br><span class="line">|	|	| </span><br><span class="line">|	|	| 实际命令为</span><br><span class="line">|	|	| gcc -Itools&#x2F; -g -Wall -O2 -c tools&#x2F;sign.c \</span><br><span class="line">|	|	| 	-o obj&#x2F;sign&#x2F;tools&#x2F;sign.o</span><br><span class="line">|	|	| gcc -g -Wall -O2 obj&#x2F;sign&#x2F;tools&#x2F;sign.o -o bin&#x2F;sign</span><br><span class="line">|	|</span><br><span class="line">|	| 首先生成bootblock.o</span><br><span class="line">|	| ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \</span><br><span class="line">|	|	obj&#x2F;boot&#x2F;bootasm.o obj&#x2F;boot&#x2F;bootmain.o -o obj&#x2F;bootblock.o</span><br><span class="line">|	| 其中关键的参数为</span><br><span class="line">|	|	-m &lt;emulation&gt;  模拟为i386上的连接器</span><br><span class="line">|	|	-nostdlib  不使用标准库</span><br><span class="line">|	|	-N  设置代码段和数据段均可读写</span><br><span class="line">|	|	-e &lt;entry&gt;  指定入口</span><br><span class="line">|	|	-Ttext  制定代码段开始位置</span><br><span class="line">|	|</span><br><span class="line">|	| 拷贝二进制代码bootblock.o到bootblock.out</span><br><span class="line">|	| objcopy -S -O binary obj&#x2F;bootblock.o obj&#x2F;bootblock.out</span><br><span class="line">|	| 其中关键的参数为</span><br><span class="line">|	|	-S  移除所有符号和重定位信息</span><br><span class="line">|	|	-O &lt;bfdname&gt;  指定输出格式</span><br><span class="line">|	|</span><br><span class="line">|	| 使用sign工具处理bootblock.out，生成bootblock</span><br><span class="line">|	| bin&#x2F;sign obj&#x2F;bootblock.out bin&#x2F;bootblock</span><br><span class="line">|</span><br><span class="line">|&gt;	bin&#x2F;kernel</span><br><span class="line">|	| 生成kernel的相关代码为</span><br><span class="line">|	| $(kernel): tools&#x2F;kernel.ld</span><br><span class="line">|	| $(kernel): $(KOBJS)</span><br><span class="line">|	| 	@echo + ld $@</span><br><span class="line">|	| 	$(V)$(LD) $(LDFLAGS) -T tools&#x2F;kernel.ld -o $@ $(KOBJS)</span><br><span class="line">|	| 	@$(OBJDUMP) -S $@ &gt; $(call asmfile,kernel)</span><br><span class="line">|	| 	@$(OBJDUMP) -t $@ | $(SED) &#39;1,&#x2F;SYMBOL TABLE&#x2F;d; s&#x2F; .* &#x2F; &#x2F;; \</span><br><span class="line">|	| 		&#x2F;^$$&#x2F;d&#39; &gt; $(call symfile,kernel)</span><br><span class="line">|	| </span><br><span class="line">|	| 为了生成kernel，首先需要 kernel.ld init.o readline.o stdio.o kdebug.o</span><br><span class="line">|	|	kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o</span><br><span class="line">|	|	trapentry.o vectors.o pmm.o  printfmt.o string.o</span><br><span class="line">|	| kernel.ld已存在</span><br><span class="line">|	|</span><br><span class="line">|	|&gt;	obj&#x2F;kern&#x2F;*&#x2F;*.o </span><br><span class="line">|	|	| 生成这些.o文件的相关makefile代码为</span><br><span class="line">|	|	| $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\</span><br><span class="line">|	|	|	$(KCFLAGS))</span><br><span class="line">|	|	| 这些.o生成方式和参数均类似，仅举init.o为例，其余不赘述</span><br><span class="line">|	|&gt;	obj&#x2F;kern&#x2F;init&#x2F;init.o</span><br><span class="line">|	|	| 编译需要init.c</span><br><span class="line">|	|	| 实际命令为</span><br><span class="line">|	|	|	gcc -Ikern&#x2F;init&#x2F; -fno-builtin -Wall -ggdb -m32 \</span><br><span class="line">|	|	|		-gstabs -nostdinc  -fno-stack-protector \</span><br><span class="line">|	|	|		-Ilibs&#x2F; -Ikern&#x2F;debug&#x2F; -Ikern&#x2F;driver&#x2F; \</span><br><span class="line">|	|	|		-Ikern&#x2F;trap&#x2F; -Ikern&#x2F;mm&#x2F; -c kern&#x2F;init&#x2F;init.c \</span><br><span class="line">|	|	|		-o obj&#x2F;kern&#x2F;init&#x2F;init.o</span><br><span class="line">|	| </span><br><span class="line">|	| 生成kernel时，makefile的几条指令中有@前缀的都不必需</span><br><span class="line">|	| 必需的命令只有</span><br><span class="line">|	| ld -m    elf_i386 -nostdlib -T tools&#x2F;kernel.ld -o bin&#x2F;kernel \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;init&#x2F;init.o obj&#x2F;kern&#x2F;libs&#x2F;readline.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;libs&#x2F;stdio.o obj&#x2F;kern&#x2F;debug&#x2F;kdebug.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;debug&#x2F;kmonitor.o obj&#x2F;kern&#x2F;debug&#x2F;panic.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;driver&#x2F;clock.o obj&#x2F;kern&#x2F;driver&#x2F;console.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;driver&#x2F;intr.o obj&#x2F;kern&#x2F;driver&#x2F;picirq.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;trap&#x2F;trap.o obj&#x2F;kern&#x2F;trap&#x2F;trapentry.o \</span><br><span class="line">|	| 	obj&#x2F;kern&#x2F;trap&#x2F;vectors.o obj&#x2F;kern&#x2F;mm&#x2F;pmm.o \</span><br><span class="line">|	| 	obj&#x2F;libs&#x2F;printfmt.o obj&#x2F;libs&#x2F;string.o</span><br><span class="line">|	| 其中新出现的关键参数为</span><br><span class="line">|	|	-T &lt;scriptfile&gt;  让连接器使用指定的脚本</span><br><span class="line">|</span><br><span class="line">| 生成一个有10000个块的文件，每个块默认512字节，用0填充</span><br><span class="line">| dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;bin&#x2F;ucore.img count&#x3D;10000</span><br><span class="line">|</span><br><span class="line">| 把bootblock中的内容写到第一个块</span><br><span class="line">| dd if&#x3D;bin&#x2F;bootblock of&#x3D;bin&#x2F;ucore.img conv&#x3D;notrunc</span><br><span class="line">|</span><br><span class="line">| 从第二个块开始写kernel中的内容</span><br><span class="line">| dd if&#x3D;bin&#x2F;kernel of&#x3D;bin&#x2F;ucore.img seek&#x3D;1 conv&#x3D;notrunc</span><br></pre></td></tr></table></figure>
<p>[练习1.2] 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?</p>
<p>从sign.c的代码来看，一个磁盘主引导扇区只有512字节。且<br>第510个（倒数第二个）字节是0x55，<br>第511个（倒数第一个）字节是0xAA。</p>
<h3 id="练习2"><a href="#练习2" class="headerlink" title="[练习2]"></a>[练习2]</h3><p>[练习2.1] 从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。</p>
<p>练习2可以单步跟踪，方法如下：</p>
<p>1 修改 lab1/tools/gdbinit,内容为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set architecture i8086</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure>
<p>2 在 lab1目录下，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make debug</span><br></pre></td></tr></table></figure>
<p>3 在看到gdb的调试界面(gdb)后，在gdb调试界面下执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">si</span><br></pre></td></tr></table></figure>
<p>即可单步跟踪BIOS了。</p>
<p>4 在gdb界面下，可通过如下命令来看BIOS的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x2F;2i $pc  &#x2F;&#x2F;显示当前eip处的汇编指令</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[进一步的补充]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">改写Makefile文件</span><br><span class="line">	debug: $(UCOREIMG)</span><br><span class="line">		$(V)$(TERMINAL) -e &quot;$(QEMU) -S -s -d in_asm -D $(BINDIR)&#x2F;q.log -parallel stdio -hda $&lt; -serial null&quot;</span><br><span class="line">		$(V)sleep 2</span><br><span class="line">		$(V)$(TERMINAL) -e &quot;gdb -q -tui -x tools&#x2F;gdbinit&quot;</span><br></pre></td></tr></table></figure>
<p>在调用qemu时增加<code>-d in_asm -D q.log</code>参数，便可以将运行的汇编指令保存在q.log中。<br>为防止qemu在gdb连接后立即开始执行，删除了<code>tools/gdbinit</code>中的<code>continue</code>行。</p>
<p>[练习2.2] 在初始化位置0x7c00 设置实地址断点,测试断点正常。</p>
<p>在tools/gdbinit结尾加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   set architecture i8086  &#x2F;&#x2F;设置当前调试的CPU是8086</span><br><span class="line">b *0x7c00  &#x2F;&#x2F;在0x7c00处设置断点。此地址是bootloader入口点地址，可看boot&#x2F;bootasm.S的start地址处</span><br><span class="line">c          &#x2F;&#x2F;continue简称，表示继续执行</span><br><span class="line">x &#x2F;2i $pc  &#x2F;&#x2F;显示当前eip处的汇编指令</span><br><span class="line">set architecture i386  &#x2F;&#x2F;设置当前调试的CPU是80386</span><br></pre></td></tr></table></figure>
<p>运行”make debug”便可得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Breakpoint 2, 0x00007c00 in ?? ()</span><br><span class="line">&#x3D;&gt; 0x7c00:      cli    </span><br><span class="line">   0x7c01:      cld    </span><br><span class="line">   0x7c02:      xor    %eax,%eax</span><br><span class="line">   0x7c04:      mov    %eax,%ds</span><br><span class="line">   0x7c06:      mov    %eax,%es</span><br><span class="line">   0x7c08:      mov    %eax,%ss </span><br><span class="line">   0x7c0a:      in     $0x64,%al</span><br><span class="line">   0x7c0c:      test   $0x2,%al</span><br><span class="line">   0x7c0e:      jne    0x7c0a</span><br><span class="line">   0x7c10:      mov    $0xd1,%al</span><br></pre></td></tr></table></figure>
<p>[练习2.3] 在调用qemu 时增加-d in_asm -D q.log 参数，便可以将运行的汇编指令保存在q.log 中。<br>将执行的汇编代码与bootasm.S 和 bootblock.asm 进行比较，看看二者是否一致。</p>
<p>在tools/gdbinit结尾加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b *0x7c00</span><br><span class="line">c</span><br><span class="line">x &#x2F;10i $pc</span><br></pre></td></tr></table></figure>
<p>便可以在q.log中读到”call bootmain”前执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c00:  cli    </span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c01:  cld    </span><br><span class="line">0x00007c02:  xor    %ax,%ax</span><br><span class="line">0x00007c04:  mov    %ax,%ds</span><br><span class="line">0x00007c06:  mov    %ax,%es</span><br><span class="line">0x00007c08:  mov    %ax,%ss</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c0a:  in     $0x64,%al</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c0c:  test   $0x2,%al</span><br><span class="line">0x00007c0e:  jne    0x7c0a</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c10:  mov    $0xd1,%al</span><br><span class="line">0x00007c12:  out    %al,$0x64</span><br><span class="line">0x00007c14:  in     $0x64,%al</span><br><span class="line">0x00007c16:  test   $0x2,%al</span><br><span class="line">0x00007c18:  jne    0x7c14</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c1a:  mov    $0xdf,%al</span><br><span class="line">0x00007c1c:  out    %al,$0x60</span><br><span class="line">0x00007c1e:  lgdtw  0x7c6c</span><br><span class="line">0x00007c23:  mov    %cr0,%eax</span><br><span class="line">0x00007c26:  or     $0x1,%eax</span><br><span class="line">0x00007c2a:  mov    %eax,%cr0</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c2d:  ljmp   $0x8,$0x7c32</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c32:  mov    $0x10,%ax</span><br><span class="line">0x00007c36:  mov    %eax,%ds</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c38:  mov    %eax,%es</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c3a:  mov    %eax,%fs</span><br><span class="line">0x00007c3c:  mov    %eax,%gs</span><br><span class="line">0x00007c3e:  mov    %eax,%ss</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c40:  mov    $0x0,%ebp</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c45:  mov    $0x7c00,%esp</span><br><span class="line">0x00007c4a:  call   0x7d0d</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007d0d:  push   %ebp</span><br></pre></td></tr></table></figure>
<p>其与bootasm.S和bootblock.asm中的代码相同。</p>
<h3 id="练习3"><a href="#练习3" class="headerlink" title="[练习3]"></a>[练习3]</h3><p>分析bootloader 进入保护模式的过程。</p>
<p>从<code>%cs=0 $pc=0x7c00</code>，进入后</p>
<p>首先清理环境：包括将flag置0和将段寄存器置0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.code16</span><br><span class="line">    cli</span><br><span class="line">    cld</span><br><span class="line">    xorw %ax, %ax</span><br><span class="line">    movw %ax, %ds</span><br><span class="line">    movw %ax, %es</span><br><span class="line">    movw %ax, %ss</span><br></pre></td></tr></table></figure>
<p>开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，<br>可以访问4G的内存空间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seta20.1:               ## 等待8042键盘控制器不忙</span><br><span class="line">    inb $0x64, %al      ## </span><br><span class="line">    testb $0x2, %al     #</span><br><span class="line">    jnz seta20.1        #</span><br><span class="line"></span><br><span class="line">    movb $0xd1, %al     ## 发送写8042输出端口的指令</span><br><span class="line">    outb %al, $0x64     #</span><br><span class="line"></span><br><span class="line">seta20.1:               ## 等待8042键盘控制器不忙</span><br><span class="line">    inb $0x64, %al      ## </span><br><span class="line">    testb $0x2, %al     #</span><br><span class="line">    jnz seta20.1        #</span><br><span class="line"></span><br><span class="line">    movb $0xdf, %al     ## 打开A20</span><br><span class="line">    outb %al, $0x60     ##</span><br></pre></td></tr></table></figure>
<p>初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lgdt gdtdesc</span><br></pre></td></tr></table></figure>
<p>进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movl %cr0, %eax</span><br><span class="line">orl $CR0_PE_ON, %eax</span><br><span class="line">movl %eax, %cr0</span><br></pre></td></tr></table></figure>
<p>通过长跳转更新cs的基地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ljmp $PROT_MODE_CSEG, $protcseg</span><br><span class="line">.code32</span><br><span class="line">protcseg:</span><br></pre></td></tr></table></figure>
<p>设置段寄存器，并建立堆栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movw $PROT_MODE_DSEG, %ax</span><br><span class="line">movw %ax, %ds</span><br><span class="line">movw %ax, %es</span><br><span class="line">movw %ax, %fs</span><br><span class="line">movw %ax, %gs</span><br><span class="line">movw %ax, %ss</span><br><span class="line">movl $0x0, %ebp</span><br><span class="line">movl $start, %esp</span><br></pre></td></tr></table></figure>
<p>转到保护模式完成，进入boot主方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call bootmain</span><br></pre></td></tr></table></figure>
<h3 id="练习4"><a href="#练习4" class="headerlink" title="[练习4]"></a>[练习4]</h3><p>分析bootloader加载ELF格式的OS的过程。</p>
<p>首先看readsect函数，<br><code>readsect</code>从设备的第secno扇区读取数据到dst位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">readsect(void *dst, uint32_t secno) &#123;</span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    outb(0x1F2, 1);                         &#x2F;&#x2F; 设置读取扇区的数目为1</span><br><span class="line">    outb(0x1F3, secno &amp; 0xFF);</span><br><span class="line">    outb(0x1F4, (secno &gt;&gt; 8) &amp; 0xFF);</span><br><span class="line">    outb(0x1F5, (secno &gt;&gt; 16) &amp; 0xFF);</span><br><span class="line">    outb(0x1F6, ((secno &gt;&gt; 24) &amp; 0xF) | 0xE0);</span><br><span class="line">        &#x2F;&#x2F; 上面四条指令联合制定了扇区号</span><br><span class="line">        &#x2F;&#x2F; 在这4个字节线联合构成的32位参数中</span><br><span class="line">        &#x2F;&#x2F;   29-31位强制设为1</span><br><span class="line">        &#x2F;&#x2F;   28位(&#x3D;0)表示访问&quot;Disk 0&quot;</span><br><span class="line">        &#x2F;&#x2F;   0-27位是28位的偏移量</span><br><span class="line">    outb(0x1F7, 0x20);                      &#x2F;&#x2F; 0x20命令，读取扇区</span><br><span class="line"></span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    insl(0x1F0, dst, SECTSIZE &#x2F; 4);         &#x2F;&#x2F; 读取到dst位置，</span><br><span class="line">                                            &#x2F;&#x2F; 幻数4因为这里以DW为单位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>readseg简单包装了readsect，可以从设备读取任意长度的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">readseg(uintptr_t va, uint32_t count, uint32_t offset) &#123;</span><br><span class="line">    uintptr_t end_va &#x3D; va + count;</span><br><span class="line"></span><br><span class="line">    va -&#x3D; offset % SECTSIZE;</span><br><span class="line"></span><br><span class="line">    uint32_t secno &#x3D; (offset &#x2F; SECTSIZE) + 1; </span><br><span class="line">    &#x2F;&#x2F; 加1因为0扇区被引导占用</span><br><span class="line">    &#x2F;&#x2F; ELF文件从1扇区开始</span><br><span class="line"></span><br><span class="line">    for (; va &lt; end_va; va +&#x3D; SECTSIZE, secno ++) &#123;</span><br><span class="line">        readsect((void *)va, secno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在bootmain函数中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void</span><br><span class="line">bootmain(void) &#123;</span><br><span class="line">    &#x2F;&#x2F; 首先读取ELF的头部</span><br><span class="line">    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 通过储存在头部的幻数判断是否是合法的ELF文件</span><br><span class="line">    if (ELFHDR-&gt;e_magic !&#x3D; ELF_MAGIC) &#123;</span><br><span class="line">        goto bad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct proghdr *ph, *eph;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ELF头部有描述ELF文件应加载到内存什么位置的描述表，</span><br><span class="line">    &#x2F;&#x2F; 先将描述表的头地址存在ph</span><br><span class="line">    ph &#x3D; (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class="line">    eph &#x3D; ph + ELFHDR-&gt;e_phnum;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 按照描述表将ELF文件中数据载入内存</span><br><span class="line">    for (; ph &lt; eph; ph ++) &#123;</span><br><span class="line">        readseg(ph-&gt;p_va &amp; 0xFFFFFF, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000</span><br><span class="line">    &#x2F;&#x2F; ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据ELF头部储存的入口信息，找到内核的入口</span><br><span class="line">    ((void (*)(void))(ELFHDR-&gt;e_entry &amp; 0xFFFFFF))();</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line">    outw(0x8A00, 0x8A00);</span><br><span class="line">    outw(0x8A00, 0x8E00);</span><br><span class="line">    while (1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习5"><a href="#练习5" class="headerlink" title="[练习5]"></a>[练习5]</h3><p>实现函数调用堆栈跟踪函数 </p>
<p>ss:ebp指向的堆栈位置储存着caller的ebp，以此为线索可以得到所有使用堆栈的函数ebp。<br>ss:ebp+4指向caller调用时的eip，ss:ebp+8等是（可能的）参数。</p>
<p>输出中，堆栈最深一层为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ebp:0x00007bf8 eip:0x00007d68 \</span><br><span class="line">	args:0x00000000 0x00000000 0x00000000 0x00007c4f</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d67 --</span><br></pre></td></tr></table></figure>
<p>其对应的是第一个使用堆栈的函数，bootmain.c中的bootmain。<br>bootloader设置的堆栈从0x7c00开始，使用”call bootmain”转入bootmain函数。<br>call指令压栈，所以bootmain中ebp为0x7bf8。</p>
<h3 id="练习6"><a href="#练习6" class="headerlink" title="[练习6]"></a>[练习6]</h3><p>完善中断初始化和处理</p>
<p>[练习6.1] 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？</p>
<p>中断向量表一个表项占用8字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，<br>两者联合便是中断处理程序的入口地址。</p>
<p>[练习6.2] 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。</p>
<p>见代码</p>
<p>[练习6.3] 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数</p>
<p>见代码</p>
<h3 id="练习7"><a href="#练习7" class="headerlink" title="[练习7]"></a>[练习7]</h3><p>增加syscall功能，即增加一用户态函数（可执行一特定系统调用：获得时钟计数值），<br>当内核初始完毕后，可从内核态返回到用户态的函数，而用户态的函数又通过系统调用得到内核态的服务</p>
<p>在idt_init中，将用户态调用SWITCH_TOK中断的权限打开。<br>    SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3);</p>
<p>在trap_dispatch中，将iret时会从堆栈弹出的段寄存器进行修改<br>    对TO User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf-&gt;tf_cs &#x3D; USER_CS;</span><br><span class="line">tf-&gt;tf_ds &#x3D; USER_DS;</span><br><span class="line">tf-&gt;tf_es &#x3D; USER_DS;</span><br><span class="line">tf-&gt;tf_ss &#x3D; USER_DS;</span><br></pre></td></tr></table></figure>
<pre><code>对TO Kernel
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf-&gt;tf_cs &#x3D; KERNEL_CS;</span><br><span class="line">tf-&gt;tf_ds &#x3D; KERNEL_DS;</span><br><span class="line">tf-&gt;tf_es &#x3D; KERNEL_DS;</span><br></pre></td></tr></table></figure>
<p>在lab1_switch_to_user中，调用T_SWITCH_TOU中断。<br>注意从中断返回时，会多pop两位，并用这两位的值更新ss,sp，损坏堆栈。<br>所以要先把栈压两位，并在从中断返回后修复esp。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asm volatile (</span><br><span class="line">    &quot;sub $0x8, %%esp \n&quot;</span><br><span class="line">    &quot;int %0 \n&quot;</span><br><span class="line">    &quot;movl %%ebp, %%esp&quot;</span><br><span class="line">    : </span><br><span class="line">    : &quot;i&quot;(T_SWITCH_TOU)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在lab1_switch_to_kernel中，调用T_SWITCH_TOK中断。<br>注意从中断返回时，esp仍在TSS指示的堆栈中。所以要在从中断返回后修复esp。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asm volatile (</span><br><span class="line">    &quot;int %0 \n&quot;</span><br><span class="line">    &quot;movl %%ebp, %%esp \n&quot;</span><br><span class="line">    : </span><br><span class="line">    : &quot;i&quot;(T_SWITCH_TOK)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>但这样不能正常输出文本。根据提示，在trap_dispatch中转User态时，将调用io所需权限降低。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf-&gt;tf_eflags |&#x3D; 0x3000;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
  </entry>
  <entry>
    <title>《微软亚洲研究院大数据系列讲座》笔记</title>
    <url>/%E3%80%8A%E5%BE%AE%E8%BD%AF%E4%BA%9A%E6%B4%B2%E7%A0%94%E7%A9%B6%E9%99%A2%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E5%88%97%E8%AE%B2%E5%BA%A7%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>这是关于《<a href="https://www.msra.cn/zh-cn/connections/academic-programs/big-data-lecture" target="_blank" rel="noopener external nofollow noreferrer">微软亚洲研究院大数据系列讲座</a>》的笔记。<a id="more"></a>（<a href="./微软亚洲研究院大数据系列讲座.pdf">PDF</a>）</p>
<blockquote>
<p>不是很详细，仅供参考。</p>
</blockquote>
<h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><p>一、大数据研究现状、趋势（An Introdution of Big Data）</p>
<p>1.What is Big Data?</p>
<p>Hot topic.</p>
<p>大量、高速、多元化的信息。High-volume, high-velocity, high-variety information assets.</p>
<p>关注发现、分析、洞见和决策制定。</p>

<p>What is 创新 innovation？超前，ahead of shedule。这是一个充满竞争的世界。</p>
<p> 大数据可以创造Value。Wide interests。China’s GDP.</p>
<p>Big Data is a growth OPPORTUNITY.</p>
<p>Airline Industry.</p>
<p>航空燃油价格的波动影响航空业。</p>
<p>人人希望买到更便宜的机票。</p>
<p>————动态定价【航空公司策略】</p>
<p>其关键在于收益管理。</p>
<p>大数据分析。（例如天气条件：风暴、台风、下雪，做更好的天气预报，预测天气并调整航班；燃油价格对冲，利用分析预测提前储备石油【期货、期权】，各种因素的考虑（以色列、中东小规模战争，ISIS极端组织）。）航空公司维持生存的重要保证。</p>

<p> Data as a Platform。(组合 + 精炼)</p>
<p>2.Why Big Data is a Nature Phenomenon?</p>
<p>我们正在计算机与互联网的时代。</p>
<p><em>*</em>数据采集成本——&gt;$0</p>
<p>大数据再自然不过</p>
<p>——万物数据化。英语语法1700页。考虑语言实际就是考虑数据，语言领域是最早使用大数据的。</p>
<p><em>*</em>数据存储成本——&gt;$0</p>
<p>一个人一生所见 &lt; 1TB。</p>
<p><em>*</em>组合数据</p>
<p>Main: Volume <em> Variety </em> Velocity <em> Value </em> Veracity[真实性]</p>
<p>​                     （非结构化）                          （可信度）</p>
<p>Other V’s: Variability <em> Volatility </em> Visibility</p>
<p>​                                （及时更新）</p>
<p>数据安全？</p>
<p>————伽利略、牛顿+++++实证观察</p>
<p>The Scientific Method：『Data-Intensive Scientific Discovery』</p>
<p>·empirricalscience</p>
<p>·theoretical science（using models &amp; generalization）</p>
<p>·computational science（for simulation）</p>
<p>·eScience</p>
<p>互联网开放的数据：更容易产生实证科学。</p>
<p><strong><em>典型的数据分析生命周期</em></strong></p>
<p>Question ——&gt; Collection ——&gt; Logical Model ——&gt; Physical Model ——&gt; Load Data ——&gt; Tune ——&gt; Answer</p>
<p>大数据允许更多的预测、决策，和以前的商业分析很不同。</p>
<p>data——信息工厂。（自动控制的闭合反馈回路，以非常快的速度循环）</p>
<p>————————————————————————————————————————————</p>
<p>二、互联网搜索Web Search</p>
<p>1.大规模互联网搜索详细设计</p>
<p>如何利用搜索引擎和大数据来挖掘有用的知识。</p>
<p><strong><em>Search is Everywhere</em></strong></p>
<p>Find Something….</p>
<p>网上有大量的信息，搜索、挖掘。</p>
<p><em>*</em>逻辑架构</p>
<p>建立索引，搜索。Google：使用Anchor text来描述目标文件，利用链接来PageRank。</p>
<ol>
<li>存储海量的数据（页面本身和其相关信息）crawling the web</li>
<li>建立索引，排序（主要的数据结构）indexing the web，sorting</li>
<li>收到查询请求，进行搜索 searching</li>
<li>链接分析，计算文件重要性</li>
</ol>
<p>大量的查询服务器，储存大量的历史搜索，实际每秒每台服务器只需要承担20+左右的搜索请求。</p>
<p>2.微软在计算查询的维度方面的研究工作</p>
<p>QDMiner：对于一个搜索请求，返回一个或多个搜索维度【有意义的维度】。</p>
<p>**为什么研究多维度查询 Query Dimensions？</p>
<p>找到最适合的匹配——&gt;计算机自动完成的任务</p>
<p>对一个搜索结果：对不同的属性含义分别搜索，提供了更全面的信息。</p>
<p>对列表加权——某些列表可能并不是特别有用。</p>
<p>对条目排序ItemsRank.</p>
<p><em>*</em>Evaluation. Experimental Results.</p>
<p>————————————————————————————————————————————</p>
<p>三、社会计算</p>
<p>1.背景</p>
<p>用户数据。</p>
<p>马克提出，普适计算是计算的未来。</p>
<p>·计算机的目的是帮助</p>
<p>·最好的计算机提供安静、无形的服务</p>
<p>·一个人能够凭直觉做的事越多，就越聪明；计算机能开发人的潜意识</p>
<p>·计算机应该营造出平静的环境</p>
<p>Device：cm，dm，mm。Sensor。</p>
<p>2.用户</p>
<p>·移动规律</p>
<p>乘车信息——构建Framework（资金+时间+地理）——恢复缺失的信息，理解用户的移动规律。</p>
<p>公交卡刷卡数据的特征：序列、时空、异构。</p>
<p>**乘车信息的随机性——构造约束——算法的性能明显提升。</p>
<p>推荐问题的算法：基于用户的协同过滤、加权矩阵分解、隐马尔可夫模型……</p>
<p>GeoMF模型…用户的移动地点往往集中在相近的工作、休闲地点。建立一些相关性数据（矩阵形式），来标记这些地址，并且区分正偏好（故意去）、负偏好（故意不去）的属性。通过矩阵运算来求得用户的偏好矩阵。用迭代法来更新用户偏好以获得最佳表征。</p>
<p>·用户画像与个人隐私Profiling and Privacy</p>
<p>社交网络用户匹配信息——用户名，用户社交图，用户发布的微博，用户分享的图像、位置历史、足迹……</p>
<p>进一步研究用户的移动规律模式，分地区，可以提高位置预测的准确性。</p>
<p>Self-Disclosure：从多个社交网络捕获用户的公开信息。分析社交联系等。</p>
<p>用树结构来表示一个群体的生活方式，将群生活数据信息Visible。</p>
<p>**用户连接和图隐私</p>
<p>身份泄露，攻击（主动、被动），简单图、丰富图（含有交互信息）。</p>
<p>———轻量级匿名算法</p>
<p>>&gt;矩阵的特征值越高，社交网络中越活跃，则越容易被识别（隐私泄露）。</p>
<p>## 简单匿名算法：仅仅打乱节点编号，不改变结构</p>
<p>## 图数据的K匿名算法：保证每个节点具有k-1个同度的节点，根据当前状态随机地增加、删除边</p>
<p>————————————————————————————————————————————</p>
<p>四、城市计算</p>
<p>1.Introduction</p>
<p><em>*</em>快速的城市化——&gt;现代化——&gt;挑战。</p>
<p>城市传感、城市数据管理和城市数据分析。</p>
<p>——solve 交通、能源、空气污染……</p>
<p>Points、Lines、Graphs。</p>
<p>*静态——&gt;动态。（空气质量站 = 时间动态but空间静态）</p>
<p>2.概念、框架</p>
<p>城市传感、城市数据管理和城市数据分析——服务系统——促进城市进化。</p>
<p>从多个数据源中得到想要的改进指导？——面临的挑战。</p>
<p>城市空气检测 【细粒度】+风流+交通+…… = 提供更准确的空气质量预测。</p>
<p>城市传感：稀疏性（数据缺失）、有偏分布（样本不能很好地反映整体状态）以及有限的来源。</p>
<p>数据收集策略：静态感知（如何放置监测地点），动态激励。</p>
<p>城市数据管理：多模态数据（形式、密度、单位……），频繁的数据更新（频率、数据量）。</p>
<p>识别不同数据集间的关联？跨领域的识别模式——可能潜藏巨大的价值。涉及到并发、多属性组合、类别交叉（数据集属性的聚合）等方面的挑战。（甚至交融不同学科之间的技术）</p>
<p>什么是一个城市空气污染的根本原因？——当前服务状态的提供 + 历史数据的分析——&gt;未来的预测。</p>
<p>3.基础技术</p>
<p>传感网络、移动传感。</p>
<p>最近——群体感知技术：被动感知（参与的人们无意识地产生数据，如地铁的进出记录），参与式感知（人们主动提供数据，如手机的GPS的信息）。</p>
<p>·数据分析层（需要基础的数据挖掘与机器学习知识）</p>
<p>基础：回归、频繁模式挖掘、序列模式挖掘、分类概率图模型、矩阵分解、张量分解……</p>
<p>高级技术：跨域数据融合（基于阶段，基于特征【深度神经网络】，基于视角、概率模型、相似度、转移）……</p>
<p>优化技术：线性规划、L-1最小化、L-2最小化……</p>
<p>可视化技术、可视化数据分析技术……</p>
<p>4.城市规划</p>
<p>数据自动识别——&gt;有问题的道路数据——&gt;城市道路改建。</p>
<p>·以主干道、支路等对城市道路网进行划分，相邻区域具有相似性。</p>
<p>·以一天的时间区段划分车辆的行驶数据。</p>
<p>Skyline的图模型——连接重组邻近的图——将多天的Skyline图联合——探索规律出现的problem。</p>
<p>**对城市的道路系统可以做出评价，并找出其后的原因。</p>
<p>5.识别特定区域（城市中的功能区域）</p>
<p>教育区域、商业区域……</p>
<p>数据：一部分为人的移动性数据，一部分为兴趣点的数据。</p>
<p>6.城市空气质量与大数据研究</p>
<p>城市的各个地区的空气质量差异很大，用监测站的方式采集数据是很难的。因此需要很多的相关数据增加细粒量。还可以利用一个自学习的模型提高效率来消除数据的稀疏性（一个城市可能只有20到30个监测站）。使用分类器，建立一个神经网络来得出想要的结果。</p>
<p>7.能源交通与环境污染</p>
<p>城市层次上的推断——车辆的油耗。</p>
<p>·首先基于一个汽车样本产生的GPS轨迹估计每个路段上的行驶速度（耦合矩阵分解方法）</p>
<p>·其次基于行驶速度、兴趣点数据、路网数据和天气条件来推断每条道路上的汽车流量（贝叶斯网络）</p>
<p>·最后借用传统的环境理论来计算每辆车的汽油消耗和各种污染物的污染排放（需要一些统计数据）</p>
<p>8.诊断城市中的噪声</p>
<p>交通噪声、嘈杂的音乐噪声、建筑噪声……</p>
<p>噪声不仅取决于物理性质，也取决于人的忍受度。只用传感器无法分析城市噪声。</p>
<p>——群体感知。收集不同人的数据。签到、投诉……多个数据集，填补缺失值。</p>
<p>————————————————————————————————————————————</p>
<p>五、软件分析</p>
<p>1.概念</p>
<p>软件逐渐变成一项工程，如eclipse、windows（收集用户使用信息）等，更新速度很快。</p>
<p>Data Source：Operation, User, Product.</p>
<p>软件的生命周期中存在大量的数据分析，收集工程本身和用户的信息，帮助改善软件工程。</p>
<p>数据的可视化。&amp; HELPING Target audience: software practitioners.</p>
<p>2.实例</p>
<p>·代码分析</p>
<p>编写代码常常不是一件容易的时期，经常会遇到不熟悉的问题或API。</p>
<p>开源项目网站存储了大量的可重用的代码。CodeHow支持从这些网站中找寻需要的代码。支持关键字查询或自然语言查询（考察文件的相似度，包括文本和API查询，使用扩展的布尔模型）。</p>
<p>CodeHow还能智能分切复杂的原始代码，将简单、关键的代码部分返回给查询者。</p>
<p>CodeHow集中在GitHub中，作为开发人员的辅助工具。</p>
<p>·崩溃报告分桶</p>
<p>尽管开发人员可能用大量的时间来提高软件质量，发布的软件中仍存在着大量的缺陷。软件崩溃是一种常见的致命的程序崩溃。</p>
<p>WER（Windows Error Reporting）系统就是收集这些崩溃信息的程序，当用户允许时，WER会将这些报告提交到WER服务器，WER服务器检查重复的崩溃报告并把它们分成桶，计算每个桶中的崩溃报告的数量。当这个数量足够多时，就会生成一个缺陷报告并发送给开发人员以方便调试。通常，每天可以收到几百万个崩溃报告。</p>
<p>为了提高分桶时的精确程度，提出了重新分桶的策略（using PDM）。</p>
<p>·克隆分析器（检测重复代码）……</p>
<p>————————————————————————————————————————————</p>
<p>六、大数据可视化</p>
<p>1.传统的数据可视化</p>
<p>What is information Visualization？</p>
<p>将数据从让人迷惑的语言形式，转变为可视化、易解读的语言形式。</p>
<p>*Innate Human Capacity几乎没有进步，而数据的发展却十分迅猛。</p>
<p>**数据的可视化使数据间的关联更加容易被观察到。</p>
<p>·InfoVis1.0（Bronze Age 青铜时代）——Hand-made drawing(infographcis)</p>
<p>·InfoVis2.0（Silver Age  白银时代）——Information display</p>
<p>·InfoVis3.0（Golden Age 黄金时代）——Visual analytics</p>
<p><em>*</em>Graph Visualization：Node-link diagram, Matrix, Hybrid.</p>
<p>2.同质数据的可视化</p>
<p>&amp;&amp;Key Challenges：</p>
<p>·Summarize text corpora（大量的复杂信息、时间复杂度……）</p>
<p>·Visually explain summarization results（有关联的可视化……）</p>
<p>·Provide Feedback or articulate their needs（不完美的数据挖掘结果，或者不同的使用者需求……）</p>
<p>——Example：TIARA</p>

<p>Text Summarization：ＬＤＡ[High portability, high compaction rate for scalebility, a finer grained model]</p>
<p>——Example：Healthcare</p>
<p>结构化、非结构化数据，重点研究非结构化数据，如受伤状况、旅行意愿……</p>
<p>Layout Algorithm——three-level directed acyclic graph( DAG )。</p>
<p>3.异质数据的可视化分析</p>

<p>Meta-node, meta-edge to meta-graph.（图式数据集之间的点、边结合）</p>
<p>Visualization：</p>
<p>·Graph matching as density-based graph visuazation</p>
<p>·Topic hierarchy as stacked tree</p>
<p>·Coupling grahp visualization with stacked tree</p>
<p>·机遇和挑战（如何获得更好的可视化效果，如何帮助使用者剖析大数据……）</p>
<p>Big data Visualization is very popular nowadays.</p>
<p>Obama’s big data plans:”……using novel statistical, graphical, and visualization techniques to study complex data.”</p>
<p><em>*</em>Challenges:</p>
<p>·Big data availability</p>
<p>·Data quality is not high</p>
<p>·Collaboration with domain</p>
<p>·Multiple skills</p>
<p>·Different evaluation systems</p>
<p>·Scalability is (still) a big problem</p>
<hr>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>《大学计算机——计算思维的视角》笔记</title>
    <url>/%E3%80%8A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%80%9D%E7%BB%B4%E7%9A%84%E8%A7%86%E8%A7%92%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>这是关于《<a href="https://www.xuetangx.com/courses/SDUx/131000110/2015_T1/about" target="_blank" rel="noopener external nofollow noreferrer">大学计算机——计算思维的视角</a>》的笔记。<a id="more"></a>（<a href="https://vel.life/blog/《大学计算机——计算思维的视角》笔记/大学计算机——计算思维的视角.pdf" target="_blank" rel="noopener external nofollow noreferrer">PDF</a>）</p>
<p>以下内容仅为<strong>预览</strong>：</p>
<blockquote>
<p>下面的内容从onenote版转换而来。要看还是看<a href="./大学计算机——计算思维的视角.pdf">PDF</a>吧。</p>
</blockquote>
<hr>
<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h2 id="1-信息社会与信息素养"><a href="#1-信息社会与信息素养" class="headerlink" title="1.信息社会与信息素养"></a>1.信息社会与信息素养</h2><div class="table-container">
<table>
<thead>
<tr>
<th>人类社会发展回顾</th>
<th>农业社会——工业社会（蒸汽时代、电气时代）——信息社会（计算机时代）</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>农业社会：体力劳动、手工业。</p>
<p>工业社会：蒸汽动力——电力——生产关系的改变。</p>
<p>后工业社会：信息技术的快速发展。</p>
<p>信息社会：信息的全面流通，从根本上进行了革新。“信息化”。“知识社会”，应用创新增加。</p>
<p>特征：显现出不同的年代特征。从经济领域，信息、知识成为重要的生产力要素，智能化设备大量应用。</p>
<p>个人的能力素质：行为习惯、思维方式的内在特质。（价值观、品质、特征）</p>
<p>信息素养：</p>
<ul>
<li><p>信息意识（信息敏感度）</p>
</li>
<li><p>信息知识（获取与利用）</p>
</li>
<li><p>信息能力（解决与创造）</p>
</li>
<li><p>信息道德（现实与伦理）</p>
</li>
</ul>
<h2 id="2-人类思维与逻辑学"><a href="#2-人类思维与逻辑学" class="headerlink" title="2.人类思维与逻辑学"></a>2.人类思维与逻辑学</h2><p>大学教育：</p>
<p>不局限与知识培养。（哈佛大学学生培养8项标准，通识教育）</p>
<p>培养终身的思维方式。（哈弗文理学院，批判的态度接受知识，认知、使用、理解）</p>
<p>人类思维：（与生俱来）</p>
<p>感觉器官（直接），大脑（记忆、思维）。其中思维是事物的概括和间接反映。</p>
<p>特性：概括性、间接性、逻辑性（思维规则）。</p>
<p>分类：形象思维（文学艺术）、逻辑思维（理论抽象）、灵感和顿悟。</p>
<p>逻辑思维与逻辑学：</p>
<p>遵循一定的思维规律。</p>
<p>逻辑学：一门探索、阐述和确立有效推理规则的学问，是关于思维形式及其规律的学说。</p>
<ul>
<li><p>概念（抽象概括，词、词组，思维的基本单位）主词、谓词</p>
</li>
<li><p>判断（概念之间的联系，语句）量词</p>
</li>
<li><p>推理（一定的思维规则，归纳、演绎）</p>
</li>
</ul>
<p>逻辑推理的形式：</p>
<ul>
<li><p>三段论（又称直言三段论，大前提、小前提、结论，演绎逻辑）</p>
</li>
<li><p>假言推理（充分、必要、充要条件形式，if前件、then后件）</p>
</li>
<li><p>选言推理（相容选言推理，p或者q）</p>
</li>
</ul>
<p>逻辑思维规律：同一律、矛盾律、排中律。</p>
<p>数理逻辑：</p>
<p>莱布尼茨将思维符号化，称为数理逻辑。（2进制发明者）</p>
<p>布尔建立布尔代数，创立一套符号系统。</p>
<p>弗雷格引入量词（全称、特称、单称）。</p>
<h2 id="3-计算思维"><a href="#3-计算思维" class="headerlink" title="3.计算思维"></a>3.计算思维</h2><ul>
<li><p>科学研究与科学思维</p>
</li>
<li><p>理论思维——理论科学（推理）推理和演绎，如数学</p>
</li>
<li><p>实验思维——实验科学（实证）观察和总结，如物理学</p>
</li>
<li><p>计算思维（普适性）</p>
</li>
</ul>
<p>工具影响和改变人类的思维。有意和无意与计算机的联系。</p>
<p>运用计算机科学的基础概念进行问题求解、系统设计、以及人类行为理解等涵盖计算机科学之广度的一系列思维活动。计算思维最根本的内容（本质），是抽象和自动化。</p>
<p>计算学科已经成为各学科求解问题的基本思想、方法和手段。</p>
<p>个人观点：借助计算机进行问题求解的思维意识，对计算、算法、数据及其组织、程序、自动化等核心的计算机科学概念的潜意识运用。</p>
<p>思维是一种潜移默化，是一种下意思、不自觉的行为。（大数据正是基于思维信息的收集）</p>
<p>问题——数学模型——数据结构、求解算法——程序——问题的解。</p>
<h2 id="4-计算与计算科学"><a href="#4-计算与计算科学" class="headerlink" title="4.计算与计算科学"></a>4.计算与计算科学</h2><p>计算——数学（数与形的科学）【自然科学中的哲学，思维的训练】。</p>
<p>算数——工程数学——数值分析——计算科学。</p>
<p>数学的分类：纯粹数学、应用数学、计算技术（计算数学和计算机）。</p>
<p>二进制 + 数理逻辑 + 电路 = 最初的电子计算机。</p>

<h2 id="5-学科交叉与融合"><a href="#5-学科交叉与融合" class="headerlink" title="5.学科交叉与融合"></a>5.学科交叉与融合</h2><ul>
<li>计算机与计算数学</li>
</ul>
<p>数学学科：纯粹数学、应用数学、计算技术（计算数学和计算机）。</p>
<p>计算机：搭起了数学与应用之间的桥梁。利用计算机的高速、高精度运算能力和自动化特性来寻找答案。</p>
<p>数学应用：传统的数学难题，四色定理、寻找最大的梅森素数、密码学研究……还有数学计算程序（MATLAB、Maple、Mathematic等）。</p>
<ul>
<li>计算物理</li>
</ul>
<p>计算物理学。</p>
<p>计算机模拟仿真。</p>
<ul>
<li>计算化学</li>
</ul>
<p>1998年，2013年诺贝尔化学奖，均颁布给了计算化学领域。</p>
<ul>
<li>计算机与生物学、医学</li>
</ul>
<p>计算生物学、生物信息学、生物医学。</p>
<p>计算机应用：霰弹枪算法（Shotgun Algorithm）提高人类基因组测序速度。DNA计算机。</p>
<ul>
<li>社会计算</li>
</ul>
<p>社会系统是一个比自然系统更加复杂的系统。抽象、建模。</p>
<ul>
<li>信息社会的应用创新</li>
</ul>
<p>理论创新被应用创新所替代。人人皆可创新。</p>
<p>————————————————————————————————————————————</p>
<h1 id="二、计算与计算机"><a href="#二、计算与计算机" class="headerlink" title="二、计算与计算机"></a>二、计算与计算机</h1><h2 id="1-数、计算与计算工具"><a href="#1-数、计算与计算工具" class="headerlink" title="1.数、计算与计算工具"></a>1.数、计算与计算工具</h2><div class="table-container">
<table>
<thead>
<tr>
<th>数的起源</th>
<th>语言的产生——“记数”、“计算”。</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算工具</td>
<td>算筹、算盘、纳皮尔筹、计算尺、机械式计算机、电子计算机。</td>
</tr>
</tbody>
</table>
</div>

<h2 id="2-计算机的产生和发展"><a href="#2-计算机的产生和发展" class="headerlink" title="2.计算机的产生和发展"></a>2.计算机的产生和发展</h2><p>—计算的自动化—</p>
<p>1642年，法国人Pascal发明加法器，历史上的第一步。（Pascal语言的命名就是纪念他）</p>
<p>巴贝奇与“差分机”</p>
<ul>
<li><p>研究动因：18世纪末，人工“数学计算用表”，大规模工程。</p>
</li>
<li><p>1822年完成第一台差分机。差分，就是把函数表的复杂算式转化为差分运算，用简单的加法代替平方运算。</p>
</li>
<li><p>灵感来源于织布机。</p>
</li>
</ul>
<p>———分析机：通用数学计算机【当时制造水平、工艺使得精度达不到要求，最终宣告失败】</p>
<p>制表机：现代计算机的雏形</p>
<p>根据织布机的原理，利用穿孔卡片输入、输出。在1890年的美国人口普查中得到应用。</p>
<p>———IBM前身。</p>
<p>—计算机产生前夜—</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>机电式计算机</th>
<th>Mark-1，by 艾肯【采用机电方法而非机械】</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>—计算机产生的理论基础—</p>
<ul>
<li>二进制『莱布尼茨发明』</li>
</ul>
<p>算法规则简单，便于数据存储和实现。</p>
<ul>
<li>数理逻辑</li>
</ul>
<p>莱布尼茨设计了一种演算推论器。</p>
<ul>
<li><p>布尔代数</p>
</li>
<li><p>计算模型</p>
</li>
<li><p>图灵机</p>
</li>
</ul>
<p>—电子计算机产生的诞生—</p>
<p>ENIAC——UNIVAC【标志计算机时代】——-巨人——ABC</p>
<p>—计算机的发展—</p>
<ul>
<li>分为4代。</li>
</ul>
<p>电子管（真空管）——晶体管（半导体）——集成电路——(超)大规模集成电路（微处理器）。</p>
<p>集成电路的发展规模+++，受到限制。（摩尔定律受到时代局限）</p>
<p>新型计算机的研制。</p>
<h2 id="3-数的表示和字符编码"><a href="#3-数的表示和字符编码" class="headerlink" title="3.数的表示和字符编码"></a>3.数的表示和字符编码</h2><p>—数的进制—</p>
<p>非进位数值、进位数值（值与位置相关）。</p>
<p>2、8、10、16进制。（8、16进制通常可以简化2进制书写）</p>
<p>—数的表示—</p>
<ul>
<li>机器数：数在计算机内部的表示。最高位为符号位，其表值称真值，这样形式称为数的原码表示。</li>
</ul>
<p>反码：各位取反。补码：仅对于负数有效操作，保留符号位，其余各位取反，+1。</p>
<ul>
<li>计算机字：若干个二进制位作为整体来处理、保存或传送。分为数据字和指令字。特别的，对于数值数据，分为定点数（整数、纯小数）、浮点数（小数）。浮点数的表示不唯一，规定尾数必须以0.1开头，称为正规化，保证了唯一性 。存在溢出（数据存储）和机器误差（实数精度存储）。</li>
</ul>
<p>—字符数据和字符编码—</p>
<p>输入与输出。ASCII码——&gt;Unicode码。</p>
<h2 id="4-计算机硬件系统"><a href="#4-计算机硬件系统" class="headerlink" title="4.计算机硬件系统"></a>4.计算机硬件系统</h2><p>计算机体系结构：</p>
<ul>
<li><p>冯诺依曼计算机体系结构</p>
</li>
<li><p>基于总线的微型计算机体系结构</p>
</li>
<li><p>多处理器计算机结构</p>
</li>
</ul>
<p>多核【封装在一个电路里，多个处理器核心，通过CPU内部总线通信】</p>
<p>多处理器【多个独立CPU，通过主板上的系统总线通信】</p>
<p>CPU：</p>
<p>本质——算术逻辑单元。</p>
<p>结构——运算器（ALU）、控制器、寄存器、内部总线。</p>
<p>性能指标——主频（电路上信号的变化，决定ALU运行速度）、外频（决定CPU与主板同步速度）、总线频率（CPU与内存数据交换速度），缓存（缓冲内存读取和CPU使用的速度差），CPU指令集，运算速度（每秒所能执行的指令数，一般用主频表示）。</p>
<p>存储器：</p>
<p>材料&lt;——&gt;物质。材料是有特殊用途的物质。</p>
<p>存储介质——磁介质、光盘、半导体元件。按功能可分为内存、外存。</p>
<p>输入输出（I/O）：</p>
<p>输入输出系统：CPU与除主存之外的其他部件之间传输数据的软硬件机构的统称。</p>
<p>指令系统：</p>
<p>一条计算机指令通常由操作码和地址码两个部分构成。</p>
<h2 id="5-计算机软件系统"><a href="#5-计算机软件系统" class="headerlink" title="5.计算机软件系统"></a>5.计算机软件系统</h2><p>系统软件——应用软件——用户。</p>
<p>系统软件：操作系统、编译器、数据库管理系统……与计算机硬件打交道。</p>
<p>应用软件：为用户需求设计的软件。</p>
<p>—操作系统的功能：</p>
<p>处理器、存储器管理，设备管理，文件管理，任务管理，用户管理，用户、计算机交互界面或操作接口。</p>
<p>文件：</p>
<ul>
<li><p>逻辑结构：有结构文件（多个记录构成）、无结构文件（字符流文件）。</p>
</li>
<li><p>物理结构：文本文件、二进制文件。</p>
</li>
</ul>
<p>人机界面：命令行CLI，图形界面GUI。</p>
<p>6.计算机的运行</p>
<p>启动：（矛盾的过程）</p>
<p>BIOS ROM(只读)芯片，保存系统的重要信息和设置系统参数的设置程序。</p>
<ul>
<li><p>POST加电自检程序</p>
</li>
<li><p>BIOS设置程序（设置系统引导顺序等）</p>
</li>
<li><p>系统自举装载程序</p>
</li>
<li><p>中断服务程序</p>
</li>
</ul>
<p>COMS RAM(可擦写，断电时丢失信息，一般独立电池供微弱电)，存放BIOS中的设置信息。</p>
<p>读取主引导记录——硬盘启动——加载操作系统——执行用户程序。</p>
<p>7.计算机应用</p>
<p>数值计算、数据处理、计算机辅助、过程控制、-人工智能（相对于与生俱来的自然智能）。</p>
<p>图灵：“与人脑的活动方式极为相似的机器是可以制造出来的。”</p>
<p>————————————————————————————————————————————</p>
<h1 id="三、问题求解与算法"><a href="#三、问题求解与算法" class="headerlink" title="三、问题求解与算法"></a>三、问题求解与算法</h1><h2 id="1-问题与问题求解"><a href="#1-问题与问题求解" class="headerlink" title="1.问题与问题求解"></a>1.问题与问题求解</h2><ul>
<li>人类问题求解的思维过程</li>
</ul>
<p>问题：需要解决但尚未解决的事。来源于科学研究、任务发布。</p>
<p>问题分析：问题归约、问题抽象、数学建模，其结果是问题的形式化、模型化。</p>
<p>提出假设。</p>
<p>检验假设：实践检验、理论验证。</p>
<ul>
<li>领域问题及形式化描述</li>
</ul>
<p>问题的要素：现实 + 目标。</p>
<p>问题形式化：现实——&gt;目标。</p>
<p>问题归约：将复杂的问题简化为相对简单的形式。</p>
<p>三要素：目标、算子集（若干操作）、基元问题集（有可描述解的问题）。</p>
<p>表示——与或图（通过与、或关系节点描述问题的解题步骤）。</p>
<p>问题求解策略：</p>
<ul>
<li><p>算法式（枚举、递归等）【逻辑方法，费时】</p>
</li>
<li><p>启发式（手段目的分析、顺向推理 [数据驱动]、逆向推理）【不保证得到答案】</p>
</li>
<li><p>问题抽象与数学建模</p>
</li>
</ul>
<p>抽象：抽取本质特征（共性）。抽象具有层次性。</p>
<p>—事物抽象的方法：分离、提纯、简略。</p>
<p>应用知识从实际问题中抽象提取出数学模型。</p>
<p>—哥德堡七桥问题：有人提出如何一次走完7桥（Euler回路）。【数学抽象】</p>
<p>欧拉将七桥问题抽象为图的问题（一笔画），证明了7桥无解，同时开创了图论分支。</p>
<p>模型的分类：</p>
<ul>
<li><p>静态模型（代数方程），动态模型（微分、差分方程）。</p>
</li>
<li><p>连续时间模型（微分方程），离散事件模型（差分方程）。</p>
</li>
</ul>
<p>…………</p>
<ul>
<li>计算机求解问题</li>
</ul>
<h2 id="2-算法与算法分析"><a href="#2-算法与算法分析" class="headerlink" title="2.算法与算法分析"></a>2.算法与算法分析</h2><ul>
<li>算法描述</li>
</ul>
<p>算法：为问题求解的精心设计的程序序列。</p>
<p>特征：确定性、可行性、有穷性。输入、输出。</p>
<p>描述方法：自然语言、流程图（如N-S图）、伪代码。</p>
<ul>
<li>算法分析</li>
</ul>
<p>P问题：多项式时间；NP问题：非确定性多项式问题（能够判断已知的答案是否正确）；NP完全问题：所有可能答案都能在多项式时间内验算；NP难度问题：可以用穷举法，但复杂度是指数关系。</p>
<p>—美国数据加密标准DES采用长度为64位的密钥（实际密钥56位，8位用于奇偶校验），采用穷举搜索密钥，设计算机每秒钟判断一亿个密码是否正确，则要穷举所有的可能密钥需要花费的时间约为22.85年。</p>
<h2 id="3-算法设计与分类"><a href="#3-算法设计与分类" class="headerlink" title="3.算法设计与分类"></a>3.算法设计与分类</h2><p>—算法设计</p>
<ul>
<li>穷举法（枚举法）</li>
</ul>
<p>通常为NP-hard问题，即非确定性多项式难解问题。“百钱买百鸡问题”，“0-1背包问题”。</p>
<ul>
<li>递推法</li>
</ul>
<p>根据递推关系进行问题求解的方法。一般通过已知条件，根据特定的递推关系得出中间结论，直至得到问题的最终结果。</p>
<p>递推关系可以抽象为一种简单的数学模型。</p>
<p>顺推法：已知条件——&gt;最终结果。</p>
<p>逆推法：已知结果——&gt;初始条件。</p>
<p>“Fibonacci Sequence”、”储油点问题”。</p>
<ul>
<li>递归法（编程技术）</li>
</ul>
<p>从已知出发，一步步推出未知项。思想上类似于“逆推法”，但它针对的是对待解问题的递归，把复杂的问题递推为简单的易解问题，然后一步步返回去得到解，属于一种编程技术。“Hanoi塔”。</p>
<ul>
<li>回溯法</li>
</ul>
<p>在解空间中不断地 试探 — 回溯 。“老鼠走迷宫”，“八皇后问题”。</p>
<p>从本质上讲，回溯法也是一种穷举法，但回溯法每次测试的是解的一部分，而不是完整的解，提高了效率，可以利用递归编程找出问题所有的解。</p>
<ul>
<li>迭代法（编程技术）</li>
</ul>
<p>“辗转相除法”、“二分法求非线性方程的解”。</p>
<ul>
<li>分治法</li>
</ul>
<p>各个系统分而治之。“Merge Sort”。</p>
<ul>
<li>贪心法</li>
</ul>
<p>从当前情况考虑局部最优解，不保证整体最优，可能是次优解。“0-1背包问题”。</p>
<ul>
<li>动态规划法</li>
</ul>
<p>应用背景：子问题重复+最优子结构。</p>
<h2 id="4-搜索问题与查找算法"><a href="#4-搜索问题与查找算法" class="headerlink" title="4.搜索问题与查找算法"></a>4.搜索问题与查找算法</h2><p>搜索问题：抽象——主关键字。</p>
<p>顺序查找、折半查找。</p>
<p>查找算法性能评价：时间复杂性、查全率、查准率。</p>
<h2 id="5-排序问题及排序算法"><a href="#5-排序问题及排序算法" class="headerlink" title="5.排序问题及排序算法"></a>5.排序问题及排序算法</h2><p>如：扑克牌、身高、数字的排序。</p>
<p>稳定排序——已经排好序的任意两个元素，在排序过程中关系不被破坏。相对的是非稳定排序。</p>
<p>内部排序——被排序的记录较少，整个排序过程可以只在内存中完成。相对的是外部排序，需要外存。</p>
<p>分类：选择排序、交换排序、插入排序、归并排序、基数排序 [ O(d- n) ]）。</p>
<p>基数排序：多关键字排序。</p>
<p>十进制技术分类：被分类的关键字值是十进制整数，每一位数字视为一个关键字。</p>
<p>—过程：把输出分为10个桶(0至9)，整个分类过程分成d遍(d为被分类数字的最多位数)。</p>
<ul>
<li>对最低关键字进行桶排序[堆栈]，再把排序结果作为第二次的排序依据进行循环。</li>
</ul>
<h2 id="6-网络搜索问题"><a href="#6-网络搜索问题" class="headerlink" title="6.网络搜索问题"></a>6.网络搜索问题</h2><ul>
<li>搜索引擎</li>
</ul>
<p>鼻祖：Archic（档案检索系统），by Alan Ematage’s Group。</p>
<p>1代：目录搜索引擎，主题查询，树形结构，手工分类。</p>
<p>2代：蜘蛛程序，自动完成分类、目录，如Google，Baidu。网页快照，即使网页不再存在，也可能在搜索服务器上保有一定的资料。</p>
<p>—全文搜索引擎的构成：搜索器——&gt;索引器——&gt;检索器——&gt;用户接口。</p>
<ul>
<li>Page Rank排序算法（PR）</li>
</ul>
<p>基于接入链接（Vote）的数量、重要性对网页进行评级。</p>
<p>网页链接关系：正向、反向。</p>
<p>计算思想：假定初始所有网页的排名相同，基于此进行迭代，可以证明收敛。Google28天才排序一次。</p>
<p>—可能的问题：可能导致死循环，还有二维矩阵相乘的问题（迭代）。</p>
<ul>
<li>启示</li>
</ul>
<p>创新永无止尽。链接的价值度。</p>
<p>————————————————————————————————————————————</p>
<h1 id="四、数据与数据结构"><a href="#四、数据与数据结构" class="headerlink" title="四、数据与数据结构"></a>四、数据与数据结构</h1><h2 id="1-数、数据及数据结构"><a href="#1-数、数据及数据结构" class="headerlink" title="1.数、数据及数据结构"></a>1.数、数据及数据结构</h2><ul>
<li>数</li>
</ul>
<p>自然数，整数，分数，有理数，无理数，虚数。</p>
<ul>
<li>数据</li>
</ul>
<p>对客观事物的符号表示。一切能传到计算机里保存的符号都可以称为数据。</p>
<ul>
<li>数据结构</li>
</ul>
<p>数据之间的关系。</p>
<p>—数据类型：抽象，决定了在计算机中所占有的存储空间大小，决定了数据的性质。分为简单类和构造类。</p>
<p>——逻辑结构</p>
<ul>
<li><p>集合（数据元素关系十分松散）</p>
</li>
<li><p>线性结构（元素间存在先后关系）</p>
</li>
<li><p>树形结构（层次关系，元素称为”节点”）</p>
</li>
<li><p>图状结构（多对多的关系，复杂、任意）</p>
</li>
</ul>
<p>——存储结构（数据结构在计算机中的表示，又称物理结构）</p>
<p>​       ——存储数据 + 存储关系</p>
<ul>
<li><p>顺序存储（一组连续的地址空间存储元素，借助数据相对位置表示关系）</p>
</li>
<li><p>链式存储（指针来存储关系，增加了存储空间要求，灵活）</p>
</li>
</ul>
<h2 id="2-线性结构"><a href="#2-线性结构" class="headerlink" title="2.线性结构"></a>2.线性结构</h2><ul>
<li>排队问题及抽象</li>
</ul>
<p>先到先服务（使用排队机）。</p>
<ul>
<li>线性表</li>
</ul>
<p>具有n个元素( n &gt; 0 )的有序序列。</p>
<p>基本操作：求表长度、取元素、定位、前移、后移、插入( 费时 )、删除。</p>
<p>—顺序存储结构：数组。</p>
<p>—链式存储：元素 + 指针。</p>
<ul>
<li>堆栈</li>
</ul>
<p>后进先出表。一般使用顺序存储结构。</p>
<ul>
<li>队列</li>
</ul>
<p>先进先出表。</p>
<h2 id="3-树形结构"><a href="#3-树形结构" class="headerlink" title="3.树形结构"></a>3.树形结构</h2><ul>
<li>层次关系</li>
</ul>
<p>族谱、组织机构、问题决策……</p>
<ul>
<li><p>博弈与决策：可以利用图形表示，称为博弈树[Game Tree]/决策树。</p>
</li>
<li><p>树形结构</p>
</li>
</ul>
<p>表示：图、Venn图……</p>
<ul>
<li><p>二叉树</p>
</li>
<li><p>常用操作、算法</p>
</li>
</ul>
<p>前序、中序、后序遍历。</p>
<h2 id="4-图结构"><a href="#4-图结构" class="headerlink" title="4.图结构"></a>4.图结构</h2><p>哥尼斯堡七桥问题——Euler迹——图论。</p>
<p>存储：邻接矩阵（O(n^2)，密集）、邻接表（O(lgn)或O(n)，稀疏）。对有向图还有逆邻接表(最大流问题中有应用)。</p>
<p>遍历：广度优先（队列）、深度优先（堆栈）。</p>
<p>支撑树（生成树）：最小支撑树（生成树）——&gt;Kruskal算法。</p>
<h2 id="5-应用举例"><a href="#5-应用举例" class="headerlink" title="5.应用举例"></a>5.应用举例</h2><ul>
<li>网络与最短通路问题</li>
</ul>
<p>交通问题：定点代表城市，边代表长度、费用等</p>
<p>—有通路吗？最短路？</p>
<ul>
<li><p>Dijkstra最短路径算法（图的邻接矩阵存储，无通路的边权设为无穷大）</p>
</li>
<li><p>工程拓扑排序问题</p>
</li>
</ul>
<p>子工程、加工工序之间受到约束，形成有向图的结果。拓扑排序序列不一定唯一。</p>
<p>AOV网络（Acitivity on Vertex）：无权有向图，定点代表Acitivity，有向边代表优先顺序。</p>
<ul>
<li><p>AOV网络拓扑分类算法（计算每个定点的入度，取出并删去最高者，循环）</p>
</li>
<li><p>工程关键路径问题</p>
</li>
</ul>
<p>工程的工期、产品的生产周期。</p>
<p>AOE（Acitivity on Edge）：有权有向图，定点代表事件，有向边代表活动，有向边的权代表活动的持续时间（时间可以为0）。</p>
<p>—关键路径：AOE网络中，某些活动可以并行进行，最短时间由最长路的长度限制（木桶效应）。</p>
<ul>
<li>计算事件的最早最迟时间，再计算活动的最早最迟时间——&gt;在关键路径上，活动（边）的最早最迟时间的差为0。</li>
</ul>
<p>—-通常可以缩短关键活动的工期以缩短整个工程的工期，但并不绝对，因为所有的活动是在AOE网络相互耦合的，可能牵一发而动全身，甚至使关键路径发生变化。</p>
<p>————————————————————————————————————————————</p>
<h1 id="五、计算机程序"><a href="#五、计算机程序" class="headerlink" title="五、计算机程序"></a>五、计算机程序</h1><h2 id="1-计算机程序概述"><a href="#1-计算机程序概述" class="headerlink" title="1.计算机程序概述"></a>1.计算机程序概述</h2><ul>
<li>自然语言与形式语言</li>
</ul>
<p>自然语言有歧义（二义性），因此需要形式化的语言。</p>
<ul>
<li>计算机程序设计语言</li>
</ul>
<p>一组基本符号，和语法规则。</p>
<p>—机器语言（指令，计算机直接执行，可读性差，可移植性差）</p>
<p>—汇编语言（机器语言的助记符语言，本质上仍然面向机器，不能直接运行，通用性差）</p>
<p>—高级语言（可读性好）</p>
<ul>
<li><p>50年代：FORTRAN，ALGOL，LISP，COBOL</p>
</li>
<li><p>60年代：Basic</p>
</li>
<li><p>70年代：（结构化编程）Pascal，C，Smalltalk，Prolog</p>
</li>
<li><p>80年代：（面向对象）C++，Ada，Perl</p>
</li>
<li><p>90年代：Python，Visual Basic，Java，Delphi，C#</p>
</li>
</ul>
<p>计算机程序Program：有目的地控制计算机的一组指令序列。源程序（解释型、编译型）、可执行程序。</p>
<p>计算机软件Software：管理文档，技术文档。</p>
<p>计算机应用Application：软件系统，运行环境。</p>
<p>—-软件系统开发：需求分析，设计，编码，测试，运行和维护</p>
<p>———软件的开发环境：编译器，类库/函数库，连接（静态、动态 [ DDL库 ] ），编辑器，调试工具。</p>
<h2 id="2-C-C-程序设计语言"><a href="#2-C-C-程序设计语言" class="headerlink" title="2.C/C++程序设计语言"></a>2.C/C++程序设计语言</h2><p>程序设计语言：数据和数据类型、运算符和表达式、程序语句和语句块、函数。</p>
<p>-C语言：ALGOL 60基础上推出CPL——&gt;B——&gt;C——-&gt;Unix.</p>
<p>程序语句：高级语言书写的指令语句。</p>
<p>—赋值语句=赋值表达式+分号。</p>
<p>语句块：若干程序语句，可以看作逻辑上的一个语句。</p>
<p>—-函数：结构化编程（分治策略）。</p>
<h2 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h2><p>面向对象的思想，利于升级和维护。OOP，面向对象编程。</p>
<ul>
<li><p>类：包含数据和方法的数据结构。共有、私有、保护型。成员变量、成员函数（构造函数、析构函数）。</p>
</li>
<li><p>对象：用类来声明的数据结构，一个类的具象/外延。</p>
</li>
</ul>
<p>-封装与抽象</p>
<p>-继承和派生</p>
<p>-多态</p>
<p>-接口</p>
<h2 id="4-数据存储与管理"><a href="#4-数据存储与管理" class="headerlink" title="4.数据存储与管理"></a>4.数据存储与管理</h2><ul>
<li>数据文件及其操作</li>
</ul>
<p>文本文件——字符编码 [ 可用记事本打开 ] ；二进制文件——01比特串。</p>
<p>—用Debug查看文件存储的内容。</p>
<ul>
<li>数据库与数据库管理系统</li>
</ul>
<p>数据管理：对数据的高效组织。人工管理——&gt;文件集中管理——&gt;数据库管理。</p>
<p>数据库管理系统：只负责数据库的建立、维护的系统软件。包括数据定义语言、数据操作语言等。</p>
<p>数据库：在DBMS的支持下以一定组织方式将相关数据组织在一起所形成的能为多个用户共享与应用程序相互独立的数据集合。以文件的形式存储在外存中。分为层次、网状、关系模型。</p>
<p>—实体、记录和数据项。</p>
<ul>
<li>结构化查询语言SQL——               Transact-SQL [ 增加了数据库的编程功能 ]</li>
</ul>
<p>关系型数据库管理系统的标准语言。</p>
<ul>
<li><p>数据定义语言</p>
</li>
<li><p>数据操作语言（查询、插入、删除和 修改/更新 操作）</p>
</li>
<li><p>查询（最复杂的一类语句，如SELECT语句 [FROM、WHERE、ORDER BY子句]）</p>
</li>
<li><p>插入（INSERT语句）</p>
</li>
<li><p>删除（DELETE语句）</p>
</li>
<li><p>修改/更新（UPDATE语句）</p>
</li>
<li><p>数据控制语言</p>
</li>
</ul>
<h2 id="5-Web应用"><a href="#5-Web应用" class="headerlink" title="5.Web应用"></a>5.Web应用</h2><ul>
<li>计算机应用模式的演变</li>
</ul>
<p>集中 ——&gt; C/S ——&gt; B/S</p>
<ul>
<li>集中式计算模式</li>
</ul>
<p>设备昂贵，计算机未普及。集中中心负责计算，需要输入和输出。对大数据、高性能计算具有重要意义。</p>
<ul>
<li>客户/服务器（C/S）模式</li>
</ul>
<p>把计算机应用一分为二，通过网络来进行数据分享，两个主体协同操作 [ 客户端（主动） + 服务器（被动） ] 。是所有网络应用的基础。可实现分布式计算。但必须在每一个客户端安装大量的应用软件，维护和升级困难。</p>
<ul>
<li>浏览器/服务器（B/S）模式</li>
</ul>
<p>浏览器——&gt;服务器。不再需要在客户端装各种各样的软件，只需要装一个浏览器即可。</p>
<p>Web浏览——Web服务——数据库。（实质仍采用C/S方式）</p>
<p>功能：HTML、TXT 和 脚本（客户端运行的程序）。【不含脚本的称静态网页】</p>
<ul>
<li><p>Web应用与传统程序的差异</p>
</li>
<li><p>程序构成不同</p>
</li>
<li><p>运行环境不同（服务端+客户端）</p>
</li>
<li><p>用户界面不同（网页型，实质是程序）</p>
</li>
</ul>
<p>————————————————————————————————————————————</p>
<h1 id="六、计算机网络"><a href="#六、计算机网络" class="headerlink" title="六、计算机网络"></a>六、计算机网络</h1><h2 id="1-计算机网络技术"><a href="#1-计算机网络技术" class="headerlink" title="1.计算机网络技术"></a>1.计算机网络技术</h2><p>—计算机的通信和资源共享。</p>
<ul>
<li><p>计算机网络的产生与发展</p>
</li>
<li><p>终端连接网络（哑终端，如SAGE）</p>
</li>
<li><p>计算机之间的连接（智能终端，具有独立的计算资源）</p>
</li>
<li><p>网络互联（主要问题：标准问题）</p>
</li>
<li><p>计算机网络分类</p>
</li>
<li><p>局域网（物理短距离，总线型、星型与树形，服务一个单位或系统）</p>
</li>
<li><p>广域网（更大的地理范围，借助电信运营商构建通信网络，如电话线上网、宽带接入）</p>
</li>
<li><p>城域网（介于局域网和广域网之间，目的构建一种通信网，采用宽带局域网，为城市服务）</p>
</li>
<li><p>开放系统互联（OSI）参考模型</p>
</li>
<li><p>应用层（接入计算机网络的实体称为OSI系统，应用层负责提供接口，使程序能够使用网络服务）</p>
</li>
<li><p>表示层（提供通用的数据格式，是不同系统的数据格式能相互识别）</p>
</li>
<li><p>会话层（负责在网络中两个节点之间建立、维持和终止通信）</p>
</li>
<li><p>传输层（数据分为数据段，负责数据的可靠传输和流量控制）</p>
</li>
<li><p>网络层（将传输层的数据分段封装，根据数据包的目标网络地址实现网络间的路由【路径选择】，将数据沿路径传送到目标网络）</p>
</li>
<li><p>数据链路层（将网络层的数据包封装成特定的数据帧Frame，通常由网络接口实现）</p>
</li>
<li><p>物理层（将数据帧对应的比特流转换为电、光等信号，提供计算机及网络设备的物理接口，并在媒体中传输）</p>
</li>
</ul>
<p>—-数据封装 + 解封装。</p>
<ul>
<li>网络协议Protocol（实质是一种程序，也是一种特定的数据格式）</li>
</ul>
<p>TCP，IP。</p>
<ul>
<li><p>TCP/IP协议模型</p>
</li>
<li><p>应用层，传输层，Internet层，网络接入层。</p>
</li>
</ul>
<p>—简化了OSI，将上3层合为应用层，下2层合为网络接入层，传输层和Internet层不变。</p>
<p>IP地址：网络标识+主机表示。</p>
<p>-主机位全0的地址为网络地址。</p>
<p>—广播地址：当一个数据包中的接收方的IP地址为广播地址时，将有多于一台主机接收到相同的数据包。</p>
<ul>
<li><p>直接广播：针对某个指定网络的广播。主机位全1的地址。</p>
</li>
<li><p>本地广播：针对发送方所在局域网的广播。32位全部为1的地址。（对 Ivp4）</p>
</li>
</ul>
<p>—私有地址（专用地址）。</p>
<p>—子网掩码：划分广播域，提高网络通信效率。</p>
<p>地址渐渐不够用——&gt; Ivp6。</p>
<ul>
<li><p>网络设备及其功能</p>
</li>
<li><p>网卡</p>
</li>
</ul>
<p>—将计算机连接到网络中。一般1、2层设备，严格来说是2层设备。</p>
<ul>
<li><p>中继器</p>
</li>
<li><p>集线器</p>
</li>
<li><p>桥连接器</p>
</li>
<li><p>交换机</p>
</li>
</ul>
<p>—能够在通信系统中完成信息交换功能的设备。”网桥“链路层设备。</p>
<ul>
<li>路由器</li>
</ul>
<p>—网络层互联设备，用于连接多个逻辑上分开的网络。”没有显示器和键盘的计算机“。存储一个路由表。</p>
<ul>
<li>宽带路由器（宽带网关）</li>
</ul>
<p>—本身没有路由器的功能。多个设备可以共享IP地址。</p>
<h2 id="2-互联网"><a href="#2-互联网" class="headerlink" title="2.互联网"></a>2.互联网</h2><p>ARPA网——&gt;互联网——&gt;万维网。</p>
<p>连接到网络：</p>
<ul>
<li><p>网络接口（局域网、广域网连接）</p>
</li>
<li><p>通过局域网连接</p>
</li>
</ul>
<p>—-配置网络连接的TCP/IP：本地连接，IP地址、子网掩码、默认网关（必要，端口的IP地址）、DNS服务器（把域名变成IP地址）。</p>
<ul>
<li><p>调制解调器连接（安装调制解调器、新建网络连接）</p>
</li>
<li><p>无线上网卡连接（非无线网卡，属于无线广域网卡，可以在无线电话信号覆盖的任何地方使用，利用SIM卡连接到互联网，有USB接口，要安装自带的程序）</p>
</li>
<li><p>宽带接入与Internet连接共享（安装宽带路由器）</p>
</li>
</ul>
<h2 id="3-网络服务"><a href="#3-网络服务" class="headerlink" title="3.网络服务"></a>3.网络服务</h2><p>—-计算机应用：计算机程序的拓扑结构体。</p>
<p>下为典型的客户/服务器模式。</p>
<p><img data-src="file:///C:/Users/Administrator/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image003.png" alt="客 户 机  应 用  (《大学计算机——计算思维的视角》笔记/clip_image003.png )  TCP  I P  网 络 接 口  网 络 1  路 山 器  IP  网 络 接 口  网 络 2  服 务 器  应 用  ( 应 用 层 协 议 )  TCP  网 络 接 口 "></p>
<p>———-应用程序：具有通信功能的程序，实现特定的应用层协议。如Web浏览器，<a href="http://网址[:端口号]/路径/文件名[参数表" rel="external nofollow noreferrer">http://网址[:端口号]/路径/文件名[参数表</a>]</p>
<p>———-应用层协议：对用户应用程序进行封装，产生通信数据。如HTTP、FTP、DNS。</p>
<p>———-客户机：客户机程序[程序层面]、客户机计算机[用户层面]。</p>
<p>———-服务器：服务器程序，服务器主机（安装服务器程序的主机）。</p>
<ul>
<li>域名和DNS域名解析服务</li>
</ul>
<p>DNS服务将域名（便于记忆）解析成IP地址。</p>
<p>—计算机域名：具有层次结构的计算机命名方式，与计算机IP地址相对应。”主机名.域名“。最右为顶级域名（如 .com .net .org .cn .fr[法国] .ay[意大利]……），然后依次称为二级、三级……域名。域名注册可以通过很多服务机构进行注册。</p>
<p>DNS域名解析：由一系列的DNS服务器计算机共同完成，这些计算机按照域构成层次结构。</p>
<p>——-具体解析过程：用户往首选DNS服务器发出域名解析请求——启动解析（自顶向下）——将IP地址返回给用户。为了减缓服务器压力，有了DNS缓存（有时服务器临时更换了IP地址，那么需要清除保存的DNS缓存，再重新域名解析）。</p>
<p>本地域名解析：如windows里的hosts文件，自动将输入的域名更换为hosts里保存的对应IP地址。</p>
<p>DNS缓存：本地DNS缓存（显示命令：ipconfig/displaydns；清除命令：ipconfig/flushdns），减少互联网访问。</p>
<p>——使用”ping 某域名”可以测试本地机器是否可以和网络上某域名可以连通。</p>
<p>———先清除，再ping某域名，再显示，就可以看到某域名的解析IP地址（实际上为了安全，做了数据处理，是看不到的）了。</p>
<ul>
<li>Web服务与浏览器/服务器模式</li>
</ul>
<p>——网站&lt;——&gt;Web应用系统——</p>
<p>统一资源定位符URL：</p>
<p>​           服务器://网址[:端口号][/[文件路径/文件名]][?参数名=参数值&amp;参数名=参数值…]</p>
<p>—-各部分含义——服务类型（对应TCP/IP的应用层协议，表明要链接的服务器类型，如http，ftp等），网址（服务器的域名或IP地址），端口号（指定一个特定的服务，服务器根据端口号来分配相应的服务器程序，一般有设默认的端口号【可省略】），文件路径（网页相对于主目录的相对路径），文件名（指定要下载的网页文件），参数（给网页文件的脚本程序使用，参数之间用 &amp; 隔开）。</p>
<p>端口：通信OSI封装，多个服务器通过使用端口来区分（没有程序名）。</p>
<p>—-分类：知名端口（21端口-FTP服务，25端口-SMTP服务，80端口-HTTP服务，135端口-(远程过程调用)服务等），动态端口（范围从1024到65535）。</p>
<p>下为浏览器/服务器应用模式。</p>
<p><img data-src="file:///C:/Users/Administrator/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image004.png" alt="IITTP 请 求  11111) 请 求  数 据 库  Internet  服 务 器  浏 览 器  服 务 器  HTML 或  HTML 或  XML 文 档  XML 文 档  ． 在 用 户 端 ， 在 浏 览 器 地 址 栏 中 ， 用 户 输 入 要 访 问 的 网 页 网 址 URL&#39;} ． 回 车 确 认 。  ． web 服 务 器 根 据 URL 中 指 定 的 网 址 、 路 径 和 网 页 文 件 ， 调 出 相 应 的 网 页 文 件 。  如 果 用 户 要 浏 览 的 页 面 是 普 通 的 ] 页 面 ， web 服 务  送 给 用 户 。  如 果 是 服 务 器 页 （ jsp,a.sp 等 ） ， web 服 务 器 将 扌 巴 该 r  令  （ 如 Tonicat ） ， 由 应 用 服 务 器 执 行 页 面 中 的 服 务 器  页 面 返 给 web 服 务 器 ， web 服 务 器 再 将 页 面 发 送 到  ． 在 用 户 端 ， 文 档 在 浏 览 器 中 打 开 ， 即 完 成 网 页 浏 览 。 "></p>
<ul>
<li><p>电子邮件服务</p>
</li>
<li><p>SMTP——管理邮件传输代理之间进行的电子邮件交换</p>
</li>
</ul>
<p>`POP3——即邮局协议，当用户在邮件客户软件中执行接收命令时将邮件发送到客户端</p>
<p>—-邮件服务器需要安装SMTP和POP3协议。</p>
<ul>
<li>邮件客户</li>
</ul>
<p>——传统的邮件客户程序，如OutlookExpress：设置邮件账户，设置邮件服务器（SMTP和POP3）地址；</p>
<p>——基于Web的邮件客户程序，浏览器</p>
<h2 id="4-网络与信息安全"><a href="#4-网络与信息安全" class="headerlink" title="4.网络与信息安全"></a>4.网络与信息安全</h2><ul>
<li>信息安全</li>
</ul>
<p>包括信息的保密性、真实性、完整性、未授权拷贝和所寄生系统的安全性。</p>
<p>安全问题分为网络信息安全和网络系统安全。</p>
<p>安全目标：保密性，完整性，可用性，可控性，不可否认性（发生的信息交换行为不能被否认）。</p>
<ul>
<li><p>信息安全的主要威胁</p>
</li>
<li><p>非人为因素：自然灾害、意外事故等</p>
</li>
<li><p>人为因素：信息泄露，信息窃取（数据窃听，流量分析），冒名顶替，篡改信息，行为否认（抵赖），授权侵犯（内部攻击），恶意攻击（目前最大的信息安全威胁）。</p>
</li>
<li><p>信息安全措施</p>
</li>
<li><p>信息安全技术</p>
</li>
<li><p>技术产品</p>
</li>
<li><p>数据加密技术（明文&lt;——&gt;密文）</p>
</li>
</ul>

<ul>
<li><p>密码学（密码编码学、密码分析分）</p>
</li>
<li><p>无条件安全的密码体制，计算上安全的密码体制（NP-hard）</p>
</li>
</ul>
<p>—-常规密码密钥体制（对称）</p>
<p>—-公开密码密钥体制（非对称，加密密匙PK和解密密匙SK不同，通过PK来推导SK在计算上是不可行的，特点：保密通信，数字签名【加密和解密算法可以对调，通过SK加密，其他人用公有密钥PK可以解密，实现对信息X的数字签名，保证通信双方是可信的，避免相互猜疑 &lt;报文核实、不可抵赖、不可篡改&gt; 】）</p>
<ul>
<li><p>病毒与木马</p>
</li>
<li><p>病毒——寄生性，潜伏性，传染性，破坏性。</p>
</li>
<li><p>木马——带有恶意性质的远程控制软件，采用C/S模式。</p>
</li>
</ul>
<h2 id="5-互联网社会效应"><a href="#5-互联网社会效应" class="headerlink" title="5.互联网社会效应"></a>5.互联网社会效应</h2><ul>
<li><p>新兴的传播媒介（网络媒体）</p>
</li>
<li><p>网络通信</p>
</li>
</ul>
<p>网络 = 通信子网 + 资源子网。</p>
<p>网络社区与论坛。（社区的网络化、信息化）</p>
<p>即时通信：IM（ICQ[I SEEK YOU]），MSN，腾讯QQ等。</p>
<ul>
<li>网络社交</li>
</ul>
<p>利用互联网开展的一系列社会交往活动。导致了网络群体的形成。</p>
<p>工具：即时通信，网络论坛，RSS简易信息聚合【”推”技术，让用户获取网站内容的最新更新，类似于订阅杂志】，Blog博客，社交网站(SNS)【六度分隔理论】，微博【基于用户关系的信息平台】……</p>
<p>特点：虚拟（道德感的弱化），多元（影响个人的价值取向），自由（没有中心，没有阶层，没有等级关系），异化（使人趋向孤立、冷漠和非社会化）</p>
<ul>
<li>电子商务Electronic Business</li>
</ul>
<p>阿里巴巴b2b模式，京东商城b2c模式，淘宝c2c模式。（b:商家business；c:消费者consumer）</p>
<ul>
<li><p>网络娱乐</p>
</li>
<li><p>网络游戏：具有娱乐功能的程序软件。分为客户端（网游）、浏览器（页游）形式。</p>
</li>
<li><p>网络文学：以网络为载体的文学。</p>
</li>
<li><p>网络视频：以流媒体（将数据包特殊压缩转换，流式传输，实现边下载边播放）为播放格式的，可以在线直播或点播的声像文件。</p>
</li>
<li><p>启示</p>
</li>
</ul>
<p><img data-src="file:///C:/Users/Administrator/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image006.png" alt="． 艾 萨 克 ． 牛 顿 (《大学计算机——计算思维的视角》笔记/clip_image006.png )  ． 约 翰 ． 道 尔 顿 ( 1766 年 、 1844 年 )  ． 迈 克 尔 ． 法 拉 第 ( 1791 年 、 1867 年 )  ． 詹 姆 斯 ． 克 拉 克 ． 麦 克 斯 韦 ( 1831 年 -  1879 年 )  ． 海 因 里 希 ． 鲁 道 夫 ． 赫 兹 ( 1857 年 -  1894 年 )  -  路 易 斯 ． 巴 斯 德 ( 1822 年 、 189S 年 )  ． 阿 尔 弗 雷 德 ． 伯 纳 德 ． 诺 贝 尔 ( 1833 年 -  1896 年 )  -  德 米 特 里 ． 伊 万 诺 维 奇 ． 门 捷 列 夫 ( 1834 年 、 1907 年 )  ． 马 克 斯 ． 普 朗 克 ( 1858 年 、 1947 年 )  ． 阿 尔 伯 特 ， 爱 因 斯 坦 ( 1879 年 、 1955 年 ) "></p>
<p>20世纪原始理论创新减少，人类的科技发展、工业制造水平已进入相当高的水平。</p>
<p>我们需要应用创新，只要能想到就能做到。（对比巴贝奇的分析机受限于当时制造水平而失败）</p>
<hr>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>中药说明书实体识别挑战纪要</title>
    <url>/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/</url>
    <content><![CDATA[<p>中药说明书实体识别挑战是天池大数据竞赛，主要任务是对药品的说明书中的实体进行提取和分类。<a id="more"></a>这个比赛进度我一直在拖，再过十几天就结束了，感觉时间还是很紧张的。得抓紧抽时间把baseline至少先写出来。</p>
<blockquote>
<p>告一段落，确实没有什么时间参与。。倒是可以作为一个关于时间管理的思考。</p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><em>Speech and Language Processing - 3rd</em> / Information Extraction / Named Entity Recognition</p>
<p>比赛地址：<a href="https://tianchi.aliyun.com/competition/entrance/531824/introduction" target="_blank" rel="noopener external nofollow noreferrer">中医药天池大数据竞赛——中药说明书实体识别挑战</a></p>
<blockquote>
<p><a href="https://tianchi.aliyun.com/notebook-ai/?spm=5176.12281976.J_9711814210.13.3d593f79k2QqEm" target="_blank" rel="noopener external nofollow noreferrer">天池实验室</a></p>
</blockquote>
<p>(BERT+CRF) NER：<a href="https://tianchi.aliyun.com/forum/postDetail?postId=126542" target="_blank" rel="noopener external nofollow noreferrer">https://tianchi.aliyun.com/forum/postDetail?postId=126542</a></p>
<p><a href="https://easyai.tech/ai-definition/ner/" target="_blank" rel="noopener external nofollow noreferrer">命名实体识别 – Named-entity recognition | NER</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/90133637" target="_blank" rel="noopener external nofollow noreferrer">基于深度学习的NER综述</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/88545206" target="_blank" rel="noopener external nofollow noreferrer">【NLP-NER】命名实体识别中最常用的两种深度学习模型</a></p>
<p><a href="https://github.com/macanv/BERT-BiLSTM-CRF-NER" target="_blank" rel="noopener external nofollow noreferrer">BERT-BiLSTM-CRF-NER</a></p>
<p><a href="https://mp.weixin.qq.com/s/SgkQB7t0j2_kqHeotspHBQ" target="_blank" rel="noopener external nofollow noreferrer">一等奖团队分享 | 2019 CCF BDCI 《互联网金融新实体发现》</a></p>
<p><a href="https://blog.csdn.net/lhy2014/article/details/84582145" target="_blank" rel="noopener external nofollow noreferrer">中文电子病例命名实体识别项目</a>，<a href="https://raw.githubusercontent.com/alibaba-research/ChineseBLUE/master/data/cMedQANER/train.txt" target="_blank" rel="noopener external nofollow noreferrer">训练标注集</a></p>
<p><a href="https://github.com/alibaba-research/ChineseBLUE" target="_blank" rel="noopener external nofollow noreferrer">ChineseBLUE, the Chinese Biomedical Language Understanding Evaluation benchmark</a>，跑跑试试</p>
<h1 id="探知-命名实体识别-NER"><a href="#探知-命名实体识别-NER" class="headerlink" title="探知-命名实体识别(NER)"></a>探知-命名实体识别(NER)</h1><h2 id="信息抽取"><a href="#信息抽取" class="headerlink" title="信息抽取"></a>信息抽取</h2><p>NER（Named Entity Recognition）技术是一种NLP中的<strong>信息抽取</strong>（Information Extration）技术。</p>
<p>信息抽取将非结构化的文本信息嵌入到结构化的数据结构（如，关系型数据库）之中。</p>
<p>信息抽取包括：</p>
<ul>
<li><strong>命名实体识别</strong>（Named Entity Recognition，NER）<ul>
<li>找到并标记（label）分类所有的提及“命名实体”的文本</li>
</ul>
</li>
<li><strong>关系抽取</strong>（Relation Extraction）<ul>
<li>找到并分类所有文本中实体间的语义关系<ul>
<li>ex: child-of, employment, part-whole, and geospatial relations…</li>
</ul>
</li>
</ul>
</li>
<li><strong>事件抽取</strong>（Event Extraction）<ul>
<li>找到实体们参与的事件</li>
<li>Event coreference：确定同一事件的不同指代，并归类为同一事件</li>
<li>temporal expression：确定事件发生的时间表达，并normalize成准确的格式化时间</li>
<li>template filling：许多文本描述的是非常标准的结构化事件，因此变成“槽值填充”类似的东西了</li>
</ul>
</li>
</ul>
<h2 id="命名实体"><a href="#命名实体" class="headerlink" title="命名实体"></a>命名实体</h2><p>实体抽取通常作为作为信息抽取的第一步。在此基础上可以实现其它很多NLP任务，如情感分析、知识问答、信息结构化……</p>
<p><strong><font color=red>命名实体</font></strong>：任何指代着一个<strong>适定名称</strong>的事物。（例：某个人物、地点、组织……）</p>
<blockquote>
<p>适定名称就是<strong>确定无歧义</strong>的指代名。</p>
<p>这个术语也常常扩展到非实体的领域，如：日期、事件等temporal expression，价格等numerical expression。下图是一个NER的示例：</p>
</blockquote>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926123214018.png" class="" title="NER的示例">
<blockquote>
<p>上图中有13个命名实体，包括5个organization，4个location，2个time，1个person和1个money。</p>
</blockquote>
<h3 id="命名实体类"><a href="#命名实体类" class="headerlink" title="命名实体类"></a>命名实体类</h3><p>下图给出了常见的命名实体种类，当然这种形式的分类是面向通用任务的。中医药比赛或者说自定义的人物场景，可以根据需求来设计更细致、面向领域的分类。比如，蛋白质分类、基因、商品、艺术品、药品……</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926124051196.png" class="" title="常见的命名实体种类">
<h2 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h2><p><strong><font color=red>命名实体识别</font></strong>：寻找包含适定名称的文本段，并分类对应实体。</p>
<blockquote>
<p>识别任务的难度部分在于分词（准确地界定实体边界），另一部分在于分类时的歧义（Type Ambiguity）。</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926130704988.png" class="" title="分类时的歧义">
</blockquote>
<h2 id="序列标注-Sequence-Labeling"><a href="#序列标注-Sequence-Labeling" class="headerlink" title="序列标注 Sequence Labeling"></a>序列标注 Sequence Labeling</h2><p>NER的基本算法是（word by word）序列标注任务。</p>
<p>常见的序列标注模型：<strong>HMM</strong>，<strong>MEMM</strong>，<strong>CRF</strong>，<strong>bi-LSTM</strong>……</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/33397147" target="_blank" rel="noopener external nofollow noreferrer">概率图模型体系：HMM、MEMM、CRF</a></p>
<p><a href="https://www.dazhuanlan.com/2019/12/20/5dfc5febcda93/" target="_blank" rel="noopener external nofollow noreferrer">谈谈序列标注三大模型HMM、MEMM、CRF</a></p>
<p>因为bi-LSTM深度学习可以更好地抽取特征，CRF机器学习则需要好的特征来发挥效果，所以这两个模型常常结合起来使用。（<a href="https://www.jianshu.com/p/c7c3ace12044" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<p><a href="https://www.cnblogs.com/shona/p/12121473.html" target="_blank" rel="noopener external nofollow noreferrer">NLP | 序列标注 总结</a></p>
</blockquote>
<p>序列标注的应用场景非常广泛，可以解决一系列对字符进行分类的问题，比如：分词、词性标注、命名实体识别、关系抽取……</p>
<p>序列标注一般可以分为两类：</p>
<ul>
<li><strong>原始标注</strong>（Raw labeling）：每个元素都需要被标注为一个标签。</li>
<li><strong>联合标注</strong>（Joint segmentation and labeling）：多个连续分段被标注为同一个标签。</li>
</ul>
<p>其中，通过使用BIO标注可以将联合标注转化为原始标注问题。</p>
<h3 id="标注法：IO-BIO-BIEO…"><a href="#标注法：IO-BIO-BIEO…" class="headerlink" title="标注法：IO / BIO / BIEO…"></a>标注法：IO / BIO / BIEO…</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/147537898" target="_blank" rel="noopener external nofollow noreferrer">序列标注方法BIO、BIOSE、IOB、BILOU、BMEWO、BMEWO+的异同</a></p>
</blockquote>
<ul>
<li><strong>B</strong> stands for ‘<strong>beginning</strong>‘ (signifies beginning of an NE)</li>
<li><strong>I</strong> stands for ‘<strong>inside</strong>‘ (signifies that the word is inside an NE)</li>
<li><strong>O</strong> stands for ‘<strong>outside</strong>‘ (signifies that the word is just a regular word outside of an NE)</li>
<li><strong>E</strong> stands for ‘<strong>end</strong>‘ (signifies that the word is the end of an NE)</li>
<li><strong>S</strong> stands for ‘<strong>singleton</strong>‘(signifies that the single word is an NE )</li>
</ul>
<p>各种序列标注法的差异大多集中于对边界和特殊情况的处理，但是总的来说 <strong>IO</strong> 标注是最基础的序列标注单元。</p>
<p>如下面的一个例子：</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926132249986.png" class="" title="example">
<p>使用了 IO 和 IOB(-2) 即 IBO 方法给出序列标注的结果：</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926132417992.png" class="" title="IO and IOB">
<p>可以看到 IOB(-2) 即 IBO 在命名实体相邻的情况下会产生区分效果，但是这种情况在英文场景中较少出现。</p>
<p>一般来说在不追求极致性能的场景下，BIO标注方法的效果就足够好了。当然如果有精力，测试一下BIOES的效果也是可以的。</p>
<h2 id="基于特征的NER算法"><a href="#基于特征的NER算法" class="headerlink" title="基于特征的NER算法"></a>基于特征的NER算法</h2><p>基于特征的NER算法首先要做的事就是提取特征。然后用这些特征来train一个MEMM或者CRF之类的序列模型。</p>
<p>下面具体介绍一种用于英文的特征：</p>
<p><strong>word shape</strong>：文本的一种抽象的模式表示方法，将小写字母表示为<code>x</code>，大写字母表示为<code>X</code>，数字表示为<code>d</code>，并保留标点。例如<code>DC10-30a</code>会被映成<code>XXdd-ddx</code>。如果考虑压缩映射，把连续的同类字符合并，那么<code>DC10-30a</code>会被映成<code>Xd-dx</code>。这种特征，在基于特征的（English new text）NER任务中被证明非常成功。Shape features在诸如蛋白质名、基因等规范命名领域也很重要。</p>
<p>加上其它的特征，一个named entity token例如<code>L&#39;Occitane</code>将初步生成以下非零值的特征值：</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926151702490.png" class="" title="L" alt="Occitane生成非零值的特征值">
<blockquote>
<p>token：什么是token?（<a href="https://www.zhihu.com/question/64984731" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<ul>
<li><strong>token</strong> (<strong>符号</strong> / <strong>元素</strong>):包括单词和标点、<ul>
<li>广义的token就是一串有意义的符号</li>
</ul>
</li>
<li><strong>tokenization</strong> (<strong>分词</strong>)：我是中国人-&gt;[‘我’, ‘是’, ‘中国人’]<ul>
<li>一个token就是分词后列表中的一个元素</li>
</ul>
</li>
</ul>
</blockquote>
<p>下图是在序列标注的结果上加入了<em><a href="https://zhuanlan.zhihu.com/p/60531442" target="_blank" rel="noopener external nofollow noreferrer">part of speech tags</a></em>，<em>syntactic base-phrase chunk tags</em>，和一些shape的信息：</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926152815244.png" class="" title="加入特征">
<p>下图展示了一个基于特征的序列标注模型的运行方式。所有的箭头都是特征。在这里我们只考虑前后两个单词作为我们的上下文。这些所有的特征联合起来共同提供给classifier，并实现预测。</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926154923374.png" class="" title="运行示意">
<h2 id="基于神经网络的NER算法"><a href="#基于神经网络的NER算法" class="headerlink" title="基于神经网络的NER算法"></a>基于神经网络的NER算法</h2><p>标准的基于神经网络的NER算法，使用<strong>bi-LSTM</strong>作为模型。</p>
<blockquote>
<p>bi-LSTM是单独的一章，<em>Speech and Language Processing - 3rd</em>。</p>
</blockquote>
<p>注意到最上层仍然有CRF层，这是因为CRF对特征的处理更好，从而形成更好的输出序列。</p>
<img data-src="/%E4%B8%AD%E8%8D%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E7%BA%AA%E8%A6%81/image-20200926191745058.png" class="" title="bi-LSTM">
<h2 id="基于规则的NER算法"><a href="#基于规则的NER算法" class="headerlink" title="基于规则的NER算法"></a>基于规则的NER算法</h2><h1 id="CRF模型"><a href="#CRF模型" class="headerlink" title="CRF模型"></a>CRF模型</h1><h1 id="bi-LSTM模型"><a href="#bi-LSTM模型" class="headerlink" title="bi-LSTM模型"></a>bi-LSTM模型</h1><h1 id="BERT模型"><a href="#BERT模型" class="headerlink" title="BERT模型"></a>BERT模型</h1><h1 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h1><h1 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h1>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>乘波</title>
    <url>/%E4%B9%98%E6%B3%A2/</url>
    <content><![CDATA[<p>贝里接到任务的时候，他的研究小组已经迫不及待。</p>
<p>在研发出第3代<a href="https://baike.baidu.com/item/%E7%A3%81%E6%B5%81%E4%BD%93%E6%8E%A8%E8%BF%9B%E5%99%A8" target="_blank" rel="noopener external nofollow noreferrer">磁流体推进器</a>以后，他们果断地抛弃了磁流体这个已经榨不出更多营养的果子。没有谁比他们更清楚，这看似应用前途宽广的电磁学体系，现在已经受到巨大的限制了——一方面，希维政府缩减了放在运输工具的支出，先进武器的研制被放到了首位；另一方面，贝里知道，现在的<a href="http://blog.sciencenet.cn/blog-489092-734818.html" target="_blank" rel="noopener external nofollow noreferrer">小型核电</a>效率还不够高，如果希维政府一意孤行，不在基础科学上加大力度，即使研制出更先进的推进器也会因为动力不足而成为废铁一堆。他想着，开始兴奋起来，现在将要被接手的项目，是赶在突袭阿舍密的行动前，发展出新一代的马赫鱼雷。<a id="more"></a></p>
<p>贺雯将是他的助手。贺雯拥有一个工程力学硕士学位和一个固体火箭博士学位，她在马赫鱼雷上的造诣甚至比贝里更高，她曾经参与了初代马赫鱼雷的研制——为了利用海水航行时的<a href="https://zh.wikipedia.org/wiki/%E7%A9%BA%E7%A9%B4%E7%8F%BE%E8%B1%A1" target="_blank" rel="noopener external nofollow noreferrer">超空泡效应</a>，马赫鱼雷的思路自然而然地诞生了。简单而言，如果在航行时能够保持一定的速度，使得鱼雷前方的水汽化成为气态，笼罩在鱼雷的表面形成一层空泡，那么鱼雷的速度和效能会提高很多，这就是马赫鱼雷。贺雯这样说。</p>
<p>马赫鱼雷的研制，最开始是为了防范阿舍密盟军的水下快速潜艇编队，它们喜欢在夜深人静的时候到军事基地周围巡航——作为科研中心的格陵兰基地自然不会坐以待毙，格陵兰基地派遣了大量的侦查潜艇，它们发现除了<a href="https://zh.wikipedia.org/zh-hans/%E8%81%B2%E7%B4%8D" target="_blank" rel="noopener external nofollow noreferrer">声呐探测器</a>回波信号极其微弱之外，这批盟军编队的航行速度竟然比普通的编队快上约50%——它们追不上。侦查潜艇上的联络员很快把这个消息传回基地，很快引起了基地高层的重视。他们猜测盟军的潜艇可能采用了新一代的磁流体推进器——这属于它的显著特征。为了追上盟军编队的技术脚步，他们决定在武器和推进器两个方面都下下功夫。</p>
<p>贝里和贺雯很快来到他们的新工作区。在海水隔离的玻璃幕之外，他们看到了北冰洋上透出薄光的冰层，水底显得幽深静谧极了。可他们知道，在这表面的寂静背后，人们的情绪早已长时间处于高度紧张中了。他们小声地交谈起来，从对方的眼中看到了担忧的神色。</p>
<p>终于，门禁开启，从门里边走出了一位穿着白大褂的眼镜男。他收回手中深蓝色的门禁卡，打招呼道：“贝里教授，贺雯博士。我是主管‘乘波’项目的负责人，你们可以叫我费利。你们不用着急，虽然你们可能已经有所了解，但我还是给你们简单介绍一下我们的研究内容和研究进度吧……”贝里没有说话，他默认了；贺雯点头。</p>
<p>“我们关于‘乘波’项目的研究已经开展了15年，现在算是进行到了一个瓶颈期——我们在马赫鱼雷的操纵稳定性上遇到了巨大的问题——在马赫鱼雷的航行过程中，它的<a href="http://www.baike.com/wiki/%E5%8A%A8%E7%A8%B3%E5%AE%9A%E6%80%A7" target="_blank" rel="noopener external nofollow noreferrer">动稳定性</a>非常差，几乎无法操控——但相对的，它的静稳定性却相对较好，如果不加干扰的话，能命中目标的精确度比一般的鱼雷高很多……说到底，我们对空泡效应仍然不是了解得十分透彻。但是……”费利停了停，脸色严肃起来，他继续讲道，“当我们为飞控计算机更换了最新的量子逻辑单元以后，这些情况反而变得无关紧要。我们发现了一些更加难以解释的现象。”</p>
<p>“具体是什么？”贺雯作为参与过马赫鱼雷初期研制的人，更显得非常惊讶。</p>
<p>“我也不能准确描述，你们跟我来看看记录数据吧。”</p>
<p>他们三人一路进到实验室的深处，在一台巨型计算机面前停了下来，费利对着屏幕命令道：“水矩阵，展示一下之前我们记录的异常现象。”</p>
<p>“是的，水矩阵将展示2个星期内的异常标记。”屏幕两侧传来合成音。</p>
<p>贝里紧盯住了屏幕，他知道在接下来的数据中，很可能隐藏着他的研究小组之所以被调到这里来的根本原因。屏幕上显示的是非常平常的<a href="https://baike.baidu.com/item/%E6%B0%B4%E6%B4%9E" target="_blank" rel="noopener external nofollow noreferrer">水洞实验</a>，一架头部尖尖的马赫鱼雷的试验品被固定在水流管道的正中央，水流开始慢慢加速，荧光色的示踪染料从水源处被释放出来标示水的流动轨迹——水流在鱼雷的头部分开，又在尾部重新汇聚，只是荧光染料变得浑浊了一些。贝里认出这是附着面<a href="https://baike.baidu.com/item/%E8%BE%B9%E7%95%8C%E5%B1%82" target="_blank" rel="noopener external nofollow noreferrer">边界层</a>的<a href="https://zh.wikipedia.org/zh-hans/%E6%B9%8D%E6%B5%81" target="_blank" rel="noopener external nofollow noreferrer">湍流</a>化过程，在流体加速的过程中出现算是很平常的现象。</p>
<p>“不要着急，真正的异常现象在后面。”费利仿佛看出了贝里的疑虑，他补充道。</p>
<p>随着继续加速，鱼雷表面的压力不断降低——终于，在鱼雷的侧面出现了空泡，这层薄薄的空气层随流线向后扩展，形成长长的尾巴；越向后，又慢慢消融，在水中消失不见了。</p>
<p>贝里耐着性子等待费利口中的神奇现象，渐渐失去耐心；水流的速度很快地上升，这道长长的尾巴越拉越长，形成一个荧光色的漩涡区，边缘也开始摇摆起来。继续上升，荧光色变得恍惚起来，荧光的流线结成了片，薄薄地紧贴在鱼雷的表面，仿佛一副抽象的外翼。</p>
<p>就在这时，“异常”发生了。</p>
<p>在鱼雷头部的荧光直流区两侧的分流忽然消失，包裹在鱼雷侧表面的荧光薄膜也消失不见。乍一看，仿佛水流毫无阻碍地穿透了鱼雷——荧光流直接出现在了鱼雷的尾部。</p>
<p>“我们观测到了‘临界区’现象。”费利解说道，“我们把它叫做临界区。”</p>
<p>“水体穿透？……我不是很理解……”贺雯插话，她的声音许久保持沉默，这时忽然响起，引得两人的注意力集中过去，“在我参加第一代马赫鱼雷研制任务的时候，我们的水洞试验就已经达到这个速度了，却并没有发生这样的现象。”</p>
<p>“贺雯博士，我们不是来这里质疑的。”费利不屑地回应，他带着一种掌握信息者的自信感，“确实，这种现象只在第三代马赫鱼雷的身上出现。不过，这不是重点——希维推进科学部只希望我们研究这种现象可以如何加以利用，我们暂时不用关心更多。”</p>
<p>“这么说，你们还不知道它的本质？”贝里教授终于开口，他决定试探这个实验室的深浅。</p>
<p>“是的。但是我们已经初步确定，这极大概率与‘水矩阵’的升级有关。”</p>
<p>贺雯听到这里，打断道：“这明明是流体动力学的问题。”</p>
<p>“……我们一开始也是这么认为的，这看上去完全就是流体力学中的某种效应……众所周知，在五十多年前，我们的理论流体力学就已经发展到了一个瓶颈——经典流体力学像一块干燥的海绵，很难再挤出什么新的东西，当时的基本共识是——即使再费点劲，最多也只是在学术的大厦上再添上几只瓦片。”</p>
<p>“这一点，与电磁推进学有些相似。”</p>
<p>“是的，贝里教授。到现在，这种共识也没有发生改变，几乎演变成了‘事实’。”</p>
<p>“我认为……一种可能的解释是，马赫鱼雷产生了‘体系’效应。”贝里深思片刻，想到了他之前的经历，“多个学科系统的充分发展在同一种事物上的富集，可能会产生不同于单独的每一种系统的新特性……”</p>
<p>费利眼中一亮，“我们也有这种想法。如果是体系效应，我们反而不必去深入研究——这与我们目前的研究目的是一致的。”</p>
<p>“首先，在临界区，这种鱼雷具有很高的隐蔽性，它在水中产生的扰动最低。”</p>
<p>“其次……”</p>
<p>“先别着急。我倒想看看这跟水矩阵究竟有什么关系。”贝里说。</p>
<p>突然，屏幕闪动起来。</p>
<p>三人不约而同地望向水矩阵。</p>
<p>屏幕上输出了密密麻麻的文字，其中不乏数学公式。显然内容要远远超过屏幕的大小，开始快速地滚动起来。</p>
<p>贝里作为基础理论的研究者，在数学方面的建树当然深不可测，他敏锐地从数据流中侦测到了一系列的熟悉定义，其中有矩阵论、理论力学、代数几何、数学形态学……相比起来，另外两位的经验就不是这么丰富，他们吃惊地盯着屏幕，隐隐约约感到不安。</p>
<p>数据流持续地输出，现在开始输出了一些连贝里也有些不明所以的定义和记号，还有随之而来的<a href="https://www.mathopenref.com/qed.html" target="_blank" rel="noopener external nofollow noreferrer">QED</a>。贝里费劲地从中找到双吸引子、自旋流，好像是量子力学，又不完全是那么回事。</p>
<p>但随着屏幕的持续滚动，贝里终于败下阵来——这下他是全然不知所云了。</p>
<p>就这样，数据流输出了足足有半个小时，在其间三个人沉默，一言不发。</p>
<p>屏幕终于缓慢地停了下来，好像一个绞尽脑汁的证明家费力地写出最后的步骤，屏幕上一点一点地输出了最后的一行字。</p>
<blockquote>
<p>若菲密特KST循环定理，则超尔湍三增秩，秩湍维透射，故存在临界区。</p>
</blockquote>
<p>“我不明白……”贺雯试探性地首先开口。</p>
<p>在三个人中她的数学造诣最潜，受到的震撼也最少。</p>
<p>这些字句是水矩阵产生的。可是却理解不了。</p>
<p>就好像大学时代的数学课本一样，写下了简洁有力的天书。</p>
<p>“总共有多少？”贝尔问费利。</p>
<p>费利在终端上查询了缓存容量，“大约3.5TB。”</p>
<p>3.5TB是多少？大约相当于一千万本书籍的容量。仅仅是从头到尾地读一遍，也需要三千年之久！</p>
<p>水矩阵是怎么得出来的呢？</p>
<p>似乎是确定的，然而又复杂到不可能通过思考来检验——实在是太长了。</p>
<p>这样子，各位都显得郁郁极了。</p>
<hr>
<p>理论的脚步并不能阻挡实践的步伐。不是有那么一句古话么——“实践是检验真理的唯一标准”！真实的道理，和真正的道理，显然不是那么一回事。可惜人们不明白。</p>
<p>无论如何。马赫鱼雷研制并没有因为临界区现象的出现而受到停滞。研究小组加快了步伐。</p>
<p>终于，他们在第二年的夏天完成了“乘波1号”的研制。</p>
<p>这样，乘波系列的历史开启了。</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到1</title>
    <url>/%E4%BB%8E0%E5%88%B01/</url>
    <content><![CDATA[<p>“师傅领进门，修行在个人。”做一件事最大的阻碍，往往在一开始。<a id="more"></a></p>
<h1 id="意识到存在"><a href="#意识到存在" class="headerlink" title="意识到存在"></a>意识到存在</h1><h1 id="搜集资料"><a href="#搜集资料" class="headerlink" title="搜集资料"></a>搜集资料</h1><h1 id="记忆和思考"><a href="#记忆和思考" class="headerlink" title="记忆和思考"></a>记忆和思考</h1>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
  </entry>
  <entry>
    <title>做个随想录</title>
    <url>/%E5%81%9A%E4%B8%AA%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
    <content><![CDATA[<p>受到 <a href="https://hitokoto.cn/" target="_blank" rel="noopener external nofollow noreferrer">Hitokoto 一言</a> 的启发。前几日看到一个博主：<a href="https://blog.l0v0.com/" target="_blank" rel="noopener external nofollow noreferrer">智伤帝</a>。动了念头。<a id="more"></a></p>
<p>目标：一个可以动态维护的文字系统，前端进行展示和传输，后端进行存储和处理。</p>
<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>使用 SQLite 创建所需的数据库存储系统。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> idea;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> idea (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">content</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    author <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> 佚名,</span><br><span class="line">    description <span class="built_in">TEXT</span>,</span><br><span class="line">    origin <span class="built_in">TEXT</span>, </span><br><span class="line">    create_time <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    update_time <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    stars <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入新的条目</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> idea (<span class="keyword">content</span>, author, description, origin, create_time, update_time) </span><br><span class="line">    <span class="keyword">VALUES</span>(<span class="string">"hello world."</span>, <span class="string">"vel"</span>, <span class="string">"The first commit of all time."</span>, <span class="string">"https://vel.life"</span>, DateTime(<span class="string">'now'</span>), DateTime(<span class="string">'now'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> idea <span class="keyword">SET</span> <span class="keyword">content</span> = <span class="string">"hello world!"</span>, update_time = DateTime(<span class="string">'now'</span>) <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有人点赞</span></span><br><span class="line"><span class="keyword">UPDATE</span> idea <span class="keyword">SET</span> stars = stars + <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="前端的选择"><a href="#前端的选择" class="headerlink" title="前端的选择"></a>前端的选择</h1><ul>
<li><a href="https://mattboldt.github.io/typed.js/" target="_blank" rel="noopener external nofollow noreferrer"><code>typed.js</code></a> 打字机</li>
<li><a href="https://www.prisma.io/" target="_blank" rel="noopener external nofollow noreferrer"><code>prisma.js</code></a> 数据库操作</li>
</ul>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>人工智能中的“新”数学</title>
    <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<p><a href="https://www.stat-center.pku.edu.cn/zxry/zxjy/lw/1227407.htm" target="_blank" rel="noopener external nofollow noreferrer">林伟</a>在《人工智能的新数学》主题报告中，指出人工智能中经典的数学工具，有以下四类：</p>
<ul>
<li>概率论、数理统计；</li>
<li>数值代数、数值分析、最优化；</li>
<li>经典分析、函数论（比如深度学习的逼近论相关知识）；</li>
<li>计算机科学基础，包括离散数学、理论计算机科学。</li>
</ul>
<p>经典数学工具对于学生而言，是最应该掌握、最核心的工具。</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222160231066.png" class="" title="人工智能中的“旧”数学">
<a id="more"></a>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://mp.weixin.qq.com/s/ElJN4nK3ByQ2ulxgq4qJvw" target="_blank" rel="noopener external nofollow noreferrer">AI的十种”新数学“</a></p>
<iframe src="//player.bilibili.com/player.html?aid=927809167&bvid=BV1dK4y1Z7uQ&cid=257459123&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><a href="https://www.bilibili.com/video/BV1954y1r7UU" target="_blank" rel="noopener external nofollow noreferrer">林宙辰-下一代机器学习</a></p>
<blockquote>
<p>这里面也提到了人脑的系统1和系统2（系统1 / Intuitive 是现在的深度学习，系统2 / Logical 是未来的研究方向）。</p>
</blockquote>
<p><a href="https://www.zhihu.com/column/eleven-dimension-math" target="_blank" rel="noopener external nofollow noreferrer">Meet in Maths</a></p>
<h1 id="泛函分析"><a href="#泛函分析" class="headerlink" title="泛函分析"></a>泛函分析</h1><p><a href="https://vel.life/%E6%B3%9B%E5%87%BD%E5%88%86%E6%9E%90/" target="_blank" rel="noopener external nofollow noreferrer">泛函分析</a></p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/50118911" target="_blank" rel="noopener external nofollow noreferrer">从度量空间、线性空间到希尔伯特空间- 知乎</a></p>
<p><a href="https://jishuin.proginn.com/p/763bfbd31a95" target="_blank" rel="noopener external nofollow noreferrer">度量、范数和内积原来是这么个关系</a></p>
<p><a href="http://www.fanyeong.com/2017/11/13/the-kernel-trick/" target="_blank" rel="noopener external nofollow noreferrer">核技巧（The Kernel Trick） | 范永勇</a></p>
</blockquote>
<h2 id="巴拿赫空间"><a href="#巴拿赫空间" class="headerlink" title="巴拿赫空间"></a>巴拿赫空间</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/113197869" target="_blank" rel="noopener external nofollow noreferrer">希尔伯特空间</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222155504083.png" class="" title="巴拿赫空间">
<p><strong><font color=red>度量</font></strong>：$X$是一个集合，度量是$X$上的一个<strong>二元关系</strong>（$X \times X \rightarrow R$），对于任意的 $x, y, z \in X$：</p>
<ul>
<li>非负：$\rho(x, y) \geq 0$，（非退化）当且仅当 $x=y$ 时等号成立</li>
<li>对称：$\rho(x, y)=\rho(y, x)$</li>
<li>三角不等式：$\rho(x, z) \leq \rho(x, y)+\rho(y, z)$ 。</li>
</ul>
<p><strong><font color=red>范数</font></strong>：范数是一种线性空间上的度量，它还满足</p>
<ul>
<li>齐次：对于所有 $\mathbf{v} \in V$ 和 $\lambda \in \mathbb{R},$ 有 $|\lambda \mathbf{v}|=|\lambda| \cdot | \mathbf{v} |$</li>
</ul>
<p><strong><font color=red>内积</font></strong>：内积是一种线性空间上的范数，它还满足</p>
<ul>
<li>分配律：对于所有向量 $\mathbf{u}, \mathbf{v}, \mathbf{w} \in V,$ 都有 $\langle\mathbf{v}, \mathbf{w}+\mathbf{u})=\langle\mathbf{v}, \mathbf{w}\rangle+\langle\mathbf{v}, \mathbf{u}\rangle$</li>
</ul>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/fec6278793691d25ee4a3edf89eff904.webp" class="" title="度量空间，赋范空间，内积空间">
<blockquote>
<p><strong><font color=blue>核技巧</font></strong>（Kernel Trick）就是一种内积。</p>
<script type="math/tex; mode=display">
K(x, y)=\langle\phi(x), \phi(y)\rangle</script><p>其中，$\phi(x)$是指将样本向量 $x$ <strong>从输入空间映射到特征空间</strong>（希尔伯特空间），从而在高维线性可分。因为我们不需要知道$\phi(x)$的具体形式，所以可以直接通过定义核函数$K(x,y)$的方式获得$\phi(x)$的隐式定义。</p>
<p>Q: 那么如何确定 $\phi(x)$ 映射到一个高维空间呢？</p>
<blockquote>
<p>A: 这部分需要查阅核函数的理论推导。</p>
<p>比如，</p>
<ul>
<li>线性核，其实就是没有映射<ul>
<li>$\kappa\left(x<em>{1}, x</em>{2}\right)=\langle x 1, x 2\rangle$</li>
</ul>
</li>
<li><strong><font color=red>高斯核</font></strong>函数，也称径向基(RBF)函数，使用最为广泛，<strong>它能够把原始特征映射到<font color=red>无穷维</font></strong><ul>
<li>$\kappa\left(x<em>{1}, x</em>{2}\right)= \exp \left(-\gamma\left|\mathbf{x}<em>{1}-\mathbf{x}</em>{2}\right|_{2}^{2}\right)$</li>
</ul>
</li>
<li>多项式核函数，它能把数据映射到$C_{n+d}^{n}$维<ul>
<li>$\kappa\left(x<em>{1}, x</em>{2}\right)=\left(\left\langle x<em>{1}, x</em>{2}\right\rangle+R\right)^{d}$</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<p><strong><font color=red>完备</font></strong>：一个完备空间中的任何<a href="https://zh.wikipedia.org/wiki/柯西序列" target="_blank" rel="noopener external nofollow noreferrer">柯西序列</a>都收敛在该空间之内。</p>
<h2 id="从函数到无穷维"><a href="#从函数到无穷维" class="headerlink" title="从函数到无穷维"></a>从函数到无穷维</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/135898326" target="_blank" rel="noopener external nofollow noreferrer"><strong>RBF 核函数背后隐藏着怎样的映射？</strong></a></p>
<p><a href="https://www.zhihu.com/question/39890018" target="_blank" rel="noopener external nofollow noreferrer">如何理解「函数可以看成是一个无限维的向量」？</a></p>
<p><a href="http://www.360doc.com/content/19/1110/15/39821762_872262517.shtml" target="_blank" rel="noopener external nofollow noreferrer">重新理解函数空间（上）</a></p>
<p><a href="https://charlesliuyx.github.io/2018/02/18/%E3%80%90%E7%9B%B4%E8%A7%82%E8%AF%A6%E8%A7%A3%E3%80%91%E8%AE%A9%E4%BD%A0%E6%B0%B8%E8%BF%9C%E5%BF%98%E4%B8%8D%E4%BA%86%E7%9A%84%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener external nofollow noreferrer">【直观详解】让你永远忘不了的傅里叶变换解析</a> Fourier 变换是将时域信号转换为频域信号，Fourier 解析是将频域信号转换为时域信号。</p>
</blockquote>
<h3 id="脉冲"><a href="#脉冲" class="headerlink" title="*脉冲"></a>*脉冲</h3><blockquote>
<p><a href="https://vel.life/%E7%AE%97%E6%B3%95-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90%EF%BC%9A%E4%BB%B7%E6%A0%BC%E6%82%96%E8%AE%BA/" target="_blank" rel="noopener external nofollow noreferrer">摊还分析：价格悖论</a></p>
</blockquote>
<p><strong><font color=red>脉冲函数</font></strong>：<a href="https://zh.wikipedia.org/wiki/%E7%8B%84%E6%8B%89%E5%85%8B%CE%B4%E5%87%BD%E6%95%B0" target="_blank" rel="noopener external nofollow noreferrer">Dirac函数</a>。</p>
<hr>
<h3 id="高斯核背后的映射"><a href="#高斯核背后的映射" class="headerlink" title="高斯核背后的映射"></a>高斯核背后的映射</h3><p>不妨设在一维空间。如图，两个样本点：</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/v2-16a0a97ac9453977c13d1ee527eca0c2_720w.jpg" class="" title="两个样本点">
<p>将点映射成一个函数 / 分布：（类傅里叶解析）</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/v2-04a7af5f35589b958b83e9e56ba5f124_720w.jpg" class="" title="函数">
<p>此时，函数空间构成了一个无穷维空间。</p>
<blockquote>
<p>可以想象一个<strong>无限细分的柱形图</strong>，每一根立柱就是一个维度。</p>
</blockquote>
<p>比如，将样本${\color{red}{x_1} },{\color{blue}{x_2} }$映射为两个高斯分布，</p>
<script type="math/tex; mode=display">
\begin{equation}
f_{1}(x)=\exp \left[-\frac{\left(x-{\color{red}{x_{1} } }\right)^{2}}{2 \sigma^{2}}\right], \quad f_{2}(x)=\exp \left[-\frac{\left(x-{\color{blue}{x_{2} } }\right)^{2}}{2 \sigma^{2}}\right]
\end{equation}</script><p>定义函数内积为相乘后的积分：</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
K\left(x_{1}, x_{2}\right) &=\left\langle\phi\left(x_{1}\right), \phi\left(x_{2}\right)\right\rangle=\left\langle f_{1}, f_{2}\right\rangle \\
&=\int_{\infty}^{+\infty} f_{1}(x) f_{2}(x) \mathrm{d} x \\
&=\int_{-\infty}^{+\infty} \exp \left[-\frac{\left(x-x_{1}\right)^{2}}{2 \sigma^{2}}\right] \cdot \exp \left[-\frac{\left(x-x_{2}\right)^{2}}{2 \sigma^{2}}\right] \mathrm{d} x \\
&=\int_{\infty}^{+\infty} \exp \left[-\frac{2 x^{2}-2\left(x_{1}+x_{2}\right) x+\left(x_{1}^{2}+x_{2}^{2}\right)}{2 \sigma^{2}}\right] \mathrm{d} x \\
&=\int_{\infty}^{+\infty} \exp \left\{-\frac{1}{\sigma^{2}}\left[\left(x-\frac{x_{1}+x_{2}}{2}\right)^{2}+\left(\frac{x_{1}-x_{2}}{2}\right)^{2}\right]\right\} \mathrm{d} x \\
&={\color{red}{\int_{-\infty}^{+\infty} \exp \left(-\frac{x^{2}}{\sigma^{2}}\right) \mathrm{d} x} } \cdot \exp \left[-\frac{\left(x_{1}-x_{2}\right)^{2}}{4 \sigma^{2}}\right] \\
&=\sqrt{\pi} \sigma \cdot \exp \left[\frac{\left(x_{1}-x_{2}\right)^{2}}{4 \sigma^{2}}\right]
\end{aligned}
\end{equation}</script><p>忽略掉系数，就得到了一个高斯核。</p>
<h2 id="无穷宽的DNN"><a href="#无穷宽的DNN" class="headerlink" title="无穷宽的DNN"></a>无穷宽的DNN</h2><blockquote>
<p><a href="https://arxiv.org/abs/2007.15623" target="_blank" rel="noopener external nofollow noreferrer">On the Banach spaces associated with multi-layer ReLU networks: Function representation, approximation theory and gradient descent dynamics</a></p>
<blockquote>
<p><strong>We develop Banach spaces for ReLU neural networks of finite depth L and infinite width</strong>. The spaces contain all finite fully connected L-layer networks and their L2-limiting objects under bounds on the natural path-norm. Under this norm, the…</p>
</blockquote>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222151629104.png" class="" title="无穷宽网络">
<p>因为宽度无穷宽，就构成了一个无穷维的巴纳赫空间（完备的赋范线性空间）。</p>
<h1 id="群表示论与范畴论"><a href="#群表示论与范畴论" class="headerlink" title="群表示论与范畴论"></a>群表示论与范畴论</h1><p><a href="https://vel.life/抽象代数基础/" target="_blank" rel="noopener external nofollow noreferrer">抽象代数基础</a></p>
<p><a href="https://vel.life/%E7%BE%A4%E8%A1%A8%E7%A4%BA%E8%AE%BA/" target="_blank" rel="noopener external nofollow noreferrer">群表示论</a></p>
<p><a href="https://vel.life/%E8%8C%83%E7%95%B4%E8%AE%BA/" target="_blank" rel="noopener external nofollow noreferrer">范畴论</a></p>
<blockquote>
<p><a href="https://www.math.arizona.edu/~xuehang/rep_notes.pdf" target="_blank" rel="noopener external nofollow noreferrer">中国科学院暑假学校讲义: 群表示论的一些小知识</a></p>
</blockquote>
<h2 id="关于群的研究"><a href="#关于群的研究" class="headerlink" title="关于群的研究"></a>关于群的研究</h2><blockquote>
<p><a href="https://mp.weixin.qq.com/s/-bxH9Sp9_p2sK8VlAxZslQ" target="_blank" rel="noopener external nofollow noreferrer">一个半世纪的征程—有限单群分类定理（上）</a></p>
<p><a href="https://mp.weixin.qq.com/s/hErfHxgNO9Zjk_XlBus7Tw" target="_blank" rel="noopener external nofollow noreferrer">24维晶体中特有的对称—-有限单群分类定理（中）</a></p>
<p><a href="https://mp.weixin.qq.com/s/JtAZmfKHrsmf6lUtM48VgQ" target="_blank" rel="noopener external nofollow noreferrer">月光下的群魔—有限单群分类定理（下）</a></p>
<p><a href="https://fwjmath.wordpress.com/2011/09/15/finite-simple-group-history/" target="_blank" rel="noopener external nofollow noreferrer">有限单群：一段百年征程</a></p>
</blockquote>
<p>一个群就是一个代数系统。</p>
<p>现代数学研究群的结构一般有两种方法：</p>
<ul>
<li><strong><font color=blue>研究子群</font></strong><ul>
<li>3b1b视频：<a href="https://www.bilibili.com/video/BV1Rh411R7KL" target="_blank" rel="noopener external nofollow noreferrer">群论与 808017424794512875886459904961710757005754368000000000</a></li>
<li>对有限群的基本群即单群（Simple groups）进行分类<ul>
<li>有限群就是有限个元素构成的群</li>
<li>2004年由一篇100多位数学家写成的1200多页的Paper收尾<ul>
<li>$\Longrightarrow$ 有限单群分类定理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222222935682.png" class="" title="单群的分类">
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222225431590.png" class="" title="有限单群周期表 - 大老李谈数学">
<ul>
<li><strong><font color=blue>研究群的表示</font></strong><ul>
<li>群的表示就是把给定的群$G$同态地映到另一个群$W$的操作（同态就是<strong>保持运算</strong>）。<ul>
<li>通过不同的表示，我们可以通过各种熟悉的$W$，来从不同的角度观察$G$的性质，从而认识未知的事物</li>
<li>什么样的群表示最值得研究？<ul>
<li>不可约表示：一个表示被称作不可约的，当且仅当它没有在G的作用下不变的非平凡子空间。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>同态映射反映了两个代数系统的<strong>被映射部分</strong>的局部相似性（即同种规律在不同体系下的表示）。</p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/1549049058360.png" class="" title="同态映射">
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/1549049282169.png" class="" title="同态满射">
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/1549049512585.png" class="" title="同构映射">
<h2 id="从图到范畴论"><a href="#从图到范畴论" class="headerlink" title="从图到范畴论"></a>从图到范畴论</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/108528537" target="_blank" rel="noopener external nofollow noreferrer">范畴论简史- 知乎</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E8%AE%8A%E6%8F%9B" target="_blank" rel="noopener external nofollow noreferrer">自然变换</a></p>
</blockquote>
<p>范畴论使用图论作为描述工具，节点表示一个<strong>对象</strong>，有向边表示<strong>态射</strong>，整个图构成一个<strong>范畴</strong>。</p>
<blockquote>
<p>范畴，就是具有代数结构的有向图。</p>
</blockquote>
<p>范畴论是“数学的数学”，它试图研究各种数学结构之间的联系和共性。</p>
<p><strong><font color=red>函子</font></strong>（Functor）：如果范畴本身也作为一个对象，那么就可以创造更高阶的范畴，在这样的高阶范畴中的态射称为函子。</p>
<p><strong><font color=red>自然变换</font></strong>：把函子也作为一个对象，函子和函子间的态射就称为自然变换。</p>
<blockquote>
<p>设C和D是范畴，F和G是C和D之间的函子。一个从F到G 的自然变换η，对C中每个对象，给出一个在D的对象间的态射ηX : F(X) → G(X)，称为η在X处的分量（component），使得对C中每个态射f : X → Y都有：</p>
</blockquote>
<script type="math/tex; mode=display">
\eta_{Y} \circ F(f)=G(f) \circ \eta_{X}</script><img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/175px-Natural_transformation.svg.png" class="" title="自然变换示例">
<h2 id="DNN中的对称性、函子"><a href="#DNN中的对称性、函子" class="headerlink" title="DNN中的对称性、函子"></a>DNN中的对称性、函子</h2><blockquote>
<p><a href="https://arxiv.org/abs/2008.01805" target="_blank" rel="noopener external nofollow noreferrer">Analytic Characterization of the Hessian in Shallow ReLU Models: A Tale of Symmetry</a></p>
<p><a href="https://arxiv.org/abs/1711.10455" target="_blank" rel="noopener external nofollow noreferrer">Backprop as Functor: A compositional perspective on supervised learning</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222201729074.png" class="" title="群表示论与范畴论示例">
<p>神经网络中存在一些冗余，这些冗余可以利用群表示论的技术进行一些修剪。</p>
<p>函子（Functor）适合于用来表达函数的复合。</p>
<h1 id="微分几何"><a href="#微分几何" class="headerlink" title="微分几何"></a>微分几何</h1><blockquote>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-642-00826-9_4" target="_blank" rel="noopener external nofollow noreferrer">Information Geometry and Its Applications: Convex Function and Dually Flat Manifold</a></p>
<p><a href="https://www.bilibili.com/video/BV1Lb411g7nL" target="_blank" rel="noopener external nofollow noreferrer">A Thorough Introduction to The Theory of General Relativity</a> 前12节课</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-96992-3" target="_blank" rel="noopener external nofollow noreferrer">A Visual Introduction to Differential Forms and Calculus on Manifolds</a></p>
</blockquote>
<h2 id="微分流形"><a href="#微分流形" class="headerlink" title="微分流形"></a>微分流形</h2><p><strong><font color=red>流形</font></strong>（Manifold）：可以局部欧几里得空间化的一个拓扑空间。</p>
<blockquote>
<p>希尔伯特空间就是欧几里得空间推广到无穷维。</p>
<p>比如，李群是一个在拓扑群上加上了微分结构的代数结构，让拓扑群的拓扑空间成为<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%88%86%E6%B5%81%E5%BD%A2" target="_blank" rel="noopener external nofollow noreferrer">微分流形</a>。</p>
<p>李群既是群也是流形。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/51199404" target="_blank" rel="noopener external nofollow noreferrer">MP67：典型群(1)：拓扑性质</a></p>
</blockquote>
</blockquote>
<p>可微流形上的微积分研究被称为<strong>微分几何</strong>，利用微积分理论研究空间的几何性质。</p>
<h2 id="深度学习的几何解释"><a href="#深度学习的几何解释" class="headerlink" title="深度学习的几何解释"></a>深度学习的几何解释</h2><blockquote>
<p><a href="https://arxiv.org/abs/1805.10451" target="_blank" rel="noopener external nofollow noreferrer">Geometric Understanding of Deep Learning</a> 顾险峰团队</p>
<p><a href="https://arxiv.org/abs/1710.05488" target="_blank" rel="noopener external nofollow noreferrer">A Geometric View of Optimal Transportation and Generative Model</a></p>
</blockquote>
<p><strong><font color=red>流形分布律</font></strong>：不同的类对应着流形上的不同概率分布，这些分布之间的距离大到足够将这些类区分。 </p>
<blockquote>
<p>顾险峰在公众号文章《<a href="https://mp.weixin.qq.com/s/v9kXLFp_lZziT4er9n2HFQ" target="_blank" rel="noopener external nofollow noreferrer">基本工程问题是否需要前沿几何理论？</a>》中提到：</p>
<blockquote>
<p>大数据的本质模式可以概括为如下的物理定则（Physics law）：</p>
<ul>
<li><strong><font  color=blue>一类自然数据可以被视作嵌入在高维空间中的低维流形上的概率分布</font>。</strong></li>
</ul>
<p>深度学习具有两个主要任务：</p>
<ul>
<li>一是<strong>学习流形结构</strong>，表示为编码和解码映射，流形的参数空间就是隐空间或者特征空间；</li>
<li>二是<strong>概率分布变换</strong>，即将白噪声变换成数据分布。</li>
</ul>
<p>深度神经网络的唯一功能就是表达欧式空间之间的连续映射，因此在统计深度学习领域，所有的数据都被表示成映射，概率分布也被表示成映射，即从白噪声到给定概率分布间的传输变换（transportation map）。由此，<strong>统计深度学习可以由范畴语言来表述</strong>，其范畴为{流形上的概率分布，流形间的映射}。</p>
</blockquote>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222202014577.png" class="" title="微分几何示例">
<p>利用流形上的数学来研究GAN中从输入到输出之间的一些关系。</p>
<h1 id="计算共形几何与最优传输"><a href="#计算共形几何与最优传输" class="headerlink" title="计算共形几何与最优传输"></a>计算共形几何与最优传输</h1><p><a href="https://vel.life/%E8%AE%A1%E7%AE%97%E5%85%B1%E5%BD%A2%E5%87%A0%E4%BD%95/" target="_blank" rel="noopener external nofollow noreferrer">计算共形几何</a></p>
<blockquote>
<p><a href="https://www.jiqizhixin.com/articles/2018-11-09-5" target="_blank" rel="noopener external nofollow noreferrer">WGAN-div：默默无闻的WGAN填坑者| 附开源代码| 机器之心</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/58506295" target="_blank" rel="noopener external nofollow noreferrer">Wasserstein Distance 讲解</a></p>
</blockquote>
<h2 id="最优传输散度"><a href="#最优传输散度" class="headerlink" title="最优传输散度"></a>最优传输散度</h2><p><strong><font color=red>最优传输</font></strong>的问题便是，有两个概率分布，怎样从一个概率分布迁移到另外一个概率分布？所以它也叫“推土机”，类似推土机一样把分布以最小的代价变成另外一个概率分布；目标是要解一个问题，每一点移动有一个代价，要使得这个移动总代价是最低的。</p>
<p>最优传输可以用来描述两个概率分布之间的距离，称为<strong>最优传输散度</strong>，即：<a href="https://zhuanlan.zhihu.com/p/58506295" target="_blank" rel="noopener external nofollow noreferrer"><strong>Wasserstein Distance</strong></a>。跟统计学中KL散度的作用类似；但是，KL散度有一些缺陷：没有对称性，无法衡量离散分布和连续分布的距离……</p>
<script type="math/tex; mode=display">
\begin{equation}
W_{p}(\mu, \nu)=\left(\inf _{\gamma \in \Gamma(\mu, \nu)} \int_{\mathcal{X} \times \mathcal{X}}\|x-y\|^{p} d \gamma(x, y)\right)^{1 / p}
\end{equation}</script><img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/v2-6ad7768d4f98dfe0b9739ba9f0bf3390_720w.jpg" class="" title="最优传输示例 - 知乎@张楚珩">
<h2 id="GAN的模式崩溃"><a href="#GAN的模式崩溃" class="headerlink" title="GAN的模式崩溃"></a>GAN的模式崩溃</h2><blockquote>
<p><a href="https://arxiv.org/abs/1803.00567" target="_blank" rel="noopener external nofollow noreferrer">Computational Optimal Transport</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222215836927.png" class="" title="最优传输示例">
<hr>
<p>最优传输特别适合用来描述对抗生成网络（GAN）里面的问题。</p>
<blockquote>
<p>这部分研究也是顾险峰团队在推动。</p>
</blockquote>
<p>GAN的训练中有一种被称为<strong><font color=blue>模式崩溃</font></strong>（Mode Collapsing）的现象。GNN在学习多模态（mode）的分布时，经常只能收敛到其中的部分模态。即使经过正则一类的措施能够让GAN覆盖所有模态，却会生成虚假的样本。</p>
<p>顾险峰团队认为，其中的本质原因是，<strong>深度神经网络只能表示连续映射，而最优传输映射整体是非连续的</strong>。</p>
<h1 id="代数几何"><a href="#代数几何" class="headerlink" title="代数几何"></a>代数几何</h1><p>代数几何的基本研究对象是在任意维数的（仿射或射影）空间中，由若干个代数方程的公共零点所构成的集合的几何特性。</p>
<h2 id="热带几何"><a href="#热带几何" class="headerlink" title="热带几何"></a>热带几何</h2><blockquote>
<p><a href="https://arxiv.org/abs/1805.07091" target="_blank" rel="noopener external nofollow noreferrer">Tropical Geometry of Deep Neural Networks</a></p>
</blockquote>
<p>热带几何是<strong>分片线性化</strong>的代数几何。</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222202401528.png" class="" title="热带几何">
<p>因为ReLU函数是{X,0}取大，通过这个取大操作以及加法、减法，定义了一些热带几何上的运算，通过这几种预算，我们就可以定义一种多项式。多项式就涉及到了代数几何的研究范畴。</p>
<h1 id="计算机代数"><a href="#计算机代数" class="headerlink" title="计算机代数"></a>计算机代数</h1><p><a href="https://vel.life/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%A3%E6%95%B0/" target="_blank" rel="noopener external nofollow noreferrer">计算机代数</a></p>
<blockquote>
<p><a href="https://vel.life/第二届AI与安全研讨会/" target="_blank" rel="noopener external nofollow noreferrer">第二届 AI 与安全研讨会</a></p>
</blockquote>
<h2 id="向量空间、符号空间"><a href="#向量空间、符号空间" class="headerlink" title="向量空间、符号空间"></a>向量空间、符号空间</h2><p>在第三代人工智能模型中，指出两天发展人工智能的道路：</p>
<ul>
<li>继续研究<strong><font color=deepskyblue>向量空间</font></strong><ul>
<li>最大挑战：<strong>语义丢失问题</strong></li>
</ul>
</li>
<li>走回知识驱动 + 数据驱动 $\longrightarrow$ <strong><font color=deepskyblue>符号空间</font></strong><ul>
<li><strong>在符号空间中，数学工具有限</strong><ul>
<li>朱军：符号空间的数学工具，将来大家将学习离散数学（<strong>数理逻辑</strong>），CS的还要学<strong>形式语言与自动机</strong>，<strong>组合数学</strong>，<strong>图论</strong>等相关课程，<strong>抽象代数</strong>（群、环、域）也相关</li>
</ul>
</li>
<li>缺少知识</li>
</ul>
</li>
</ul>
<h2 id="多项式代数"><a href="#多项式代数" class="headerlink" title="多项式代数"></a>多项式代数</h2><p>计算机代数主要指多项式代数，它实现了无精度损失的<strong>符号计算</strong>。属于符号空间中的数学工具。</p>
<p>计算机代数中常用的方法有<strong>Groebner基</strong>，<strong>三角列</strong>和<strong>柱形代数分解</strong>。</p>
<p>机器证明的底层数学工具就是计算机代数。</p>
<h1 id="随机矩阵"><a href="#随机矩阵" class="headerlink" title="随机矩阵"></a>随机矩阵</h1><blockquote>
<p><a href="https://arxiv.org/abs/1702.05419" target="_blank" rel="noopener external nofollow noreferrer">A Random Matrix Approach to Neural Networks</a></p>
<p><a href="https://papers.nips.cc/paper/6857-nonlinear-random-matrix-theory-for-deep-learning.pdf" target="_blank" rel="noopener external nofollow noreferrer">Nonlinear random matrix theory for deep learning - NIPS</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/37591888" target="_blank" rel="noopener external nofollow noreferrer">随机矩阵理论(RMT)综述</a></p>
</blockquote>
<p><strong><font color=red>随机矩阵</font></strong>：一个矩阵中的所有元素都是随机变量。</p>
<p><strong><font color=red>经验谱分布函数</font></strong>（ESD）：设 $\mathrm{A}$ 是一个具有 $n$ 个实特征根的 $n$ 阶方阵，记其特征根为 $\lambda<em>{1}, \cdots, \lambda</em>{n}$。这些特征根的分布可以用以下函数$F_n(x)$表示，称为方阵 $\mathrm{A}$ 的经验分布函数。（$I$ 为指示函数）</p>
<script type="math/tex; mode=display">
\begin{equation}
F_{n}(x)=\frac{1}{n} \sum_{k=1}^{n} I\left(\lambda_{k} \leqslant x\right)
\end{equation}</script><img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222202947031.png" class="" title="随机矩阵示例">
<p>大型神经网络的权值在某些情况下接近于随机分布。可以利用随机矩阵理论来刻画它的谱分布的一些性质。</p>
<h1 id="动力系统与随机分析"><a href="#动力系统与随机分析" class="headerlink" title="动力系统与随机分析"></a>动力系统与随机分析</h1><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/31852747" target="_blank" rel="noopener external nofollow noreferrer">你必须要知道CNN模型：ResNet</a></p>
</blockquote>
<p>ResNet的作者何凯明因为ResNet工作摘得CVPR2016最佳论文奖。</p>
<p>深度神经网络在加深层数时，除了过拟合、梯度消亡、爆炸的问题以外，还会遇到退化的问题（Degradation problem）。</p>
<p><strong><font color=red>残差学习</font></strong>（Residual learning）：定义学习到的特征为$H(x)$，而残差为$F(x)=H(x)-x$。现在神经网络学习$F(x)$ instead of $H(x)$。</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/ResNetUnit.png" class="" title="ResNet单元">
<blockquote>
<p>通过引入短路机制，残差网络的内部结构只需学习残差。当残差为0时，变为恒等映射。</p>
<p>因为残差的数量级较小，映射对于残差微小的变化较为敏感。</p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/v2-7cb9c03871ab1faa7ca23199ac403bd9_720w.jpg" class="" title="ResNet网络结构图">
<h2 id="相平面图"><a href="#相平面图" class="headerlink" title="相平面图"></a>相平面图</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/119390532" target="_blank" rel="noopener external nofollow noreferrer">非线性控制（二）相平面法</a></p>
</blockquote>
<p>相平面法是一种基于时域的分析方法。表示有两个独立变量的系统（二阶系统）的轨迹。</p>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/v2-00f2369204775ba6f2dd1f3741f539eb_r.jpg" class="" title="相平面图示例">
<h2 id="郎之万动力学"><a href="#郎之万动力学" class="headerlink" title="郎之万动力学"></a>郎之万动力学</h2><p>朗之万动力学 ( Langevin Dynamics ) 是控制模拟系统能量的一种常用算法。</p>
<p>在模拟一个大型系统时，误差会逐渐积累，朗之万动力学的实现方法是在系统中加入<strong>耗散力</strong>和<strong>随机力</strong>（相当于引入布朗运动），弱化系统误差，使得系统保持一定的平衡状态。</p>
<h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><blockquote>
<p><a href="https://arxiv.org/abs/1705.03341" target="_blank" rel="noopener external nofollow noreferrer">Stable Architectures for Deep Neural Networks</a></p>
<p><a href="https://arxiv.org/abs/1702.03849" target="_blank" rel="noopener external nofollow noreferrer">Non-convex learning via Stochastic Gradient Langevin Dynamics: a nonasymptotic analysis</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222215911981.png" class="" title="动力系统示例">
<p>动力系统主要是指稳定性的内容。<a href="https://arxiv.org/abs/1705.03341" target="_blank" rel="noopener external nofollow noreferrer">Stable Architectures for Deep Neural Networks</a>这篇文章是用相平面图来研究ResNet里面动力学的稳定性。</p>
<p>随机动力系统。比如：随机梯度下降。如果把它<strong>加一个人为的噪声</strong>（$\eta<em>{t} \sim N\left(0, \epsilon</em>{t}\right)$），变成带噪声的迭代，叫“<strong>随机梯度郎之万动力学</strong>”，会带来一些更好的表现。</p>
<h1 id="统计物理与非线性科学"><a href="#统计物理与非线性科学" class="headerlink" title="统计物理与非线性科学"></a>统计物理与非线性科学</h1><h2 id="平均场方法"><a href="#平均场方法" class="headerlink" title="平均场方法"></a>平均场方法</h2><p>平均场论（Mean field theory）是一种研究<strong>复杂多体问题</strong>的方法，将数量巨大的互相作用的多体问题转化成每一个粒子处在一种弱周期场中的单体问题。以<strong>平均作用效果</strong>替代单个作用效果的加和。</p>
<h2 id="混沌和分形"><a href="#混沌和分形" class="headerlink" title="混沌和分形"></a>混沌和分形</h2><blockquote>
<p><a href="http://www.global-sci.org/v1/mc/issues/3/no3/freepdf/35s.pdf" target="_blank" rel="noopener external nofollow noreferrer">自然的奥秘：混沌与分形</a></p>
<p><em>混沌是时间上的分形，分形是空间上的混沌。</em></p>
</blockquote>
<p>混沌和分形都是动力系统中非线性方程所描述的非平衡的过程和结果。</p>
<h2 id="一些相关工作"><a href="#一些相关工作" class="headerlink" title="一些相关工作"></a>一些相关工作</h2><blockquote>
<p><a href="https://arxiv.org/abs/1804.06561" target="_blank" rel="noopener external nofollow noreferrer">A Mean Field View of the Landscape of Two-Layers Neural Networks</a></p>
<p><a href="https://arxiv.org/abs/2006.09313" target="_blank" rel="noopener external nofollow noreferrer">Hausdorff Dimension, Stochastic Differential Equations, and Generalization in Neural Networks</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222215946268.png" class="" title="统计物理示例">
<p>最近有这样一个工作，两层神经网络可以做一个平均场近似，平均场方法几乎是物理学家的法宝，任何情况下都可以做一个平均场近似，大部分情况下都 work 得比较好。对于<strong>两层<font color=red>无穷宽</font>的神经网络</strong>，我们可以平均掉一些效果，这就可以得到一个比较好的跟实际效果吻合的预测。</p>
<p>非线性研究里还有很多研究混沌、分形几何之类的。举例来说，上图第二项工作是用随机梯度下降训练的轨道的分形维数来控制复杂度，由此可以得到一些泛化。</p>
<h1 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h1><p><a href="https://vel.life/%E4%BF%A1%E6%81%AF%E8%AE%BA/" target="_blank" rel="noopener external nofollow noreferrer">信息论</a></p>
<h2 id="信息瓶颈方法"><a href="#信息瓶颈方法" class="headerlink" title="信息瓶颈方法"></a>信息瓶颈方法</h2><blockquote>
<p><a href="https://www.zhihu.com/question/53245133" target="_blank" rel="noopener external nofollow noreferrer">如何解释通俗的解释信息瓶颈方法？</a></p>
<p><a href="https://wiki.mbalib.com/zh-tw/信息瓶颈" target="_blank" rel="noopener external nofollow noreferrer">信息瓶颈- MBA智库百科</a></p>
<p><a href="https://www.jiqizhixin.com/dailies/d6d8962c-18bc-446a-8c7b-c96b824afadc" target="_blank" rel="noopener external nofollow noreferrer">使用深度变分信息瓶颈方法解释黑盒子| 机器之心</a></p>
</blockquote>
<p>数据可能很多，将数据全部接收后进行压缩，称为<strong>信息瓶颈方法</strong>。可以用信息瓶颈方法来最优化地平衡准确度和复杂度。</p>
<p>信息瓶颈方法也用于分析深度学习的过程。</p>
<h2 id="最大编码率降低原理"><a href="#最大编码率降低原理" class="headerlink" title="最大编码率降低原理"></a>最大编码率降低原理</h2><p><strong>最大编码率降低原理</strong>（MCR2），这是一种信息理论度量，可以最大限度地提高整个数据集和每个类的编码率差。</p>
<h2 id="相关工作-1"><a href="#相关工作-1" class="headerlink" title="相关工作"></a>相关工作</h2><blockquote>
<p><a href="https://arxiv.org/abs/1703.00810" target="_blank" rel="noopener external nofollow noreferrer">Opening the Black Box of Deep Neural Networks via Information</a></p>
<p><a href="https://arxiv.org/abs/2006.08558" target="_blank" rel="noopener external nofollow noreferrer">Learning Diverse and Discriminative Representations via the Principle of Maximal Coding Rate Reduction</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222220023514.png" class="" title="信息论示例">
<p>“信息瓶颈方法”，这是我们比较少接触的；还有“最大编码率降低原理”，是从信息论或者编码理论里面出来的一些方法。</p>
<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><p><a href="https://vel.life/%E5%8D%9A%E5%BC%88%E8%AE%BA/" target="_blank" rel="noopener external nofollow noreferrer">博弈论</a></p>
<h2 id="Shapley值法"><a href="#Shapley值法" class="headerlink" title="Shapley值法"></a>Shapley值法</h2><p>合作博弈中分为：</p>
<ul>
<li>功利主义：<strong>Shapley值</strong><ul>
<li>提倡最大化效益</li>
</ul>
</li>
<li>平均主义：核<ul>
<li>博弈的可行解空间构成一个核，核中任意一个分配都不会导致参与者组合脱离总合作</li>
</ul>
</li>
</ul>
<p>Shapley值衡量了一个联盟 $S$ 中参与者 $p_i$ 的<strong><font color=red>边际贡献</font></strong>。</p>
<script type="math/tex; mode=display">
\begin{equation}
\delta\left(p_{i}, S\right)=v(S)-v\left(S-\left\{p_{i}\right\}\right)
\end{equation}</script><h2 id="可解释性AI"><a href="#可解释性AI" class="headerlink" title="可解释性AI"></a>可解释性AI</h2><blockquote>
<p><a href="https://arxiv.org/abs/1705.07874" target="_blank" rel="noopener external nofollow noreferrer">A Unified Approach to Interpreting Model Predictions</a></p>
</blockquote>
<img data-src="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E7%9A%84%E6%96%B0%E6%95%B0%E5%AD%A6/image-20201222220046838.png" class="" title="博弈论示例">
<p>在可解释性AI里面有一个比较有名的方法叫Shapley值法。这个想法很简单，对一个黑箱的算法，要去看黑箱里的变量是怎么work的，以及哪些变量重要的。给它做一个可视化，可以假设这些变量之间在进行搏弈，在争夺对Response的某种payoff。在这个搏弈过程中，我们想办法把它们的贡献分配给这些变量。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链课程实验</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>区块链课程实验。<a id="more"></a></p>
<h1 id="数字货币交易"><a href="#数字货币交易" class="headerlink" title="数字货币交易"></a>数字货币交易</h1><p>利⽤以太坊体验数字货币转账功能，在以太坊测试链Ropsten上进⾏操作。可以利⽤Google插件Metamask⽣成以太坊地址和私钥（保存下来）。向⽔龙头领取测试代币<a href="https://faucet.metamask.io/" target="_blank" rel="noopener external nofollow noreferrer">https://faucet.metamask.io/</a>，⼀次会发送1ETH，编写脚本（如python），向附件txt⽂件的100个地址每个地址转账⼀些eth（⽐如0.01eth）</p>
<hr>
<h2 id="创建钱包"><a href="#创建钱包" class="headerlink" title="创建钱包"></a>创建钱包</h2><p><strong>Ropsten</strong>：<a href="https://ropsten.etherscan.io/" target="_blank" rel="noopener external nofollow noreferrer">https://ropsten.etherscan.io/</a></p>
<p><strong>Metamask</strong>：<a href="https://metamask.io/" target="_blank" rel="noopener external nofollow noreferrer">https://metamask.io/</a>，Conflux钱包界面跟这个差不多</p>
<p>按照步骤创建钱包即可。</p>
<p>切换到测试网。</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126150404761.png" class="" title="切换到测试网">
<h2 id="注水"><a href="#注水" class="headerlink" title="注水"></a>注水</h2><p><strong>水管</strong>：<a href="https://faucet.ropsten.be/" target="_blank" rel="noopener external nofollow noreferrer">https://faucet.ropsten.be/</a></p>
<p>在水管上输入自己钱包的地址，开始注水：<code>0x75a669A413Cc3640C52F5E3FBc82836f18497407</code></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126150556212.png" class="" title="注水成功">
<blockquote>
<p><del>没有起到效果</del></p>
</blockquote>
<p>尝试直接从<strong>METAMASK</strong>水管上注水：<a href="https://faucet.metamask.io/" target="_blank" rel="noopener external nofollow noreferrer">https://faucet.metamask.io/</a></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126150954032.png" class="" title="Buy相关界面">
<p>注水成功：<a href="https://ropsten.etherscan.io/tx/0xa9c12ce15386998acd0e29bac842509b1a57793cac13a1320bbb537e05d116ad" target="_blank" rel="noopener external nofollow noreferrer">0xa9c12ce15386998acd0e29bac842509b1a57793cac13a1320bbb537e05d116ad</a></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126151055801.png" class="" title="MetaMask Ether Faucet">
<p>但是上述操作完成以后，并没有看到相应的ETH余额增长，点击transaction也是查无所获。</p>
<p>又提交了一个注水交易：<a href="https://ropsten.etherscan.io/tx/0x540c617e4df428f3175189902419f5ef58822c9cb84e3e7584fe90aa8030e1d0" target="_blank" rel="noopener external nofollow noreferrer">0x540c617e4df428f3175189902419f5ef58822c9cb84e3e7584fe90aa8030e1d0</a></p>
<p>……全部都失败了。。最后找助教给我转了1个ETH~</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126155355464.png" class="" title="transaction">
<h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><blockquote>
<p><a href="https://learnblockchain.cn/docs/web3js-0.2x/index.html#" target="_blank" rel="noopener external nofollow noreferrer"> Web3.js 中文文档</a></p>
</blockquote>
<p><a href="https://web3py.readthedocs.io/en/latest/" target="_blank" rel="noopener external nofollow noreferrer"><strong>Web3.py</strong></a>：用于以太坊交互的Python库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install web3</span><br></pre></td></tr></table></figure>
<p>一开始安装的时候遇到一个棘手的BUG，是某个安装包找不到特特定版本的依赖。搞了好久，最后大概了解到可能是跟python版本有关，所以直接重装了python3.9。。这回安装web3就顺利多了。</p>
<h3 id="网络交互代理设置"><a href="#网络交互代理设置" class="headerlink" title="网络交互代理设置"></a>网络交互代理设置</h3><blockquote>
<p><a href="https://www.btcfans.com/article/31719" target="_blank" rel="noopener external nofollow noreferrer">Web3.py教程：如何使用Python转账</a></p>
</blockquote>
<p>如果要跟以太网交互，必须连接到某个节点。（<a href="https://web3py.readthedocs.io/en/latest/node.html" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126170358786.png" class="" title="Why do I need to connect to a node?">
<p><a href="https://infura.io/" target="_blank" rel="noopener external nofollow noreferrer"><strong>Infura</strong></a>：一个以太网的代理节点服务。需要注册。</p>
<p>注册完成后，创建一个project，并获取项目ID。然后填入以下代码的<code>&lt;infura-project-id&gt;</code>处，即可建立代理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">'https://mainnet.infura.io/v3/&lt;infura-project-id&gt;'</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你也可以把项目ID保存到环境变量<code>WEB3_INFURA_PROJECT_ID</code>中，从而避免硬编码。</p>
<p><code>mainnet</code>代表以太网主网。</p>
</blockquote>
<h3 id="基本功能测试"><a href="#基本功能测试" class="headerlink" title="基本功能测试"></a>基本功能测试</h3><p>我们试着运行一下接口：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(w3.isConnected())</span><br><span class="line">print(w3.eth.blockNumber)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># 11333063</span></span><br></pre></td></tr></table></figure>
<p>查看之前钱包账户的余额：<code>0x75a669A413Cc3640C52F5E3FBc82836f18497407</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w3.eth.getBalance(<span class="string">'0x75a669A413Cc3640C52F5E3FBc82836f18497407'</span>)</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
<h3 id="修改连接到的网络"><a href="#修改连接到的网络" class="headerlink" title="修改连接到的网络"></a>修改连接到的网络</h3><p>余额为0是因为现在默认在主网上（Infura Mainnet）。我们先切换到Ropsten测试网。</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201126171254941.png" class="" title="切换测试网">
<p>获得相应的链接，修改连接代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">'https://ropsten.infura.io/v3/d3fb182b32bd49fe9eb36693d470ed88'</span>))</span><br></pre></td></tr></table></figure>
<p>再次查看钱包账户的余额：<code>0x75a669A413Cc3640C52F5E3FBc82836f18497407</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w3.eth.getBalance(<span class="string">'0x75a669A413Cc3640C52F5E3FBc82836f18497407'</span>)</span><br><span class="line"><span class="comment"># 1000000000000000000</span></span><br></pre></td></tr></table></figure>
<p>成功。跟CFX的$10^{18}$单位转换一样，代表1ETH。</p>
<h2 id="转账实验"><a href="#转账实验" class="headerlink" title="转账实验"></a>转账实验</h2><h3 id="单次转账测试"><a href="#单次转账测试" class="headerlink" title="单次转账测试"></a>单次转账测试</h3><blockquote>
<p><a href="https://web3py.readthedocs.io/en/latest/web3.eth.html#web3.eth.Eth.sendTransaction" target="_blank" rel="noopener external nofollow noreferrer"><code>Eth.sendTransaction</code>(<strong><em>transaction</em></strong>)</a></p>
<p><a href="https://blog.csdn.net/weixin_34413802/article/details/91910789" target="_blank" rel="noopener external nofollow noreferrer">以太坊 web3.py 签名转账</a></p>
<p><a href="https://www.jianshu.com/p/5866a9432c93" target="_blank" rel="noopener external nofollow noreferrer">web3.py 脚本转账</a></p>
<p><a href="https://web3py.readthedocs.io/en/latest/ethpm.html?highlight=Ropsten#registry-uris" target="_blank" rel="noopener external nofollow noreferrer"><code>chain_id</code></a></p>
</blockquote>
<p>感觉相当棘手。报了一个错，似乎Infura在Ropsten测试网不支持eth_sendTransaction这些方法。在主网上则是报的余额不足的错。这样就不是很友好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValueError: &#123;&#39;code&#39;: -32601, &#39;message&#39;: &#39;The method eth_sendTransaction does not exist&#x2F;is not available&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>询问助教后发现是<strong>参数不匹配</strong>的问题，在增加了一些参数以后，成功执行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">sender_address = <span class="string">'0x75a669A413Cc3640C52F5E3FBc82836f18497407'</span></span><br><span class="line">private_key = open(<span class="string">'private_key.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line"></span><br><span class="line">receiver_address = <span class="string">'0x2a9d0B6fd9fF3C854130Af05529B2e40FBADa38c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/d3fb182b32bd49fe9eb36693d470ed88'))</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">'https://ropsten.infura.io/v3/d3fb182b32bd49fe9eb36693d470ed88'</span>))</span><br><span class="line">print(<span class="string">"isConnected:"</span>, w3.isConnected())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"sender:"</span>, w3.eth.getBalance(sender_address))</span><br><span class="line">print(<span class="string">"receiver:"</span>, w3.eth.getBalance(receiver_address))</span><br><span class="line"></span><br><span class="line">transaction = &#123;</span><br><span class="line">    <span class="string">'chainId'</span>: <span class="number">3</span>,    <span class="comment"># Ropsten的网络标识号</span></span><br><span class="line">    <span class="string">'from'</span>: sender_address,</span><br><span class="line">    <span class="string">'to'</span>: receiver_address,</span><br><span class="line">    <span class="string">'value'</span>: <span class="number">2333</span>,</span><br><span class="line">    <span class="string">'gas'</span>: <span class="number">90000</span>,</span><br><span class="line">    <span class="string">'gasPrice'</span>: w3.eth.gasPrice,</span><br><span class="line">    <span class="string">'nonce'</span>: w3.eth.getTransactionCount(sender_address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed_txn = w3.eth.account.signTransaction(transaction, private_key=private_key)</span><br><span class="line"></span><br><span class="line">txn_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)</span><br><span class="line">print(txn_hash.hex())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"sender:"</span>, w3.eth.getBalance(sender_address))</span><br><span class="line">print(<span class="string">"receiver:"</span>, w3.eth.getBalance(receiver_address))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">isConnected: True</span><br><span class="line">sender: 999658962292322667</span><br><span class="line">receiver: 16331</span><br><span class="line">0x1e7785b8aca445c2e6c9880378ae4cea701c7113b23303c85e0cf76cec8b9e5e</span><br><span class="line">sender: 999616332562233334</span><br><span class="line">receiver: 18664</span><br><span class="line">[Finished <span class="keyword">in</span> 29.9s]</span><br></pre></td></tr></table></figure>
<p>以太网上查看：<a href="https://ropsten.etherscan.io/tx/0x1e7785b8aca445c2e6c9880378ae4cea701c7113b23303c85e0cf76cec8b9e5e" target="_blank" rel="noopener external nofollow noreferrer"><code>0x1e7785b8aca445c2e6c9880378ae4cea701c7113b23303c85e0cf76cec8b9e5e</code></a></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127120127580.png" class="" title="Transaction Details">
<h3 id="批量转账"><a href="#批量转账" class="headerlink" title="批量转账"></a>批量转账</h3><blockquote>
<p><a href="https://blog.csdn.net/xiaohaigary/article/details/88955667" target="_blank" rel="noopener external nofollow noreferrer">python 读取txt列表到列表中</a></p>
<p><a href="https://blog.csdn.net/qq_37828488/article/details/100024924" target="_blank" rel="noopener external nofollow noreferrer">python读取、写入txt文本内容</a></p>
<p><a href="https://blog.csdn.net/wahaha13168/article/details/82917911" target="_blank" rel="noopener external nofollow noreferrer">解决replacement transaction underpriced以太坊交易异常</a></p>
<blockquote>
<p>简单来说就是以太网交易有时延，高频批量处理的时候，要<strong>自定义交易中的nonce标识</strong></p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">sender_address = <span class="string">'0x75a669A413Cc3640C52F5E3FBc82836f18497407'</span></span><br><span class="line">private_key = open(<span class="string">'private_key.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line"></span><br><span class="line">receiver_address_list = list(map(<span class="keyword">lambda</span> x: Web3.toChecksumAddress(x.strip(<span class="string">'\n'</span>)), open(<span class="string">'以太坊100个地址.txt'</span>,<span class="string">'r'</span>).readlines()))</span><br><span class="line">txn_hash_list = []</span><br><span class="line"></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">'https://ropsten.infura.io/v3/d3fb182b32bd49fe9eb36693d470ed88'</span>))</span><br><span class="line">local_nonce = w3.eth.getTransactionCount(sender_address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> receiver_address <span class="keyword">in</span> receiver_address_list:</span><br><span class="line">    print(receiver_address)</span><br><span class="line">    transaction = &#123;</span><br><span class="line">        <span class="string">'chainId'</span>: <span class="number">3</span>,    <span class="comment"># Ropsten的网络标识号</span></span><br><span class="line">        <span class="string">'from'</span>: sender_address,</span><br><span class="line">        <span class="string">'to'</span>: receiver_address,</span><br><span class="line">        <span class="string">'value'</span>: <span class="number">2333</span>,</span><br><span class="line">        <span class="string">'gas'</span>: <span class="number">90000</span>,</span><br><span class="line">        <span class="string">'gasPrice'</span>: w3.eth.gasPrice*<span class="number">2</span>,</span><br><span class="line">        <span class="string">'nonce'</span>: local_nonce</span><br><span class="line">    &#125;</span><br><span class="line">    signed_txn = w3.eth.account.signTransaction(transaction, private_key=private_key)</span><br><span class="line">    txn_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)</span><br><span class="line">    txn_hash_list.append(txn_hash.hex())</span><br><span class="line"></span><br><span class="line">    local_nonce = local_nonce + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"txn_hash_list.txt"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"receiver_address,transaction_hash\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(receiver_address_list)):</span><br><span class="line">        f.write(receiver_address_list[idx] + <span class="string">','</span> + txn_hash_list[idx] + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果保存到<code>txn_hash_list.txt</code>：（100个转账交易的receiver地址和transaction地址）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">receiver_address,transaction_hash</span><br><span class="line"><span class="number">0xF5038fbAfbC0d08629EF7890D0437Ec135A05338</span>,<span class="number">0xce48d4c7daa046c413b6a13692bb41137f72a557fd3d723938ad868e127e3833</span></span><br><span class="line"><span class="number">0x2Ad318738C4b35547F60C20E884ed8279d74a1Be</span>,<span class="number">0x76540a97452352745afcd5ad9be9f16967753ddfcb999f5d7b43394f82253d67</span></span><br><span class="line"><span class="number">0xE63cAE40d63791467cb111DC8eAb32e55c27921C</span>,<span class="number">0x1eb25169dded0f811d5034632357ba7e7c678731c28d831b8f575bf3c3fa74a8</span></span><br><span class="line"><span class="number">0x7208DC3f8A279f0b3B287a7a253953cCA1A06db9</span>,<span class="number">0x1495b14b1f99f607c576a0aeeab1836454c2f81f0213e149b3a0312770d2307d</span></span><br><span class="line"><span class="number">0x743e6861AC9E3582DDCc5De3f8B893C9239AFb65</span>,<span class="number">0x916f252e912a8806a21dc152f8a6807419af75887c0549d3b980807b461faee6</span></span><br><span class="line"><span class="number">0xC6c4a7E78EEbE24EEEA0E306aAc14D0318B573Bf</span>,<span class="number">0xbfac50d11323b7e668b94c0c67c6d235b962d5dc84e26addda0cad1f5c1e57ec</span></span><br><span class="line"><span class="number">0xf0Ed2D4823617f4fefdcebBCDBe684Ef60556ff2</span>,<span class="number">0x952dfa6b23d7ac0f56e3213dc02600cefd368ecfa93f6129dfdece2a42b0deb7</span></span><br><span class="line"><span class="number">0x597C52bbe09991e6f39eb0da0393722C32b89536</span>,<span class="number">0x3bf586007fdaaec1334d57c45abea44729d87d2c589a69d46f2c03a4830c614a</span></span><br><span class="line"><span class="number">0x41aa8Fa01023B3eEf4176899f9Fd27952aEBcB37</span>,<span class="number">0x4b6b8444957549e8d9366e96a95b98d4162323cacf8d53e5e19973931e72c0f2</span></span><br><span class="line"><span class="number">0xF0A1959236D2A84bF0788deDE9D20c4897ef2082</span>,<span class="number">0x48fd0644e911e00e70812ca6dcef016ad6d04bb5b9f15c86ba3d345d2d580ec1</span></span><br><span class="line"><span class="number">0x6f4B8c46eB55E01f9076363Ce9A60D2c10D32465</span>,<span class="number">0x34e6f65c47123f501dab0a4be40fad231de11a85a8d01de631a50ee438b5ac0f</span></span><br><span class="line"><span class="number">0xFA3728689dBe43C1d2707AC486D426d6497C9F47</span>,<span class="number">0x779f3aecad25a480fafe02b67a5c7405e138870b77366ddaff7d1b8607f4b2ec</span></span><br><span class="line"><span class="number">0x74C112FB8B87586BF1315eD80a79227fF437bc4b</span>,<span class="number">0x0aafa84e36950c495da47e012fcdcaf2159f71e686c4b687a5e808c6d0031f79</span></span><br><span class="line"><span class="number">0x0be1f2Aa333Cec14AdeAbeBcB7Db22e4D8077b13</span>,<span class="number">0x26741d3a81727f39932dab3d5e75c0feed840d0b82bc6fe6185847b4ce8087e6</span></span><br><span class="line"><span class="number">0x17F3B9bDbB31FC96baf85Fe89B9f82d216449cA3</span>,<span class="number">0x8fce8d78dbfcbcf666ffa18c9a1595a667fdb6277eb6826ff3dcdf20c03be0d2</span></span><br><span class="line"><span class="number">0x3C37A1C6C817E9149751c9162Dda2D59Ad2D254e</span>,<span class="number">0x706073665fbb42d9dd4a664af999ee277c057494a864c3d0f5884582fa0157b2</span></span><br><span class="line"><span class="number">0x49755db1Ac06075E3e66270f05Fe32f02c1F5A2f</span>,<span class="number">0x9ed1dde26f27ec8f521a391674f780cb4130ae9a1fd047066b4d7ac778099020</span></span><br><span class="line"><span class="number">0x5f3bBfcA0561Aa4A66DCB5314aF1c05a35D9D0B1</span>,<span class="number">0x4eedbf34146a8032cfcf39b5538e471b59abed7b5c17623e6dbe9cd284ba20c0</span></span><br><span class="line"><span class="number">0x410b2bE29E217c617329627eB789318272f1f294</span>,<span class="number">0xf65c8ea23ff06dc69ce52e27e073e04bb84c920342a905e837aa2e4a1a0807fd</span></span><br><span class="line"><span class="number">0x6330F9bbe5c29Fa4ad7a786a3B399B5886DA2303</span>,<span class="number">0xe375e45801ecc1102a96e53d8f98e0fcd455bbc7b77612fec5d966e9a09d1658</span></span><br><span class="line"><span class="number">0xa97f63427599A4C7cE6D61347fAED4196c6B84A3</span>,<span class="number">0x012280a8ec9ac84645704de86785f1297349b55fd2f4ca315c6a164f5cba6062</span></span><br><span class="line"><span class="number">0x204628AC17c05c0F47FA1Aa991f2CD6aA76eA8Cf</span>,<span class="number">0x9ca958c32613ccff5f7a5c6a39aab3c5a08863e2e77662bd260ed98ddc73ca7e</span></span><br><span class="line"><span class="number">0x34221e0097e4F512F93FcC960247D95785524BaF</span>,<span class="number">0xd8f051b7f50c9a468a6a2d636693346d2247fe253446ae76dca67d4c087586cb</span></span><br><span class="line"><span class="number">0x6603680d11B601317A89E1B5c5F932D9066Bda6e</span>,<span class="number">0x13f22aca9be21e2db9e7ee6f8a22a8c0e84429a41e17a687f4bd027ae8b07bbe</span></span><br><span class="line"><span class="number">0x9956fBB19c3C9EaF2Ff66bE0817Cb1fa5b4E7fDc</span>,<span class="number">0xac83dd89b467d31a9b33b9362916eb8c196b9880e39606ff7aa6d5762f825ba0</span></span><br><span class="line"><span class="number">0x59533e7Bbe9d68826Ac4AF8a83cc1743637918DF</span>,<span class="number">0x62708dcd41ddf845c2a4121727c8bba18a63e2f453d3ce8691d383bf0b812ca7</span></span><br><span class="line"><span class="number">0x5A945352a53035546aC341887eB7C9e591E3D3af</span>,<span class="number">0xd4e6b2aa4426b3e14873c245dc0ff724d0c240ca4a7dc94ff6b602c5dbd0fd5d</span></span><br><span class="line"><span class="number">0xCb5e1Dc921d13B3db04853735477F4bFd730Abea</span>,<span class="number">0xbd5edb4b282587623745050edadd7ba58571235ad9e6b35b876cd86703c3a0ce</span></span><br><span class="line"><span class="number">0x2852CD4e1AB6924B57D2A073F04E02cC5AfF71E7</span>,<span class="number">0x48395332f448fb84ecd44a15f4a7615414bc489e2660f608c6da04fdbe8b3fbc</span></span><br><span class="line"><span class="number">0xBb411F489434BF96546DBB274f9fd3f5a1502a92</span>,<span class="number">0x379a4dab65f5ac83e009fa3efe418495e87b9aec29fd77c8ff108b0ad89d545b</span></span><br><span class="line"><span class="number">0x9d2a1c9217EA36137742FD7EAAEabe3fcB56AEF8</span>,<span class="number">0x3ae9bf355013e3acd939c890efd2061b49b6bb6d66c1c14b332596823315b21e</span></span><br><span class="line"><span class="number">0x43eB2A45f92558f2Ccce8BCa7717F1C4740FC5fA</span>,<span class="number">0x4a91ce10876f1d9c41fd0ed7f622b152dde339f39ecf429563f204e72c38dd90</span></span><br><span class="line"><span class="number">0xdf6FbfC8A5CF9B76716483b9f64bF0589931a5A5</span>,<span class="number">0xd5e2c3f2aad77ae6febc61e6299452ca6177287607f3e85fec700616ddb3c4b9</span></span><br><span class="line"><span class="number">0x906C650973991a08B9E2B2d202F82879Fd79F2Ef</span>,<span class="number">0x7f9fef0f49ba7ad6b3fd9f83f2f4696840a055ce59c45e080d8ad1be0b84dedc</span></span><br><span class="line"><span class="number">0xE9F3F08ae08FDf92acA5342280Fd133a893eE527</span>,<span class="number">0x972f8be9a8fb7f8ab654eac441dc1cd08f84c23b48e76982f901ab73d3cc7c3c</span></span><br><span class="line"><span class="number">0x258f82fFc5ebC019a70e6B589E125abF00Cf0C70</span>,<span class="number">0x073a97c76ede43e4defd0dd905e909e30e84e34a94521f067cee09c46ff138cb</span></span><br><span class="line"><span class="number">0x56c57c57e9d4553E0F69C8b0eb2c9080A29b4617</span>,<span class="number">0x98f1094f7827a84e0c17d7396689d71e94a9de5e7156122daa81d5deae314d8e</span></span><br><span class="line"><span class="number">0xA50B2ceab00703745d8105383f90537A3f6A6ea9</span>,<span class="number">0x9ea5224e7bf3d2c1137bf31f1d9c03e16dec4b8a08a1a553fe98039b1044d5d7</span></span><br><span class="line"><span class="number">0x0f5c60e699751B87f2b8e6E5C777A8B823Ed1e32</span>,<span class="number">0xcdadbc8c0a04f32321f744fcba02045fb6db59e9dc0b727d9f6ee470850b020e</span></span><br><span class="line"><span class="number">0x9AE7F9526D0ba93e8770c3C8F91ABE06E00C3546</span>,<span class="number">0x555b025736dbfac7bd4c5a0b5ccbcf4043465b4f3362a024607986e1cc7642ea</span></span><br><span class="line"><span class="number">0x33A93f0156BFC2EacfaB72581cC65D1c4aa4134d</span>,<span class="number">0x79f77e769b1bd02184dc76cc3068efb940b86ee30b4ac29bc6f1b1bbd0508887</span></span><br><span class="line"><span class="number">0x82647DbD911243318A98388274bD01e7722ac196</span>,<span class="number">0xe4e81645c6318fd5b6d88f1fe1139b15e96cf238a8d2c2a3c5885e9eac218016</span></span><br><span class="line"><span class="number">0xDB42179E665C74FDBDdDd358CaA13Ce2D2cBF8Ca</span>,<span class="number">0x2216b36eaf9c6b9b88f87cdf81f4470142e18fab833ffa5cd81a2556758c5182</span></span><br><span class="line"><span class="number">0x634F06362109c4c6909daFAeAeC54a7C48fED6b9</span>,<span class="number">0xe0b08c5e34f0fd230549af47d61d70b0907bc322626748f6fe62c4581cac986f</span></span><br><span class="line"><span class="number">0x18f36BD1ecd5129eEd69E8336A639A958a2c0B6c</span>,<span class="number">0xc96c30e6d2fc15f52a3bd4c6988e0c1a4084389c12dfafe42507358b7a2ba046</span></span><br><span class="line"><span class="number">0x48991e0107B60e59a10CF6ea4C98413bc8707965</span>,<span class="number">0x417b64ae3109cb805fcbc241702708e0a732fbaffb8d56c27022c5cbe83eb919</span></span><br><span class="line"><span class="number">0x5acCBB66f98C9dfE970923F4fF6BB78F4684DE5b</span>,<span class="number">0x6ef116bbad22452b39429876f69cc89651195367c3ce7dc8c70e84e4adc14b1e</span></span><br><span class="line"><span class="number">0x6C32130c0cbCc02D7209d7ddDF75AB686C8CAbD4</span>,<span class="number">0xab123626e8e0c6d240547fbeb73812cc3758e1efd40c102d7c5e4779ad84e263</span></span><br><span class="line"><span class="number">0xbC5436a2FE868f8156fC0E407889C8357A3786D9</span>,<span class="number">0xfbdc6f4e818b1666672f91d95e2646a2dd1e21e12a40c49c3e38b86ede4b681f</span></span><br><span class="line"><span class="number">0x0e6009CAD7972b81AB65c7A16051DF35197a440F</span>,<span class="number">0xd53ba8592f02ceaf749f110e531bd4256f719e3bc0806dcc8d464f592691c3fe</span></span><br><span class="line"><span class="number">0xE1A926A6F13CDfD963fCBE9Edf45A941DdFD029a</span>,<span class="number">0x11b744467f201db0a2537db39618ca192239ecc75cb2f05f8d213d05b7045281</span></span><br><span class="line"><span class="number">0x783Ef0F1ccbd9f2Db675499aF1695d5952AA8b15</span>,<span class="number">0xe75288128cd120be182c290f463cc3d46eeb0806cda430cd891e9f437b77a2a1</span></span><br><span class="line"><span class="number">0x0D09B0744b15988F55AC40a03E825E8A7B746305</span>,<span class="number">0x23eb6b82be46284cfa0ffccc8b1a85371fec6b085eaf0af61f61c3209d0d20f4</span></span><br><span class="line"><span class="number">0xb65a46cBC43D8dd08Cf79eDE6f4888FBF6c80838</span>,<span class="number">0xca80a5defe0e2472dc27ded1ca634e1b91008928d8b1e29878a0d09054771cf7</span></span><br><span class="line"><span class="number">0xEeDf45908eb260a928e23DcB8E29834bE114A51A</span>,<span class="number">0x21da569dfeded8769a229e7495821e5e3069f274f6a728d52cd996e0c1fc21f1</span></span><br><span class="line"><span class="number">0x277e20fDd65Cd475d0cCfEc4504e232a5Bb0Ae66</span>,<span class="number">0xc773ddb8217483689bcce8ac20fa58707227373831853995965d17e1067d4301</span></span><br><span class="line"><span class="number">0xA744729DcF3CABEA6D736C3Bf063603295A1A4A9</span>,<span class="number">0xd2876cd6471ae28a0c3c4294cc3c3554a0a9e06be42b04e7beb90ce47f909076</span></span><br><span class="line"><span class="number">0x26994067D27e956f37F977eac2fE558183083Eae</span>,<span class="number">0xa3b529a4cd52dec9abe6013bc164c256f60bccddebae8af4797456ae76471583</span></span><br><span class="line"><span class="number">0x34B1dCa251403C1E8e060E297D60E0b5b56eF2ca</span>,<span class="number">0x3d187a3443ee1523e9ddb99317440759d50a42a9d9bc05aa9143a4749013b22c</span></span><br><span class="line"><span class="number">0xb32392B690AC08cDFF63E9F825c6aa0085d32980</span>,<span class="number">0x942ab093895c55ac797a371b156a2df9f6221e5259bb7e4a26b0c0d73088b8ae</span></span><br><span class="line"><span class="number">0xF0248a6Dc89347B83AC538Ad8f9D21C7407526C8</span>,<span class="number">0xa1ff6c93ef65fec2a617bfbd6ded9740fed5b55a8849998c3120c7a12965db48</span></span><br><span class="line"><span class="number">0x6d1EE1Cc2a5035B7b027d17ae886b2dfd64ca9dF</span>,<span class="number">0xbb66205552e145b555663a02e7cf826d00d06cb246a7292cc362a6dee771714d</span></span><br><span class="line"><span class="number">0x5200e4896063265e30Cb1F003b0428242750D643</span>,<span class="number">0x90768a96826f36bf97c7db8583806dd31c94b3dae1c7ead617d24ef76d3a7d5d</span></span><br><span class="line"><span class="number">0xe7c62457fCFe75A162d4d39d75fb65c2bA81CB12</span>,<span class="number">0x78ac189e0dc13b73927750adf3bfdb9965301e4d4b11f80f1b036cd55d259fec</span></span><br><span class="line"><span class="number">0x854ED15dCB081a0EEbfA5Ec41e5e73b71108798B</span>,<span class="number">0x6d05198e107f9c91bcc95da379fe46ba8b626eac54bf50bc89399379f117b8a3</span></span><br><span class="line"><span class="number">0xfE3B05538d342dC6689f82f24eCC72eFfC5eb353</span>,<span class="number">0xa4c740b7374e5b624fb5b3866368f30e5d2487d24c380d9689cc07c741098d34</span></span><br><span class="line"><span class="number">0x81CBBF3e9B6821B9A418E890e6F685aD7F349d18</span>,<span class="number">0x2346d5850fbf5a0a88391ff3393f002590d1b2053a5e4d993fd4ee8c51cba1be</span></span><br><span class="line"><span class="number">0xEdD6225aF424470730789f9E8f6cB1F6855Bfb6e</span>,<span class="number">0xe1ec3affa7ae2da1a420fc7b6489013772429b038f274627193a11ff63ec505a</span></span><br><span class="line"><span class="number">0x1418abDdc3d3f323D126988D835367AB8c80fb4A</span>,<span class="number">0xf40021cf3ba6f23d0a308b15ab3eff9c8f0759251085efab493d1e89a3733770</span></span><br><span class="line"><span class="number">0x4dE0a71Ca317628B5F577da9d4f87517306F64B8</span>,<span class="number">0x2f9eaa0fea8722da5a427d4c8763ff1b8f4620bbe4ed2889647f669e928f01f6</span></span><br><span class="line"><span class="number">0x1DC21C3C7C953C8479f052BFb6a287a9c0AbDEFa</span>,<span class="number">0xe9bd3a30425b5ae1074ea35d750b6042c1866952c7e8763b5f1495b45361988f</span></span><br><span class="line"><span class="number">0xf666d19AD3a8E5fD1c1067a4afD64cA17140c49b</span>,<span class="number">0x47201b811198ccd5f0c38e6e9499eb646fe2a0dd515a1bdf258fb7e5a55bbd25</span></span><br><span class="line"><span class="number">0xA9EA631ebd06Ac20a92dBcbC5f0d9d5067BB6AFa</span>,<span class="number">0xe12dd92bef2282a3dbab63d04b60927bc143f13672ab47fecc0bce16b270bf13</span></span><br><span class="line"><span class="number">0xD19e1B8215fdfFa2BD14217A0d20484596b1EF3c</span>,<span class="number">0x4eecbc1bc2cac43d86a6aa7dba02c5c8dcba0d23f4242ab504e452db5320e117</span></span><br><span class="line"><span class="number">0x3036b9f146a7d107B17E506DA19a86bBB6BF4c14</span>,<span class="number">0xa453d0bd4d7adc6195f0568a00b2dc300b97fe2a3a7033db0ea7c4c2a3afffc6</span></span><br><span class="line"><span class="number">0xbAF0873DB0874717680298EedE4DcAb71829d24b</span>,<span class="number">0xe151cbb6ae808e3f17e584debc8d344a35620f2417e66ccca40d05f1b583b091</span></span><br><span class="line"><span class="number">0xB2AD5422767e003aE18D1C183Fc1f655c83f47be</span>,<span class="number">0x7a2345fa52828463f66225cbdc4ddd34a1da64b47b04d0f74174e0d34fa81632</span></span><br><span class="line"><span class="number">0x3875934878c9F3217235F4817a109d558dB86458</span>,<span class="number">0xfeea2993a9beee5f7ebf14831d91565b9ea293a785d60188ec7665f13c05107b</span></span><br><span class="line"><span class="number">0xb00aB9f855eCfF24f4ac25c8402AaC75affd14e4</span>,<span class="number">0x4154abc948e95f896e7da50addba4e417e27e910dfd25d5088d61990cf93427a</span></span><br><span class="line"><span class="number">0x832c405a14e364728401953f1A96652d481e4b54</span>,<span class="number">0xd5d6e7936db55bc120a548afc8f69c3fdcf6bd2956d1cc4891cd4401e19bad95</span></span><br><span class="line"><span class="number">0xD47dAf5047a3931A947762D34794d4D62fA024E3</span>,<span class="number">0xdb7066aa499d922febcbb07979fd8011e4ab9a184a3041560c1add5639b1c6b5</span></span><br><span class="line"><span class="number">0x14c0C3E5F6F6d8bd1030E161577f3A70563B3F5a</span>,<span class="number">0x18aa76b0e2adf5833514c62e9172adad36e0be9fd8d0cce4e6327f500e92b8a2</span></span><br><span class="line"><span class="number">0x14B786EfC953336A7DEEe955C0d7FDEBB668233F</span>,<span class="number">0x53fac254fd7f9deccff26aebd37748011af31300697662b000171c50bf180c05</span></span><br><span class="line"><span class="number">0x4184733688457eB0C06fB33C241d5c2Cabb1F332</span>,<span class="number">0x1d98543e8e36206a35e9e445e851ff4db5f32a5a18d79033aff6de7ea9078e95</span></span><br><span class="line"><span class="number">0xb5bbAE1742cC280dFB3b77F3Da4b9d5d6De0F206</span>,<span class="number">0x17155346756409e20f93ad9a044f2359ee3ace08bc7c0e73da3dc34d11ba0d4b</span></span><br><span class="line"><span class="number">0x16fc9087dAb4ABeCB154f1ADE296aDa287F4740e</span>,<span class="number">0x9ebb3bd060e1dc1a7979e1829f3d26979988e33d30a6c2b452cabc9cfffb0326</span></span><br><span class="line"><span class="number">0x7761A9072bfB49CfA629403AaBe1DD3881D2c37C</span>,<span class="number">0x2003ffd30af70c444cc69eec22f19b7a444bd95e6572404aeea56da368ebf0b4</span></span><br><span class="line"><span class="number">0x82788f0Ad056Fa7B2D960ed32D451D2F3B49555A</span>,<span class="number">0xa32008a0be2a5536c539faf4a9964e13714f6d5d4ce4ed5af5cb0bc2d0f8fd8f</span></span><br><span class="line"><span class="number">0x2e30924F89969675E168014FD957a5f5e782619d</span>,<span class="number">0xb212e2a507fbb169fadbf94812c77751e03c79086c6b7c52aae49fbc8e6aff3d</span></span><br><span class="line"><span class="number">0x921DBBDeb89d0b0aa70F34f94eb0f85FCB8adC42</span>,<span class="number">0x4905a8760571053cf074644919659d0bb0d914b366bc102e489065b23a99c4c5</span></span><br><span class="line"><span class="number">0x4dd86Ec972e34F0C75437fE7393d530F77054263</span>,<span class="number">0x3db0c74ec54f327e5f6ad70a42ca6ea6ff04c64ea5ef07b4b36ca28d8e0d3894</span></span><br><span class="line"><span class="number">0x9Af66A51f824FF6f3Bb748DccD85e39C7836d656</span>,<span class="number">0xf9498db48c3cf9cf81c3978c4351bb49e13cad56c0587bb1568b6798aa5b3458</span></span><br><span class="line"><span class="number">0x216F1562c6B74D90dDe7111BA64ed8C2259328aC</span>,<span class="number">0xf77e6a27e371876292c9ce2f5a391fbc32f889388c94034daaaf4c98b4b4f95c</span></span><br><span class="line"><span class="number">0x45EAb4237188fcD565882bb1d1995EdfA114F345</span>,<span class="number">0xcb54347277cf8d053ba9d8f84dd45ef1dfb43330d1af62cd93c99615167cc03b</span></span><br><span class="line"><span class="number">0xfBB451aA60D83C1E7b9606fD3Df774EE4D5d7133</span>,<span class="number">0x171a7e0786f43921b126398868f56193ae81fe10058d97999944c02479fbb294</span></span><br><span class="line"><span class="number">0xF3528dCbbb2006aDa8de5D094E84a6561aFE5f90</span>,<span class="number">0x86ad24d9104b1884e4a5d439418dbae58732c4746359a00009621881266488ea</span></span><br><span class="line"><span class="number">0x2898B60ab33F4d6985379B80FadF38FfEE4ec5C9</span>,<span class="number">0x502ea4563931fba029f4ece571085c553a80a480bab047add5a2389e2d42284a</span></span><br><span class="line"><span class="number">0x3868BCdb212e465936FEb1906C1bA8Ff66d21730</span>,<span class="number">0x2a0f22876c884fb1dd25fb27f188417a1496a2cec32933b2210df61a7dd0c5a5</span></span><br><span class="line"><span class="number">0x17075CEcA61CcCB1813203A66A8a8260a37A192b</span>,<span class="number">0x15e4372e115c66287cca0648aea7f5af4d359ec10b41ab35dd2d085496c21c1b</span></span><br><span class="line"><span class="number">0xd3fE6E3E6fA461A56366dF3FBC64f424995A1839</span>,<span class="number">0x1814e22abd31057df40685d34759c28a2c0aad100f5548ad2b521510d9679c8b</span></span><br></pre></td></tr></table></figure>
<p>在以太网上查看：<a href="https://ropsten.etherscan.io/address/0x75a669a413cc3640c52f5e3fbc82836f18497407" target="_blank" rel="noopener external nofollow noreferrer"><code>0x75a669a413cc3640c52f5e3fbc82836f18497407</code></a></p>
<h1 id="智能合约实验"><a href="#智能合约实验" class="headerlink" title="智能合约实验"></a>智能合约实验</h1><p>编写⼀个简单的以太坊智能合约，⽤Solidity语⾔编写，实现⼀个简单的计算器功能，四个函数，能实现两个变量的加减乘除，并部署到以太坊测试⽹上和调⽤测试。</p>
<p><a href="https://remix.ethereum.org/#optimize=true&amp;version=soljson-v0.4.23+commit.124ca40d.js&amp;evmVersion=null&amp;appVersion=0.7.7" target="_blank" rel="noopener external nofollow noreferrer">https://remix.ethereum.org/#optimize=true&amp;version=soljson-v0.4.23+commit.124ca40d.js&amp;evmVersion=null&amp;appVersion=0.7.7</a> 在线智能合约编辑器</p>
<hr>
<h2 id="编写四则运算器合约"><a href="#编写四则运算器合约" class="headerlink" title="编写四则运算器合约"></a>编写四则运算器合约</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.23</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"remix_tests.sol"</span>; <span class="comment">// this import is automatically injected by Remix.</span></span><br><span class="line"></span><br><span class="line">contract calculator &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">add</span> <span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title">returns</span> <span class="params">(uint256 ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">minus</span> <span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title">returns</span> <span class="params">(uint256 ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">multiply</span> <span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title">returns</span> <span class="params">(uint256 ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">divide</span> <span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title">returns</span> <span class="params">(uint256 ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="合约测试"><a href="#合约测试" class="headerlink" title="合约测试"></a>合约测试</h2><p>在虚拟的环境中进行合约测试，效果如常：</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127122912427.png" class="" title="合约测试">
<h2 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h2><p>把环境换成<code>Injected Web3</code>，部署到Ropsten network：</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127123733568.png" class="" title="签署合约">
<p>部署完成：<a href="https://ropsten.etherscan.io/address/0x081a95329b24CEE9661168440551D8bBa10B70Ff" target="_blank" rel="noopener external nofollow noreferrer"><code>0x081a95329b24CEE9661168440551D8bBa10B70Ff</code></a></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127123939641.png" class="" title="部署完成">
<p>部署后合约测试：</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127124229893.png" class="" title="test">
<h1 id="PoW共识体验"><a href="#PoW共识体验" class="headerlink" title="PoW共识体验"></a>PoW共识体验</h1><p>⾃⾏选择⼀个PoW币种（BTC、ETH、LTC、ZEC、DASH、Grin等），计算该PoW算法哈希，提交⼯作量证明，可以加⼊矿池。时间不需要太长，⼏分钟即可，体验“挖矿”过程。截图证明。</p>
<p>可以使⽤的参考⼯具：轻松矿⼯、AIminer等<br>可以加⼊的矿池参考：蚂蚁矿池、F2pool、币印矿池等</p>
<hr>
<p><strong>轻松矿工</strong>：<a href="http://www.qskg.top/" target="_blank" rel="noopener external nofollow noreferrer">http://www.qskg.top/</a></p>
<p>挖矿界面：</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127130236069.png" class="" title="轻松矿工">
<p>矿池界面：</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127130158832.png" class="" title="矿池界面">
<h1 id="PoS节点搭建"><a href="#PoS节点搭建" class="headerlink" title="*PoS节点搭建"></a>*PoS节点搭建</h1><p>⾃⾏选择⼀个PoS项⽬（Eth2.0、Nebulas、Polkadot、Cosmos、Irisnet、Oasis、Nucypher、Algorand、Solana、Near等），运⾏其验证者测试节点。</p>
<p>参考⽂档：</p>
<ul>
<li><a href="https://wiki.nebulas.io/zh_CN/latest/go-nebulas/blockchain/testnet.html" target="_blank" rel="noopener external nofollow noreferrer">https://wiki.nebulas.io/zh_CN/latest/go-nebulas/blockchain/testnet.html</a></li>
<li><a href="https://www.irisnet.org/docs/get-started/testnet.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.irisnet.org/docs/get-started/testnet.html</a></li>
</ul>
<hr>
<p><strong>Nebulas</strong>（星云）。</p>
<p>测试网：<a href="https://github.com/nebulasio/go-nebulas/tree/testnet" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/nebulasio/go-nebulas/tree/testnet</a></p>
<p><del>下载这个项目比我想象的要大很多。。。</del></p>
<p>算了暂时没空搞了。</p>
<h1 id="去中心化交易协议"><a href="#去中心化交易协议" class="headerlink" title="*去中心化交易协议"></a>*去中心化交易协议</h1><p>了解AMM (Automated Market Maker)和闪兑协议，统计⽬前区块链上去中⼼化交易协议上质押的不同交易对的资产总量，⽐如Uniswap和Balancer，分析其对中⼼化交易的冲击和影响。</p>
<p>参考⽂档：</p>
<ul>
<li><a href="https://app.uniswap.org/#/swaphttps://uniswap.info/home" target="_blank" rel="noopener external nofollow noreferrer">https://app.uniswap.org/#/swaphttps://uniswap.info/home</a></li>
<li><a href="https://balancer.exchange/#/swap" target="_blank" rel="noopener external nofollow noreferrer">https://balancer.exchange/#/swap</a></li>
</ul>
<hr>
<blockquote>
<p><a href="https://academy.binance.com/en/articles/what-is-an-automated-market-maker-amm" target="_blank" rel="noopener external nofollow noreferrer">What Is an Automated Market Maker (AMM)?</a></p>
<p><a href="https://www.blocktempo.com/automated-market-maker-101/" target="_blank" rel="noopener external nofollow noreferrer">DeFi 科普｜去中心化金融窜起，什么是「自动做市商AMM」？</a></p>
</blockquote>
<p><strong><font color=blue>自动做市商 AMM (Automated Market Maker)</font></strong>：去中心化的交易中心。用户登记数字资产，并提供兑换和赚取手续费。</p>
<p><strong><font color=blue>闪兑</font></strong>：闪兑就是快速的货币兑换。这里提到的<strong>闪兑协议</strong>助教说理解为uniswap就可以了。</p>
<blockquote>
<p><a href="https://www.cailu.net/article/12993269509803396.html" target="_blank" rel="noopener external nofollow noreferrer">最近比较火热的Uniswap协议，听说过吗？</a></p>
<p><a href="https://learnblockchain.cn/article/274" target="_blank" rel="noopener external nofollow noreferrer">新手指南 | Uniswap 是什么？</a></p>
</blockquote>
<p><strong>Uniswap</strong>：<a href="https://info.uniswap.org/pairs" target="_blank" rel="noopener external nofollow noreferrer">https://info.uniswap.org/pairs</a></p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127152504939.png" class="" title="Uniswap资产总量">
<p><strong>Balancer</strong>：<a href="https://balancer.finance/" target="_blank" rel="noopener external nofollow noreferrer">https://balancer.finance/</a></p>
<p>没有找到Balancer的资产界面。。（只找到了：<a href="https://pools.balancer.exchange/#/explore" target="_blank" rel="noopener external nofollow noreferrer">https://pools.balancer.exchange/#/explore</a>）</p>
<img data-src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/image-20201127181420668.png" class="" title="pools liquidity">
<p><del>去中心化交易市场当然会对中心化交易市场造成冲击辣</del>。目前的去中心化市场只是提供了数字资产的交易，实际资产的交易很难保真地数字化，也就很难通过密码学或者区块链的方式来保证去中心化以后的可信度。所以，在实体交易方面，中心化交易市场仍然是无法被取代的。</p>
<p>但是这对于中心化的数字货币交易所来说不是一个好消息，因为去中心化的AMM可以很容易地取代它们并且为用户提供更高的效率和更低的手续费。</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>区块链</tag>
        <tag>以太坊</tag>
      </tags>
  </entry>
  <entry>
    <title>关于对抗样本的思考</title>
    <url>/%E5%85%B3%E4%BA%8E%E5%AF%B9%E6%8A%97%E6%A0%B7%E6%9C%AC%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>关于对抗样本的思考。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=2ahUKEwi07fuKsb3gAhWadXAKHToRDHAQFjACegQICBAB&amp;url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F42667844&amp;usg=AOvVaw3Hbqy0q643eIDtGSEGjbYn" target="_blank" rel="noopener external nofollow noreferrer"><strong>对抗样本Adversarial Examples - 知乎</strong></a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwi07fuKsb3gAhWadXAKHToRDHAQFjAAegQIChAB&amp;url=https%3A%2F%2Fwww.leiphone.com%2Fnews%2F201704%2FK24dkB7EGuogc79M.html&amp;usg=AOvVaw1zza5AutP-WLz-zELbW4sY" target="_blank" rel="noopener external nofollow noreferrer">一文详解深度神经网络中的对抗样本与学习| 雷锋网</a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=2ahUKEwi07fuKsb3gAhWadXAKHToRDHAQFjABegQIBRAB&amp;url=https%3A%2F%2Fwww.leiphone.com%2Fnews%2F201806%2FaLeiPZA0FbVtQI6M.html&amp;usg=AOvVaw3on6tf1Pbw326VybtHpWm-" target="_blank" rel="noopener external nofollow noreferrer">对抗样本的基本原理| 雷锋网</a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwidodiEtL3gAhVMZt4KHTaRBmkQFjAAegQICRAB&amp;url=https%3A%2F%2Fblog.csdn.net%2Fbhneo%2Farticle%2Fdetails%2F82254198&amp;usg=AOvVaw2LfjLxAPfV4FftLr-E0qR6" target="_blank" rel="noopener external nofollow noreferrer">深度学习的几何观点（1） - 流形分布定律- bhneo的博客- CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1367336" target="_blank" rel="noopener external nofollow noreferrer">学界 | 三维对抗样本的生成方法MeshAdv，成功欺骗真实 …</a></p>
<p><a href="https://blog.csdn.net/omnispace/article/details/77505881" target="_blank" rel="noopener external nofollow noreferrer">生成对抗网络简介（包含TensorFlow代码示例）【翻译 …</a></p>
<p><a href="https://www.leiphone.com/news/201710/AixG88EkKRDri7Vd.html" target="_blank" rel="noopener external nofollow noreferrer">强化学习在生成对抗网络文本生成中扮演的角色（Role of RL in Text Generation by GAN）（上）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36880287" target="_blank" rel="noopener external nofollow noreferrer">GAN+文本生成：让文本以假乱真</a></p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>对抗样本（<strong>Adversarial Examples</strong>），这一概念在<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1312.6199.pdf" rel="external nofollow noreferrer">Szegedy</a><a href="http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1312.6199.pdf" rel="external nofollow noreferrer"> et al. (2014b)</a>中提出：</p>
<ul>
<li>对输入样本故意添加一些<strong>人无法察觉</strong>的细微的干扰，导致模型以高置信度给出一个错误的输出。</li>
</ul>
<p>主要的干扰类型有：</p>
<ul>
<li>全图微干扰</li>
<li>单像素宏干扰</li>
<li>随机图片干扰</li>
</ul>
<blockquote>
<p>所以大体来说，对抗性样本的存在是因为<strong>数据维度通常过高</strong>，即使考虑所在的子区域，往往还是过高，<strong>对整个（数据分布的）空间的搜索是不可行的</strong>。在训练样本没有覆盖的区域，无论该区域是否属于数据分布所在的区域，无论模型的capacity够不够，都有出现对抗性样本的可能。尽管深度学习中一直主张<code>distributed representation</code>已大幅优于局部泛化，维度的诅咒仍是一个无法摆脱的难题。</p>
</blockquote>
<h1 id="风景无限好-广阔的高维空间"><a href="#风景无限好-广阔的高维空间" class="headerlink" title="风景无限好-广阔的高维空间"></a>风景无限好-广阔的高维空间</h1><h2 id="雾里看花-手写识别"><a href="#雾里看花-手写识别" class="headerlink" title="雾里看花-手写识别"></a>雾里看花-手写识别</h2><p>让我们来看看<a href="https://www.kaggle.com/c/digit-recognizer" target="_blank" rel="noopener external nofollow noreferrer"><strong>手写识别</strong></a>的例子：</p>
<ul>
<li>一张手写数字的图片由<code>28x28</code>个二值像素（784）组成，训练数据为<code>420k</code>。</li>
</ul>
<p>一张示意图片文件如下：（数字<code>6</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000000011100000000000</span><br><span class="line">0000000000000111111000000000</span><br><span class="line">0000000000111111111110000000</span><br><span class="line">0000000000111111111110000000</span><br><span class="line">0000000011111111000000000000</span><br><span class="line">0000000111111100000000000000</span><br><span class="line">0000000111110000000000000000</span><br><span class="line">0000001111110000000000000000</span><br><span class="line">0000000111110000000000000000</span><br><span class="line">0000001111110000000000000000</span><br><span class="line">0000001111100000000000000000</span><br><span class="line">0000001111000001111000000000</span><br><span class="line">0000001111100011111110000000</span><br><span class="line">0000011111101111111111000000</span><br><span class="line">0000011111111111111111110000</span><br><span class="line">0000011111111111111111110000</span><br><span class="line">0000011111111110001111110000</span><br><span class="line">0000001111111110000111111000</span><br><span class="line">0000001111111100000011111000</span><br><span class="line">0000011111110000000001111000</span><br><span class="line">0000001111100000000001111000</span><br><span class="line">0000000111110000000000111100</span><br><span class="line">0000000111111000000001111100</span><br><span class="line">0000000111111000000011111100</span><br><span class="line">0000000011111111111111111000</span><br><span class="line">0000000000111111111111111000</span><br><span class="line">0000000000001111111111100000</span><br><span class="line">0000000000000000111000000000</span><br></pre></td></tr></table></figure>
<p>我们估算一下图片空间究竟有多大：</p>
<ul>
<li>784个二值像素，则整个图片空间相当于$2^{784}\approx 10^{80}$。</li>
</ul>
<p>而训练数据有多少呢？</p>
<ul>
<li><code>420k</code>$\approx 10^{5}$。</li>
<li>只相当于整个图片空间的$\cfrac{1}{10^{75} }$。（几乎可以忽略不计）</li>
</ul>
<blockquote>
<p>这简直退化成为了<strong>异常检测</strong>问题。因为图片是数字的概率几乎与图片出现某种异常的概率接近。</p>
</blockquote>
<p>这就是一个<strong>正样本空间相对于总空间极度稀疏</strong>的问题了。</p>
<p>首先我们必须认识到，一个$2^{784}\approx 10^{80}$大小的空间容量甚至可以与<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=2ahUKEwiH3vCYv73gAhWHdd4KHRcvDfoQFjADegQIBRAB&amp;url=https%3A%2F%2Fwww.wukong.com%2Fquestion%2F6432490235526906113%2F&amp;usg=AOvVaw06y8ocDrG45tttsfab1K1g" target="_blank" rel="noopener external nofollow noreferrer">宇宙的基本粒子总数</a>等量齐观。</p>
<h1 id="天涯海角-欧式距离的膨胀"><a href="#天涯海角-欧式距离的膨胀" class="headerlink" title="天涯海角-欧式距离的膨胀"></a>天涯海角-欧式距离的膨胀</h1><p>欧式距离，曼哈顿距离。</p>
<p>继续在图片中沿用欧氏距离度量是非常不明智的，因为相似的图片可以在高维空间中存在极大的欧氏距离。这使得分类器很难产生合理的决策超平面。</p>
<h1 id="心意相通-同余类引理"><a href="#心意相通-同余类引理" class="headerlink" title="心意相通-同余类引理"></a>心意相通-同余类引理</h1><p>在<a href="https://blog.csdn.net/bhneo/article/details/82254198" target="_blank" rel="noopener external nofollow noreferrer">深度学习的几何观点（1） - 流形分布定律</a>中提到了：</p>
<ul>
<li><strong>流形分布定律</strong>：自然界中同一类别的高维数据，往往集中在某个低维流形附近。</li>
<li><strong>聚类分布定律</strong>：这一类别中不同的子类对应着流形上的不同概率分布，这些分布之间的距离大到足够将这些子类区分。 </li>
</ul>
<p>如果给的对抗样本集合不符合上述两个定律，即不与原数据构成低维流形，且不聚类。那么理论上，是绝然没有办法可以有效地与对抗样本进行处理的。</p>
<p>因此，给定一个测试样本，首先还要看看它是否是原数据集的一个低位流形拓展。如果不是，那么这个测试数据应当被认为失效。</p>
<p>高维同余类。</p>
<p>在图像处理中，加入同余修正可以大幅提高维度分布对<strong>聚类分布定律</strong>的适用性。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>单分类（one-class classification）</title>
    <url>/%E5%8D%95%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><strong>单分类</strong>（one-class classification）是针对只有正样本的数据集所使用的分类方法。它试图从数据集寻找模式，因而从更大范围的假设空间中有效地将正样本和<strong><font color=red>潜在</font>的负样本</strong>分开。单分类算法<strong>只关注与样本的相似或匹配程度</strong>，对于未知的部分不妄下结论。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/One-class_classification" target="_blank" rel="noopener external nofollow noreferrer">One-class classification-Wiki</a></p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Machine_learning" target="_blank" rel="noopener external nofollow noreferrer">machine learning</a>, <strong>one-class classification (OCC)</strong>, also known as <strong>unary classification</strong> or <strong>class-modelling</strong>, tries to <em>identify</em> objects of a specific class amongst all objects, by primarily learning from a <a href="https://en.wikipedia.org/wiki/Training_set" target="_blank" rel="noopener external nofollow noreferrer">training set</a> containing only the objects of that class,<a href="https://en.wikipedia.org/wiki/One-class_classification#cite_note-1" target="_blank" rel="noopener external nofollow noreferrer">[1]</a>  although there exist variants of one-class classifiers where  counter-examples are used to further refine the classification boundary.  This is different from and more difficult than the traditional <a href="https://en.wikipedia.org/wiki/Classification_(machine_learning" target="_blank" rel="noopener external nofollow noreferrer">classification</a>) problem, which tries to <em>distinguish between</em>  two or more classes with the training set containing objects from all  the classes. An example is the classification of the operational status  of a nuclear plant as ‘normal’:<a href="https://en.wikipedia.org/wiki/One-class_classification#cite_note-:1-2" target="_blank" rel="noopener external nofollow noreferrer">[2]</a>  In this scenario, there are few, if any, examples of catastrophic  system states; only the statistics of normal operation are known. </p>
<p>While many of the above approaches focus on the case of removing a  small number of outliers or anomalies, one can also learn the other  extreme, where the single class covers a small coherent subset of the  data, using an <a href="https://en.wikipedia.org/wiki/Information_bottleneck_method" target="_blank" rel="noopener external nofollow noreferrer">information bottleneck</a> approach.<a href="https://en.wikipedia.org/wiki/One-class_classification#cite_note-3" target="_blank" rel="noopener external nofollow noreferrer">[3]</a> </p>
</blockquote>
<p><a href="https://www.cnblogs.com/fengfenggirl/p/One-Class-Learning.html" target="_blank" rel="noopener external nofollow noreferrer">TensorFlow上实践基于自编码的One Class Learning</a></p>
<p>相关Paper：</p>
<blockquote>
<p><a href="https://arxiv.org/pdf/1801.05365.pdf" target="_blank" rel="noopener external nofollow noreferrer">Learning Deep Features for One-Class Classification</a></p>
<p><a href="https://cs.uwaterloo.ca/~s255khan/files/occ_survey09.pdf" target="_blank" rel="noopener external nofollow noreferrer">A Survey of Recent Trends in One Class Classification</a></p>
<p><a href="https://cs.uwaterloo.ca/~s255khan/files/KER_sskmm_final.pdf" target="_blank" rel="noopener external nofollow noreferrer">One-class  classification:  taxonomy  of  study  and review  of  techniques</a></p>
<p><a href="http://www.jmlr.org/papers/volume2/manevitz01a/manevitz01a.pdf" target="_blank" rel="noopener external nofollow noreferrer">One-Class SVMs for Document Classification</a></p>
<p><a href="https://www.researchgate.net/publication/223016357_One-class_document_classification_via_Neural_Networks" target="_blank" rel="noopener external nofollow noreferrer">One-class document classification via Neural Networks</a></p>
<p><a href="https://hal.archives-ouvertes.fr/hal-00862706/document" target="_blank" rel="noopener external nofollow noreferrer">One class random forests</a></p>
<p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5061461/" target="_blank" rel="noopener external nofollow noreferrer">One-Class Classification-Based Real-Time Activity Error Detection in Smart Homes</a></p>
<p><a href="https://pure.uvt.nl/ws/portalfiles/portal/1517370/Janssens_outlier_11-06-2013.pdf" target="_blank" rel="noopener external nofollow noreferrer">Outlier selection and one-class classification</a></p>
</blockquote>
<p>Github 实现：</p>
<blockquote>
<p><a href="https://github.com/wiseodd/generative-models" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/wiseodd/generative-models</a></p>
<p><a href="https://github.com/ikostrikov/TensorFlow-VAE-GAN-DRAW" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ikostrikov/TensorFlow-VAE-GAN-DRAW</a></p>
</blockquote>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h1 id="One-class-SVM"><a href="#One-class-SVM" class="headerlink" title="One-class SVM"></a>One-class SVM</h1><h1 id="One-class-VAE"><a href="#One-class-VAE" class="headerlink" title="One-class VAE"></a>One-class VAE</h1>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>AI</tag>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>南国行记</title>
    <url>/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/</url>
    <content><![CDATA[<p>本文记载深圳OS项目实习的一些见闻。<a id="more"></a></p>
<h1 id="8月2日-向南"><a href="#8月2日-向南" class="headerlink" title="8月2日 向南"></a>8月2日 向南</h1><p>疫情后的湖北（宜昌），还是一种比较严肃的气氛。</p>
<p>似乎高速公路的通行上仍存在一定问题（这个问题应该存在了几年了），跨省界时需要转小型车，再转为宜昌交运客车。当地的客车似乎更高级一些，设备更新，座位有重力感应，这样与安全带插扣联合在一起，便可以保证安全带的使用——只是，空座位上确实不能放置物品了。</p>
<p>听说这几天深圳强降水，有些庆幸选择了高铁前往。如果是飞机，可能又要延误（之后发现确实有人延误。。）。我为数不多的飞行体验中，就有一次接近半天的延误。人们常常夸赞航班的超高安全性，但我却不以为然。飞机的安全性是通过全面“规避风险”来获得的，这意味着飞行本身是一件高风险的事。而火车或者汽车则不一样，它们的基础风险是很低的，它们规避风险的需求也更少。</p>
<p>但，“规避风险”是一件非常强调主观能力的事情。</p>
<p>窗外突然开始下雨。刮大风。并且能见度变得很低。可以在空中看到明显的风雨轨迹。隧道中的应急车道上停靠了大量避雨的私家车。但过了一段距离，雾渐散了。雨也消了。</p>
<p>看到崇山峻岭间有些鬼斧式的地貌。公路和车辆在森林中一闪而过。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809205806820.png" class="" title="image-20200809205806820">
<p>人对自然的改造。也是脉络式的改造。</p>
<p>崇山峻岭也隐去了，平原，城市的轮廓浮现出来。</p>
<p>世界太大了。单独的人，单独的建筑，都显得很渺小。思维超出个体时，行为是否能超出个体呢？</p>
<hr>
<p>高铁上可以明显感到与之前的交通工具在速度上的差异。出发时还是早晨，天气晴朗，云海只淡淡的一层，并形成起伏的波浪线。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809205842032.png" class="" title="image-20200809205842032">
<p>没想到中途的站点竟经停武汉。</p>
<p>病毒的风险，何尝又不是一种主观能力上的风险规避。跟航班也有一些相似性。</p>
<p>体验了一把在高铁上点外卖的感觉。结论：太贵。</p>
<p>无论如何舒适的环境，坐久了都会变得不是很舒适。可能还不够舒适?</p>
<hr>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210052524.png" class="" title="image-20200809210052524">
<p>深圳的城市从宏观上跟北京之类的大都会没有什么区别。但是，细节之处却相当不同。深圳有专门的出租车集散地，这是我在其他省市所从未见过的，深圳的交通似乎更加严格，也许这是一种“先行区”的表现吧?深圳是一座很有活力的城市，从街景的设计中可以看出，一些蓝色的吉祥物（没有认出来是什么），还有雕塑。深圳的非机动车道和人行道镶嵌粘合在一起，这也是其他城市我所未见的新。深圳也许暂时我没有体味到创造的新，但是标新立异的新，确实令人侧目。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211543865.png" class="" title="image-20200809211543865">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210030842.png" class="" title="image-20200809210030842">
<p>到了酒店，直观的感受就是，高端的生活方式真是难以想象的舒适。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210040962.png" class="" title="image-20200809210040962">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211605199.png" class="" title="image-20200809211605199">
<p>室友是来自数学系的大佬，听说为了契合自己的计划，甚至故意挂了科从而可以留校留级。这种认知是反常的，然而在了解之后又立马显得十分自然。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210716168.png" class="" title="image-20200809210716168">
<h1 id="8月3日-实验室"><a href="#8月3日-实验室" class="headerlink" title="8月3日 实验室"></a>8月3日 实验室</h1><p>六点多醒了。悠哉游哉到鹏程实验室，脚程大约3分钟。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210646859.png" class="" title="image-20200809210646859">
<p>早餐自助。还是很好吃的。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210702567.png" class="" title="image-20200809210702567">
<p>安排也大致有了：<a href="https://github.com/rcore-os/zCore/wiki/zcore-summer-of-code。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/zCore/wiki/zcore-summer-of-code。</a></p>
<p>今天大概是：rCore 开发历史和选题介绍。</p>
<blockquote>
<p>与同学交流选题</p>
<p>上午11:00 B栋一楼合影，3楼参观</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210753003.png" class="" title="image-20200809210753003">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210801369.png" class="" title="image-20200809210801369">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210808670.png" class="" title="image-20200809210808670">
<p>中午二楼就餐</p>
<p>晚上：聚餐和小活动</p>
</blockquote>
<p>安排。：）</p>
<hr>
<p>中午吃多了。。<del>控制控制</del>。。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809210727686.png" class="" title="image-20200809210727686">
<hr>
<p><strong>第二届开源操作系统技术研讨会</strong>。</p>
<hr>
<p>没有做完实验的，先把前面六个实验全部做完。</p>
<p>操作系统的用户态、内核态的转换，在rust设计中得到了优化。通过异步的办法，让操作系统的性能有一个巨大的提升。（用户态中断?）</p>
<p>对于传统操作系统，异步的编写很麻烦。在rust中，则可以由编译器来负责完成。rust语言有可能对操作系统有一个本质性的影响。</p>
<p><strong>信号</strong>：比如键盘信号，<strong>用户态</strong>的一个信号。信号处理函数在用户态，平时不激活。很诡异地一个设计，需要把很多东西凑合到一起。</p>
<p>RISC-V中有一个用户态中断。这件事完成后，那么就可以实现在用户态完成信号机制。</p>
<hr>
<p>第二阶段没有什么参考，所以需要自己规划。</p>
<p>目的：<strong>做开源社区</strong>。</p>
<p>明天下午国科大本科毕设分享：RISC-V处理器流片背后的故事。</p>
<p>对于<strong>树莓派</strong>，PCB开源但<strong>GPU不开源</strong>，ucore移植的图形显示很不好搞，图形渲染不好弄，只能弄图形点阵。</p>
<p>目前有一个对标树莓派的全开源项目，似乎。</p>
<p>周四去华为参观?</p>
<p>龙芯杯似乎有点内卷。。QAQ</p>
<p>我的树莓派4已经吃灰一年了感觉。。未来10年间主流指令集会从x86过渡到arm?</p>
<hr>
<p>关于zCore-Tutorial的一些特点。自顶向下。逐步替换底层实现。</p>
<hr>
<p>网络集群的特点就是，每个人都很有特点。这其实有点循环论证的问题。</p>
<p>大二的同学竟然有7位。不禁感叹时光流逝。当年我在大二时，大概才开始学习算法，那年的算法课我也不过是60分飘过。</p>
<p>开源协议赶紧再记一下：</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/253a7b1819e2af555ed0a7e0f11a0b59_r.jpg" class="" title="preview">
<hr>
<p><del>今晚真的要聚餐</del>。</p>
<h1 id="8月4日-一生一芯"><a href="#8月4日-一生一芯" class="headerlink" title="8月4日 一生一芯"></a>8月4日 一生一芯</h1><p>今天迟到了。不过好像问题不大。匆匆吃完外带的早餐。</p>
<p>貌似github.io被墙了。</p>
<p>说实话zCore-Tutorial这个东西，现在想参与还是比较无力的。作者wrj本身也就写了一点点内容。但他把一些大纲拟好。</p>
<p>hal（硬件抽象层，Hardware Abstraction Layer），与硬件隔离。</p>
<blockquote>
<p>目前支持裸机（Bare Metal），和Linux/Mac OS环境。</p>
</blockquote>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/structure.svg" class="" title="img">
<p>rust-analyzer听说很好用。clion听说很好用。</p>
<p>大概了解了一下zCore的结构。</p>
<hr>
<p>进度资料：<a href="http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2019/g1" target="_blank" rel="noopener external nofollow noreferrer">2019年操作系统专题训练大实验-Fuchsia OS调研</a>。抽时间了解一下他们都做了些什么，以及进度。</p>
<p>关于Fuchsia OS：<a href="http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2019/g1?action=AttachFile&amp;do=view&amp;target=%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A.pdf。" rel="external nofollow noreferrer">http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2019/g1?action=AttachFile&amp;do=view&amp;target=%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A.pdf。</a></p>
<blockquote>
<p>“非典型”微内核。（勉强算微内核）</p>
<p>Fuchsia是Google开发的，可能将用于取代Android。</p>
<p>rCore有实现微内核的潜力，这最终形成了zCore?</p>
</blockquote>
<h2 id="国科大本科毕设研讨会——“一生一芯”项目访谈"><a href="#国科大本科毕设研讨会——“一生一芯”项目访谈" class="headerlink" title="国科大本科毕设研讨会——“一生一芯”项目访谈"></a>国科大本科毕设研讨会——“一生一芯”项目访谈</h2><p>今天的研讨会终于给人比较正式的感觉。上午的自由讨论，最终只剩下自由，而没有讨论。</p>
<p>注意：一生一芯是指，每一个学生设计一个芯片。</p>
<hr>
<p>介绍，开发经验，经历分享，未来展望。</p>
<blockquote>
<p>余子濠、金越（验证测试）、王华强（前端/DEBUG）、王凯帆（核参数/应用）、张林隽（TLB）、张紫飞（微结构）</p>
</blockquote>
<h3 id="第一环节-介绍"><a href="#第一环节-介绍" class="headerlink" title="第一环节 介绍"></a>第一环节 介绍</h3><ol>
<li>芯片基本情况<ol>
<li>“果壳”，NutShell</li>
<li>一款功能完整的RISC-V处理器</li>
<li>国产110nm工艺完成流片（面积10 mm^2），流片一次二十万???</li>
<li>有对应的果壳<strong>板卡</strong></li>
<li>SDRAM大型内存操作系统只能跑200MHz。其他内存占用小的OS可以到350MHz。<ol>
<li>SDRAM中途还换了颗粒，一开始只能测试小程序最多128K左右</li>
</ol>
</li>
<li>跑分一般</li>
<li>4个月的前端开发</li>
<li><del>自产自销QAQ</del></li>
<li>疫情原因，芯片测试并没有实际参与</li>
<li>第一版芯片电路（电源线）接错，取指成功，但是会烧掉板子（烧了两块，然后回厂）</li>
</ol>
</li>
<li>现在回过头来看, 流片难吗?<ol>
<li>五位同学主要接触的是前端设计的工作<ol>
<li>与流片相关的工作：时序逻辑设计要求比较严格</li>
</ol>
</li>
<li>流片的时间节点的压力比较大<ol>
<li>如果之后有问题的话，无法修改</li>
<li>爆肝</li>
</ol>
</li>
<li><del>王凯帆同学中途出国被反复鞭尸QAQ，他的一些软件任务由余博士完成</del></li>
</ol>
</li>
<li>什么时候认识到项目的复杂性? 如何应对?<ol>
<li>课程中老师常常把一些东西黑盒化，但是在项目中需要接触验证的环境（测试程序的正确性），DEBUG比较艰难——<strong>了解每一行代码的细节</strong></li>
<li><del>加强版的龙芯杯QAQ</del>，<strong>版本管理</strong>很重要</li>
<li>前期可以黑盒，但后期必须了解硬件外设的细节，比如几千行的 verilog 代码</li>
<li>后期开始参与用户态使用时，感觉到复杂性。可能需要引入<strong>编程范式</strong>?<ol>
<li>一步一步，任务驱动，一层一层慢慢解开黑盒</li>
<li>阅读大型项目的方法~~~</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="第二环节-开发"><a href="#第二环节-开发" class="headerlink" title="第二环节 开发"></a>第二环节 开发</h3><ol>
<li><p>使用 <code>Chisel</code> 有什么感想?</p>
<ol>
<li><code>Scala</code> （相对于 <code>Rust</code>）更强调函数式编程、面向对象编程</li>
<li><code>Chisel</code> 就是基于 <code>Scala</code></li>
<li><code>Chisel</code> 描述硬件的语言方式是非常抽象高级的，<code>Verilog</code> 的抽象层次很低，可以视作“电路设计中的汇编语言”</li>
<li>在 <code>Chisel</code> 里面 DEBUG 一般直接打印信息<ol>
<li>传统看波形：通过信号周期（几千几万的那种）跟踪，太难了</li>
</ol>
</li>
<li>有些功能 <code>Chisel</code> 解决不了或者实现会很复杂<ol>
<li>多时钟可以搞，但是会更复杂一点</li>
<li>DDR的复杂度很高，Contrler很难搞<ol>
<li>CPU和SDRAM的时钟频率不一样，需要转换桥?</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>使用chisel如何调试?</p>
<ol>
<li>处理器在线<strong>差分</strong>测试仿真验证<ol>
<li>nemu是一个简版的qemu，在qemu里面自定义DEBUG很麻烦，而且封装过度当需要很小（获取一个寄存器的值）开销很大<ol>
<li>nemu里面可以直接通过函数调用来获取DEBUG信息</li>
<li>nemu和qemu可以相互映证</li>
<li>直接用qemu可能会有一些坑</li>
</ol>
</li>
<li>模拟器作为动态链接库连接到仿真程序</li>
<li>处理器在指令完成时发出比对信息，<strong>当比对信息不一致时立刻报错</strong>并输出当前处理器状态</li>
</ol>
</li>
</ol>
</li>
<li><p>如何测试验证模块的正确性?</p>
<ol>
<li><p>设计对比实验，如果结果相同则认为正确</p>
</li>
<li><p>TLB中可以自行设计测例，来验证多种的功能</p>
</li>
<li><p>行为是否符合预期?</p>
</li>
<li><p>没有BUG的情况下，如果提升性能?</p>
<ol>
<li><p>微结构设计?。。</p>
</li>
<li><p>写一些比较小的模块/程序，观察一个请求究竟做了什么事情，做<strong>周期级别的时间分析</strong>（打日志）。定位性能倒退的原因。</p>
</li>
</ol>
</li>
<li><p>（参数化框架）配置的组合数很大，可能需要用到<strong>回归测试</strong>，遍历所有的系统模块的组合</p>
</li>
</ol>
</li>
<li><p>适配操作系统的过程中遇到哪些困难? 如何克服?</p>
<ol>
<li>流片前开发（六个系统软件/OS）<ol>
<li>Nanas-lite：用户空间和内核空间共用同一个1GB空间，导致PTE覆盖</li>
<li>FreeRTOS</li>
<li>RT-thread：Idscript有ALIGN（4），4全部改成8跑通了</li>
<li><strong>xv6</strong>：不刷TLB（qemu里面没有刷TLB的概念）此时fork的时候Copy on Write机制会出现问题，还有load的时候?<ol>
<li>只有运行一些很小的程序才会高几率出现此BUG，大程序可能会把TLB刷下去</li>
</ol>
</li>
<li>Linux kernel：编了一份SMP<ol>
<li>运行的时候随机爆炸</li>
<li>上周的多核linux刷TLB又重新弄了一下</li>
<li>其他没有太多的坑</li>
</ol>
</li>
<li>Debian：跨页的4字节指令</li>
</ol>
</li>
<li>流片后测试<ol>
<li>4字节flash读取会导致一些读写取指相关的错误</li>
<li>XIP（eXecute In Place）：用flash取指执行，用sdram来读写数据<ol>
<li>只适合“一个程序”<ol>
<li>多个独立程序加载时会产生覆盖</li>
<li>程序段之间有2MB的空洞，如果直接全部加载进来，很浪费（总共只有4MB的内存）</li>
<li>因此将BBL和linux做成了一个程序</li>
</ol>
</li>
<li>linux数据段默认按页对齐，但XIP要求存储连续<ol>
<li>修改链接脚本，把所有数据段合并成一个<ol>
<li>段间空洞改为段内空洞，对XIP透明化</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>内核识别到的内存大小为0<ol>
<li>实际RAM地址超出了默认内存地址空间的范围（1GB的间隔）</li>
<li>强行硬编码增加了1GB的空间。。</li>
</ol>
</li>
<li>执行内核线程hello</li>
<li>执行用户线程hello<ol>
<li>由于前面设计的锅，sdram中不能直接执行代码，所以分页的时候对进程页面要拦截并进行手动地址映射设置到flash</li>
<li>对flash读8字节，将ld指令魔改位lw的4字节指令</li>
</ol>
</li>
<li><strong>vDSO</strong>（Virtual dynamic shared object）<ol>
<li>一个映射到用户空间的so文件，可以在不陷入内核的情况下执行一些简单的系统调用</li>
</ol>
</li>
<li>每次取指都需要从flash中取，需要成千上万个周期，变成了实际意义上的多周期</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="第三环节-经历"><a href="#第三环节-经历" class="headerlink" title="第三环节 经历"></a>第三环节 经历</h3><ol>
<li>印象最深刻的bug<ol>
<li>使用测试框架定位复杂BUG<ol>
<li>模拟器和处理器的行为不太一样，33亿条指令时<strong>捕捉到错误</strong>。。。</li>
<li><strong>边界测例</strong>：一条指令横跨了两个页面（前半和后半被分开，会产生PAgeFault）</li>
<li>特殊的Page Fault需要在指令集手册上查找，需要往特定的寄存器中写入值</li>
</ol>
</li>
<li>硬件引脚输出问题<ol>
<li>换成显式的硬件逻辑，突然就跑通了</li>
<li>对硬件手册信息（约定）的理解有错，“N”，低位全部接成了高位引脚</li>
</ol>
</li>
<li>TLB取地址<ol>
<li>TLB转换对了，但取出来的值不对</li>
<li>看了4天log信息，在x86中打印流程</li>
<li>最终师兄2小时找出，是x86的软件的一个BUG（没有刷TLB）</li>
</ol>
</li>
<li>Cache（SRAM）黑盒爆炸<ol>
<li>BUG不断修锅，然后不断出新BUG</li>
</ol>
</li>
<li>去Cache中间层<ol>
<li>整个核的行为发生很大变化</li>
<li>握手信号初始化的小问题<ol>
<li>但是性能显著降低</li>
<li>分支预测器隐含的条件，去掉Cache后就不满足了</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>有没有坑过队友/被队友坑过?<ol>
<li>主要还是硬件方面的事情</li>
<li>Cache流水线（同时访问）有仲裁级相关的问题</li>
</ol>
</li>
<li>和龙芯杯相比有什么不同?<ol>
<li><strong>验证环境</strong>更好（极大提高DEBUG生产效率）</li>
<li>代码质量需要一定的水平</li>
</ol>
</li>
<li>第一次对项目进行可配置化, 感觉如何?<ol>
<li>相比 verilog 好上很多了，要改的东西更少——敏捷开发（3周）</li>
</ol>
</li>
<li>外设的验证工作有什么挑战?<ol>
<li>多维度的复杂性：设备多样性、场景多样性、扩展多样性。</li>
</ol>
</li>
<li>课堂上没讲过硬件填充的TLB, 你是如何实现正确的?<ol>
<li>TLB实现需要满足实验手册的约定，但需要自己去实现</li>
<li>从<strong>状态机</strong>开始，不断扩充、成型（有点搞科研的味道；不确定性）</li>
</ol>
</li>
<li>Nextline预取器听上去很简单, 但你花了两个月才实现正确, 有什么坑?<ol>
<li>功能：给一个地址，取这个地址+1</li>
<li>最初实现预取器发现性能倒退：L1 Cache访问比较频繁，如果放到L1前面就会性能下降（每次预取器加倍消耗）。所以又采用了L2 Cache，放到了L2 Cahce的前面，</li>
</ol>
</li>
</ol>
<h3 id="第四环节-未来"><a href="#第四环节-未来" class="headerlink" title="第四环节 未来"></a>第四环节 未来</h3><ol>
<li>一生一芯的经验对大家做毕设有什么帮助?<ol>
<li>假设论证、心态。。</li>
<li>坚持、走通一条路。</li>
<li>quick and dirty麻雀原则：先弄出来，再疯狂改进。<ol>
<li>对前景要有认识，要意识到后续工作的改进瓶颈</li>
<li>保证良好的可扩展性</li>
<li>第一次设计推倒重来很正常，多次之后前景逐渐明朗</li>
</ol>
</li>
</ol>
</li>
<li>对参加下一届一生一芯项目的学弟学妹有什么建议?<ol>
<li>基础设施很重要<ol>
<li>对linux的魔改都是现在nemu中运行<ol>
<li>其它的硬件环境运行测试起来都很难</li>
</ol>
</li>
</ol>
</li>
<li>系统能力很重要<ol>
<li>不要害怕犯错</li>
<li>注重代码质量，commit水平，版本管理</li>
<li>总揽全局，对整个项目有接口性把握</li>
</ol>
</li>
<li>对下一届的期望?<ol>
<li>看实力水平，改进或者从头来走一遍（试错）?</li>
<li>水平不够，走一些弯路也是可以的?</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="zCore整体设计"><a href="#zCore整体设计" class="headerlink" title="zCore整体设计"></a>zCore整体设计</h2><p>前面讲的和以前的差不多。</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a><code>async</code></h3><p><code>async-await</code> 用同步风格编写异步代码。Rust的一个特性。</p>
<ul>
<li>本质：无栈<strong><font color=blue>协程</font></strong>（共享同一个栈，面向任务的轻量级线程），协作式调度（非抢占式）<ul>
<li><strong><font color=red>语法糖</font></strong>。同步管理被封装透明化了，所以写法上与一般代码差不多。</li>
<li>协程特点：共享栈，满足每个协程使用栈空间的最大用量（协程运行的中间状态），同时用少量的栈空间来保存每个协程的必要信息。</li>
</ul>
</li>
<li>适用于高并发IO场景<ul>
<li>可能必须解决响应时间的问题</li>
</ul>
</li>
<li>主流编程语言均以支持：C#，C++，JavaScript，Python</li>
<li>几乎没有在 bare-metal（裸机）中应用</li>
</ul>
<h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><ul>
<li>代码质量控制：<code>cargo fmt</code>，<code>cargo clippy</code></li>
<li>文档和单元测试：<code>cargo doc + cargo test + grcov</code>（<code>grcov</code> 计算测试覆盖率）<ul>
<li>（TODO）性能测试：<code>cargo bench</code></li>
</ul>
</li>
<li>carte 的拆分和发布流程：<code>cargo publish</code></li>
<li>持续集成和自动测试：GitHub Actions</li>
<li>社区合作开发：GitHub issue + PR</li>
</ul>
<hr>
<p>突然想看看《<strong>设计模式</strong>》。</p>
<h1 id="8月5日-RIOS实验室"><a href="#8月5日-RIOS实验室" class="headerlink" title="8月5日 RIOS实验室"></a>8月5日 RIOS实验室</h1><p>没想到之前关注的两个：一生一芯、RIOS都被邀请过来作报告。。tql。感觉就是这个活动很高端。</p>
<p>好的，上午依然是自由活动的性质，所以没什么事。。</p>
<hr>
<p>我的博客网址出锅了，想办法看看能不能补救。HSTS策略是真的烦。</p>
<hr>
<p><a href="https://raw.githubusercontent.com/wiki/rcore-os/zCore/files/wrj-thesis.pdf。wrj的毕设论文写得确实很详细。" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/wiki/rcore-os/zCore/files/wrj-thesis.pdf。wrj的毕设论文写得确实很详细。</a></p>
<p><a href="https://raw.githubusercontent.com/wiki/rcore-os/zCore/files/pql-thesis.pdf。" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/wiki/rcore-os/zCore/files/pql-thesis.pdf。</a></p>
<p>先把这两个毕设看一看好了。</p>
<hr>
<p>TBSI来咯。hhh</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211208300.png" class="" title="image-20200809211208300">
<h2 id="RIOS实验室研讨会"><a href="#RIOS实验室研讨会" class="headerlink" title="RIOS实验室研讨会"></a>RIOS实验室研讨会</h2><p><strong>RIOS实验室研讨会</strong>。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211157289.png" class="" title="image-20200809211157289">
<hr>
<p>张林老师有信息论的MOOC，貌似以前是TBSI的院长。 <del>然而信息论我都还没看完</del>，我太菜辣。</p>
<p>一开始基本还是一些RISC-V的背景介绍。没啥新鲜的。在经济上和政治上都有一定优势。</p>
<p>PicoRio：超低成本，成熟的社区。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211427899.png" class="" title="image-20200809211427899">
<p>TBSI 谭老师的口语实在是有点泛英语化。。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211249364.png" class="" title="image-20200809211249364">
<hr>
<p>现在PicoRio有开源地址吗?或者在哪里可以了解到最新进展呢?</p>
<blockquote>
<p>目前还没有正式地发布，文档还在慢慢更新。秋季?</p>
<p>从专门网站上找documentation。</p>
<p>PicoRio似乎不想用BSD许可证，然后再设计一个license?但是出发点是保护社区。</p>
</blockquote>
<p>其它的事情不太了解也不是很感兴趣。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211228265.png" class="" title="image-20200809211228265">
<h2 id="Sipeed矽速工程师交流会"><a href="#Sipeed矽速工程师交流会" class="headerlink" title="Sipeed矽速工程师交流会"></a>Sipeed矽速工程师交流会</h2><p>听说K210板子是从他们那批发的。。</p>
<p>矽速科技官网：<a href="https://www.sipeed.com" target="_blank" rel="noopener external nofollow noreferrer">https://www.sipeed.com</a></p>
<hr>
<p><a href="https://cn.maixpy.sipeed.com/zh/" target="_blank" rel="noopener external nofollow noreferrer">MaixPy</a>：使用简单的Micropython语法在AI芯片上快速实现有趣的功能的SDK。</p>
<blockquote>
<p>SDK组成：</p>
<ul>
<li>CMake + Kconfig<ul>
<li>CMake：自动寻找cmake文件，导入各个模块并注册</li>
<li>Kconfig：进行组件配置的选择，并生成config文件</li>
</ul>
</li>
<li>组件（驱动、micropython、模块）</li>
<li>工程（project.py）</li>
</ul>
<p>视觉、多媒体、机器流水线、人脸识别……、</p>
<p>Micropython语法：</p>
<ul>
<li>用户代码精简，易于上手，成本低（几十块钱的开发板）</li>
<li>面向对象语法，封装性好，开发速度高</li>
<li>解释型语言，快速验证</li>
</ul>
</blockquote>
<p>Micropython语法是从语法上与python不同，还是只是可以调用你们写的一些库函数?</p>
<blockquote>
<p>Micropython其实就是一个解释器，大部分时候与python语法上是兼容的。</p>
</blockquote>
<p><strong>AI 模型</strong>：</p>
<p>K210搭载了 AI 芯片吗? 它在什么方向上做了优化，和传统的芯片的不同在哪?</p>
<blockquote>
<p>AI芯片就是一个可以部署和运行模型的芯片而已。</p>
</blockquote>
<p>所有的算法模型都是提前训练好的? K210 本身支持训练吗?</p>
<blockquote>
<p>对。一般要在电脑上训练。</p>
</blockquote>
<p>KPU 是什么? 和CPU和GPU有什么不同?</p>
<blockquote>
<p>针对的应用场景不同，KPU支持的是通用运算。GPU专门处理图形处理方面的运算。</p>
<p>KPU的K只是一个命名。KPU实现了GPU功能的一些子集。</p>
</blockquote>
<p>模型压缩的方法?</p>
<blockquote>
<p>浮点运算精度调低。用一些软件工具来压缩?</p>
</blockquote>
<p><strong>MaixPy常见难点</strong>：</p>
<p>GC（垃圾回收）：GC分配的内存需要标记，内存不足的时候自动回收</p>
<p>对齐错误：指针、内存、地址对齐的问题</p>
<p>MaixPy TODO：</p>
<ul>
<li>LPU Flash run，PSRAM run：目前只支持6M的模型，如果可以存储到flash里面，需要的时候再读取，就很好</li>
<li>MaixUI：简单轻量化，减少内存消耗</li>
<li>MaixHub：分享训练好的模型的Hub网站</li>
<li>IDE：。。。</li>
<li>MaixPy on Linux：</li>
</ul>
<hr>
<p>JTAG（Joint Test Action Group，联合测试工作组）。</p>
<p>一个硬件集成式的调试工具。提供了一系列接口来调试开发板。</p>
<p>JTAG提供了图形界面化的IDE。</p>
<h1 id="8月6日-论文研读"><a href="#8月6日-论文研读" class="headerlink" title="8月6日 论文研读"></a>8月6日 论文研读</h1><p>今天主要看rCore和zCore的本科毕业设计论文。</p>
<p>Rust 的零成本开销抽象意味着，抽象的<strong>运行开销</strong>为0；如果的确要在运行时使用该抽象，也可以保证运行开销最小。</p>
<hr>
<p><strong>文档讨论会</strong>。</p>
<hr>
<p>可能需要从头开始搭一遍 zCore。（<strong>复现</strong> / <strong>拆解</strong>?）</p>
<p>然后老师又说把每一部分的代码进行分析。</p>
<blockquote>
<p>自己先理解自己的代码部分。</p>
<p>主线还是需要变化。</p>
</blockquote>
<p>操作系统 DEBUG 门槛/难度怎么改变?</p>
<blockquote>
<p>有点难度。</p>
</blockquote>
<hr>
<p><strong>华为 openEuler 研讨会</strong>。</p>
<hr>
<p>Email：guanyanjie AT huawei.com</p>
<p>华为基于服务器linux发行版，开源在码云上的一个共享社区。</p>
<p>网址：openeuler.org。</p>
<blockquote>
<p>openEuler是一个开源、免费的Linux发行版平台，将通过开放的社区形式与全球的开发者共同构建一个开放、多元和架构包容的软件生态体系。同时，openEuler也是一个创新的平台，鼓励任何人在该平台上提出新想法、开拓新思路、实践新方案。</p>
</blockquote>
<p>openEuler 是为了让华为的芯片（麒麟、鲲鹏……）出厂即可以有配套的开源发行版。建立 openEuler 社区，使能ARM生态，让世界有第二选择。</p>
<p>全软件堆栈的技术优化，打造高性能、高可靠、高安全、易用的操作系统。</p>
<hr>
<p>完全回到了原来的一个状态，自选一个项目：继续写tutorial，或者写代码的测试文档。</p>
<hr>
<p><strong>RVM晚间研讨会</strong>。</p>
<hr>
<p>Hypervisor： Virtual Machine Monitor（VMM）</p>
<p>RVM： Rcore Virtual Machine。基于 RVM 实现了 rCore/zCore 的 hypervisor。</p>
<p>不是很感兴趣。全是实现细节。</p>
<p>zCore虚拟化的更多工作：</p>
<ul>
<li>完善RVM，完成更多的测试（24/28）</li>
<li>RVM从rCore中独立出来，但有些部分还没搞好</li>
<li>跑在其它真实的环境中，目前只支持 intel 的 x86</li>
</ul>
<hr>
<p><strong>zCore 内核对象及系统调用</strong>。</p>
<hr>
<p>Zircon微内核是Fuchsia的最底层。</p>
<ul>
<li>实用主义微内核</li>
<li>使用 C++ 实现，支持 x86_64 和 ARM64</li>
<li>面向对象（微内核的传统习惯）：将功能划分到内核对象</li>
<li>默认隔离：使用 Capability 进行权限管理</li>
<li>安全考量：强制地址随机化（zCore还没实现），使用 vDSO 隔离系统调用</li>
</ul>
<p>所有的东西都可以称为内核对象。</p>
<ul>
<li>任务：Job, …</li>
<li>内存：VMAR, …</li>
<li>IPC： Channel, …</li>
<li>信号：Event, …</li>
<li>驱动：Resource, ….</li>
</ul>
<hr>
<p>Object：</p>
<ul>
<li>Object：内核对象</li>
<li>Rights：对象访问权限</li>
<li>Handle = Object + Rights：对象句柄（类似 fd）</li>
</ul>
<p>IPC：</p>
<ul>
<li>Channel：进程间通信基础设施，可以传递数据和handle</li>
<li>FIFO：报文数据传输</li>
<li>Socket：流数据传输</li>
</ul>
<p>Tasks：</p>
<ul>
<li>Job：作业，负责控制权限（类似容器）</li>
<li>Process：进程，负责管理资源</li>
<li>Thread：线程，负责调度执行</li>
</ul>
<p>一个作业可能有多个进程，一个进程可能有多个线程。进程之间没有父子关系。</p>
<p>Memory：</p>
<ul>
<li>VMO（Virtual Memory Object）<ul>
<li>Paged：分页物理内存，支持写时复制</li>
<li>Physical：连续物理内存</li>
</ul>
</li>
<li>VMAR（Virtual Memory Address Region）<ul>
<li>代表一个进程的虚拟地址空间</li>
<li>树状结构</li>
</ul>
</li>
<li>Pager：用户态分页机制</li>
</ul>
<p>Signaling and Waiting：每个 Object 有 32 个信号位，用户程序可以阻塞等待。</p>
<ul>
<li>Event（pair）：事件源/对</li>
<li>Timer：计时器</li>
<li>Futex：用户态同步互斥机制（快速）</li>
<li>Port：事件分发机制（类似epoll）</li>
</ul>
<hr>
<p><strong>zCore硬件移植和驱动开发</strong>。</p>
<hr>
<p>UEFI（Unified Extensible Firmware Interface）：增强版 BIOS。类似 Open SBI。</p>
<ul>
<li>省去了从古老的实模式进入现代长模式的汇编代码</li>
<li>丰富的外设驱动支持，快速输入输出</li>
<li>Rust UEFI 开发环境方便易用（<code>uefi-rs</code> 库）</li>
</ul>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809211634649.png" class="" title="image-20200809211634649">
<h1 id="8月8日"><a href="#8月8日" class="headerlink" title="8月8日"></a>8月8日</h1><img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212300425.png" class="" title="image-20200809212300425">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212241585.png" class="" title="image-20200809212241585">
<p>今天到海南转机，结果航班取消了。被迫在海南呆了半天。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212201438.png" class="" title="image-20200809212201438">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212224773.png" class="" title="image-20200809212224773">
<p>居然看到了椰树椰汁的厂子。。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212005022.png" class="" title="image-20200809212005022">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212027412.png" class="" title="image-20200809212027412">
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212356319.png" class="" title="image-20200809212356319">
<p>海南唯一的一家呷哺呷哺。。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212319866.png" class="" title="image-20200809212319866">
<p>买了晚上的经济舱，结果被升成头等舱了。。</p>
<img data-src="/%E5%8D%97%E5%9B%BD%E8%A1%8C%E8%AE%B0/image-20200809212406124.png" class="" title="image-20200809212406124">
<hr>
<p>一系列际遇之后到家。完结。</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>博客折腾简记</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p>这篇文章主要关于<code>hexo</code>、<code>next</code>的更新以及博客本身的优化。<a id="more"></a><code>hexo g</code>的静态文件生成速度忽然严重下降。一次完整的<code>generate</code>过程竟花费了<strong>数小时</strong>。这显然严重影响了正常使用。并且博客的访问速度成为了一个同样严重的问题，加载速度极慢同时又常常断线。种种原因使我不得不考虑对博客做出一定调整。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/hexojs/hexo/issues/1769" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/hexojs/hexo/issues/1769</a></p>
<p><a href="https://laytonsun.com/learning/2020-04/upgrade-hexo-and-next.html" target="_blank" rel="noopener external nofollow noreferrer">升级 Hexo 和 NexT 主题</a></p>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h1><p>时间一拖再拖。不能再拖了。</p>
<h1 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h1><blockquote>
<p>主要参考：<a href="https://laytonsun.com/learning/2020-04/upgrade-hexo-and-next.html" target="_blank" rel="noopener external nofollow noreferrer">升级 Hexo 和 NexT 主题</a></p>
</blockquote>
<p>最新的发行版本 (<a href="https://github.com/hexojs/hexo/releases" target="_blank" rel="noopener external nofollow noreferrer">Releases</a>)，已经是5.1.1了。</p>
<p>修改根目录 <code>package,json</code> 文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"dependencies": &#123;</span><br><span class="line">-   "hexo": "^3.9.0",</span><br><span class="line">+   "hexo": "^5.1.1",</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在修改<strong>完成以后</strong>，打开git bash，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm upgrade</span><br><span class="line">$ npm audit fix</span><br></pre></td></tr></table></figure>
<p>验证升级后的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>
<p>验证升级之后的静态文件生成速度：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>效果非常好，时间从4到5个小时缩短到10秒以内：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">INFO  1824 files generated <span class="keyword">in</span> 9.92 s</span><br></pre></td></tr></table></figure>
<p><del>generate相关问题可以认为已经解决</del>。</p>
<blockquote>
<p>以上的测试效果被下文证否。</p>
</blockquote>
<h1 id="升级-Next"><a href="#升级-Next" class="headerlink" title="升级 Next"></a>升级 Next</h1><p>在上面的参考博客中已经提到hexo可能与低版本的next存在兼容问题。</p>
<p>使用 <code>hexo s</code> 浏览以后，发现生成出的网页是一堆乱码。。</p>
<p>接着发现，虽然hexo升级到了最新版，但是hexo很多的依赖还没有修改。这里可能也存在一定的兼容问题。</p>
<p>参考：<a href="https://hexo.imydl.tech/archives/51612.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo博客及环境依赖包的正确升级方法</a></p>
<hr>
<p>Next 直接 <code>git pull</code> 即可。</p>
<hr>
<p>结果是pull没有效果，查到官方项目发现已经停止维护了，现在已经交给另一个社区版本维护去了。所以直接git pull是没有效果了。</p>
<p>最新社区项目地址：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/theme-next/hexo-theme-next</a></p>
<hr>
<p>新版Next的中文语言文件被命名为<code>zh-CN</code>。要将hexo的config文件夹中的language对应修改。否则会自动匹配为德文界面。当然你也可以自己把以前的<code>zh-Hans</code>文件拷贝过来。。</p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>逐渐深陷以前装的各种依赖的泥潭之中……</p>
<p>现在需要逐步排除BUG……</p>
<hr>
<p>相关：<a href="https://decadeheart.github.io/2020/08/18/hexo%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%97%B6%E4%B8%BB%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BAdom%E6%96%87%E6%9C%AC%E7%9A%84%E5%8E%9F%E5%9B%A0/" target="_blank" rel="noopener external nofollow noreferrer">hexo生成静态页面时主页只显示dom文本无法正常显示</a></p>
<p>但是将hexo版本回退之后，问题又出现了。<strong>静态页面的生成速度似乎又变得慢了（4min）</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  1821 files generated <span class="keyword">in</span> 4.33 min</span><br></pre></td></tr></table></figure>
<p>从另一个角度说，如果是增量式生成（即在<strong>存在public文件夹的情况下</strong>进行<code>hexo g</code>），那么效率又会偏高，达到几秒钟的量级。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  306 files generated in 3.36 s</span><br></pre></td></tr></table></figure>
<h1 id="Font-Awesome引用新变化"><a href="#Font-Awesome引用新变化" class="headerlink" title="Font Awesome引用新变化"></a>Font Awesome引用新变化</h1><p>在新版next中，Font Awesome的引用方式发生了改变。如果不加以修改，首页导航栏图标会显示出错。</p>
<p>这是之前的引用方式：</p>
<img data-src="/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E7%AE%80%E8%AE%B0/image-20200912222605824.png" class="" title="image-20200912222605824">
<p>直接使用了图标名，现在必须找到图标对应的html编码名。</p>
<img data-src="/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E7%AE%80%E8%AE%B0/image-20200912222701879.png" class="" title="image-20200912222701879">
<p>最终需要修改为：</p>
<img data-src="/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E7%AE%80%E8%AE%B0/image-20200912223000491.png" class="" title="image-20200912223000491">
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>环境迁移是痛苦的，满打满算今天也几乎做了一天的工作。</p>
<p>目前为止虽然大部分情况已经恢复到正常水平。</p>
<p>但是，在generate的时候仍然会出现renderer的error。</p>
<p>这个错误目前没有看出具体的影响。</p>
<p>留待以后慢慢摸索。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>圆明园游记</title>
    <url>/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>今日游了圆明园。南进南出，自成循环。清风从过，巨风藏其间。动物以鸟类为主，辅以湖中的鱼。<a id="more"></a></p>
<p>多日不曾行走，无目的的行走。而走一遭。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/df233cc7495a709dc3c0472aba6f9da-1619534551942.jpg" class="" title="未开的荷花">
<p>湖面上有不多的鸟类栖息，岸边有不多的三脚架，背后是巨大口径的摄像机与师。然而，鹅不畏惧人，怡然自得，略过湖面时带起水波。咔嚓声接连闪动。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/11f124962be1bfc62357168c2d8a3e3-1619535098909.jpg" class="" title="水上嬉戏的鸟类">
<p>我告诫自我要冷静。鱼在水下有，它们也不冷静，也冷静，相互像是捕食者，然而又未浮于表面。在不求证的视角下，观察也便到此了。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/ba8121bebf58457646b40f0bd79cdc0-1619535096015.jpg" class="" title="鱼与鸟">
<p>春风和畅。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/b160d662fbfd82ac244f42f2cf4893f-1619535092729.jpg" class="" title="镜湖">
<p>凭栏远眺。看不见什么。所以要想到翱翔。而鱼翔浅底。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/af1f2a7fa33497ff27d478a78bc540a-1619535118568.jpg" class="" title="看栏杆">
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/7a8597c02ca8d4b0d3ba1d2a94e0acb-1619535215577.jpg" class="" title="亭楼">
<p>在铁桥上遇见捞集浮藻的工人，</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/a5f910850b21a5bc7deae1820d80000-1619535232965.jpg" class="" title="捞藻">
<p>然而情绪不能共鸣。感到需要抓拍，可是只找到视觉美。我想没有知识，获得的美也是限定的；终究是残缺的美。</p>
<p>对焦太阳，获得低曝。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/49da05994e8e6ec19edf76a5adc9e34-1619535401793.jpg" class="" title="残墟">
<p>遇到迷宫。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/b19500f0bbed437402cf2e1ea7197fc-1619535429597.jpg" class="" title="迷宫">
<p>再次低曝。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/f7e9a421ddf70c7db807810dfa1d62c-1619535481034.jpg" class="" title="半遮光">
<p>暗光色似乎挺适合我。我也未尝其他色彩。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/bb030c750719c710fea5b55c6160e36-1619535509714.jpg" class="" title="日与栏杆">
<p>返回途中遇见人偶。拍之。</p>
<img data-src="/%E5%9C%86%E6%98%8E%E5%9B%AD%E6%B8%B8%E8%AE%B0/cf2f1e8883b80691ad035a26f56febb-1619535573718.jpg" class="" title="人偶">
<hr>
<p>有发现美的能力，然而不可从技术上精确定位。</p>
<p>没有知识，对美的理解也会不足。</p>
<p>然而，竟然是不可说的。</p>
<p>我者不可说！于是我只好沉默地欣赏，沉默着离去。没有表情地欣喜，没有心动的纪念。如果情绪总取决于外物，则要么挑选外物，要么固步自封，要么就要随波逐流。</p>
<p>而我不想成为后两者。</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>《大数据科学与应用系列讲座》笔记</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%BA%94%E7%94%A8%E7%B3%BB%E5%88%97%E8%AE%B2%E5%BA%A7/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>本文为《<a href="https://www.xuetangx.com/courses/TsinghuaX/60250131X/2015_03_02/about" target="_blank" rel="noopener external nofollow noreferrer">大数据科学与应用系列讲座</a>》笔记的介绍。<a id="more"></a>（<a href="./大数据科学与应用系列讲座.pdf">PDF</a>）</p>
<h1 id="图片版（Onenote）"><a href="#图片版（Onenote）" class="headerlink" title="图片版（Onenote）"></a>图片版（Onenote）</h1><p><img data-src="1547036832009.png" alt="1547036832009"></p>
<blockquote>
<p>更多图片版已移除。请参照上文的OneNote在线浏览。</p>
</blockquote>
<h1 id="失真版（Markdown）"><a href="#失真版（Markdown）" class="headerlink" title="失真版（Markdown）"></a>失真版（Markdown）</h1><p>失真版供快速<strong>预览</strong>、搜索索引，格式较差。</p>
<h2 id="一、李国杰：面向大数据的数据科学"><a href="#一、李国杰：面向大数据的数据科学" class="headerlink" title="一、李国杰：面向大数据的数据科学"></a>一、李国杰：面向大数据的数据科学</h2><div class="table-container">
<table>
<thead>
<tr>
<th>1.发展大数据的驱动力：</th>
<th>促进经济发展，促进社会公平正义，促进科学研究（主要是基础科学）发展。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>促进经济发展：</p>
<p>大数据—-&gt;蜂蜜，主要价值在于传播花粉。自己产生的蜂蜜价值不大。狭义的大数据产业的GDP贡献不大。</p>
<p>促进社会公平正义：</p>
<p>利于国家的治理。经济系统类似于人的血液系统，信息系统类似于人的神经系统，不必用左手证明右手的重要性。</p>
<p>促进科学研究发展：</p>
<p>从大数据到认知科学，再到数据科学。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>2.数据科学：</th>
<th>数据——&gt;自然体（data nature）——-&gt;数据界（data universe）【共性问题】。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>有学者定义其为介于哲学和自然科学间的超自然科学。低于哲学，高于自然科学。</p>
<p>数据科学的共性科学问题目前还需采用“先做白盒研究，再做黑盒研究”的方式进行发展。</p>
<p>数据科学是数学（统计、代数、拓扑等）、计算机科学、基础科学和各种应用科学结合的科学。钱学森提出：“大成智慧学”、“必集大成，才能得智慧”。单独方向的科学显出弱相。</p>
<p>3.大数据对计算机科学的挑战</p>
<p>·计算机是关于算法的科学</p>
<p>图灵计算：输入——&gt;输出，G=F(x)【函数观】</p>
<p>研究函数“F”，即算法</p>
<p>算法不关心输入x，假定了x的随意性。但是x实际上是伪随机的，仍有研究的必要。</p>
<p>·算法+数据结构：大数据兴起导致计算机科学的重点向数据科学转移</p>
<p>Computer Science = Science of algorithm + Science of data</p>
<p>`算法复杂度：小数据条件下好的算法在大数据条件下不再是好算法</p>
<p>1PB的数据线性扫描一次需要1.9天（硬盘速度6Gbps）</p>
<p>·也有些很困难的问题，数据多了就变得更容易解决</p>
<p>如：机器翻译，自然语言问答（IBM的Watson问答系统）</p>
<p>4.大数据对传统计算机视觉（CV）和机器学习（ML）的冲击</p>
<p>计算机视觉、机器学习是人工智能最活跃的研究领域，但多年来学习的样本和测试的样本度不够大。Princeton大学的李凯教授采用在线外包的办法，一年之内完成了2.1万种分类、包含约2000万幅图像（每类700-1000幅）的ontology图像库（ImageNet），（基于wordnet分类，目前只有名词）。采用ImageNet测试现有的各种图像识别分类算法，绝大多数算法都失灵，说明在小的ontology下开发的图像识别算法没有实际意义。但Deeplearning算法的正确识别率明显高于其他算法，所以深度学习成为目前机器学习的主要研究方向。</p>
<p>5.大数据对传统统计学的挑战</p>
<p>·大数据往往是非独立同分布（悉尼科技大学 操云龙）</p>
<p>——统计学的基本假设是变量服从独立同分布（IID假设）</p>
<p>·超高维问题引起经典统计推断失效（徐宗本院士）</p>
<p>——经典统计：n&gt;&gt;p．高维：p&gt;&gt;n,大数据高维度p=o(exp(n))</p>
<p>——热点研究：稀疏建模（尽管变量很多，但很多都是0）</p>
<p>——大数据处理和智能处理的核心都是降维，从n维降到1维（如：排序目的）。样本数量将随着维数的增加而指数增加就出现维数灾难。</p>
<p>·分析与事物相关的所有数据，而不是分析少量的样本数据</p>
<p>——2009年谷歌利用相关词全部搜索统计（5000万+）准确预报了H1N1流感爆发，比医报部门提前2、3个礼拜</p>
<p>——2013年由于政府发通告、谷歌加推荐等原因，使得谷歌的流感预测失灵，明显高估</p>
<p>——大数据与小数据结合（All data，全数据），原始数据的可信度？</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>6.网络科学与数据科学：</th>
<th>复杂网络分析应为数据科学的基石。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p> 大数据往往以复杂关联的数据网络形式存在，因此要理解大数据就要对大数据后面的网络进行深入分析。大数据面临的本质科学问题可能就是网络科学问题。到了21世纪，网络理论正在成为量子力学的可尊敬的后继，正在构建一个新的理论和算法的框架。</p>
<p>中科院计算所的大数据团队主要从事网络大数据的研究，研究方向包括分布式海量数据处理的核心引擎、计算模型和国家级测试床，网络舆情系统、社会化搜索引擎、数据密集型网络服务等，李国杰院士学生的研究方向包括社会网络的影响力研究、推荐系统等。</p>
<p>7.需要发现新的门捷列夫周期表</p>
<p>·门捷列夫周期表为化学成为一门基础学科奠定了基础。现在生物领域有基因组学，材料、化学、制药、生理、病理、干细胞领域都在研究“基因组”，也有人在讨论人类语言的“基因组”，这些基因组都是构成整体的基本元素。</p>
<p>·发现这些“基因组”都需要采用计算机对海量的数据进行分析，导致各个领域都出现XX信息学。</p>
<p>·从上个世纪70年代开始，围绕计算复杂性形成了以算法研究为中心的计算机科学。随着计算机科学与其他学科的交叉相融，计算机科学的研究重点将逐步转移到以研究各种基因组学为重点的数据科学。现在到了发现新的门捷列夫周期表的时候了。</p>
<p>8.计算理论的新研究方向</p>
<p>·传统计算复杂性是研究当问题规模变大时，计算量如何变化，以小问题预测大问题。而大数据问题一开始就给你全部数据，需要反过来思考如何找到缩小规模的数据，而问题的基本属性没有大的变化。</p>
<p>·如果是传统的计算复杂性是度量外向组合爆炸（scale up）的复杂程度。那么大数据问题的计算理论应该是度量内向“压缩”的困难程度。</p>
<p>·如果当数据规模扩大，反应数据间相互关系的网络结构保持很好的相似性，则是一个容易解决的大数据问题；反之，如果网络结构变得面目全非，则是一个难以解决的大数据问题。</p>
<p><em>*</em>需要研究“数据量复杂性”（问题需要多大的数据量）</p>
<p>建立一种新的计算理论，对求解一个问题达到某种满意程度需要多大规模的数据量，能够给出理论上的判断（多项式级、NP问题、数据规模阈值）。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>9.培养“π型人才”：</th>
<th>所有科学都在迅速变为“数据科学”。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>有经验的计算机科技人才可以大规模提高数据处理速度，在各领域应该培养熟悉数据分析的科研人才。</p>
<p>计算机系需要面对全校调整和新增有关采集、整理、分析的新课程。</p>
<p>————————————————————————————————————————————</p>
<h2 id="二、吴军讲座：数据为王和机器智能的时代"><a href="#二、吴军讲座：数据为王和机器智能的时代" class="headerlink" title="二、吴军讲座：数据为王和机器智能的时代"></a>二、吴军讲座：数据为王和机器智能的时代</h2><p>1.什么是机器智能</p>
<p>世界新技术的三个趋势：</p>
<p>·云计算 + 移动互联网 + 大数据（正在进行时）</p>
<p>·机器智能（现在时）</p>
<hr>
<p>（<strong>预览结束</strong>）</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>吉他进阶</title>
    <url>/%E5%90%89%E4%BB%96%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>这篇文章主要是记录学习吉他技术的一些笔记。</p>
<p>上次上吉他课还是大一。高中就因为某些神奇的原因入了吉他的坑，不过一直停留在5325和天空之城前两小节的地步。是的，我还是不想放弃，荒废得太久，有时会感觉到目标和自我的位移。相去甚远。所以我又开了一个巨坑……<strong>音乐确实可以使我安静，使我什么也不想，它也可以使我更稳定地想，更感性地想。</strong>无论如何，都是极好的。<a id="more"></a>希望我可以有时间和足够的精力不致让一切付之东流。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/BV1hb411G7Pf" target="_blank" rel="noopener external nofollow noreferrer">元子弹吉他 - 指弹教程</a></p>
<p>吉他协会中级班，陈正扬</p>
<p>LOFTER博客：《吉他手和弦编配法则》 Lucifer_Koo</p>
<p>知乎专栏：《吉他实用手册》 子青</p>
<p>视频：《Nice Chord》 官大为，《You and me》 潇潇指弹</p>
<hr>
<p>一些简要的笔记：</p>
<blockquote>
<p>伴奏和旋律分开<br>熟悉之后要跟着节拍器练<br>拍泛音的位置<br>和弦切换的时候先确定主音（中指/食指）<br>知足（弹唱）<br>大鱼（指弹）<br>a hundred miles of home（弹唱）<br>西班牙吉他指弹曲</p>
</blockquote>
<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="十二平均律"><a href="#十二平均律" class="headerlink" title="十二平均律"></a>十二平均律</h2><h2 id="音名-amp-唱名"><a href="#音名-amp-唱名" class="headerlink" title="音名 &amp; 唱名"></a>音名 &amp; 唱名</h2><h2 id="吉他标准定弦"><a href="#吉他标准定弦" class="headerlink" title="吉他标准定弦"></a>吉他标准定弦</h2><h2 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h2><h2 id="圆滑音"><a href="#圆滑音" class="headerlink" title="圆滑音"></a>圆滑音</h2><h3 id="击弦"><a href="#击弦" class="headerlink" title="击弦"></a>击弦</h3><h3 id="勾弦"><a href="#勾弦" class="headerlink" title="勾弦"></a>勾弦</h3><h3 id="滑弦"><a href="#滑弦" class="headerlink" title="滑弦"></a>滑弦</h3><h2 id="扫弦强化"><a href="#扫弦强化" class="headerlink" title="扫弦强化"></a>扫弦强化</h2><h3 id="闷音"><a href="#闷音" class="headerlink" title="闷音"></a>闷音</h3><h3 id="制音"><a href="#制音" class="headerlink" title="制音"></a>制音</h3><p>Funky</p>
<h3 id="切音"><a href="#切音" class="headerlink" title="切音"></a>切音</h3><h1 id="和弦及其走向"><a href="#和弦及其走向" class="headerlink" title="和弦及其走向"></a>和弦及其走向</h1><h2 id="三和弦、七和弦"><a href="#三和弦、七和弦" class="headerlink" title="三和弦、七和弦"></a>三和弦、七和弦</h2><h2 id="封闭和弦"><a href="#封闭和弦" class="headerlink" title="封闭和弦"></a>封闭和弦</h2><h2 id="调式和弦"><a href="#调式和弦" class="headerlink" title="调式和弦"></a>调式和弦</h2><h2 id="所有和弦"><a href="#所有和弦" class="headerlink" title="所有和弦"></a>所有和弦</h2><h2 id="常用和弦"><a href="#常用和弦" class="headerlink" title="常用和弦"></a>常用和弦</h2><h1 id="和弦与音阶"><a href="#和弦与音阶" class="headerlink" title="和弦与音阶"></a>和弦与音阶</h1><h2 id="CAGED系统"><a href="#CAGED系统" class="headerlink" title="CAGED系统"></a>CAGED系统</h2><h2 id="五声音阶"><a href="#五声音阶" class="headerlink" title="五声音阶"></a>五声音阶</h2><h2 id="自然音阶"><a href="#自然音阶" class="headerlink" title="自然音阶"></a>自然音阶</h2><h2 id="教会调式"><a href="#教会调式" class="headerlink" title="教会调式"></a>教会调式</h2><h1 id="和弦改编"><a href="#和弦改编" class="headerlink" title="和弦改编"></a>和弦改编</h1><h2 id="Jingle-Bell"><a href="#Jingle-Bell" class="headerlink" title="Jingle Bell"></a>Jingle Bell</h2><h1 id="开放和弦"><a href="#开放和弦" class="headerlink" title="开放和弦"></a>开放和弦</h1><h2 id="A调"><a href="#A调" class="headerlink" title="A调"></a>A调</h2><h2 id="E调"><a href="#E调" class="headerlink" title="E调"></a>E调</h2><h1 id="【指弹曲目】"><a href="#【指弹曲目】" class="headerlink" title="【指弹曲目】"></a>【指弹曲目】</h1><h2 id="斯卡布罗集市"><a href="#斯卡布罗集市" class="headerlink" title="斯卡布罗集市"></a>斯卡布罗集市</h2><h2 id="夜的钢琴曲"><a href="#夜的钢琴曲" class="headerlink" title="夜的钢琴曲"></a>夜的钢琴曲</h2><h2 id="天空之城"><a href="#天空之城" class="headerlink" title="天空之城"></a>天空之城</h2><h2 id="少年的梦"><a href="#少年的梦" class="headerlink" title="少年的梦"></a>少年的梦</h2><blockquote>
<p>岸部真明</p>
</blockquote>
<h2 id="梦中的婚礼"><a href="#梦中的婚礼" class="headerlink" title="梦中的婚礼"></a>梦中的婚礼</h2><h2 id="Kiss-the-Rain"><a href="#Kiss-the-Rain" class="headerlink" title="Kiss the Rain"></a>Kiss the Rain</h2><h2 id="手纸（信）"><a href="#手纸（信）" class="headerlink" title="手纸（信）"></a>手纸（信）</h2><h2 id="千本樱"><a href="#千本樱" class="headerlink" title="千本樱"></a>千本樱</h2><blockquote>
<p>武士桑</p>
</blockquote>
<h2 id="鲸"><a href="#鲸" class="headerlink" title="鲸"></a>鲸</h2><blockquote>
<p>小松原俊</p>
</blockquote>
<h2 id="Unravel"><a href="#Unravel" class="headerlink" title="Unravel"></a>Unravel</h2><blockquote>
<p>武士桑</p>
</blockquote>
<h2 id="Merry-Christmas-Mr-Lawrence"><a href="#Merry-Christmas-Mr-Lawrence" class="headerlink" title="Merry Christmas Mr. Lawrence"></a>Merry Christmas Mr. Lawrence</h2><h1 id="【弹唱曲目】"><a href="#【弹唱曲目】" class="headerlink" title="【弹唱曲目】"></a>【弹唱曲目】</h1><h2 id="蒲公英的约定"><a href="#蒲公英的约定" class="headerlink" title="蒲公英的约定"></a>蒲公英的约定</h2>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>吉他</tag>
      </tags>
  </entry>
  <entry>
    <title>宏观量子问题浅讨</title>
    <url>/%E5%AE%8F%E8%A7%82%E9%87%8F%E5%AD%90%E9%97%AE%E9%A2%98%E6%B5%85%E8%AE%A8/</url>
    <content><![CDATA[<iframe width=100% height=350 src="//player.bilibili.com/player.html?aid=40873215&cid=71788005&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>以上是来自<strong>3b1b</strong>的<a href="https://www.bilibili.com/video/av40873215?from=search&amp;seid=9647937139855959388" target="_blank" rel="noopener external nofollow noreferrer">一个计数谜题的意外答案</a>。<a id="more"></a>随后，3b1b发布了<a href="https://www.bilibili.com/video/av41712219?from=search&amp;seid=9647937139855959388" target="_blank" rel="noopener external nofollow noreferrer">为什么方块碰撞能够用来计算π？</a>。</p>
<iframe width=100% height=350 src="//player.bilibili.com/player.html?aid=41712219&cid=74502070&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>在本篇文章中，我不想强调如何求出离散的$\pi$值，而是想探究这样的系统究竟意味着什么，或者说，它具有什么样的特殊性质？如果有，这样的性质可以推广吗？</p>
<hr>
<h1 id="理想碰撞"><a href="#理想碰撞" class="headerlink" title="理想碰撞"></a>理想碰撞</h1><p>假设，这个系统可以看作是一个宏观与微观规律的一个特殊交汇点。</p>
<p>大概来说，这是一个宏观的<strong>量子系统</strong>。</p>
<blockquote>
<p>注意，量子不等同于量子物理。<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90" target="_blank" rel="noopener external nofollow noreferrer">量子</a>一词，只是强调<strong>离散</strong>。</p>
</blockquote>
<p>在以上的问题中，如果没有作为中间介质的小质量方块，那么整个问题就等同于弹性碰撞。</p>
<p>根据之前的文章：<a href="https://vel.life/A-Few-Thoughts-on-Collision/" target="_blank" rel="noopener external nofollow noreferrer">理想碰撞问题</a>。部分摘录如下：</p>
<blockquote>
<p><strong>最终我们得到了新的公式表达</strong>：</p>
</blockquote>
<script type="math/tex; mode=display">
\bf\color{red}v_i'=v_i+\lambda_j\overline{v_j}\tag{F}</script><blockquote>
<p><strong>$(F)$式</strong>的含义可以表述为</p>
</blockquote>
<script type="math/tex; mode=display">
I的新速度=I的原速度+(J的相对质量系数*J的相对速度)</script><p>容易得到，在上述系统中，若记中间介质的小质量方块和大方块分别为$I,J$。那么，</p>
<ul>
<li>$J$的相对质量系数接近于2</li>
<li>我们有，$I$的原速度初始为<code>0</code>（<strong>不妨先假设大方块的速度守恒</strong>）<ul>
<li>第1次，$J$的相对速度=<code>v</code><ul>
<li>则$I$被碰撞为速度=<code>v</code></li>
</ul>
</li>
<li>第2次，$J$的相对速度=<code>2v</code><ul>
<li>则$I$被碰撞为速度=<code>-v+2*2v</code>=<code>3v</code></li>
</ul>
</li>
<li>第3次，$J$的相对速度=<code>4v</code><ul>
<li>则$I$被碰撞为速度=<code>-3v+2*4v</code>=<code>5v</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>可以看到，小质量方块$I$会被<strong>匀加速</strong>。（在次数上的均匀）</p>
<p>即使回到原来的条件，大方块速度不守恒，小方块在初始的多次碰撞中仍然会被加速。</p>
<blockquote>
<p>只有当小方块携带的动量与大方块在同一个数量级时，匀加速效应才会衰退。</p>
<p>被加速和传递动量/动能的能力增强是相同的。</p>
</blockquote>
<p>emm…为了保证上述的推理是具体的和正确的，编写了相应的程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1,v1,m2,v2 = map(int,input().split())</span><br><span class="line"></span><br><span class="line">M = m1 + m2 <span class="comment"># 系统质量</span></span><br><span class="line">L1 = <span class="number">2</span>*m1/M <span class="comment"># m1的相对质量系数</span></span><br><span class="line">L2 = <span class="number">2</span>*m2/M <span class="comment"># m2的相对质量系数</span></span><br><span class="line">v_1 = v1 - v2 <span class="comment"># m1的相对速度</span></span><br><span class="line">v_2 = v2 - v1 <span class="comment"># m2的相对速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#公式</span></span><br><span class="line">v1_new = v1 + L2*v_2</span><br><span class="line">v2_new = v2 + L1*v_1</span><br><span class="line">print(v1_new,<span class="string">" "</span>,v2_new)</span><br><span class="line"></span><br><span class="line"><span class="string">"""样例</span></span><br><span class="line"><span class="string">输入：2 1 1 -2</span></span><br><span class="line"><span class="string">输出：-1.0   2.0</span></span><br><span class="line"><span class="string">-----------------</span></span><br><span class="line"><span class="string">输入：1 0 100 -1</span></span><br><span class="line"><span class="string">输出：-1.9801980198019802   -0.9801980198019802</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>好，看来理想碰撞公式的推导没有问题，然后是本模型的多次迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1,v1,m2,v2 = map(float,input().split())</span><br><span class="line"></span><br><span class="line">M = m1 + m2 <span class="comment"># 系统质量</span></span><br><span class="line">L1 = <span class="number">2</span>*m1/M <span class="comment"># m1的相对质量系数</span></span><br><span class="line">L2 = <span class="number">2</span>*m2/M <span class="comment"># m2的相对质量系数</span></span><br><span class="line">v_1 = v1 - v2 <span class="comment"># m1的相对速度</span></span><br><span class="line">v_2 = v2 - v1 <span class="comment"># m2的相对速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#迭代</span></span><br><span class="line">print(<span class="string">"----------碰撞速度表-----------"</span>)</span><br><span class="line">print(<span class="string">"碰撞次数\t   m1速度\t  m2速度"</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> v1 &gt; v2:</span><br><span class="line">	v1_new = v1 + L2*v_2 <span class="comment">#碰撞</span></span><br><span class="line">	v2_new = v2 + L1*v_1</span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">	print(<span class="string">"第"</span>,i,<span class="string">"次: "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v1_new),<span class="string">" "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v2_new))</span><br><span class="line">	v1 = -v1_new <span class="comment">#碰撞反转</span></span><br><span class="line">	<span class="keyword">if</span> v1 &gt; v2 <span class="keyword">or</span> v1 &gt; <span class="number">0</span>:</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		print(<span class="string">"第"</span>,i,<span class="string">"次: "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v1),<span class="string">" "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v2_new))</span><br><span class="line">	v2 = v2_new</span><br><span class="line">	v_1 = v1 - v2 <span class="comment"># 更新相对速度</span></span><br><span class="line">	v_2 = v2 - v1</span><br><span class="line">    </span><br><span class="line"><span class="string">"""样例1</span></span><br><span class="line"><span class="string">输入：</span></span><br><span class="line"><span class="string">1 1 100 -2</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">1 0 100 -1</span></span><br><span class="line"><span class="string">----------碰撞速度表-----------</span></span><br><span class="line"><span class="string">碰撞次数	   m1速度	  m2速度</span></span><br><span class="line"><span class="string">第 1 次:  -1.98020   -0.98020</span></span><br><span class="line"><span class="string">第 2 次:  1.98020   -0.98020</span></span><br><span class="line"><span class="string">第 3 次:  -3.88197   -0.92158</span></span><br><span class="line"><span class="string">第 4 次:  3.88197   -0.92158</span></span><br><span class="line"><span class="string">第 5 次:  -5.63001   -0.82646</span></span><br><span class="line"><span class="string">第 6 次:  5.63001   -0.82646</span></span><br><span class="line"><span class="string">第 7 次:  -7.15507   -0.69861</span></span><br><span class="line"><span class="string">第 8 次:  7.15507   -0.69861</span></span><br><span class="line"><span class="string">第 9 次:  -8.39676   -0.54309</span></span><br><span class="line"><span class="string">第 10 次:  8.39676   -0.54309</span></span><br><span class="line"><span class="string">第 11 次:  -9.30591   -0.36606</span></span><br><span class="line"><span class="string">第 12 次:  9.30591   -0.36606</span></span><br><span class="line"><span class="string">第 13 次:  -9.84651   -0.17454</span></span><br><span class="line"><span class="string">第 14 次:  9.84651   -0.17454</span></span><br><span class="line"><span class="string">第 15 次:  -9.99714   0.02390</span></span><br><span class="line"><span class="string">第 16 次:  9.99714   0.02390</span></span><br><span class="line"><span class="string">第 17 次:  -9.75185   0.22139</span></span><br><span class="line"><span class="string">第 18 次:  9.75185   0.22139</span></span><br><span class="line"><span class="string">第 19 次:  -9.12035   0.41011</span></span><br><span class="line"><span class="string">第 20 次:  9.12035   0.41011</span></span><br><span class="line"><span class="string">第 21 次:  -8.12765   0.58259</span></span><br><span class="line"><span class="string">第 22 次:  8.12765   0.58259</span></span><br><span class="line"><span class="string">第 23 次:  -6.81306   0.73200</span></span><br><span class="line"><span class="string">第 24 次:  6.81306   0.73200</span></span><br><span class="line"><span class="string">第 25 次:  -5.22864   0.85242</span></span><br><span class="line"><span class="string">第 26 次:  5.22864   0.85242</span></span><br><span class="line"><span class="string">第 27 次:  -3.43715   0.93907</span></span><br><span class="line"><span class="string">第 28 次:  3.43715   0.93907</span></span><br><span class="line"><span class="string">第 29 次:  -1.50954   0.98854</span></span><br><span class="line"><span class="string">第 30 次:  1.50954   0.98854</span></span><br><span class="line"><span class="string">第 31 次:  0.47786   0.99886</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----样例2</span></span><br><span class="line"><span class="string">输入：</span></span><br><span class="line"><span class="string">1 0 10000 -1</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">----------碰撞速度表-----------</span></span><br><span class="line"><span class="string">碰撞次数	   m1速度	  m2速度</span></span><br><span class="line"><span class="string">第 1 次:  -1.99980   -0.99980</span></span><br><span class="line"><span class="string">第 2 次:  1.99980   -0.99980</span></span><br><span class="line"><span class="string">第 3 次:  -3.99880   -0.99920</span></span><br><span class="line"><span class="string">第 4 次:  3.99880   -0.99920</span></span><br><span class="line"><span class="string">第 5 次:  -5.99620   -0.99820</span></span><br><span class="line"><span class="string">第 6 次:  5.99620   -0.99820</span></span><br><span class="line"><span class="string">第 7 次:  -7.99120   -0.99680</span></span><br><span class="line"><span class="string">第 8 次:  7.99120   -0.99680</span></span><br><span class="line"><span class="string">第 9 次:  -9.98301   -0.99500</span></span><br><span class="line"><span class="string">第 10 次:  9.98301   -0.99500</span></span><br><span class="line"><span class="string">第 11 次:  -11.97082   -0.99281</span></span><br><span class="line"><span class="string">..........</span></span><br><span class="line"><span class="string">第 310 次:  4.16839   0.99913</span></span><br><span class="line"><span class="string">第 311 次:  -2.16949   0.99976</span></span><br><span class="line"><span class="string">第 312 次:  2.16949   0.99976</span></span><br><span class="line"><span class="string">第 313 次:  -0.16973   1.00000</span></span><br><span class="line"><span class="string">第 314 次:  0.16973   1.00000</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>如果m2的速度不变，则可以验证指m1的加速。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1,v1,m2,v2 = map(float,input().split())</span><br><span class="line"></span><br><span class="line">M = m1 + m2 <span class="comment"># 系统质量</span></span><br><span class="line">L1 = <span class="number">2</span>*m1/M <span class="comment"># m1的相对质量系数</span></span><br><span class="line">L2 = <span class="number">2</span>*m2/M <span class="comment"># m2的相对质量系数</span></span><br><span class="line">v_1 = v1 - v2 <span class="comment"># m1的相对速度</span></span><br><span class="line">v_2 = v2 - v1 <span class="comment"># m2的相对速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#迭代</span></span><br><span class="line">print(<span class="string">"----------碰撞速度表-----------"</span>)</span><br><span class="line">print(<span class="string">"碰撞次数\t   m1速度\t  m2速度"</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> v1 &gt; v2:</span><br><span class="line">	v1_new = v1 + L2*v_2 <span class="comment">#碰撞</span></span><br><span class="line">	<span class="comment">#v2_new = v2 + L1*v_1</span></span><br><span class="line">	i += <span class="number">1</span></span><br><span class="line">	print(<span class="string">"第"</span>,i,<span class="string">"次: "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v1_new),<span class="string">" "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v2))</span><br><span class="line">	v1 = -v1_new <span class="comment">#碰撞反转</span></span><br><span class="line">	<span class="keyword">if</span> v1 &gt; v2 <span class="keyword">or</span> v1 &gt; <span class="number">0</span>:</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		print(<span class="string">"第"</span>,i,<span class="string">"次: "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v1),<span class="string">" "</span>,<span class="string">"&#123;:.5f&#125;"</span>.format(v2))</span><br><span class="line">	<span class="comment">#v2 = v2_new</span></span><br><span class="line">	v_1 = v1 - v2 <span class="comment"># 更新相对速度</span></span><br><span class="line">	v_2 = v2 - v1</span><br><span class="line">	<span class="keyword">if</span> i &gt; <span class="number">20</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="string">"""样例</span></span><br><span class="line"><span class="string">输入：</span></span><br><span class="line"><span class="string">1 0 10000 -1.01</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">----------碰撞速度表-----------</span></span><br><span class="line"><span class="string">碰撞次数	   m1速度	  m2速度</span></span><br><span class="line"><span class="string">第 1 次:  -2.01980   -1.01000</span></span><br><span class="line"><span class="string">第 2 次:  2.01980   -1.01000</span></span><br><span class="line"><span class="string">第 3 次:  -4.03919   -1.01000</span></span><br><span class="line"><span class="string">第 4 次:  4.03919   -1.01000</span></span><br><span class="line"><span class="string">第 5 次:  -6.05818   -1.01000</span></span><br><span class="line"><span class="string">第 6 次:  6.05818   -1.01000</span></span><br><span class="line"><span class="string">第 7 次:  -8.07677   -1.01000</span></span><br><span class="line"><span class="string">第 8 次:  8.07677   -1.01000</span></span><br><span class="line"><span class="string">第 9 次:  -10.09495   -1.01000</span></span><br><span class="line"><span class="string">第 10 次:  10.09495   -1.01000</span></span><br><span class="line"><span class="string">第 11 次:  -12.11273   -1.01000</span></span><br><span class="line"><span class="string">第 12 次:  12.11273   -1.01000</span></span><br><span class="line"><span class="string">第 13 次:  -14.13011   -1.01000</span></span><br><span class="line"><span class="string">第 14 次:  14.13011   -1.01000</span></span><br><span class="line"><span class="string">第 15 次:  -16.14708   -1.01000</span></span><br><span class="line"><span class="string">第 16 次:  16.14708   -1.01000</span></span><br><span class="line"><span class="string">第 17 次:  -18.16365   -1.01000</span></span><br><span class="line"><span class="string">第 18 次:  18.16365   -1.01000</span></span><br><span class="line"><span class="string">第 19 次:  -20.17981   -1.01000</span></span><br><span class="line"><span class="string">第 20 次:  20.17981   -1.01000</span></span><br><span class="line"><span class="string">第 21 次:  -22.19558   -1.01000</span></span><br><span class="line"><span class="string">第 22 次:  22.19558   -1.01000</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h1 id="非完全弹性"><a href="#非完全弹性" class="headerlink" title="非完全弹性"></a>非完全弹性</h1><p>注意到，这虽然是个完全弹性碰撞问题。但<strong>大方块最后几乎总是要损失一些能量</strong>。也就是说，本问题中的这个模型对于大方块来说，其实相当于一个<strong>非完全弹性碰撞</strong>。如下所示：（当m1接近于6.3或100左右时m2的损失能量较大）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">12</span> <span class="number">-100</span></span><br><span class="line">----------碰撞速度表-----------</span><br><span class="line">碰撞次数	   m1速度	  m2速度</span><br><span class="line">第 <span class="number">1</span> 次:  <span class="number">-141.17647</span>   <span class="number">-41.17647</span></span><br><span class="line">第 <span class="number">2</span> 次:  <span class="number">141.17647</span>   <span class="number">-41.17647</span></span><br><span class="line">第 <span class="number">3</span> 次:  <span class="number">-116.26298</span>   <span class="number">66.08997</span></span><br><span class="line">第 <span class="number">4</span> 次:  <span class="number">116.26298</span>   <span class="number">66.08997</span></span><br><span class="line">第 <span class="number">5</span> 次:  <span class="number">45.43049</span>   <span class="number">95.60350</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> <span class="number">0</span> <span class="number">12</span> <span class="number">-100</span></span><br><span class="line">----------碰撞速度表-----------</span><br><span class="line">碰撞次数	   m1速度	  m2速度</span><br><span class="line">第 <span class="number">1</span> 次:  <span class="number">-133.33333</span>   <span class="number">-33.33333</span></span><br><span class="line">第 <span class="number">2</span> 次:  <span class="number">133.33333</span>   <span class="number">-33.33333</span></span><br><span class="line">第 <span class="number">3</span> 次:  <span class="number">-88.88889</span>   <span class="number">77.77778</span></span><br><span class="line">第 <span class="number">4</span> 次:  <span class="number">88.88889</span>   <span class="number">77.77778</span></span><br><span class="line">第 <span class="number">5</span> 次:  <span class="number">74.07407</span>   <span class="number">85.18519</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.3</span> <span class="number">0</span> <span class="number">12</span> <span class="number">-100</span></span><br><span class="line">----------碰撞速度表-----------</span><br><span class="line">碰撞次数	   m1速度	  m2速度</span><br><span class="line">第 <span class="number">1</span> 次:  <span class="number">-131.14754</span>   <span class="number">-31.14754</span></span><br><span class="line">第 <span class="number">2</span> 次:  <span class="number">131.14754</span>   <span class="number">-31.14754</span></span><br><span class="line">第 <span class="number">3</span> 次:  <span class="number">-81.69847</span>   <span class="number">80.59661</span></span><br><span class="line">第 <span class="number">4</span> 次:  <span class="number">81.69847</span>   <span class="number">80.59661</span></span><br><span class="line">第 <span class="number">5</span> 次:  <span class="number">80.25341</span>   <span class="number">81.35527</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> <span class="number">0</span> <span class="number">12</span> <span class="number">-100</span></span><br><span class="line">----------碰撞速度表-----------</span><br><span class="line">碰撞次数	   m1速度	  m2速度</span><br><span class="line">第 <span class="number">1</span> 次:  <span class="number">-126.31579</span>   <span class="number">-26.31579</span></span><br><span class="line">第 <span class="number">2</span> 次:  <span class="number">126.31579</span>   <span class="number">-26.31579</span></span><br><span class="line">第 <span class="number">3</span> 次:  <span class="number">-66.48199</span>   <span class="number">86.14958</span></span><br><span class="line">第 <span class="number">4</span> 次:  <span class="number">66.48199</span>   <span class="number">86.14958</span></span><br><span class="line"></span><br><span class="line"><span class="number">100</span> <span class="number">0</span> <span class="number">12</span> <span class="number">-100</span></span><br><span class="line">----------碰撞速度表-----------</span><br><span class="line">碰撞次数	   m1速度	  m2速度</span><br><span class="line">第 <span class="number">1</span> 次:  <span class="number">-21.42857</span>   <span class="number">78.57143</span></span><br><span class="line">第 <span class="number">2</span> 次:  <span class="number">21.42857</span>   <span class="number">78.57143</span></span><br></pre></td></tr></table></figure>
<p>可以大概推测，当m1和m2在数量级相近的一定比例时，损失最大。</p>
<p>那么究竟是什么比例呢？大方块最多能损失多少能量呢？</p>
<p>这有些脱离本篇文章的范畴，先不深入讨论。</p>
<blockquote>
<p>但可以想象，这与模运算有相当的关联。</p>
</blockquote>
<p>如果想象大方块并行地与多个小方块碰撞。。损失能量是否会更多呢？</p>
<h1 id="宏观量子系统"><a href="#宏观量子系统" class="headerlink" title="宏观量子系统"></a>宏观量子系统</h1><p>我当然不是指<a href="https://zh.wikipedia.org/wiki/%E7%90%83%E7%8A%B6%E9%97%AA%E7%94%B5_%28%E5%B0%8F%E8%AF%B4%29" target="_blank" rel="noopener external nofollow noreferrer">球状闪电</a>或者宏原子。</p>
<p>但是，上述的模型却与光电效应有异曲同工之妙。</p>
<blockquote>
<p>这样想，量子力学的内部机制是不是也是这样，实现从宏观连续规律到微观离散规律的转化的呢？</p>
</blockquote>
<p>在进行具体的分析之前。现在，不妨构造一个新的宏观量子系统模型。</p>
<p>我们已经知道，完全弹性碰撞是一种量子模型，它具有这些特点：（在此处不妨准确描述一下）</p>
<ul>
<li><strong>瞬时性</strong>：事件的发生是在时间点上完成的</li>
<li><strong>量子性</strong>：事件<strong>不可分</strong>为更基础的事件</li>
</ul>
<p>对于宏观量子模型，其特性弱化为：</p>
<ul>
<li><strong>时区性</strong>：事件的发生是在<strong>有限时区</strong>上完成的；</li>
<li><strong>宏观量子性</strong>：事件<strong>有限可分</strong>为更基础的事件。</li>
</ul>
<p>容易想到的一个实例是：<strong>核裂变</strong>。</p>
<p>（待续）</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>物理</tag>
      </tags>
  </entry>
  <entry>
    <title>912内容学习计划</title>
    <url>/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF-912%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>本文为写给学堂在线的一篇912学习指南，旨在帮助更多对考研（912）有想法的人尽快入门。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/stellarkey/912_project" target="_blank" rel="noopener external nofollow noreferrer">912_project</a></p>
<p><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT" target="_blank" rel="noopener external nofollow noreferrer">REKCARC-TSC-UHT</a></p>
<h1 id="学习总览"><a href="#学习总览" class="headerlink" title="学习总览"></a>学习总览</h1><p>考研究生从来不是一件易事。在明确了方向以后，信息和道路也十分关键。这对于自主命题高校来说，尤其重要。考研对于很多人来说是一场信息战，但是，要想达到理想的学习情况，应该要对自己想要报考的学校、专业、老师、课程内容和历史有充分的了解。确定这是自己真正想要的。</p>
<p>作为一名二战的跨专业考生，我在第一次考研的过程中，就深刻地感受到信息不对称和环境所带来的困扰，一方面，学堂在线丰富的计算机课程和训练营体系，给了我一个真正入门的机会——我有时候会暗自思考，如果仅仅靠自己慢慢摸索，我是否可以坚持这么远，坚持这么久，去追求我理想中的“球状闪电”？然后，唏嘘以后，却仍然对另一条路充满了不确定性。</p>
<p>在另一方面，虽然我入了门，对于研究生入学考试所要求的专业水平，却还是相去甚远，这是由于我在大学期间没有一个良好的学习体系，只是盲目地根据兴趣挑挑拣拣计算机课程，而在研究生入学所需的课程上有明显的不足。比如，在我第一次学习算法的时候，我甚至没有学习任何的数据结构。就算以后，我系统地学习一些基础算法和数据结构，在参加多次算法比赛中都展现了惨不忍睹的成绩。路漫漫其修远兮。</p>
<p>计算机科学的道路是非常漫长的，无论是从纵向的时间还是横向的知识延展来说。从入门开始，到考研，到研究生阶段，每一个阶段你都会明显感觉自身的一个质变。然而，千里之堤，一步一砖，只有埋头努力。</p>
<p>每个人对于计算机科学的热爱，都有不同的发源地，以不同的方式表现。每个人的经验也往往不同，然而，只有自己走出的路才是适合自己的路——而这是一条你在走之前无法确定的路。但是，所有的经验终究是建立现实的基础上，在这样的意义上被影射为万千的知识库。也许没有办法做到，复制一条确保成功的路，但是所有一切通向成功的基石，都可以展露无遗。那么，最后的选择权将完完全全地落在你们的手上。我以为，这就是学习经验的最好的表现形式。网上经常会涌现很多经验贴，但是多数经验帖的承载内容和专注形式通常在于个人经历的描述，这自然不能看作学习经验，因为你很可能无法复现。</p>
<p>我们需要着重于学习经验的积累和消化，这些学习经验应该包括知识、课程、练习、实验、解惑、测试等等一系列资源。这些资源既需要丰富，也需要简洁——毕竟这是一场争分夺秒、坚持以恒的人生旅程。<a href="https://github.com/stellarkey/912_project" target="_blank" rel="noopener external nofollow noreferrer"><code>912_project</code></a>就是在这样的思想下诞生的产物，它几乎包括了考研以来项目维护者所使用的所有资源。我相信，在资源和信息收集的意义上，它已经足够全面了。但是，除了这些资源以外，一点工程式的经验也许在某种程度上产生非凡的效果——我是说，它们虽然足够丰富，但是却未必足够简洁。把书读厚通常是一件简单事，但是，把书读薄却要困难上许多许多。</p>
<p>总的来说，考研的四门专业课：数据结构、操作系统、计算机原理、计算机网络。这四门课是非常值得花费精力认真学习的；只要时间允许，就决不要想着偷工减料。四门课程之间相互渗透，相互促进；在学完了一部分内容以后，会逐渐形成系统，体会到不同学科之间的联系。</p>
<p>学习专业课的顺序，建议应该按照常规的学习顺序，即一般的大学课程体系的参考顺序。但是，对于考研来说，各个科目之间仍然有一些相对独立性，多线并行也是可行的。这时候需要自行调整最合适的学习方针。所有的资料都已经维护在<a href="https://github.com/stellarkey/912_project" target="_blank" rel="noopener external nofollow noreferrer"><code>912_project</code></a>中。下面，分方向进行简单的介绍。</p>
<h1 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h1><p>计算机原理，在考研的范围内可以理解为叫做计算机组成。计算机组成描述的是计算机科学的物理底层，学习它可以更加理解计算机可以做什么、做不到什么。这便是计算思维的起点。因此作为复习的第一门课我觉得是比较合适的。学习它需要花费的精力比计算机网络稍微多一些，但明显少于数据结构和操作系统。你学习这门课的速度也可以作为参考来调整之后的专业课复习计划。</p>
<p>计算机原理可以分为计算机系统概述、数据表示和运算、存储系统、指令系统、CPU/流水线、总线。</p>
<p>清华大学的计算机原理有公开<strong>MOOC</strong>可供学习：<a href="https://www.bilibili.com/video/av58129929" target="_blank" rel="noopener external nofollow noreferrer">计算机组成原理</a>。这个MOOC内容是清华本科课堂的公开录像，建议一定要全程跟下来，并记录下其中的重点（有一些实验和架构细节部分可以略过）。清华大学的912考研真题较少，并且计算机原理的内容更少，可以提前查看试题内容，并了解到考试中的重点，这样方便在听课时做记录。计算机原理整体考的并不难，但是需要对已知的考察类型做充分的了解，否则其中的很多细节便会捉摸不清。912的计算机原理题目中常常会考到过去曾经出现的真题、习题、期末题等等，因此对真题、习题的掌握是重中之重，一定要保证这部分内容的复习质量。</p>
<p>清华大学的计算机原理使用的学习<strong>教材</strong>：《计算机组成PPT》，《 计算机组成：软硬件接口》。这两本书，《计算机组成PPT》中包含了大部分知识点，建议作为核心参考教材使用，遇到陌生的概念在PPT搜索往往会得到答案。《软硬件接口》则是专用的课程教材，其上的内容更为详细，讲解也很细致，遇到难懂的知识点，在这本书上查阅往往可以获得比较详细直白的解释。当然，还有一本书叫做《深入理解计算机系统（CSAPP）》，这本书的流水线部分可能有助于相关知识、过程的理解，但这本书使用的是x86汇编，可以作为简单的参考书使用。</p>
<p>注意，清华大学所使用的计算机原理汇编语言和操作系统的汇编语言不相同，在计算机原理中使用MIPS汇编，而在旧版操作系统（2020年以前）中使用x86汇编，在最新的操作系统课中则使用RISC-V汇编。如果对<strong>MIPS汇编</strong>不熟悉，可以看《软硬件接口》第2章，或者学堂在线的<a href="https://www.xuetangx.com/courses/TsinghuaX/20240103X/2015_T2/about" target="_blank" rel="noopener external nofollow noreferrer">汇编语言程序设计</a>第5章，以及其他的相关材料。你应该熟悉常见的MIPS汇编指令以及格式，因为流水线计算中一定会涉及到这方面的内容。</p>
<p>除此之外，王诚老师的蓝皮书（《计算机组成与体系结构-第3版》）（或刘卫东老师的红皮书？这个可以自行到购书应用上搜索）也可适当参考，但是并不特别推荐，因为其中包含了许多本科的实验内容，而这些在考研中几乎不涉及。</p>
<p>在练习题方面，如之前所说，包括计算机原理在内的多数清华计算机系课程的历年期中、期末题、习题可以在<a href="https://github.com/PKUanonym/REKCARC-TSC-UHT" target="_blank" rel="noopener external nofollow noreferrer">清华大学计算机系课程攻略</a>中找到。还有其他的计组练习题，比如袁春风老师的计算机组成课后习题及答案，王道408的计组部分课后习题，都有一定程度的参考价值，可以根据复习时间来自行选取和安排。</p>
<p>下面是一个简单的、近些年912中的计算机原理考点整理，方便你有一个直观的认识：</p>
<h2 id="计算机原理考点整理"><a href="#计算机原理考点整理" class="headerlink" title="计算机原理考点整理"></a>计算机原理考点整理</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>流水线相关计算</td>
<td>★★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>流水线冲突</td>
<td>★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>浮点数表示</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache缺失/映射</td>
<td>★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAID</td>
<td>★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>补码表示</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>CPU指标(CPI/主频)</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache相关计算</td>
<td>★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>指令的概念</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>异常处理/中断</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>虚拟内存</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>C语言</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>总线</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>显存带宽计算</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAM</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>冯诺依曼架构</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>时序/组合逻辑</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>海明码检错/纠错</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<p>在看完了上面的考点整理以后，相信你对考试内容的重点、难点已经有了一个总体的认识。流水线相关的考题几乎是必考题，而且常常以计算、压轴的形式给出，需要重视。此外，简单的数据表示、Cache高速缓存、RAID磁盘冗余阵列相关知识也几乎必考，然后便是大量零散的小知识点，比如指令、异常、总线、编码等知识。以上考过的知识并不代表所以可能会考到的知识点，但它表现出的倾向性是明显的。</p>
<p>时间如何分配，内容和知识点如何学习，这些，你应该已经有所了解。但考研，贵在坚持，如果不能持之以恒，把这些内容尽快、高效地学完，那么再多的资料也没有意义。另外，你还需要对学习过程做足够的笔记，这样的笔记应该便于检索和查阅——这会为你后期的巩固和多轮复习带来巨大的优势，这里我建议有条件的同学可以使用类似ipad平板电脑上的Margin Note 3软件，将学习过程逐步数字化、信息化，在这样记笔记过程中形成的脑图会帮助你构建知识体系、快速解决问题。</p>
<p>计算机原理的部分暂时先介绍到这里。</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>数据结构内容丰富，并且进阶知识系统及其庞大。但在考察上，通常侧重于对知识点原理性的深入理解，而不是工程上的实现细节。清华大学的数据结构有非常鲜明的风格与特点。</p>
<p>数据结构按章节主要分为：绪论、向量、列表、栈与队列、二叉树、图、二叉搜索树、高级搜索树、词典、优先级队列、串、排序。其中，高级搜索树、词典和排序应该算是比较难掌握的章节，需要投入更多精力。</p>
<p>同理，在课程上数据结构也有<strong>MOOC</strong>：包括<a href="https://www.xuetangx.com/courses/course-v1:TsinghuaX+30240184+sp/about" target="_blank" rel="noopener external nofollow noreferrer">数据结构-上</a>，<a href="https://www.xuetangx.com/courses/course-v1:TsinghuaX+30240184_2X+sp/about" target="_blank" rel="noopener external nofollow noreferrer">数据结构-下</a>，<a href="https://www.bilibili.com/video/av64451297?spm_id_from=333.999.b_62696c692d6865616465722d6d.28" target="_blank" rel="noopener external nofollow noreferrer">算法训练营</a>。其中数据结构免费向公众开放，而算法训练营需要单独购课。但是，对于考研，至少初试阶段来说，对算法的需求并不大，只要掌握了邓公在数据结构中的课程，便能起到几乎完备的效果。数据结构的课程内容已然很充足，从内容上来说甚至被分成了上、下两门课，足以窥见其知识点之多、学科的复杂性。数据结构中，理论性、结论性的内容很多，因此在复习过程过要善于总结，对不同的算法和数据结构也要有比较意识，对它们的应用场景有一定的了解。比如，败者树和锦标赛树，Splay单层和双层伸展，KMP和蛮力算法等等。在这样的比较过程中，加深对数据结构的理解。</p>
<p>清华大学数据结构使用的<strong>教材</strong>是《数据结构PPT》和《数据结构（第3版）》，其中PPT作为了本科学习的一个类似讲义的存在，是重中之重，其中有很多教材上并未涉及，近年来新增的知识点，包括前面提到的败者树、线段树等等。配套的习题集是《数据结构习题集》，这本习题集中的典型结论必须一一牢固掌握，并且与相应的课程章节联系在一起。</p>
<p>其余的参考书还有诸如《算法导论》，《具体数学》等。《算法导论》可以提供一些更详细的某些算法的解释，但建议浅尝辄止。912的考题中曾经考到《具体数学》中的某道判断复杂度的习题，不过仍然建议浅尝辄止。</p>
<p>为了得到及时的最新资料，还应该关注邓公的官网：<a href="https://dsa.cs.tsinghua.edu.cn/~deng/" target="_blank" rel="noopener external nofollow noreferrer">https://dsa.cs.tsinghua.edu.cn/~deng/</a>。其中会提供包括教材、习题集、PPT讲义、数据结构在线演示（<a href="https://dsa.cs.tsinghua.edu.cn/~deng/ds/demo/index.htm" target="_blank" rel="noopener external nofollow noreferrer">https://dsa.cs.tsinghua.edu.cn/~deng/ds/demo/index.htm</a>）等一系列数据结构方面的资源，请务必重视。</p>
<p>数据结构方面的练习题，请以邓公习题集、PPT课后思考题、期中期末考提、912真题这几类为准。</p>
<p>下面给出近年来912中数据结构的考点分析：</p>
<h2 id="数据结构考点整理"><a href="#数据结构考点整理" class="headerlink" title="数据结构考点整理"></a>数据结构考点整理</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th style="text-align:left">2020</th>
<th style="text-align:left">2019</th>
<th style="text-align:left">2018</th>
<th style="text-align:left">2017</th>
<th>2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>BBST（红黑/AVL/Splay/B树）</td>
<td style="text-align:left">★★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★★★</td>
<td style="text-align:left">★★</td>
<td>★★</td>
</tr>
<tr>
<td>散列表</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td>★★★</td>
</tr>
<tr>
<td>BST遍历/PFS</td>
<td style="text-align:left">★★★★x2</td>
<td style="text-align:left">★★★★★★</td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★★★★</td>
<td>★★★×3</td>
</tr>
<tr>
<td>排序（冒/插/选/基/归/锦/败、CBA）</td>
<td style="text-align:left">★★★★</td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★★★</td>
<td>★★</td>
</tr>
<tr>
<td>串匹配（KMP/BM）</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>复杂度</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>编码树（Huffman/PFC）</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>RPN</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>减治</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★</td>
<td style="text-align:left"></td>
<td>★★★</td>
</tr>
<tr>
<td>Catalan</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>堆（完全、左式堆）</td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>栈（调用栈、栈混洗）</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
<tr>
<td>Dijkstra算法</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
<tr>
<td>跳转表</td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>二分、Fib查找</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>最小生成树（Prim）</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★★★</td>
</tr>
<tr>
<td>非法表达式</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>逻辑地址</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到，关于高级搜索树、散列表、二叉树遍历、排序、串匹配等知识，几乎是年年必考；而一些较为冷门的知识点，比如跳转表、表达式、左式堆、栈混洗等，则有时出没。如果想在数据结构上取得高分，则必须在完整掌握常见考点的基础上，对大量的冷门知识、结论做归纳。一定要编织严密的知识网，才能自如地应付考研。尤其是，在912考试中，因为题量较大，而且数据结构作为试卷上的第一门并且是分值最大的科目，如果不够熟练，那么将直接影响后面科目的得分，尤其是计算机网路。比如，我考试的时候，对于KMP的next数组的计算等等便不够娴熟，导致我做题速度偏慢，后面的计算机网络题目就几乎来不及做了。因此，你应该注意把控答题的时间，不要在某一道题上纠结太久，因小失大。</p>
<p>数据结构的部分暂时先介绍到这里。</p>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p>计算机网络在某种意义上独立性较高，它的内容相对规范化，因此知识固定容易掌握。计算机网络还相对简单，考试分值也低，只需记忆和理解各种各样的体系和协议即可。</p>
<p>计算机网络方面清华并没有在线的<strong>MOOC</strong>，但是王道的<a href="https://www.bilibili.com/video/av70228743" target="_blank" rel="noopener external nofollow noreferrer">计算机网络</a>课程在大部分内容上已经足够代替。只需跟着看完课程即可，难度不高。</p>
<p>计算机网络的<strong>教材</strong>方面，推荐王道的计算机网络配套的PPT，以及清华大学的课程课件《计算机网络PPT》。王道PPT的课件质量很高，大部分网络知识都可以在上面找到答案，并且通俗易懂，整理得很好；但是另一方面，在清华的课件上可以找到一些冷门知识点的答案，比如水平分裂算法、SNMP简单网络管理协议，SONET/SDH系统等。</p>
<p>计算机网络的参考书包括《计算机网络（第5版）》，《计算机网络：自顶向下方法》，《计算机网络（第7版）-谢希仁》。其中，《计算机网络（第5版）》是重点，有时间可以看，但是这本书很厚，时间不够的同学，可以按照考察重点来学习，比如912中曾经考到的蜂窝网络，在这本书中就有涉及到（当然，在清华习题课件中也有提到）。</p>
<p>计算机网络的练习题，包括期中期末考题、平时的练习题、王道上的习题等等。建议多做一些，熟悉题型。912的计算机网络部分常常考到原题，所以已有的资料请务必做完做懂。</p>
<p>下面给出近年来912中计算机网络的考点分析：</p>
<h2 id="计算机网络考点整理"><a href="#计算机网络考点整理" class="headerlink" title="计算机网络考点整理"></a>计算机网络考点整理</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP(拥塞/握手/报文等)</td>
<td>★★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>路由器计算</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>信道利用率</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>ARQ(停等/后退/选择)</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>HTTP</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>网桥转发</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>ARP</td>
<td>★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>物理层设备</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>调制/解调</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>水平分裂</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>蜂窝</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>最小帧长</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>以太网</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>分组转发</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>OSI&amp;TCP/IP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>奈奎斯特定理</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>数据链路层概念</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>DNS</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>SMTP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>SNMP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到，大题通常考察TCP协议相关问题和路由器，其它的考点随机性较强，所以需要全面复习。</p>
<p>计算机网络的部分暂时先介绍到这里。</p>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>操作系统实际上是四门课程中最复杂最难掌握的一门课。它知识点多，并且实验细节特别多，需要很多额外的知识，比如汇编语言设计、软件工程等。</p>
<p>清华大学操作系统的课程<strong>MOOC</strong>可以在学堂在线上找到：<a href="https://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X+sp/courseware/be5b8d4fec0c4c329d19845020bc67b2/" target="_blank" rel="noopener external nofollow noreferrer"><strong>操作系统</strong></a>（另有b站<a href="https://www.bilibili.com/video/av30708793" target="_blank" rel="noopener external nofollow noreferrer">资源</a>，以及<a href="https://www.bilibili.com/video/av30708793" target="_blank" rel="noopener external nofollow noreferrer">旧版</a>，或<a href="https://www.bilibili.com/video/av70156862" target="_blank" rel="noopener external nofollow noreferrer">王道操作系统</a>）。另外，今年（2020）又出了<a href="https://next.xuetangx.com/course/thu08091002729/3175284" target="_blank" rel="noopener external nofollow noreferrer"><strong>操作系统(RISC-V)</strong></a>新版在线课程，即基于RISC-V和Rust架构的rCore教学操作系统，需要留意。因为操作系统在考题中常常涉及当年授课过程中的新问题（比如，当年piaaza平台上发布的问题被解决后可能会作为考题出现在试卷中），在学习上要尽量与时俱进。操作系统在学习上还是应该以uCore为主（<a href="https://learningos.github.io/ucore_os_webdocs/" target="_blank" rel="noopener external nofollow noreferrer">在线ucore操作系统实验任务书</a>），但新版rCore的教程（<a href="https://rcore-os.github.io/rCore_tutorial_doc/" target="_blank" rel="noopener external nofollow noreferrer">在线rCore操作系统实验任务书</a>）的代码已经逐渐成熟了，考察的可能性也不是没有。两者在架构上是很类似的，所以看懂了uCore那么学习rCore将不会耗费过多的时间。在实践方面，如果时间不足，可以选择只分析代码而不做具体实验，但实验指导书上的内容应该仔细阅读并理解。</p>
<p>清华大学操作系统的<strong>教材</strong>包括：《操作系统PPT》，《操作系统实验书》。《操作系统PPT》今年也出了<a href="https://github.com/LearningOS/os-lectures" target="_blank" rel="noopener external nofollow noreferrer">新版</a>，除了uCore版的实验书，今年可能需要看一看<a href="https://rcore-os.github.io/rCore-Tutorial-deploy/" target="_blank" rel="noopener external nofollow noreferrer">rCore-Tutorial</a>（这是V3最新维护版）。</p>
<p>清华大学操作系统官方提供了三本参考书：《操作系统：精髓与设计》，《操作系统概念》，《现代操作系统》。除此之外，也可以适当参考《<a href="https://chyyuu.gitbooks.io/simple_os_book/content/" target="_blank" rel="noopener external nofollow noreferrer">simple_os_book</a>》等。</p>
<p>操作系统提供了一个<strong>讨论区</strong>：<a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X_2015_T2+2015_T2/xblock/block-v1:TsinghuaX+30240243X_2015_T2+2015_T2+type@lti+block@7d025ede0dfe484da35b09a863a50507/handler/preview_handler" target="_blank" rel="noopener external nofollow noreferrer"><strong>pizza</strong></a>。在上面有历年操作系统课的所有答疑，请务必在遇到难题和不解时记得使用，往往在上面可以找到解答——当然你可能需要一些搜索技巧。</p>
<p>操作系统还提供了一些练习：<a href="https://chyyuu.gitbooks.io/os_course_exercises/content/" target="_blank" rel="noopener external nofollow noreferrer">习题集</a>，<a href="https://github.com/chyyuu/os_course_exercise_library" target="_blank" rel="noopener external nofollow noreferrer">操作系统-题库</a>。除了这些之外，和其他科目一样也有期中期末试卷、真题等。这些题目基本可以满足考研复习的需求了。</p>
<p>操作系统的相关课程信息见：<a href="https://github.com/chyyuu/os_course_info" target="_blank" rel="noopener external nofollow noreferrer">课程信息(2019)-Github</a>。注意跟进每年的新进展，在<a href="http://os.cs.tsinghua.edu.cn/oscourse/#A.2BbgVTTlknW2aLoXuXZzp8.2B2TNT1x8.2B37ffPtSF4v.2BegtOO5h1-" target="_blank" rel="noopener external nofollow noreferrer">清华大学计算机系操作系统系列课程主页</a>上可以找到最新的课程信息。点击进入具体的某个课程，便可以方便地获取包括课程介绍、课程教材、课程讲义及视频、教学交流和讨论社区、教学实验、<a href="http://xuyongjiande.gitbooks.io/os-qa/content/index.html" target="_blank" rel="noopener external nofollow noreferrer">操作系统课程常见问题及回答</a>等等丰富的资源。</p>
<p>操作系统的实验平台包括：<a href="https://www.shiyanlou.com/courses/221" target="_blank" rel="noopener external nofollow noreferrer"><strong>操作系统实验 - 实验楼</strong></a>，或虚拟机，或装机，或……环境搭建方式很多。之前已经提到，做实验对于初试来说并不是必须的，但理解实验内容却是非常必须的，这里请自行斟酌。</p>
<p>从上面的介绍可以看出，操作系统方面的资料非常丰富，甚至有点太多了。你在复习的过程中要有所取舍，围绕初试来学习，要首先把核心的考点掌握，对于比如uCore的代码题，可以稍稍放一放，等到后期有时间剩余时在批量解决。</p>
<p>下面给出近年来912中操作系统的考点分析：</p>
<h2 id="操作系统考点整理"><a href="#操作系统考点整理" class="headerlink" title="操作系统考点整理"></a>操作系统考点整理</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>uCore代码</td>
<td>★★★</td>
<td style="text-align:center">★★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>虚/实地址(转换/扩展)</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>进程控制/系统调用</td>
<td>★★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>管程</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>belady</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>x86硬件</td>
<td>★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>信号量</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>死锁</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>线程</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>文件系统</td>
<td>★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>调度算法</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>僵尸/孤儿进程</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>中断</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>哲学家就餐</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>硬/软链接</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>stride算法</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>x86特权级</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>优先级反置</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>伙伴系统</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>自旋锁</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>动态分区算法</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAID</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<p>如果想要在操作系统上取得高分，实验代码是一道绕不过去的坎，除了代码理解题以外，实验还会以其他的题型考查，比如曾考到uCore的时钟中断，这意味着实验部分的分值不仅仅只有代码题的分，这一点要引起重视。</p>
<p>操作系统的部分暂时先介绍到这里。</p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>单独把算法这一部分拿出来说，一是因为初试的专业课中考察算法实在不多或者不难，二是因为复试中将不可避免地涉及到机试算法题。</p>
<p>在初试中数据结构中所可能涉及到的算法题，常常比较简单。大概有以下几类：二分、减治、递归，动态规划。并且一般只会考察数据结构课程上所涉及到的“代码精致”的算法（因为这样才可能在考试中通过手写的方式呈现出来），它既要足够有区分度，又要足够简单。在这样的约束下，剩下的选择其实不多。</p>
<p>对于复试，机试难度大约在 【<strong><font color=blue>提高组</font></strong>，<strong><font color=purple>省选</font></strong>】 之间（这里的提高组、省选是参考的OI信息竞赛的难度标准，实际上912机试的风格和OI竞赛风格非常类似）。这意味着你需要对这个难度层次的题型有完整的了解和足够的题量训练。建议有机会可以参加学堂在线<code>Code+</code>比赛。</p>
<p>下面列出适合复试er的常见的 <code>OJ</code>：</p>
<ul>
<li><a href="http://oj.thusaac.com/#!/" target="_blank" rel="noopener external nofollow noreferrer">2020机试OJ</a> 2020年机试环境</li>
<li><a href="https://dsa.cs.tsinghua.edu.cn/oj/foyer.shtml" target="_blank" rel="noopener external nofollow noreferrer">TsOJ（慕课）</a> 校内教学</li>
<li><a href="https://www.acwing.com/problem/search/1/?csrfmiddlewaretoken=yJvfsrzPiXIkzRaHzGoIc6ydZpSRgI0AuFGm9OxWxA8ULa8Gq8lPp1a1aC1ZAqed&amp;search_content=%E6%B8%85%E5%8D%8E" target="_blank" rel="noopener external nofollow noreferrer">AcWing</a> 清华推研机试题</li>
<li><a href="http://noobdream.com/Major/school_show/" target="_blank" rel="noopener external nofollow noreferrer">N诺</a> 清华往年机试题</li>
<li><a href="https://www.nowcoder.com/kaoyan/retest/1001" target="_blank" rel="noopener external nofollow noreferrer">牛客网</a> 考研专题</li>
<li><a href="https://www.luogu.org/" target="_blank" rel="noopener external nofollow noreferrer">洛谷</a> 题量训练和模板积累</li>
</ul>
<p>机试允许携带模板，这意味着你应该在初始结束后甚至更早开始积累模板。模板应该尽量简洁易懂，便于在考场上查阅。你还可以通过做模板题来积累题型模板（<a href="https://www.luogu.com.cn/problem/list?keyword=%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener external nofollow noreferrer">洛谷模板题</a>）。机试还允许使用标准模板库STL，这意味着很多算法和数据结构不需要你去手写，比如快速排序、优先队列、字典、栈和队列等，它们的使用方法需要熟练掌握。</p>
<blockquote>
<p>更多的信息可见于：<a href="https://github.com/stellarkey/912_project/tree/master/6%20%E5%A4%8D%E8%AF%95/1%20%E6%9C%BA%E8%AF%95" target="_blank" rel="noopener external nofollow noreferrer">912_project - 复试 - 机试</a>。</p>
</blockquote>
<h1 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h1><p>作为一个研究生，或者将要考研究生。拥有一些科研经历，似乎也是名副其实，这些经历在复试中显然会给你带来很大的加分。毕竟，研究生的主要任务，就是搞科研。如果你的目标是学术硕士，那么科研经历就可能更为重要。</p>
<p>你应该尽早开始一些有科研性质的项目的准备，包括有理论性工作性质的实习经历，在本科实验室或者其他科研院所的研究经历，发表或参与发表的学术论文。即使没有适合的途径，也应该提前了解报考的方向，清华大学计算机系的大部分老师都有个人主页，在他们的主页上你可以了解到他们的科研方向、论文专著甚至硕士名额，你可以在这些研究方向上有所了解，进一步做一些简单的开源项目或者实验等。这些都可以体现出你对科研的兴趣和培养你在科研方面的实践基础。</p>
<p>最后，如果一切顺利的话，欢迎开启人生的新阶段。希望这是你真正想要的。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>912</tag>
        <tag>数据结构</tag>
        <tag>操作系统</tag>
        <tag>计算机组成</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>年中总结</title>
    <url>/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>一开始可能想的是，要做一个考研的总结。后面渐渐心思转移，想到这不过是平凡的岁月之中，何必花哨，何必巧立名目。我倒不是说，考研的象征意义于我，可能比实际意义更为凸显。我只是说，这是现实的情况之下，必须要走的路。那么，必须要走的路，去探讨其意义则显得尤为夸张——至少我不愿意去做这样的解说。恰逢年中，一般此时，在任意一个过去三十年间早已尘埃落定的季节，我们仍然在静悄悄地等待。我不禁思考起来自己走过的人生之路以及何去何从——倒不是说充满了被动，只是掐指一估，认真思考的状态好像又隔绝了时空，那距离甚远了。我开始惊醒，终于物理战胜精神，现在我要去追逐那一点平衡。<a id="more"></a></p>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>我不希望过多去关注经验，或者准确的，经历这种东西。</p>
<p>这好比读小说，你获得的是体验感，而不是真实感。</p>
<p>如果你时常静下来思考，未来究竟如何？如果从更长的时空来看，这一切的决策的价值几分？这是一种幻想中的成熟，在脑海中构建出未来的自己，它将具有怎么的思路，它将具有怎样的权衡？多多思考。</p>
<p>但是，缺乏经历，又往往缺乏对平行世界的想象力。见得多，却不一定对文字有充分的泛滥。这意味着，过多的阅读将导致过多的想象力，贫瘠的阅读又将致贫瘠的脑海。</p>
<p>然而，体验感未必也是罪恶。希望这样的体验感，带给你一种持久的精神。</p>
<p>高度紧张的人更容易做梦，至少对于我而言，这充分地正确。这意味着梦境是一种大脑对现实的被动模拟。在辗转反侧之时，我也时常恐慌地想到，梦之于我的意义。然而梦境结束之时的怅然若失，却实在说明了体验感剥夺后的不适和陌生感。</p>
<p>我希望我们回头看的时候，哪怕这些获得性的体验感都烟消云散，从脑海中完全丢失了。它们的某种产物依然以深度记忆的方式保存下来，这样便不致没有收获。</p>
<h1 id="危机"><a href="#危机" class="headerlink" title="危机"></a>危机</h1><p>在我的人生之中时常出现这样或者那样的信号，无论物理或者心理，无论宏观或者微观。这样的危机使我意识到我正在偏离一条唯一的路。我知道这是大多数的路，但是人类几乎总是要走这样的路，少部分独辟蹊径的人，最后在我看来，也不至于颠覆星球。所以时兮运兮，在同一条路上，不同的人也会走出迥然不同的季节。但一条路毕竟是实体，作为共有的想像，需要更抽象的元素来代替。</p>
<p>首先是生命。没有生命就没有了路。这是平凡的，这也是需要时刻谨记的。在我幼年之时，我曾去游泳池玩耍，没有对水体的敬畏，这便使我有了进入深水区的前提。我双手轻轻搭在边沿，换气。终于这种习惯使我放松警惕，我松开双手，潜下去，踩中游泳池底，上升，露出水面……在这上下的循环之间，我离岸愈来愈远，我开始意识到即使我可以保持这样的换气循环，我也没有足够的技能游回岸边。这实在是坏消息，我的节奏也越来越难以保持——因为我还没有学会在水下睁开眼睛，我在漆黑中离岸愈远。在我快要坚持不住的时候，我趁着上浮的契机，双脚用力，露出水面：“救命！”——一位救生员摘住我的手，将我拉回了岸边。现在回想起来，在反应时间很短的危机面前，绝对的理智几乎不起作用——人类的思考速度实在是太慢了！因此足够的预先训练和准备是对生命的保证，这也是这唯一的路不致颠覆的前提之前提。除此之外，我还患过严重的感冒，一度发烧、咯血，让我认识到人类离死神的距离并没有那么远。现在的我早已学会游泳，也更愿意去看医生。</p>
<p>其次是幸福。这样的幸福应该是不致危及生命的。幸福是一个广泛的概念。吃饱喝足是基本的幸福，其他的生理需求的满足也是幸福。除此之外，一个合格的理想，在追逐它的过程和最终结果都应该让你感到幸福——如果说你追求的某个东西时时刻刻只会让你感到痛苦，请你趁早放弃。有人觉得玩游戏是罪大恶极，其实完全没有；玩游戏也是一种人类趋向于幸福的方式，但是因为这个行为本身对实体社会的影响过小，而产生了负外部性，导致了其他人的偏见。在任何一个事情上过分专注的人，一定是因为这个行为本身会给他带来某种形式的幸福。表层的幸福是快乐，但幸福不止于快乐；感人的情绪，也会使一些人感到幸福；这说明情绪与幸福之间没有必然的联系。那么，什么是准确的幸福呢？我觉得可以有一个简单的定义：当你处于一个状态下，并且你不愿意主动改变这个状态，那么该状态下的你应该是幸福的。</p>
<p>生命和幸福能够指导你在有限状态下的决策，做出局部更优的选择。但是，要做出更久远、更丰富的事，还有一个更重要的元素。</p>
<p>想象力。理想的产生需要想象力，忍受当下痛苦而保持幸福同样需要想象力——这实际表现为意志。想像力是社会的基础，权力是想象力，体系也依靠于想象力，一切的道德依靠于公共的想象力。想象力使人摆脱当下的窘境，有机会看到虽然虚无缥缈但是又给人以希望的远景。这样的远景，不妨称作蜃楼。与客观世界的渗漏不同，想象力世界的蜃楼要自己去构建和呈现。这样的蜃楼可能引导你去绿洲，也可能引向死亡。你需要有一种自己的宗教，这个宗教与一切的现实不同，它完全要由你自己去想像，这样你便获得了一个持久的信念。这个信念很难崩塌，因为它和所有的宗教一样连接到虚无之境。但是大多数人仍然选择了更普遍的易获得的信念，这无伤大雅。这时，打造完全合适于自己的信念的人，就有隐藏的优势。</p>
<p>拥有和保持生命、幸福和想象力，这样便可以在唯一的路上保持行走。</p>
<h1 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h1><p>平衡自然是三者之间的平衡。</p>
<p>只要稍微善于思考的人通常就已经有足够的想象力，这时他们往往愿意舍去当下的一部分幸福，以期未来更大的幸福蜃楼。但不幸福的状态往往对生命是一种软性的剥削，在剥削之下，人的生命往往开始衰弱。因此过于抽离幸福的生活，应当是短暂的、有限的，如果在长期中保持幸福的不在场，势必会引发严重的生命问题。但是，即使是不幸福的状态，人通过一定的想象力技巧，也可以获得有限的幸福，这表现为兴趣或者心态的转移等等。因此，一定的调整是有必要的。你必须经常关注自己的生命，防止中道崩殂的发生。</p>
<p>想象力容易夸大将来可能获得幸福。有很多事情，只有在结束的一刻产生巨大的幸福感，然后便如潮水般消退。但这唯一的路的要义，并不在于某时某刻的幸福，而在于时时刻刻的幸福感，即使它是微小的。这称为幸福的可持久化。这时，想象力必须不止于勾勒远景，对当下的事物也要有足够的认识，并且努力寻找和构建阶梯。</p>
<p>有些人的想象力虽然一开始看上去十分丰富，但是在接下来的岁月里毫无发展。尽管他或她依靠自己成熟的想象力在很长的一段时间内，保持了自身的生命和幸福。但是，这样的生命是缺少活力的。当一个人不发展想象力，脑海陷入停滞或者反复接收相同的幸福信号的时候，他或她便退化为机器，未来可期。</p>
<p>但仅仅做到平衡，只能保证不偏离这条路。</p>
<p>除了平衡以外，你需要一点别的特质。</p>
<p>比如，运气。我想说的是，运气是一个不可控的，但是却十分有效的事物。尽管丢给运气，但是也分为两种截然不同的运气。其中一种，是纯概率的，独立的运气，它并不能保证总是发生，比如天赋、病痛。另外一种，则是群体性的确定事件，但是在个体间表现为运气。第二类运气尤为重要。因为它是场景下必然发生的，因此在决策上的处理就会更有效。</p>
<p>高考、考研之类，是第二类运气。无论参加多少人，录取的事件总是会发生。因此，当你仅仅只能做到平衡而已，做其他的任何努力都很困难的时候。你就会特别依赖这样的运气。这样的依赖固然是不好的，但在实力有限的情形下，是不可避免的。这样的你通常在人生中会需要一到两次的第二类运气。我是说，不是每一次第二类运气都会降临到你身上，但是只要存在了哪怕一次机会，我相信总是会努力去抓住的；如果一次没有经验，那么两次也是绰绰有余了。就我个人而言，我的高考分数刚好过线，考研分数也刚好过线。我只能说，在这些各种其他因素之外，普通人总归需要一点运气。这是，在平衡的基础上的一点修正。</p>
<h1 id="意志"><a href="#意志" class="headerlink" title="意志"></a>意志</h1><p>寄托于运气，好比在虚无缥缈中穿行，期望找到一片世外桃源。这是一件非常美好，同时也非常无力的事。</p>
<p>这个时候，意志便占了上风。</p>
<p>当然，一个良好的意志，形成于优秀的想象力。当你开始思考更宏观的图景时，一种试图调控自身的行为模式的企图便诞生了。</p>
<p>但是，意志是一种稀有的品质。</p>
<p>少部分人会拥有第一类意志。这样的意志表现为坚持力，事实上它是一种习惯。当一个人下定决心时，第一类意志便发挥效力，坚持恒久远。这样的意志往往会让你在短期内获得巨大的结果性收益，一个月、一年甚至几年的时光。也可能在更长期，获得更隐性的收益。但无论如何，这样的意志适用于明确、稳定的目标，它不需要你有多少智慧，也不需要过多的决策，只要按照既定透明的方法，结果往往可期。</p>
<p>更少的人具备这样一种意志。或者说这样的意志是在第一类意志上的升华，然而我也很难形容。第二类意志的核心不在于坚持某件事、某种行为，我是说，假如这样坚持的一条路之外，还有没有别的可能？第二类意志要思考、回答这样的问题。对于这样的人来说，他们坚持的目的不是为了达成某种结果或者条件，而是在过程中证明自己的存在，他们也许一生也没有什么出彩的成绩，但是他们完成了对自身生命意义的诠释。</p>
<p>这时，便引出了唯一的路之外，无限的世界。</p>
<h1 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h1><p>常常有失败者言，这漫长的岁月白费了，后悔、痛苦不已。</p>
<p>我只想冷冷地嘲讽，假若你只觉得白费，那么的确白费。</p>
<p>把失败和成功看成自己所有的定义，这样的人又何其可悲。他们的坚持，不是真正为了自己的坚持，只是为了他们想像中的自己的坚持。而实际上，他们自身又往往绝不是他们想象中的那个人。这就是错位。</p>
<p>对于这样的人，他们早就迷失了自我。他们给自己构建了丰富的外壳，使得别人无法窥视其中的真实。他们开始表现出封闭感，开始呈现反智的状态——不接受新的事物。这样的状态，看来是很棘手的，已经很难通过简单的方式处理。作为有距离感的人，你这时唯一能做的，只有在沉默中隔岸观火，这是注定的悲观。</p>
<p>我想，从经历的意义而言，失败的意义反而不大。我当然不是否认成功带来的后继效应，这一点无可否认。但我相信，这世界上总是那些过程意义大于结果的事情占大多数。这也是一种宏观的运气罢。</p>
<hr>
<h1 id="关于未来的想法"><a href="#关于未来的想法" class="headerlink" title="关于未来的想法"></a>关于未来的想法</h1><p>当我慢慢消耗时间，慢慢变老的同时，未来的迷雾却不会消散。对我而言，似乎更加看不清方向。致使信念动摇的契机，若有若无地存在。</p>
<p>那么，从物理上，换一个环境，也许会更好。</p>
<p>但这充满不确定性和运气的命运，又使人着迷了。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>寒潮</title>
    <url>/%E5%AF%92%E6%BD%AE/</url>
    <content><![CDATA[<p>浮动静止的水面上，一只体态丰满强壮的海豹正趴在浮冰的边缘，它静伫不动，伺机等待猎物自投罗网。</p>
<a id="more"></a>
<p>远方，<a href="https://zh.wikipedia.org/zh-hans/%E6%A0%BC%E9%99%B5%E5%85%B0" target="_blank" rel="noopener external nofollow noreferrer">格陵兰岛</a>的触角在天际线的上方。</p>
<p>在地轴的另一端。<a href="https://zh.wikipedia.org/zh/%E6%B4%B2%E9%9A%9B%E5%BD%88%E9%81%93%E9%A3%9B%E5%BD%88" target="_blank" rel="noopener external nofollow noreferrer">洲际战略导弹</a>正从阿舍密冰雪覆盖的山脉深井中露出<a href="https://zh.wikipedia.org/wiki/%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC" target="_blank" rel="noopener external nofollow noreferrer">样条线</a>的影子，我们看到峰峦之上遍地狼藉，不计其数的破损的空气管道和坠落的飞行器已燃烧到小一半；发射井口，旋转的钢板收回的时候，抖落了一层厚厚的冰渣，蓝色的指示灯亮了。</p>
<p>我们的目光回到北极海，在海面以下十米深，一群<a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E9%99%B5%E8%98%AD%E9%B1%88" target="_blank" rel="noopener external nofollow noreferrer">鳕鱼</a>从格陵兰的方向游来，它们逆着海底更深处洋流的方向，好像沐浴着——接近零度的水温，使它们惬意；凑近细看，海面上有细微的波纹，那是冷冷的风。</p>
<p>在地球的另一端，<a href="https://baike.baidu.com/item/%E6%B6%B2%E4%BD%93%E7%81%AB%E7%AE%AD%E5%8F%91%E5%8A%A8%E6%9C%BA" target="_blank" rel="noopener external nofollow noreferrer">液体氧化剂</a>点火产生了强烈的热风，地面颤动起来，笨重的巨人踩着火焰慢慢升空。我们这时注意到，尾部的<a href="https://zh.wikipedia.org/zh-hans/%E6%96%B9%E5%90%91%E8%88%B5" target="_blank" rel="noopener external nofollow noreferrer">方向舵</a>偏转了，战略导弹的航迹随之产生了偏角——它缓缓地而又坚决地指向了20000公里外的目的地。</p>
<p>它调整姿态。它并不着急，中央控制器告诉它：在俯冲之前，它将需要冲破平流层，跨越<a href="https://baike.baidu.com/item/%E4%B8%B4%E8%BF%91%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener external nofollow noreferrer">临近空间</a>，直到飞抵外层大气，这里的空气稀薄得将只剩下每立方米四处乱撞的几十个气体分子，阻力将可以忽略不计——它将像一颗环地卫星一样，在这段充满使命感的任务旅程里面，大部分时间将在无声的寂寥中度过，保持着义无反顾的匀速等待时机到来——要是时机不成熟，在坠落之前，它还可以在临近空间的高度上再盘旋几圈。</p>
<p>北极鸥已经在洋面上盘旋了好几圈，终于，落在了奇怪的黑色浮标上。这时，黑色浮标开始上浮了——仔细看，那是潜望镜的形状，露出深藏水面以下的船体，鸟惊吓着飞走；水淋漓地从船体上褪去，像是崭新的一样——它的表壳上涂了一层蓝绿色的防水涂装。顶上机械的声音作响，严丝合缝的舱盖打开了，从里面斜着升起了一排发射架，发射架上躺着好几种不同型号的<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%B0%8D%E7%A9%BA%E9%A3%9B%E5%BD%88" target="_blank" rel="noopener external nofollow noreferrer">中程地对空导弹</a>——看样子是这样，可是，这些导弹的形状又与一般的不同，它们的头部更加巨大，从外表上看，显得有些头重脚轻。</p>
<p>等等，我们好像忽略了什么。</p>
<p>我们的视线掠过远去的北极鸥，天空是灰蓝色的；接着掠过全神贯注的海豹，它用力的爪下，冰颗粒落进海水里溶解；再掠过不知危险正在前方的鳕鱼群，垂直于洋流线的方向，往下，往下，光线暗淡起来。视野拉大，拉大——一座位于水底的庞大的军事基地，露出了它不为人知的面貌。无数大大小小的密封舱连接，贯通成一个巨大的整体；这个整体似乎没有停留在海底的表面，它依傍着大陆架，向海底的更深层发掘，岩石层里构建出了一个立体的结构。</p>
<p>这时，潜艇发射了，数枚头重脚轻的导弹受到推力的作用，飞快地向格陵兰岛的北部飞去，它们的目标很明确——那里是最靠近海洋的建筑，高高的架塔和厂房，它们仿佛隐身一样——在雷达探测不到的情况下，它们肆无忌惮，长驱直入。</p>
<p>临空，爆炸了。</p>
<p>爆炸声花了7秒钟传到海豹的耳朵里，它下意识地在爪下狠抓一把，从冰上掉落了一大块碎冰，扑通——正要经过的鳕鱼群立刻一哄而散。海豹一跃而下。</p>
<p>海底的无数密封舱，接近70%一下子变得暗淡了。剩下的也开始闪烁起来。从水里面，我们听到清晰的警报声响起，此起彼伏；借助水传导的优势，正在追捕四散奔逃的猎物的海豹，才刚好拽住一条幼年鳕鱼的尾巴的时候，它闻声停了下来。</p>
<p>我们把目光移得稍远一些，离闪烁不定的军事基地约20公里的地方，坐落着已经沉睡了300万年的休眠火山，它看上去不像一座山，扁平的形状倒更适合称之为丘陵。在快要看不出样子的火山口附近，海底生物圈正在繁衍生息。20公里外的爆炸对于这里来说，暂时没有什么影响，除了一些对于长波有特殊感应的鱼群有些躁动，其它生物都相安无事。</p>
<p>潜艇完成了发射任务，它的身形又下沉，一边收回发射架，直到最高处的潜望装置也浸没进了咸涩的海水里，周围形成了小型的漩涡；它继续往下的同时，它的螺旋桨稍微倾转，在快速的旋动中使得潜艇整体向右产生了约15度的<a href="https://blog.csdn.net/guyubit/article/details/52995676" target="_blank" rel="noopener external nofollow noreferrer">偏航角</a>——潜艇瞄准了另一个目标。</p>
<p>那是建在休眠火山旁的热电厂。击溃了这里，军事基地的所有功能单元将只能采用备用能源；那时，大半的水下防御系统将不能全功率运转，军事基地将成为板上鱼肉，任人刀俎。潜艇立刻发射了一颗巨型鱼雷——下一刻，从水面上忽然钻进了数发战术炸弹，直指向潜艇，随着数声沉闷的巨响，潜艇被四分五裂地击毁了。这时，始作俑者才出现了——三架<a href="https://zh.wikipedia.org/zh-hans/%E5%89%8D%E6%8E%A0%E7%BF%BC" target="_blank" rel="noopener external nofollow noreferrer">前掠翼</a>战斗机以极高的速度从低空掠过水面，它们的尾部带着超音速形成的<a href="https://www.guokr.com/question/454719/" target="_blank" rel="noopener external nofollow noreferrer">马赫锥</a>，很快飞远。</p>
<p>外层空间。一切声音消泯。稳定航行中的洲际战略导弹检测到了卫星网的窥探，那是一颗正从<a href="https://baike.baidu.com/item/%E8%A5%BF%E8%A5%BF%E4%BC%AF%E5%88%A9%E4%BA%9A%E5%B9%B3%E5%8E%9F" target="_blank" rel="noopener external nofollow noreferrer">西伯利亚平原</a>方向升起的新星——发射出断续又连贯的加密电磁波，在地壳椭圆的边缘上形成肉眼不可见的<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%88%A9%E7%8F%A0" target="_blank" rel="noopener external nofollow noreferrer">贝利珠</a>。中央控制器立刻联系正运行到北天极的激光防御系统。可是由于有遮挡，从<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%B0%94%E6%B3%A2%E5%AF%BC" target="_blank" rel="noopener external nofollow noreferrer">电磁层</a>传播指令效率慢了一些，“新星”发现了这不速之客，紧急行动开始……6秒以后，一道经过定位调制的高能激光束以无与伦比的速度击中了它的能源核心——从任何另外的视角看，它好像是无端地分裂了，无数金属的碎片泛着光，有的向外宇宙逃逸，大部分在杂乱的轨道上运行着，坠落，溅出火花。此时，一道经过加密的信号已经从卫星上定向发射到了格陵兰岛的方向。</p>
<p>海边的海水忽然翻滚起来，地形开始变化，海水倒灌向了陆地的方向。海水褪去，神秘的地下洞穴显露出来，这是一个更大的发射井，里面装载了两种型号的飞行器，一种体积庞大，另一种稍小，附着在庞大者的身侧。熟悉的点火，熟悉的升腾，只是这次是向斜上方飞去——不出意外的话，它们将在<a href="https://zh.wikipedia.org/zh-hans/%E6%88%B4%E7%BB%B4%E6%96%AF%E6%B5%B7%E5%B3%A1" target="_blank" rel="noopener external nofollow noreferrer">戴维斯海峡</a>的正上方50万米的高空与宿敌相遇。</p>
<p>漏网的巨型鱼雷自顾自地向热电厂飞去，现在它是独立的。但水下有其他的东西盯上了它，那是一艘巨型潜艇母舰，停泊在军事基地的东南方向；现在已经启动，从它的大型舱门中，上百发小型潜艇蓄势待发，像蜂群一样。瞄准了鱼雷，它们谨慎使用了引导策略，很快，巨型鱼雷被故意引爆的深水炸弹导向了另一个地方——山丘的另一侧。这下，休眠火山旁的生态圈要受到无妄之灾了。</p>
<p>信息充分地传递。军事基地恢复了正常运作。就在这刻我们注意到：在更南方、格陵兰海的方向，不知何时，深海中出现了无数大小各异的潜艇，它们对前方的目标虎视眈眈。这股新的力量建立起了新的均衡。</p>
<p>我们把目光放到高空。大小两架飞行器冲出了同温层，进入到临近空间。它们从斜后下方接近，离目标越来越近，独特的隐身性能使得它们的动作被很好地藏匿起来。等到洲际战略导弹发现这俩时，小号飞行器已经脱离了大号的肩膀，加速冲到它的飞行区域，一股强烈的电子干扰波被释放了，这种干扰波不分敌我，但大号飞行器已经计算好了轨迹，它的机械系统能保证这一次打击的精确性。</p>
<p>中央控制器失去了控制，洲际战略导弹开始心慌，面对愈来愈近的天敌，它如梦初醒，物理光学制导系统开始运作，由于缺少控制电流，只有1片的尾鳍的机械控制模块运转起来——它偏了一点点角度。这不足以使得它逃离反制，于是，大号飞行器仍然追踪到了邻近区域，按照预定程序爆炸——在高空高速的追逐中，它失去了它的所有尾鳍。</p>
<p>海豹跃上了之前停留的浮冰，刚死去的鳕鱼生腥的气味让它感到满足，这短暂的一瞬间，它忘记了周围正在发生的事情，全神贯注地准备享用它不算丰盛的美餐。在它盯着鳕鱼的时候，从蓝色天空背景中，一颗流星开始坠落。</p>
<p>水下各方的潜艇编队都显得惊慌失措起来，它们从原来的有序变得无序，讯息肆意地从每个角落散出，像一场混乱的演出。原本蓄势待发的战役消失无踪。这场可以覆盖掉一切的巨大灾难将使得它们的斗争相形见绌。它们像真正的鱼群一样拼命地逃逸开去，水下乱流四起。</p>
<p>3分钟以后，由于失去了方向和及时的爆炸指令。它轻易地击穿了北冰洋面上十米厚的冰盖。它在凛冽的冰水中横冲直撞，直到大洋的深处……终于，中央控制器反应过来了，一道命令补救式地发布——<a href="https://baike.baidu.com/item/%E9%93%BE%E5%BC%8F%E5%8F%8D%E5%BA%94" target="_blank" rel="noopener external nofollow noreferrer">链式反应</a>起效……如果海底也能产生蘑菇云的话，它的爆炸冲击波冲破了几百米深的北冰洋，形成巨大的浪潮——这股势不可挡的携带着放射性的、冰火融合的汹涌潮流，向四周散开去。万物在巨大的形态面前，好像变得空前的沉默。</p>
<p>海豹两只手撕咬着鲜嫩的鱼肉，它终于抬起头，在它的正前方遥不可及之处，数十米高升腾的浪花恍若静止。它欣赏，享用。</p>
<p>寒潮。寒潮。寒潮来了。</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>测试专用</title>
    <url>/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>调试调试调试~</p>
<p>偶尔放一些觉得蛮好的文章啦~</p>
<a id="more"></a>
<hr>
<p>我的下半辈子</p>
<p>26岁，你看着身边的人都结了婚<br>婚礼的份子钱逐年递增<br>春节回家，父母从带你串亲戚<br>变成了带你去见相亲对象<br>见了十几个姑娘<br>你每次都觉得和那个她比<br>差了一点 </p>
<p>28岁那年，你遇到了一个和你遭遇差不多的姑娘<br>你们有一搭没一搭的聊着<br>她说：你还不错<br>你喝了一口可乐说：你也是<br>你还不确定喜不喜欢她<br>双方家长就已经摆好了订婚宴 </p>
<p>结婚的前一周，你和朋友出去喝酒<br>你说不想结婚<br>朋友说，你啊，就是想太多。谁不是这么过来的？ </p>
<p>29岁，你们终于结了婚<br>婚礼办的不大不小，朋友来的不多不少<br>攒了几年想要去实现理想的钱<br>搭在了这一场百人的私人庙会上<br>婚礼进行到中间<br>司仪带着标准的商业化微笑<br>对着台下的亲朋喊道<br>要不要让他们亲一个！<br>台下那些人跟着一起起哄 </p>
<p>不知道为什么<br>你简简单单的亲了一口<br>俩人恢复到了一开始的站位<br>你小声说了一句：我爱你<br>那个昨天还看不惯你倒腾模型的新娘<br>愣了一下说：我也爱你 </p>
<p>你不确定她是不是对你说的<br>就像你不确定是不是对她说的一样<br>婚礼结束后，并没有你想象的浪漫<br>你听着外屋的新娘一笔一笔的算着份子钱<br>想着不过才两年，怎么就变成这样了<br>想着想着，洞房夜就睡着了 </p>
<p>30岁，她怀孕了<br>辞掉了工作，在家养胎<br>你在公司逐渐有了点地位<br>手里管着十来个人<br>独立负责一个项目<br>结婚前陪嫁的那辆20万左右的车<br>也变成了你一个人的独享<br>但你依然不敢放松<br>每次加班<br>电话那头都是抱怨与委屈<br>但你不能争辩什么<br>谁让她怀了你的孩子 </p>
<p>在这一刻<br>不论是她的父母还是你的父母<br>都无条件的站在这一边 </p>
<p>31岁，孩子落地了<br>前前后后连孕检带住院费花了10万块钱<br>不过无所谓<br>你看着你的孩子，怎么看怎么喜欢<br>高兴的仿佛这是你的新生 </p>
<p>32岁，这是人生最不愿意重复的一年<br>平均睡眠3小时<br>孩子每一个小时都要闹腾一次<br>第二天拖着睡不醒的眼睛去上班<br>老板说你上班不干活<br>回家媳妇说你不干活<br>你想了半天不明白，那谁干活呢？ </p>
<p>那辆开了3年的车<br>成为了你真正的家<br>你不在抱怨路上拥堵的交通<br>你甚至开始希望<br>再多堵一会<br>回到家，你关了发动机<br>在车上点了一根烟<br>这是你每天最幸福的十分钟 </p>
<p>车前是功名利禄，车尾是柴米油盐 </p>
<p>35岁 你因为身体越来越差<br>加班越来越少<br>晋升的速度也越来越缓慢<br>那天下班，媳妇告诉你<br>孩子要上幼儿园了<br>双语的一个月3000<br>你皱了皱眉头，那边就已经不耐烦了<br>“四单元的老王家孩子，一个月6000”<br>“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱</p>
<p>这笔钱，你原本打算给自己过个生日，买个新电脑</p>
<p>38岁，孩子上了一年级<br>老师说一年级最关键，打好基础很重要<br>你笑着说，是是是，老师您多照顾<br>新生接待的老师看着你不明事理的脸<br>给你指了一条明路<br>“课外辅导班，一个月2200”</p>
<p>40岁的时候，孩子上了三年级<br>老师说，三年级，最关键，承上启下很重要<br>你笑着说：是是是，正打算再报个补习班 </p>
<p>44岁，孩子上了初中<br>有一天回到家，她对你说<br>爸爸，我想学钢琴</p>
<p> 你没什么犹豫的<br>你以为这些年，你已经习惯了<br>但那句“爸爸现在买不起”你始终说不出口<br>好在孩子比较懂事<br>她说：爸爸没事，要不我先学陶笛也可以 </p>
<p>你看着这么懂事的孩子，却开心不起来</p>
<p> 46岁，孩子上了一个不好不差的高中<br>有一天你在开会，接到了老师的电话<br>电话里说你的孩子在学校打架了<br>叫你去一趟<br>你唯唯诺诺的<br>和那个比你还小5岁的领导请了个假<br>到学校又被老师训了一通<br>无非台词就是那一句<br>你们做家长的就知道工作，能不能陪陪孩子<br>你看着这个老师，有点可笑<br>好像当时说：<br>家长在外辛苦点<br>多赚点钱让孩子多补补课的和他不是一个人 </p>
<p>50岁，孩子上了大学<br>很争气，是一个一本<br>他学的专业你有点看不懂<br>你只知道工作不一定好找<br>而且学费还死贵</p>
<p>你和他深夜想聊聊<br>准备了半斤白酒，一碟花生米<br>你说着那些曾经你最讨厌的话<br>还是要为以后工作着想<br>挑个热门的专业<br>活着比热爱重要<br>你们从交流变成了争吵 </p>
<p>你发现，你老了<br>老到可能都打不过这个18岁的孩子<br>你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用<br>这场确立你最后威严的酒局不欢而散 </p>
<p>你听的不真切<br>在孩子回自己屋的路上好像叨叨了一句<br>“我不想活的像你一样” </p>
<p>怎么就哭了呢？50岁的人了<br>一定是酒太辣了，对不对<br>一定是酒太辣了 </p>
<p>55岁，孩子工作了，似乎有一点理解你了<br>但你却反了过来，你说不要妥协 </p>
<p>56岁，孩子也结婚了<br>你问他喜欢那个姑娘么<br>他愣了愣说：喜欢吧 </p>
<p>60岁，辛苦了一辈子，想出去走走<br>身边的那个人过了30年<br>你依旧分不清到底喜不喜欢<br>你们开始规划旅游路线 </p>
<p>这么多年了<br>你们还是存在分歧，还是在争吵<br>某个瞬间，你觉得<br>这样可能也挺好</p>
<p>一切都准备好了<br>儿子说：爸妈，我工作太忙了<br>可以帮我照顾一下孩子么<br>你们退了机票，又回到了30年前 </p>
<p>70岁，孩子的孩子也长大了，不用天天操心了<br>你下定决心说：一定要去玩一趟可是手边的拐杖<br>只能支持你走到楼下的花园 </p>
<p>75岁，你在医院的病床上<br>身边聚满了人，你迷迷糊糊的看见医生摇了摇头<br>周围那些人神情肃穆<br>你明白了，你要死掉了<br>你没有感到一丝害怕</p>
<p>你突然问自己，我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼<br>原来，那时候，你就死掉了吧 </p>
<p>依照惯例<br>死前的3秒，你的大脑要走马灯<br>倒叙你这75个年头的一生<br>画面一张一张的过<br>1秒<br>2秒<br>两秒过去了<br>你面无表情的看着这两秒内的回忆 </p>
<p>第3秒<br>突然你笑了<br>原来已经回到了15岁的那一年<br>你看见一个男孩<br>他叼着一袋牛奶，背着书包<br>从另一个女孩家的阳台下跑过<br>那个男孩朝窗户里看了看<br>那是15岁的你暗恋的那个女孩子<br>你想不起来她长什么样子了<br>最后一秒你努力的回忆着<br>然后终于笑了出来 </p>
<p>3秒过去了<br>身边的人突然间开始嚎啕大哭<br>你可能听不清了 </p>
<p>你最后听到的嘈杂的声音<br>是一群十五六的少年 起着哄说的<br>答应他<br>答应他<br>答应他</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">原文详见：</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.coaadmin.cn/life/my-next-half-of-my-life.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.coaadmin.cn/</a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>手可摘星辰</title>
    <url>/%E6%89%8B%E5%8F%AF%E6%91%98%E6%98%9F%E8%BE%B0/</url>
    <content><![CDATA[<p>我有时会恍然记得那个下午，那个日光灼热的季节。<a id="more"></a></p>
<p>然后突然，或者连续地叹息。啊，时间早已溜走。然后寂寞。</p>
<p>这模糊不清的世界，其中暗藏了太多的运气。这使我心气沸腾。于是要怎么样呢？裹挟着的你，是没得选。那渺小的萤火，看一眼，再看一眼，虚虚实实已然近在咫尺。从事理想的人，然后折磨，然后变作另一个人。这样，旧有的情调又得到香火。</p>
<p>那么，南天门，我梦中的眼泪是否已经飘到了云端？我想那天外的世界，定然默默地应许。终于无力下来，终于没有持久的喜悦，只有一种淡淡的、坚决的，越来越强烈的痛苦，最后它漫上来了。我无处可逃。</p>
<p>还有多少年？还有多少光阴啊。我悄悄地看枷锁外的世界，也远不如我想像的美好。在镜子里面，是我无法触及的光。还有多久？还要多久？这漫长的流，我听到非人的脉动声。</p>
<p>只有幻想作伴。</p>
<p>我那贫瘠的海。终也热度挥散。告一段落。</p>
<hr>
<p>寒冷。我喜欢这样的真实。</p>
<p>它是相对的热，它是缺少爱的那一种。</p>
<p>我希望可以有勇气，那么少掉许多烦恼。</p>
<p>然而若是没有勇气，又如何走出楼阁？我逐渐地向外看，只看到连绵不绝的河山。</p>
<p>我是否还有那么多期望的期望。我看到我的无知。</p>
<hr>
<p>我不想重复地走过这些干涸地。</p>
<p>在这无边无际的世界中，枯死了无数的人。</p>
<p>但是，要去哪里呢？</p>
<p>四个方向，无穷个方向，总是在平面上游走。</p>
<p>我望望天空，头痛欲裂。</p>
<p>白天看不到星星，我只看到唯一的光。</p>
<hr>
<p>嗯。我希望你不要后悔。</p>
<p>不要想着过去的事情。</p>
<p>那些潮流，一个浪头就要灰飞烟灭。</p>
<p>那么静默，终于也成了板上刀俎。</p>
<p>无路可逃。</p>
<hr>
<p>但是命运的手，是否真的是命运呢？</p>
<p>还是某种莫名的，我渴望的，我期望的，那种虚妄的，那种真实。</p>
<p>我猜不到，所以慌张。</p>
<p>墙壁四立，白纸数层。</p>
<p>然而也要成为随波逐流的人了吗？或许早已成了，或许还有一丝气息尚在。</p>
<p>或许，我需要这个答案。</p>
<hr>
<p>我问她。当你看到星星的时候。那么已经是深夜了吧。</p>
<p>她告诉我，我们离正午的距离，不是时间，而是半个赤道。</p>
<p>这时我会想，实际上所有的距离，所以我们认为的距离，可能也只是在一个角度的假象。</p>
<p>这是什么意思？</p>
<p>难道，从一点出发，还有更宽广的路径吗？只是这些潜在的路，大多数人无法看见罢了。</p>
<p>于是我想到，高维空间。是的，我们的思考常常过于平面，碰撞和焦灼就更常发生。</p>
<p>这实在令人沮丧。</p>
<hr>
<p>总有一天。我暗暗道。总有一天。</p>
<p>我开始又要追逐那梦中的光影了。</p>
<p>这一次，我是否不同；这一次，我是否还是我。</p>
<p>当我赤裸着手，摘取那炙热的星火。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>年关随想</title>
    <url>/%E5%B9%B4%E5%85%B3%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<p>又到年关。日月斗转，岁岁轮回，如是。时间过得不慢。</p>
<p>随心而迹。看得到人生轨迹，却看不到时间以外的故事。</p>
<p>跳出来，人生也便失去了意义。面对无意义的自我，要去哪里寻求动机呢？</p>
<p>想，只熨平心绪。爱，在时间以外。<a id="more"></a></p>
<h1 id="19回忆"><a href="#19回忆" class="headerlink" title="19回忆"></a>19回忆</h1><p>我虽然提出了“思维模式”这个概念很久了。可是其中的机理，其中是否存在合理性，又实在是非常渺茫。</p>
<p>每每想到时间的时候，心情就变得晶莹。</p>
<p>其实纯粹偶然。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=385322&auto=0&height=66"></iframe>

<p>得到一个刺激，促成一个对刺激的反馈。人无非就是这样。可是一些反馈是不浮于表面的，也就看不出来。这些足够随机的刺激，足够随机的信息源，在慢慢地改变我们的思维模式。</p>
<p>就好像19年底的新型病毒传播一样。SARS已经过去了多年，可是似乎也未必在信息上给予群众多少遗留的记忆。他们在漫长的刺激中，终于又丧失了敏感。</p>
<p>这一方面，的确是因为生命在物理上的限制——人的生命总是极其有限的，这导致人们往往对一些突发的、小概率的、极其严重的问题脱敏——这一代人获得了血的教训，下一代人又将要重新来过——这句话自然是站在想界的角度。</p>
<p>是的，你们真是宛若全新的人类。</p>
<p>可是，哪怕有所经历。也实在经不起时间的考验。</p>
<p>如果没有发生病毒的大面积传播，那么绝大多数人的意识中将再也不与之交织。</p>
<p>这是，当时间有限放长时，人们变得迟钝——这或许就是思维模式的魔力了吧！</p>
<p>无论你的想界多大，无论你有多少经历，如果不注重自己的思维模式，就隐隐地为自己埋下了陷阱。</p>
<hr>
<h1 id="20初探"><a href="#20初探" class="headerlink" title="20初探"></a>20初探</h1><p>写这篇短文，是看到白稚卿的视频。</p>
<iframe  width=90% height=350 preload="auto" src="//player.bilibili.com/player.html?aid=84733767&cid=144901105&page=1"> </iframe>

<p>很难想象。但加上时间，又似乎很容易想象。我开始想象想象了，此为递归。</p>
<p>我一想到。</p>
<p>时间。这个东西。这是个什么东西？……</p>
<p>我好像在语言中遗失了我的思考。</p>
<p>我的人生也在溜走了。溜走呢。</p>
<p>我希望看到这些文字的人，</p>
<p>可惜我似乎也没有什么希望。</p>
<p>我的视界又在哪呢。</p>
<p>说来，视界论也还在懵懂之中。</p>
<hr>
<p>我一想到。</p>
<p>啊。我一想到。</p>
<p>我的脑海里到底还有什么呢。</p>
<p>唉。我一想。终于。</p>
<p>我终于想不到。</p>
<p>这大概就是节日的终极意义吧。</p>
<p>用来。</p>
<p>纪念那些，虚幻的火。</p>
<hr>
<hr>
<hr>
<p>最后。坚持和自我感动是两码事。</p>
<p>自我感动，描述的是，是思维模式反过来作用使得想界趋于封闭，失智的表现。是结果。有时是期望。</p>
<p>而坚持，只是一种行为罢了。</p>
<p>既有自我感动的坚持。</p>
<p>也有别的。</p>
<hr>
<h1 id="20年末"><a href="#20年末" class="headerlink" title="20年末"></a>20年末</h1><p>很快一年就过去了。</p>
<iframe  width=90% height=350 preload="auto" src="//player.bilibili.com/player.html?aid=95339623&bvid=BV1tE411K7Hh&cid=162761281&page=1"> </iframe>

<p>我开始感到，人生即使战胜了自我，也终要接受冥冥中的命运。</p>
<p>我们是否正在失去对时间的敏感呢？我看着很多人他们都在开开心心的享受生活，他们的快乐我好像可以隔岸观火，这是烟火。我看他们的绚烂，终于又感到无限的悲伤。哈，在喜剧里面藏着的是更多无影无形的忧伤，这种忧伤充斥了以后，人生也失去了光彩。我们的人生的终极意义，我们真的要去实行做的那些事情，你还记得吗？你还记得吗？！……透过镜子看到自己的脆弱，终于无言以对了。</p>
<p>也许没有机会可以重来。也许生活已经把我们塑造成了这样或者那样。也许有的人可以从痛苦中获得领悟，他唯一不值得的是那些易得易失的快乐，哈，也开始患得患失。然而我们要追逐的是否不是那些长久的快乐呢？尽管找不到源泉，尽管我向人生中触手可得的快乐低头，尽管我的笑容很真实……不香，它不香了。</p>
<p>2020就要结束了。人生又是新的一年。虽然在虚拟和更恒久的真实里面，这并不重要。可是，节日的全部意义并不在于外物的变迁——那是人类给自己定下的闹钟。</p>
<p>灾难、痛苦和不公总是不期而遇，幸福却是稀有。快乐总是我们主动寻找，甚至作些仪式，成为年度的狂欢……这样的快乐固然很真实，很舒适。也许可以好好享受，也许可以认真参与。然而每次提到那些放光的词句，又不由衷地想到在轮回的幸福人生以外的好事，在那无垠的美好虚幻中藏匿的美景。</p>
<p>我不喜欢把思考定义为反省。思考不要成为对自身信仰的怀疑才好，永远不要放弃最初一开始就坚持的核心。</p>
<p>星匙既去，灾厄尚行。朝思暮想，彻日辛劳。柱光追影，立于黄土。心驰神往，已不可追。</p>
<p>攀登山峰大部分时间都是孤独的。然而，这样的孤独又是珍贵的。山峰之上也相当美好。也许没有山顶。</p>
<p>无论如何，人生或许漫长，或许短暂。</p>
<p>然而真正不可割舍的珍贵，那就不要犹豫，现在就抓住一切，拼尽全力吧。</p>
<hr>
<p>我突然感到，人们的欢乐往往来自于大不相同的环境、情节，那些设身处地才能由衷感到相同的幸福感。他们从多媒体中想要传递的快乐，实际上是受到化学作用的制约，藏在脑海的多巴胺中，因此别人从表面上来看顶多接收到一些被迫协同的快乐。快乐的表情，对于我们影响力有限。</p>
<p>然而，悲伤的表情，则几乎就是悲伤本身的一种强烈刺激。</p>
<p>人生的错觉。人生的错误。人生的挫败。</p>
<p>悲伤真的挺好的。至少再不用那么极力地把一切献给更好的。</p>
<p>我承认这是一种在窗户里面，带着消毒水味儿的感觉。</p>
<p>嗯。然而却通向真正的快乐。</p>
<hr>
<hr>
<hr>
<p>一些美好已经逝去。还有一些未来不可名状的美好，是否可以抓住呢？</p>
<p>我想起了未央计划。也许是一个全新的模式，但是却有了更多的可能性。</p>
<p>马上就要跨年了。</p>
<h1 id="20跨年"><a href="#20跨年" class="headerlink" title="20跨年"></a>20跨年</h1><iframe src="//player.bilibili.com/player.html?aid=800760067&bvid=BV1vy4y1i7bS&cid=273039189&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>美好的事物不是生活的全部，但一定都值得纪念。</p>
<hr>
<p>沉默。</p>
<p>看向万物时的沉默。看向周围美好时的沉默。看向自我的沉默。99%都在不言中。</p>
<p>幸福是无法感同身受的东西。因此在这热闹的气氛中，感受到更多的寂寥，更多的冷落。</p>
<p>不需要参与感。从而只需要服从秩序。</p>
<p>在这样冷冻的状态下，开始思考自身出现了什么问题。有多少存在改正的空间；有多少固化成了身体的一部分。</p>
<p>推动人的动机是否足够？亦或是动机已经不能成为我源动力的全部，需要新的引擎？</p>
<p>星匙既去，灾厄尚行。</p>
<p>看来还没有开始认真面对事实。</p>
<p>如果唯一的坚持也变成了没有坚持，在场景下轻易地打破，那么意志力从何谈起。</p>
<p>希望很久以后，不要比现在更后悔。</p>
<p>在能力不足的时候，避免后悔的方式就是韬光养晦。</p>
<p>那么，在这跨年的大闹钟面前，可以做到这唯一的一件事吗？</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>挖矿入门</title>
    <url>/%E6%8C%96%E7%9F%BF%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>挖矿入门。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://cloud.tencent.com/" target="_blank" rel="noopener external nofollow noreferrer">腾讯云</a></p>
<h1 id="币价行情"><a href="#币价行情" class="headerlink" title="币价行情"></a>币价行情</h1><blockquote>
<p><a href="https://coinmarketcap.com/" target="_blank" rel="noopener external nofollow noreferrer">https://coinmarketcap.com/</a></p>
</blockquote>
<p>数字货币行情波动剧烈。</p>
<p>BTC：（比特币）</p>
<img data-src="/%E6%8C%96%E7%9F%BF%E5%85%A5%E9%97%A8/image-20210104182035365.png" class="" title="BTC行情-20210104">
<p>ETH：（以太坊）</p>
<blockquote>
<p>以太坊发生过硬分叉，黑客盗走了大量ETC（<strong>Et</strong>hereum <strong>C</strong>lassic，DAO攻击事件）。在DAO交易生效锁定28天到期之前，开发者决定回滚DAO智能合约，并产生了新货币ETH（<strong>Eth</strong>ereum）。</p>
</blockquote>
<img data-src="/%E6%8C%96%E7%9F%BF%E5%85%A5%E9%97%A8/image-20210104182139947.png" class="" title="CFX行情-20210104">
<p>CFX：（Conflux）</p>
<img data-src="/%E6%8C%96%E7%9F%BF%E5%85%A5%E9%97%A8/image-20210104181958548.png" class="" title="CFX行情-20210104">
<h1 id="Windows下挖矿"><a href="#Windows下挖矿" class="headerlink" title="Windows下挖矿"></a>Windows下挖矿</h1><p>可以使用<a href="http://www.qskg.top/" target="_blank" rel="noopener external nofollow noreferrer">轻松矿工</a>、AIminer之类的集成软件快捷挖矿。</p>
<p>具体参考：<a href="https://vel.life/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/#PoW%E5%85%B1%E8%AF%86%E4%BD%93%E9%AA%8C" target="_blank" rel="noopener external nofollow noreferrer">PoW体验</a>。</p>
<h1 id="Linux下挖矿"><a href="#Linux下挖矿" class="headerlink" title="Linux下挖矿"></a>Linux下挖矿</h1><blockquote>
<p><a href="https://github.com/NebuTech/NBMiner" target="_blank" rel="noopener external nofollow noreferrer">NBMiner</a> 挖矿软件，集成度较高</p>
</blockquote>
<p>下载相应版本的NBMiner软件，解压，即可运行.sh脚本进行挖矿。操作比较简单。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/NebuTech/NBMiner/releases/download/v36.1/NBMiner_36.1_Linux.tgz</span><br><span class="line"></span><br><span class="line">tar xvf NBMiner_36.1_Linux.tgz</span><br><span class="line"></span><br><span class="line">cd NBMiner_Linux/</span><br><span class="line">vim ./start_conflux.sh # 修改脚本中钱包地址并保存</span><br><span class="line"><span class="meta">#</span><span class="bash"> nbminer -a algo -o 协议+连接类型://矿池地址:矿池端口 -u 钱包地址或用户名.矿工名:密码可选</span></span><br><span class="line">./start_conflux.sh     # 这个脚本里保存的就是一行挖矿命令</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>Conflux</tag>
      </tags>
  </entry>
  <entry>
    <title>旅游调研</title>
    <url>/%E6%97%85%E6%B8%B8%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<p>在我的理解里面，旅游和旅行的含义不同。旅游，在于游览地点和景观；旅行，则在于行进的过程。旅行可能没有一个贯穿始终的目的地，它更散漫、更自由，但是必然也更耗费时间。所以，更经济、更高效的方式，就是旅游了。这种强烈目的性的行动，自然有强烈的回馈。我希望这样的事情试可以存在的。<a id="more"></a></p>
<p>我曾去过一次武隆，当时似乎是拍了许多照片和视频，存储在云端，然后竟中途辗转，手机换号，全丢失了。只剩下模糊的记忆。我记得那种清冷的感觉，那种山壁高耸的隔绝和巍峨，下起了小雨、阵雨，湿润的石板和木板，以及漫野的绿。</p>
<p>但是，时间久了。我开始又深感与自然的隔离。这不是说与自然的距离，毕竟坐山傍水。而是，从心态上、从身体感受上的隔离。如果毫无感受，那么自然就在唯心中消失于无形了。</p>
<p>我觉得有必要做一点调研。看一点不多不少的风景，我想是有必要的。</p>
<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><ul>
<li><a href="https://www.rome2rio.com/" target="_blank" rel="noopener external nofollow noreferrer">Rome2Rio</a> 路线规划网站</li>
</ul>
<h1 id="泰山-玉皇顶"><a href="#泰山-玉皇顶" class="headerlink" title="泰山 玉皇顶"></a>泰山 玉皇顶</h1><blockquote>
<p>这时，一阵令人陶醉的微风吹来，雾完全散了。天空中，夏夜灿烂的星海一望无际地显现出来，在远远的山下，泰安的万家灯火也形成了另一片小小的星海，仿佛是前者在一个小湖中的倒影。</p>
<p>林云用她那轻柔的声音吟诵起那首诗：</p>
<p>“远远的街灯明了，</p>
<p>好象是闪着无数的星星。</p>
<p>天上的明星现了，</p>
<p>好象是点着无数的街灯。“</p>
<p>我跟着吟下去：</p>
<p>“我想那飘渺的空中，</p>
<p>定然有美丽的街市。</p>
<p>街市上陈列的一些物品，定然是世上没有的珍奇。</p>
<p>……”</p>
<p>我的眼泪涌了出来。这美丽的夜中世界在泪水中抖动了一下又变得比刚才更加清澈。我明白自己是一个追梦的人，我也明白在这个世界上，这样的人生之路是何等的险恶莫测，即使那雾中的南天门永远不出现，我也将永远攀登下去——</p>
<p>我别无选择。</p>
</blockquote>
<img data-src="/%E6%97%85%E6%B8%B8%E8%B0%83%E7%A0%94/image-20201109143254238.png" class="" title="《球状闪电》">
<p>每每读至《<a href="http://liucixin.zuopinj.com/5549/201982.html" target="_blank" rel="noopener external nofollow noreferrer">球状闪电</a>》，总觉心血感沸，有朝身临其境，想必也是仪式感外的寂寥。</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>时间序列异常检测</title>
    <url>/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E4%B8%8E%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>异常检测算法。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=5&amp;ved=2ahUKEwjH0sWR-sbgAhXKyYsBHU4dA7cQFjAEegQIBhAB&amp;url=http%3A%2F%2Fblog.rexking6.top%2F2018%2F11%2F05%2F%25E5%259F%25BA%25E4%25BA%258E%25E6%2597%25B6%25E9%2597%25B4%25E5%25BA%258F%25E5%2588%2597%25E7%259A%2584%25E5%25BC%2582%25E5%25B8%25B8%25E6%25A3%2580%25E6%25B5%258B%2F&amp;usg=AOvVaw34LnUCMcKR2YtQJfYCBeHR" target="_blank" rel="noopener external nofollow noreferrer"><strong>基于时间序列的异常检测| RexKing6’s Note</strong></a>, <a href="http://blog.rexking6.top/categories/AIOps/" target="_blank" rel="noopener external nofollow noreferrer">http://blog.rexking6.top/categories/AIOps/</a></p>
<p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwjH0sWR-sbgAhXKyYsBHU4dA7cQFjAAegQIChAB&amp;url=https%3A%2F%2Fjuejin.im%2Fpost%2F5c19f4cb518825678a7bad4c&amp;usg=AOvVaw0fzAPU87-91HkinauJX87F" target="_blank" rel="noopener external nofollow noreferrer">时间序列异常检测算法- 掘金</a></p>
<p><a href="https://github.com/yzhao062/anomaly-detection-resources" target="_blank" rel="noopener external nofollow noreferrer">Anomaly detection related books, papers, videos, and toolboxes</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25753926" target="_blank" rel="noopener external nofollow noreferrer">机器学习之：异常检测</a></p>
<p><a href="https://pyod.readthedocs.io/en/latest/（异常检测算法包）" target="_blank" rel="noopener external nofollow noreferrer">https://pyod.readthedocs.io/en/latest/（异常检测算法包）</a></p>
<p><a href="https://github.com/rob-med/awesome-TS-anomaly-detection" target="_blank" rel="noopener external nofollow noreferrer"><strong>awesome-TS-anomaly-detection</strong></a></p>
<p>（<strong><a href="https://www.zhihu.com/question/280696035" target="_blank" rel="noopener external nofollow noreferrer">https://www.zhihu.com/question/280696035</a></strong>）</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/30169110" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/30169110</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D5vrY4RbeWkM%26t%3D981s" rel="external nofollow noreferrer">https://www.youtube.com/watch?v=5vrY4RbeWkM&amp;t=981s</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D5vrY4RbeWkM%26t%3D118s" rel="external nofollow noreferrer">https://www.youtube.com/watch?v=5vrY4RbeWkM&amp;t=118s</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.safaribooksonline.com/library/view/strata-hadoop/9781491976166/video301647.html" rel="external nofollow noreferrer">https://www.safaribooksonline.com/library/view/strata-hadoop/9781491976166/video301647.html</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D12Xq9OLdQwQ%26t%3D2971s" rel="external nofollow noreferrer">https://www.youtube.com/watch?v=12Xq9OLdQwQ&amp;t=2971s</a></p>
<p>时间序列异常检测：</p>
<blockquote>
<p><a href="https://link.zhihu.com/?target=https%3A//blog.statsbot.co/time-series-anomaly-detection-algorithms-1cef5519aef2" rel="external nofollow noreferrer">https://blog.statsbot.co/time-series-anomaly-detection-algorithms-1cef5519aef2</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.xenonstack.com/blog/data-science/anomaly-detection-time-series-deep-learning/" rel="external nofollow noreferrer">https://www.xenonstack.com/blog/data-science/anomaly-detection-time-series-deep-learning/</a></p>
<p><a href="https://link.zhihu.com/?target=https%3A//www.xenonstack.com/blog/data-science/time-series-forecasting-machine-deep-learning/" rel="external nofollow noreferrer">https://www.xenonstack.com/blog/data-science/time-series-forecasting-machine-deep-learning/</a></p>
</blockquote>
</blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1041505" target="_blank" rel="noopener external nofollow noreferrer">用 Python 进行时间序列数据可视化</a></p>
<p><a href="https://www.howtoing.com/a-guide-to-time-series-visualization-with-python-3" target="_blank" rel="noopener external nofollow noreferrer">使用Python 3的时间序列可视化指南</a></p>
<p><a href="https://paperswithcode.com/task/time-series-prediction" target="_blank" rel="noopener external nofollow noreferrer">https://paperswithcode.com/task/time-series-prediction</a></p>
<p><a href="https://kuaibao.qq.com/s/20180330G1L94K00?refer=spider" target="_blank" rel="noopener external nofollow noreferrer">时间序列分析算法ARIMA与LSTM简介</a></p>
<p><a href="http://wurui.cc/tech/time-series-anomaly-detection/" target="_blank" rel="noopener external nofollow noreferrer">时间序列异常检测</a></p>
<p><a href="https://www.zhihu.com/question/47070186" target="_blank" rel="noopener external nofollow noreferrer">时间序列异常检测算法研究？</a></p>
<p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=2ahUKEwjW-KasyvngAhWyF6YKHWYRCkIQFjACegQICRAB&amp;url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F28746221&amp;usg=AOvVaw2nh6xPXy09hNQGa9R5F_Br" target="_blank" rel="noopener external nofollow noreferrer"><strong>基于Keras的LSTM多变量时间序列预测- 知乎</strong></a> 多变量！</p>
<p><a href="https://juejin.im/entry/5bba1af56fb9a05ce469df75" target="_blank" rel="noopener external nofollow noreferrer"><strong>多变量时间序列的预测和建模指南（附Python代码）</strong></a></p>
<h1 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h1><h2 id="Offline"><a href="#Offline" class="headerlink" title="Offline"></a>Offline</h2><h3 id="统计法"><a href="#统计法" class="headerlink" title="统计法"></a>统计法</h3><h3 id="基于距离的方法"><a href="#基于距离的方法" class="headerlink" title="基于距离的方法"></a>基于距离的方法</h3><h3 id="基于密度的方法"><a href="#基于密度的方法" class="headerlink" title="基于密度的方法"></a>基于密度的方法</h3><h3 id="基于聚类的方法"><a href="#基于聚类的方法" class="headerlink" title="基于聚类的方法"></a>基于聚类的方法</h3><h3 id="基于划分的方法"><a href="#基于划分的方法" class="headerlink" title="基于划分的方法"></a>基于划分的方法</h3><h3 id="基于线性的方法"><a href="#基于线性的方法" class="headerlink" title="基于线性的方法"></a>基于线性的方法</h3><h3 id="基于非线性的方法"><a href="#基于非线性的方法" class="headerlink" title="基于非线性的方法"></a>基于非线性的方法</h3><h3 id="针对非数值型的方法"><a href="#针对非数值型的方法" class="headerlink" title="针对非数值型的方法"></a>针对非数值型的方法</h3><p>上述方法都需要先获得完整的数据，属于离线算法。而不能进行实时检测。</p>
<h2 id="GP"><a href="#GP" class="headerlink" title="GP"></a>GP</h2><div class="pdfobject-container" data-target="Crandell_IC_D_2017.pdf" data-height="500px"></div>
<p><strong>基于单类分类<a href="https://zhuanlan.zhihu.com/p/27555501" target="_blank" rel="noopener external nofollow noreferrer">高斯过程</a>（密度）异常序列检测OCC_GP</strong>。（Gaussian Process）</p>
<p><strong>目标</strong>：尽可能早地发现数据流的异常$\longrightarrow$尽可能早地预警。</p>
<p><strong>难度</strong>：</p>
<ul>
<li>高维度，<font color=red><strong>小样本</strong></font><ul>
<li>软件工程，程序调试能力（边界情况的预测）</li>
</ul>
</li>
<li>异常类的样本常常很难获取，缺少负例（失败）样本</li>
<li>自适应？</li>
<li>如何利用专业的领域故障分析能力<strong>解释</strong>结果？</li>
</ul>
<p>核心：【优化函数】基于4种高斯和函数。（混合高斯：就是叠加的正态函数）</p>
<ul>
<li>本质：函数变量f的任意组合，服从均值为0的高斯联合分布$p(f|X)=N(o,K)$。</li>
</ul>
<p>高斯过程GP算法【<strong>分类</strong>】：</p>
<ul>
<li>高斯过程即正态随机过程，具有灵活的非参数特性，对预测结果进行有效估计。</li>
<li>基于贝叶斯方法和训练数据来求出高斯和函数的参数（参数估计，同时利用EM算法迭代优化）。</li>
<li><strong>先验传递</strong>（转移）</li>
</ul>
<hr>
<p>思路：（如图）</p>
<p><img data-src="https://i.imgur.com/VOW2Qwm.png" alt="时序异常检测"></p>
<ul>
<li>参数离散化，构建样本空间</li>
<li>绘制<strong>时序参数包络线</strong></li>
<li>分析异常</li>
</ul>
<p>一些小问题：</p>
<ul>
<li>值的归一化（逻辑回归）$\longrightarrow$导向分类问题</li>
<li>包络线与时间序列位置相关，可能要利用（隐马尔可夫建模，以及<strong>模式识别</strong>的定位）</li>
<li>如何度量不确定性（检测的粗糙度）</li>
</ul>
<hr>
<p>发射任务：</p>
<ul>
<li>恒定路线预测</li>
<li>多路径预测</li>
</ul>
<h2 id="HTM"><a href="#HTM" class="headerlink" title="HTM"></a>HTM</h2><p><a href="https://numenta.org/resources/HTM_CorticalLearningAlgorithms_chn.pdf" target="_blank" rel="noopener external nofollow noreferrer">层级时序存储器算法</a>（Hierarchical Temporal Memory，HTM），皮质算法。</p>
<ul>
<li>模拟人体大脑新皮质层（noecortex）</li>
<li>时空<strong>数据流</strong>建模</li>
<li>持续学习（Online）幵依赖于储存的大量模式序列</li>
<li><p>自调节⟶（新常态？）</p>
</li>
<li><p>主要是检测<strong><font color=red>波动式异常</font></strong></p>
</li>
</ul>
<p>长期序列高斯分布（基准函数），短期序列高斯分布（异常检测函数）。</p>
<ul>
<li>若检测到短期异常，还需要<strong>验证</strong>假阳性</li>
<li>需要调参：短期窗口大小的选择（颗粒度）</li>
</ul>
<h3 id="分布序列预测"><a href="#分布序列预测" class="headerlink" title="分布序列预测"></a>分布序列预测</h3><p>多个分支序列（映射到布隆过滤器？）。</p>
<ul>
<li>设置多个分支的<strong>误差函数</strong>（如方差），如果方差过高就异常。</li>
<li>也可以计算两个序列的<strong>联合概率</strong>异常加权得分。</li>
<li>多个联合相关性模型（短期异常压缩）【高斯协方差核函数】<ul>
<li>合并在时间上接近但不完全一致的分支异常</li>
</ul>
</li>
</ul>
<hr>
<p><strong>相似模式识别</strong>？（比如，设置一个短期窗口的<a href="https://blog.csdn.net/Androidlushangderen/article/details/47134393" target="_blank" rel="noopener external nofollow noreferrer">相似哈希</a>队列）</p>
<ul>
<li>一个混合的序列可能还需要<strong>基函数分解</strong>（如，Fourier解析。需要专业知识，必须要知道基函数）</li>
</ul>
<p>（<strong>领域知识的应用</strong>）</p>
<hr>
<p>两类任务：</p>
<ul>
<li>时序⟶匹配、预测</li>
<li>平面数据（不带时序）⟶数据应用</li>
</ul>
<h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><p>时间序列异常检测是一个<strong>序列标注</strong>问题。</p>
<ul>
<li>0代表正常状态，1代表异常状态。<ul>
<li>也可能分成更多类，但本质不变</li>
</ul>
</li>
<li>所使用的输入、输出是等长的</li>
</ul>
<p>有现成的库，比较好弄。</p>
<p>没有监督，比较不好弄。</p>
<h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><blockquote>
<p><a href="https://www.jiqizhixin.com/articles/2018-09-28-13" target="_blank" rel="noopener external nofollow noreferrer">宝信利用Spark Analytics Zoo对基于LSTM的时间序列异常检测的探索</a></p>
<p><a href="https://github.com/chen0040/keras-anomaly-detection" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chen0040/keras-anomaly-detection</a></p>
</blockquote>
<p>端到端的基于LSTM的异常检测流程。</p>
<h3 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h3><h1 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h1><blockquote>
<p><a href="https://www.statsmodels.org/stable/tsa.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.statsmodels.org/stable/tsa.html</a></p>
</blockquote>
<h2 id="AE-VAE-周期性"><a href="#AE-VAE-周期性" class="headerlink" title="AE/VAE 周期性"></a>AE/VAE 周期性</h2><h3 id="AE"><a href="#AE" class="headerlink" title="AE"></a>AE</h3><blockquote>
<p><a href="https://medium.com/@curiousily/credit-card-fraud-detection-using-autoencoders-in-keras-tensorflow-for-hackers-part-vii-20e0c85301bd" target="_blank" rel="noopener external nofollow noreferrer">https://medium.com/@curiousily/credit-card-fraud-detection-using-autoencoders-in-keras-tensorflow-for-hackers-part-vii-20e0c85301bd</a></p>
</blockquote>
<p>需要<code>label</code>，不好弄。</p>
<h2 id="ARIMA-稳定性"><a href="#ARIMA-稳定性" class="headerlink" title="ARIMA 稳定性"></a>ARIMA 稳定性</h2><h2 id="频谱分析-小波分析-不稳定性"><a href="#频谱分析-小波分析-不稳定性" class="headerlink" title="频谱分析/小波分析 不稳定性"></a>频谱分析/小波分析 不稳定性</h2><h1 id="预测-检测"><a href="#预测-检测" class="headerlink" title="预测+检测"></a>预测+检测</h1><p><strong><font color=red>利用预测结果来检测异常</font></strong>。</p>
<h1 id="负采样"><a href="#负采样" class="headerlink" title="负采样"></a>负采样</h1><p>神技：无监督变为监督。</p>
<p>从某个时间窗口外采样，标为负样本。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习笔记</title>
    <url>/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>深度学习笔记。<a id="more"></a></p>
<p>花书的笔记。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习 by Andrew Ng.</title>
    <url>/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/</url>
    <content><![CDATA[<p>这是基于<a href="https://zh.wikipedia.org/zh-hans/%E5%90%B4%E6%81%A9%E8%BE%BE" target="_blank" rel="noopener external nofollow noreferrer">吴恩达</a>《<a href="https://mooc.study.163.com/university/deeplearning_ai#/c" target="_blank" rel="noopener external nofollow noreferrer">深度学习</a>》系列课程的作业、笔记。<a id="more"></a></p>
<blockquote>
<p>注：由于已经学过另一门《机器学习》，这里的笔记会比较简略，点到为止。</p>
<p>《机器学习》笔记传送门：<a href="https://vel.life/blog/Notes-of-Machine-Learning-Part1/" target="_blank" rel="noopener external nofollow noreferrer">Here</a>。</p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/fengdu78/deeplearning_ai_books" target="_blank" rel="noopener external nofollow noreferrer">Coursera深度学习教程中文笔记</a></p>
<p><a href="http://kyonhuang.top/Andrew-Ng-Deep-Learning-notes/#/" target="_blank" rel="noopener external nofollow noreferrer">吴恩达《深度学习》系列课程笔记</a></p>
<p><a href="https://blog.csdn.net/Koala_Tree/article/details/79913655" target="_blank" rel="noopener external nofollow noreferrer">完结撒花！吴恩达DeepLearning.ai《深度学习》课程笔记目录总集</a></p>
<p><a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener external nofollow noreferrer">DeepLearning.ai Courses Notes</a></p>
<p><a href="https://www.slideshare.net/TessFerrandez/notes-from-coursera-deep-learning-courses-by-andrew-ng" target="_blank" rel="noopener external nofollow noreferrer">Notes from Coursera Deep Learning courses by Andrew Ng-TessFerrandez</a>，<a href=".\Notes from Coursera Deep Learning courses by Andrew Ng-TessFerrandez.pdf">PDF</a></p>
<p><a href="https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf" target="_blank" rel="noopener external nofollow noreferrer">Convex Optimization-Boyd&amp;Vandenberghe</a></p>
<p><a href="http://neuralnetworksanddeeplearning.com/index.html" target="_blank" rel="noopener external nofollow noreferrer">Neural Networks and Deep Learning</a></p>
<h1 id="神经网络、深度学习"><a href="#神经网络、深度学习" class="headerlink" title="神经网络、深度学习"></a>神经网络、深度学习</h1><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>最简单的神经网络：<strong>修正线性单元</strong><a href="https://en.wikipedia.org/wiki/Rectifier_%28neural_networks%29" target="_blank" rel="noopener external nofollow noreferrer">ReLU</a>。【<strong>一个神经元</strong>】</p>
<blockquote>
<p>（如图）左侧是数据可视化，右侧是对应的神经元模型。</p>
</blockquote>
<p><img data-src=https://i.imgur.com/Re16tix.png width=550></p>
<p>经典的神经网络是<strong>全连接</strong>的。这意味着，我们并不去手动选择哪个神经元负责什么方面——每一个神经元都会接收到充分、完整的信息，它们将自动地从全局上进行任务分配，逐渐演变出不同特长的识别能力来。</p>
<p>在小规模数据，算法的性能通常取决于特征工程。而大规模数据，<strong>大规模</strong>的神经网络则取得高性能。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552123003609.png" class="" width="1552123003609">
<h2 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h2><p><strong><code>Cost</code>函数是<code>Loss</code>函数的总和</strong>。</p>
<h3 id="向量化-vectorization"><a href="#向量化-vectorization" class="headerlink" title="向量化 vectorization"></a>向量化 vectorization</h3><p>执行速度快。充分利用<strong>并行</strong>计算的优势。<strong>尽量避免使用显式的<code>for</code>循环</strong>。</p>
<h3 id="广播-broadcasting"><a href="#广播-broadcasting" class="headerlink" title="广播 broadcasting"></a>广播 broadcasting</h3><p>广播是函数的向量化（<strong>自动复制匹配</strong>）。（<a href="https://zh.gluon.ai/chapter_prerequisite/ndarray.html#%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>）</p>
<blockquote>
<p>Matlab: <a href="http://blog.sina.com.cn/s/blog_9e67285801010ttn.html" target="_blank" rel="noopener external nofollow noreferrer"><code>bsxfun</code></a></p>
</blockquote>
<h3 id="技巧-Tricks"><a href="#技巧-Tricks" class="headerlink" title="技巧 Tricks"></a>技巧 Tricks</h3><p><strong><font color=red>用矩阵</font></strong>，不用向量。<code>np.random.randn((5,1))</code></p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552139764713.png" class="" width="1552139764713">
<h3 id="逻辑回归推导"><a href="#逻辑回归推导" class="headerlink" title="逻辑回归推导"></a>逻辑回归推导</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552140856411.png" class="" width="1552140856411">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552140378964.png" class="" width="1552140378964">
<h4 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h4><p>使给定样本<strong>输出的观测值的概率</strong>最大化。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552140615164.png" class="" width="1552140615164">
<h2 id="浅层神经网络"><a href="#浅层神经网络" class="headerlink" title="浅层神经网络"></a>浅层神经网络</h2><h3 id="非线性的激活函数"><a href="#非线性的激活函数" class="headerlink" title="非线性的激活函数"></a>非线性的激活函数</h3><p>一个使用线性激活函数的神经网络层，是没有效果的。不能增加整个神经网络函数的拟合能力。</p>
<h3 id="激活函数梯度"><a href="#激活函数梯度" class="headerlink" title="激活函数梯度"></a>激活函数梯度</h3><p>在反向传播时需要计算激活函数的梯度。（作为链式法则的一环）</p>
<script type="math/tex; mode=display">
\begin{split}
\text{sigmoid:}&\;g(z)=\frac{1}{1+e^z}\;\;&\longrightarrow\;\;g'(z)=g(z)[1-g(z)]\\
\text{tanh:}&\;g(z)=\frac{e^{z}-e^{-z}}{e^z+e^{-z}}\;\;&\longrightarrow\;\;g'(z)=1-tanh^2(z)\\
\text{ReLU:}&\;g(z)=max(0,z)\;\;&\longrightarrow\;\;g'(z)=
        \begin{cases}
        0,  & \text{if $z$ }< 0 \\
        1, & \text{if $z$ }\geq 0
        \end{cases}\\
\text{Leaky ReLU:}&\;g(z)=max(kz,z)\;\;&\longrightarrow\;\;g'(z)=
        \begin{cases}
        k,  & \text{if $z$ }< 0 \\
        1, & \text{if $z$ }\geq 0
        \end{cases}\\
\end{split}</script><h3 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h3><p>如果将神经网络的权重设为同一值，那么最后它们总是高度对称的。函数拟合能力因此而下降。</p>
<p>随机初始化为较小的值（0.01左右），保证梯度较大并且保持神经元特异性。</p>
<h2 id="深层神经网络"><a href="#深层神经网络" class="headerlink" title="深层神经网络"></a>深层神经网络</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对于具有<strong><font color=red>层次</font></strong>的问题来说，深层网络能极大节省计算成本。（单层可能需要指数级的神经元）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552217632421.png" class="" width="1552217632421">
<h1 id="改善-深层神经网络"><a href="#改善-深层神经网络" class="headerlink" title="改善-深层神经网络"></a>改善-深层神经网络</h1><h1 id="结构化-机器学习"><a href="#结构化-机器学习" class="headerlink" title="结构化-机器学习"></a>结构化-机器学习</h1><h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><h1 id="序列模型"><a href="#序列模型" class="headerlink" title="序列模型"></a>序列模型</h1><h2 id="循环序列模型"><a href="#循环序列模型" class="headerlink" title="循环序列模型"></a>循环序列模型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552225480508.png" class="" width="1552225480508">
<ul>
<li><p>语音识别（Speech recognition）</p>
</li>
<li><p>音乐生成（Music generation）</p>
</li>
<li><p>情感分类</p>
</li>
<li><p>DNA序列分析</p>
</li>
<li><p>机器翻译</p>
</li>
<li><p>视频</p>
</li>
<li><p>命名实体识别</p>
</li>
<li>……</li>
</ul>
<h3 id="RNN-循环神经网络"><a href="#RNN-循环神经网络" class="headerlink" title="RNN 循环神经网络"></a>RNN 循环神经网络</h3><p>以01标注为例（seq=seq）。（应用：命名实体识别）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552226926420.png" class="" width="1552226926420">
<p>缺点：只利用前缀信息。（但对于时间序列来说则刚好）</p>
<h3 id="穿越时空的传播"><a href="#穿越时空的传播" class="headerlink" title="穿越时空的传播"></a>穿越时空的传播</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552228171013.png" class="" width="1552228171013">
<p><strong>计算图如下</strong>：（从右到左的时光倒流）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552228198437.png" class="" width="1552228198437">
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>左边是等长序列模型，右边是变长RNN（分为<code>encoder</code>和<code>decoder</code>）。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552229596649.png" class="" width="1552229596649">
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552229737887.png" class="" width="1552229737887">
<p>基于字符的语言模型不能很好地捕捉长程关系，训练成本也更高。</p>
<p>传统的RNN局部性较强。长程容易出现梯度消亡、梯度爆炸现象。</p>
<h3 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h3><p><code>c=memory cell</code>。</p>
<p>按照激活函数来判别<code>相关性</code>以及<code>是否继承记忆</code>。</p>
<h4 id="Simple-RNN-Unit"><a href="#Simple-RNN-Unit" class="headerlink" title="Simple RNN Unit"></a>Simple RNN Unit</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552233715784.png" class="" width="1552233715784">
<h4 id="GRU-1"><a href="#GRU-1" class="headerlink" title="GRU"></a>GRU</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552233821973.png" class="" width="1552233821973">
<h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552235190199.png" class="" width="1552235190199">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552235506619.png" class="" width="1552235506619">
<p>LSTM更强大更通用。</p>
<p>GRU更快更省，更易扩展到大规模数据。</p>
<h3 id="BiRNN"><a href="#BiRNN" class="headerlink" title="BiRNN"></a>BiRNN</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552237805021.png" class="" width="1552237805021">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552237825012.png" class="" width="1552237825012">
<h3 id="深度RNN"><a href="#深度RNN" class="headerlink" title="深度RNN"></a>深度RNN</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552239741826.png" class="" width="1552239741826">
<h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p><code>one-hot representation</code>: 无法表示相关性。</p>
<p><code>featurized representation</code>: 利用人工制造的特征来表示word。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552312237739.png" class="" width="1552312237739">
<h3 id="Visualizing-and-Embedding"><a href="#Visualizing-and-Embedding" class="headerlink" title="Visualizing and Embedding"></a>Visualizing and Embedding</h3><p><code>t-SNE</code>可视化算法。</p>
<h3 id="Transfer-learning-and-word-embedding"><a href="#Transfer-learning-and-word-embedding" class="headerlink" title="Transfer learning and word embedding"></a>Transfer learning and word embedding</h3><p>从大规模数据集迁移到小规模数据集。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552312824564.png" class="" width="1552312824564">
<h3 id="Analogies-推理"><a href="#Analogies-推理" class="headerlink" title="Analogies 推理"></a>Analogies 推理</h3><p><strong>联想</strong>的相似性：（embedding空间的平行四边形）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552313357268.png" class="" width="1552313357268">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552313646808.png" class="" width="1552313646808">
<h3 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552313920983.png" class="" width="1552313920983">
<h3 id="Embedding-matrix"><a href="#Embedding-matrix" class="headerlink" title="Embedding matrix"></a>Embedding matrix</h3><p>keras: <code>embedding layer</code>.</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552314332398.png" class="" width="1552314332398">
<h3 id="学习词嵌入"><a href="#学习词嵌入" class="headerlink" title="学习词嵌入"></a>学习词嵌入</h3><h4 id="自然语言模型"><a href="#自然语言模型" class="headerlink" title="自然语言模型"></a>自然语言模型</h4><p>学习一个自然语言模型是一个获得embedding的好方法。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552314761930.png" class="" width="1552314761930">
<h4 id="其它上下文相关"><a href="#其它上下文相关" class="headerlink" title="其它上下文相关"></a>其它上下文相关</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552314925923.png" class="" width="1552314925923">
<h3 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h3><p>从上下文随机选择。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552315127230.png" class="" width="1552315127230">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552315352537.png" class="" width="1552315352537">
<h3 id="层次softmax"><a href="#层次softmax" class="headerlink" title="层次softmax"></a>层次softmax</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552315769691.png" class="" width="1552315769691">
<p>采样时可能还需要平衡词频。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552315818375.png" class="" width="1552315818375">
<h3 id="负采样"><a href="#负采样" class="headerlink" title="负采样"></a><font color=red>负采样</font></h3><p>随机从数据集中选择，那么这些随机选择的单词应该构成负样本。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552316541039.png" class="" width="1552316541039">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552316936806.png" class="" width="1552316936806">
<p>采样经验频率：（${w_i}^{3/4}$）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552317058763.png" class="" width="1552317058763">
<h3 id="GloVe（Global-Vectors-for-word-representation）"><a href="#GloVe（Global-Vectors-for-word-representation）" class="headerlink" title="GloVe（Global Vectors for word representation）"></a>GloVe（Global Vectors for word representation）</h3><h3 id="情感分类-sentiment-classification-problem"><a href="#情感分类-sentiment-classification-problem" class="headerlink" title="情感分类 sentiment classification problem"></a>情感分类 sentiment classification problem</h3><p>小样本。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552318206312.png" class="" width="1552318206312">
<h4 id="平均法"><a href="#平均法" class="headerlink" title="平均法"></a>平均法</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552318468177.png" class="" width="1552318468177">
<p>缺点：<strong>忽视词序</strong>。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552318495419.png" class="" width="1552318495419">
<h4 id="RNN-for-sentiment-classification"><a href="#RNN-for-sentiment-classification" class="headerlink" title="RNN for sentiment classification"></a>RNN for sentiment classification</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552318611784.png" class="" width="1552318611784">
<h3 id="词嵌入除偏"><a href="#词嵌入除偏" class="headerlink" title="词嵌入除偏"></a>词嵌入除偏</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552318837333.png" class="" width="1552318837333">
<p>减少AI中的bias更容易也更重要。</p>
<ul>
<li><em>机器学习学到社会习俗而非自然规律。</em></li>
</ul>
<p>移动那些有bias的词，使得它们到两种gender的距离相同。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552319393097.png" class="" width="1552319393097">
<h2 id="序列模型、注意力机制"><a href="#序列模型、注意力机制" class="headerlink" title="序列模型、注意力机制"></a>序列模型、注意力机制</h2><h3 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h3><h4 id="seq2seq"><a href="#seq2seq" class="headerlink" title="seq2seq"></a>seq2seq</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552320175576.png" class="" width="1552320175576">
<h4 id="Image-captioning"><a href="#Image-captioning" class="headerlink" title="Image captioning"></a>Image captioning</h4><p>还是RNN的模式。</p>
<p>选择最可能的句子（分离encoder和decoder）</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552402160525.png" class="" width="1552402160525">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552402239729.png" class="" width="1552402239729">
<p>贪心搜索的效果并不好。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-by-Andrew-Ng/1552402586535.png" class="" width="1552402586535">
<p>选择一种近似的算法。</p>
<h3 id="定向搜索算法-Beam-search"><a href="#定向搜索算法-Beam-search" class="headerlink" title="定向搜索算法 Beam search"></a>定向搜索算法 Beam search</h3><p>设置一个beam width（比如3），形成一个有限的次优候选词列表（比如最大概率的3个词）。</p>
<h1 id="人工智能采访专辑"><a href="#人工智能采访专辑" class="headerlink" title="人工智能采访专辑"></a>人工智能采访专辑</h1><h2 id="Geoffrey-Hinton"><a href="#Geoffrey-Hinton" class="headerlink" title="Geoffrey Hinton"></a>Geoffrey Hinton</h2><p><strong><a href="https://baike.baidu.com/item/Hologram/11052204" target="_blank" rel="noopener external nofollow noreferrer">全息图</a></strong>：分布式记忆。</p>
<blockquote>
<p>切去大脑的一半，仍然能获得大脑完整的信息。</p>
</blockquote>
<p>符号主义与联结主义之争。</p>
<blockquote>
<p>幻想学：符号主义+联结主义。（存在一种虚幻的终极表示，但真实的形态可以任意的）</p>
</blockquote>
<p><strong>可解释性</strong>是AI得到接受的一个动力。</p>
<p><strong>算力的剧增</strong>是AI得到应用的动力。</p>
<p><strong>胶囊网络</strong>（capsule）：一组神经元称为一个胶囊。</p>
<p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwjC8MnxzPfgAhVCGKYKHef5CccQFjAAegQICRAB&amp;url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F42864711&amp;usg=AOvVaw2vElSi4XqDoewn7hcmpGLa" target="_blank" rel="noopener external nofollow noreferrer">胶囊网络到底是什么东东？ - 知乎</a></p>
<p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;ved=2ahUKEwjC8MnxzPfgAhVCGKYKHef5CccQFjAHegQIAhAB&amp;url=https%3A%2F%2Fwww.jiqizhixin.com%2Farticles%2F2019-01-18-14&amp;usg=AOvVaw0voVCKp5UmPkPn_cIJTMpP" target="_blank" rel="noopener external nofollow noreferrer">如何理解和使用胶囊网络| 机器之心</a></p>
<p>读论文，但也不必读太多。（创新型工作）</p>
<p>永远不要停止编程。</p>
<h2 id="Pieter-Abbeel"><a href="#Pieter-Abbeel" class="headerlink" title="Pieter Abbeel"></a>Pieter Abbeel</h2><p>深度强化学习。</p>
<ul>
<li>数据的收集很难<ul>
<li>需要负例</li>
</ul>
</li>
<li>长时间的稳定性</li>
</ul>
<p>关注关联性。</p>
<p><strong>真正着手去做！</strong></p>
<h2 id="Ian-Goodfellow"><a href="#Ian-Goodfellow" class="headerlink" title="Ian Goodfellow"></a>Ian Goodfellow</h2><p>深度学习研究员。（<code>GAN</code>发明者，<code>花书</code>的作者）</p>
<p>Game AI。</p>
<p><strong>GAN</strong>（对抗生成网络）：一夜之间灵感诞生。</p>
<blockquote>
<p><strong><font color=red><code>GitHub</code>开源项目</font></strong>。</p>
<p><strong><font color=red>在ArXiv发表文章</font></strong>。</p>
</blockquote>
<p>对抗样本：机器学习<strong>安全</strong>。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>楔子-想象力</title>
    <url>/%E6%A5%94%E5%AD%90-%E6%83%B3%E8%B1%A1%E5%8A%9B/</url>
    <content><![CDATA[<p>关于想象力的三个问题。</p>
<blockquote>
<ul>
<li>想象力意味着什么？</li>
<li>为什么会有想象力？</li>
<li>怎么拥有想象力？</li>
</ul>
</blockquote>
<p>伴着音乐思考……</p>
<p>请给出你的答案~</p>
<hr>
<center>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=0&id=2304100855&auto=1&height=90"></iframe>

</center>

<p><a href="http://music.163.com/#/playlist?id=2304100855" target="_blank" rel="noopener external nofollow noreferrer">BGM-Playlist</a></p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>幻想学</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习训练营</title>
    <url>/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
    <content><![CDATA[<p><a href="http://www.xuetangx.com/courses/course-v1:xuetangx+deeplearningxly+2018_T1/about" target="_blank" rel="noopener external nofollow noreferrer">深度学习训练营</a>课程笔记。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://vel.life/Notes-of-Machine-Learning-Part1/" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(1)</a></p>
<p><a href="https://vel.life/Notes-of-Machine-Learning-Part2/" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(2)</a></p>
<p><a href="https://vel.life/Notes-of-Machine-Learning-Part3/" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(3)</a></p>
<p><a href="./参考课件.zip">参考课件.zip</a></p>
<p><a href="https://ai.yanxishe.com/" target="_blank" rel="noopener external nofollow noreferrer">AI研习社</a></p>
<p><a href="https://www.jianshu.com/p/a8c0266a7ba4" target="_blank" rel="noopener external nofollow noreferrer">深度学习Tensorflow相关书籍推荐和PDF下载</a></p>
<p><a href="./《深度学习入门：基于Python的理论与实现》高清中文版.pdf">深度学习入门：基于Python的理论与实现</a></p>
<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归的内容可以回顾这里：<a href="https://vel.life/Notes-of-Machine-Learning-Part1/#Logistic回归" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(1)-逻辑回归</a>。</p>
<p><strong>Ex</strong>：利用年龄和收入预测是否买车。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1549954237865.png" class="" width="1549954237865">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="comment">#引入sklearn线性模型</span></span><br><span class="line"></span><br><span class="line">X = [[<span class="number">20</span>, <span class="number">3</span>],</span><br><span class="line">	[<span class="number">23</span>, <span class="number">7</span>],</span><br><span class="line">	[<span class="number">31</span>, <span class="number">10</span>],</span><br><span class="line">	[<span class="number">42</span>, <span class="number">13</span>],</span><br><span class="line">	[<span class="number">50</span>, <span class="number">7</span>],</span><br><span class="line">	[<span class="number">60</span>, <span class="number">5</span>]]  <span class="comment">#年龄-收入矩阵</span></span><br><span class="line">y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">0</span> , <span class="number">0</span>] <span class="comment">#观测向量</span></span><br><span class="line"></span><br><span class="line">lr = linear_model.LogisticRegression() <span class="comment">#创建对象</span></span><br><span class="line">lr.fit(X,y) <span class="comment">#获得拟合参数</span></span><br><span class="line"></span><br><span class="line">testX = [[<span class="number">28</span>, <span class="number">8</span>]] <span class="comment">#测试集（矩阵）</span></span><br><span class="line"></span><br><span class="line">label = lr.predict(testX) <span class="comment">#预测</span></span><br><span class="line">print(<span class="string">"predicted Label = "</span>, label)</span><br><span class="line">prob = lr.predict_proba(testX) <span class="comment">#预测概率</span></span><br><span class="line">print(<span class="string">"probability = "</span>, prob)</span><br></pre></td></tr></table></figure>
<h2 id="拟合系数的含义"><a href="#拟合系数的含义" class="headerlink" title="拟合系数的含义"></a>拟合系数的含义</h2><script type="math/tex; mode=display">
P(Y=1|x;\theta)=f(x;\theta)=\cfrac{1}{1+e^{-\theta^Tx}}</script><blockquote>
<p>则<strong>概率比值</strong>$odds=\frac{p}{1-p}=e^{\theta^Tx}$。</p>
<p>$系数\theta_j意味着，假设odds为\lambda_1(原),\lambda_2(新)，若x_j增加1，有\cfrac{\lambda_2}{\lambda_1}=e^{\theta_j}$。</p>
<p>以下是验证程序：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="comment">#引入sklearn线性模型</span></span><br><span class="line"></span><br><span class="line">X = [[<span class="number">20</span>, <span class="number">3</span>],</span><br><span class="line">	[<span class="number">23</span>, <span class="number">7</span>],</span><br><span class="line">	[<span class="number">31</span>, <span class="number">10</span>],</span><br><span class="line">	[<span class="number">42</span>, <span class="number">13</span>],</span><br><span class="line">	[<span class="number">50</span>, <span class="number">7</span>],</span><br><span class="line">	[<span class="number">60</span>, <span class="number">5</span>]]  <span class="comment">#年龄-收入矩阵</span></span><br><span class="line">y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">0</span> , <span class="number">0</span>] <span class="comment">#观测向量</span></span><br><span class="line">lr = linear_model.LogisticRegression()</span><br><span class="line">lr.fit(X,y) <span class="comment">#获得拟合参数</span></span><br><span class="line"></span><br><span class="line">testX = [[<span class="number">28</span>, <span class="number">8</span>]] <span class="comment">#测试集（矩阵）</span></span><br><span class="line"></span><br><span class="line">label = lr.predict(testX) <span class="comment">#预测</span></span><br><span class="line">print(<span class="string">"predicted Label = "</span>, label)</span><br><span class="line"></span><br><span class="line">prob = lr.predict_proba(testX) <span class="comment">#预测概率</span></span><br><span class="line">print(<span class="string">"probability = "</span>, prob)</span><br><span class="line"><span class="comment">#-----------------------------------------以下是新增部分</span></span><br><span class="line">theta_0 = lr.intercept_</span><br><span class="line">theta_1 = lr.coef_[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">theta_2 = lr.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(<span class="string">"theta_0 = "</span>, theta_0)</span><br><span class="line">print(<span class="string">"theta_1 = "</span>, theta_1)</span><br><span class="line">print(<span class="string">"theta_2 = "</span>, theta_2)</span><br><span class="line"></span><br><span class="line">ratio = prob[<span class="number">0</span>][<span class="number">1</span>]/prob[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">testX = [[<span class="number">28</span>, <span class="number">9</span>]]</span><br><span class="line">prob_new = lr.predict_proba(testX)</span><br><span class="line">ratio_new = prob_new[<span class="number">0</span>][<span class="number">1</span>]/prob_new[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">ratio_of_ratio = ratio_new / ratio</span><br><span class="line">print(<span class="string">"ratio_of_ratio = "</span>, ratio_of_ratio)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">theta_2_exp = math.exp(theta_2)</span><br><span class="line">print(<span class="string">"theta_2_exp = "</span>, theta_2_exp)</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1549956520039.png" class="" width="1549956520039">
<h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>参考程序：<a href="./spam_detection.ipynb">spam_detection.ipynb</a>， <a href="./垃圾短信检测数据集.zip">垃圾短信检测数据集.zip</a></p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p><a href="http://huanyouchen.github.io/2018/05/30/hexo-support-jupyter-notebook-in-blog/" target="_blank" rel="noopener external nofollow noreferrer">在hexo中写的文章支持jupyter-notebook显示| 幻悠尘的小窝</a></p>
<blockquote>
<p>注意需要<code>npm install co</code>。</p>
<p>太偏右修正：<a href="https://github.com/qiliux/hexo-jupyter-notebook/issues/3。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/qiliux/hexo-jupyter-notebook/issues/3。</a></p>
<blockquote>
<p>核心代码：<code>document.getElementById(&#39;ipynb&#39;).style[&#39;margin-left&#39;] = &#39;-60px&#39;;</code></p>
</blockquote>
</blockquote>
<h3 id="简单代码"><a href="#简单代码" class="headerlink" title="简单代码"></a>简单代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'spam.csv'</span>, delimiter=<span class="string">','</span>, header=<span class="literal">None</span>, encoding=<span class="string">'latin-1'</span>)</span><br><span class="line">print(df.head(<span class="number">5</span>))</span><br><span class="line">y, X_train = df[<span class="number">0</span>], df[<span class="number">1</span>] </span><br><span class="line"><span class="comment"># df = pd.read_csv('spam.csv', delimiter=',', encoding='latin-1')</span></span><br><span class="line"><span class="comment"># y, X_train = df.iloc[:,0], df.iloc[:,1]</span></span><br><span class="line"></span><br><span class="line">vectorizer = TfidfVectorizer()</span><br><span class="line">X = vectorizer.fit_transform(X_train)</span><br><span class="line"></span><br><span class="line">lr = linear_model.LogisticRegression()</span><br><span class="line">lr.fit(X, y)</span><br><span class="line"></span><br><span class="line">testX = vectorizer.transform([<span class="string">'URGENT! Your mobile No. 1234 was awarded a prize.'</span>,</span><br><span class="line">							  <span class="string">'Hey honey, whats up?'</span>])</span><br><span class="line">predictions = lr.predict(testX)</span><br><span class="line">print(predictions)</span><br></pre></td></tr></table></figure>
<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>神经网络的内容可以回顾这里：<a href="https://vel.life/Notes-of-Machine-Learning-Part2/#神经网络" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(2)</a>。</p>
<h2 id="鸢尾花分类"><a href="#鸢尾花分类" class="headerlink" title="鸢尾花分类"></a>鸢尾花分类</h2><blockquote>
<p><a href="https://www.jianshu.com/p/6ada344f91ce" target="_blank" rel="noopener external nofollow noreferrer">鸢尾花数据集</a>， <a href="https://www.wikiwand.com/en/Iris_flower_data_set" target="_blank" rel="noopener external nofollow noreferrer">Iris flower data set</a></p>
<blockquote>
<p><a href="https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv</a></p>
</blockquote>
<p><a href="https://www.cnblogs.com/meelo/p/4272036.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>探索sklearn | 鸢尾花数据集</strong></a></p>
<p><a href="https://blog.csdn.net/caojianhua2018/article/details/78658180" target="_blank" rel="noopener external nofollow noreferrer">机器学习iris数据集导入</a></p>
<p><a href="https://blog.csdn.net/Eastmount/article/details/78692227" target="_blank" rel="noopener external nofollow noreferrer">【python数据挖掘课程】十九.鸢尾花数据集可视化、线性回归、决策树花样分析</a></p>
<p><a href="https://www.jianshu.com/p/eff2df3984e1" target="_blank" rel="noopener external nofollow noreferrer">Iris鸢尾花数据集可视化、线性回归、决策树分析、KMeans聚类分析</a></p>
<blockquote>
<p>Iris plants 数据集可以从<code>KEEL dataset</code>数据集网站获取，也可以直接从<code>Sklearn.datasets</code>机器学习包得到。数据集共包含4个特征变量、1个类别变量，共有150个样本。类别变量分别对应鸢尾花的三个亚属，分别是<code>山鸢尾 (Iris-setosa)</code>、<code>变色鸢尾(Iris-versicolor)</code>和<code>维吉尼亚鸢尾(Iris-virginica)</code> 分别用<code>[0,1,2]</code>来做映射。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/735e5de6bb6d" target="_blank" rel="noopener external nofollow noreferrer">小蛇学python（14）K-means预测花朵种类</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential <span class="comment">#序列串行类</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense <span class="comment">#密集层（全连接神经网络）</span></span><br><span class="line"><span class="keyword">from</span> keras.wrappers.scikit_learn <span class="keyword">import</span> KerasClassifier <span class="comment">#与sklearn的包装接口</span></span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils <span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score <span class="comment"># 交叉验证准确度得分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold <span class="comment"># k折交叉验证</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder <span class="comment"># 标签编码（转化为数值，类似向量化）</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> model_from_json <span class="comment"># 训练模型的储存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reproducibility</span></span><br><span class="line">seed = <span class="number">13</span> <span class="comment"># 伪随机数种子</span></span><br><span class="line">np.random.seed(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'iris.csv'</span>)</span><br><span class="line"><span class="comment"># from sklearn.datasets import load_iris</span></span><br><span class="line"><span class="comment"># df = load_iris()</span></span><br><span class="line">X = df.values[:,<span class="number">0</span>:<span class="number">4</span>].astype(float) <span class="comment">#设定为单精度浮点类型</span></span><br><span class="line">Y = df.values[:,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encoder = LabelEncoder() <span class="comment">#新建编码器</span></span><br><span class="line">Y_encoded = encoder.fit_transform(Y) <span class="comment">#进行数值转换</span></span><br><span class="line">Y_onehot = np_utils.to_categorical(Y_encoded) <span class="comment">#转化为向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define a network</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseline_model</span><span class="params">()</span>:</span></span><br><span class="line">	model = Sequential()</span><br><span class="line">	model.add(Dense(<span class="number">7</span>, input_dim=<span class="number">4</span>, activation=<span class="string">'tanh'</span>)) <span class="comment">#新建(隐藏)层：Dense全连接，7个神经元，输入维度为4，激活函数为tanh双曲正切</span></span><br><span class="line">	model.add(Dense(<span class="number">3</span>, activation=<span class="string">'softmax'</span>)) <span class="comment">#新建输出层，3个输出，激活函数为softmax</span></span><br><span class="line">	model.compile(loss=<span class="string">'mean_squared_error'</span>, optimizer=<span class="string">'sgd'</span>, metrics=[<span class="string">'accuracy'</span>]) <span class="comment">#损失函数：最小均方。优化方法：随机梯度下降。评估指标：准确度</span></span><br><span class="line">	<span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line">estimator = KerasClassifier(build_fn=baseline_model, epochs=<span class="number">20</span>, batch_size=<span class="number">1</span>, verbose=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 交叉验证。 build_fn：模型生成方法。epochs：训练次数。batchsize：批处理容量。verbose：输出信息详细度。</span></span><br><span class="line"><span class="comment"># epchs如果增加到200，准确率可达97%。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#evalute</span></span><br><span class="line">kfold = KFold(n_splits=<span class="number">10</span>, shuffle=<span class="literal">True</span>, random_state=seed)</span><br><span class="line"><span class="comment"># n_split：将数据集分成10份。shuffle：乱序预处理。</span></span><br><span class="line">result = cross_val_score(estimator, X, Y_onehot, cv=kfold)</span><br><span class="line">print(<span class="string">"Accuray of cross validation, mean %.2f,std %.2f"</span> % (result.mean(), result.std())) <span class="comment">#均值、方差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#save model</span></span><br><span class="line">estimator.fit(X, Y_onehot)</span><br><span class="line">model_json = estimator.model.to_json()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"model.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> json_file:  <span class="comment"># 保存结构</span></span><br><span class="line">	json_file.write(model_json)</span><br><span class="line"></span><br><span class="line">estimator.model.save_weights(<span class="string">"model.h5"</span>) <span class="comment"># 保存数值</span></span><br><span class="line">print(<span class="string">"save model to disk"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load model and use it for prediction</span></span><br><span class="line">json_file = open(<span class="string">"model.json"</span>, <span class="string">"r"</span>)</span><br><span class="line">loaded_model_json = json_file.read()</span><br><span class="line">json_file.close()</span><br><span class="line">loaded_model = model_from_json(loaded_model_json)</span><br><span class="line">loaded_model.load_weights(<span class="string">"model.h5"</span>)</span><br><span class="line">print(<span class="string">"loaded model from dish"</span>)</span><br><span class="line"></span><br><span class="line">predicted = loaded_model.predict(X)</span><br><span class="line">print(<span class="string">"predicted probability:"</span> + str(predicted))</span><br><span class="line"></span><br><span class="line">predicted_label = loaded_model.predict_classes(X)</span><br><span class="line">print(<span class="string">"predicted label:"</span> + str(predicted_label))</span><br></pre></td></tr></table></figure>
<h3 id="一些知识"><a href="#一些知识" class="headerlink" title="一些知识"></a>一些知识</h3><p><a href="https://www.wikiwand.com/zh-hans/Softmax%E5%87%BD%E6%95%B0" target="_blank" rel="noopener external nofollow noreferrer">softmax函数</a>：</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550014524166.png" class="" width="1550014524166">
<blockquote>
<p><code>softmax</code>存在数值问题。（中间有<strong>指数膨胀</strong>）</p>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550015036266.png" class="" width="1550015036266">
<p>可以利用最大值偏置进行修正。避免溢出。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550015239822.png" class="" width="1550015239822">
<p><code>tanh</code>函数：</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550013924570.png" class="" width="1550013924570">
<h2 id="深度神经网络"><a href="#深度神经网络" class="headerlink" title="深度神经网络"></a>深度神经网络</h2><p>深度神经网络的两大挑战：</p>
<ul>
<li><p><strong>梯度消亡</strong>（Gradient Vanishing）：<strong>训练过程非常慢</strong>。</p>
</li>
<li><p><strong>过拟合</strong>（Overfitting）：在训练数据上效果好，在测试数据集上效果差。</p>
</li>
</ul>
<h3 id="梯度消亡"><a href="#梯度消亡" class="headerlink" title="梯度消亡"></a>梯度消亡</h3><p>神经网络<strong>靠近输入端</strong>的网络层<strong>系数变化不敏感</strong>。当网络层数增加时，现象更明显。</p>
<p>梯度消亡的前提：</p>
<ul>
<li>使用<strong>基于梯度</strong>的训练方法</li>
<li>激活函数的输出值范围<strong>远小于</strong>输入值范围（<code>sigmoid</code>、<code>tanh</code>、<code>softmax</code>）</li>
</ul>
<blockquote>
<p>实际上，对于这样的激活函数，100、10000和10005三者的激活值几乎一致。</p>
</blockquote>
<p>如果一个（大）系数的微小变化对网络的影响很小，那么就很难进行优化（优化特别慢）。训练起来就很困难了。</p>
<p>可以想象的是，损失函数是一个非常平坦的凹面。</p>
<h4 id="ReLU激活"><a href="#ReLU激活" class="headerlink" title="ReLU激活"></a>ReLU激活</h4><ul>
<li><code>ReLU</code>:$f(x)=max(0,x)$。<ul>
<li>正值梯度。</li>
</ul>
</li>
<li><code>LeakyReLU</code>:$f(x)=max(ax,x)$。<ul>
<li>优化了负值梯度。</li>
</ul>
</li>
</ul>
<blockquote>
<p>为什么不直接选择激活函数$f(x)=x$（恒同映射）？</p>
<p>激活函数一定要是非线性的。如果激活函数是线性函数，那么最后得到的就是一个线性分类器。<br>激活函数的非线性越强，那么分类能力也就越强。</p>
</blockquote>
<h4 id="非梯度训练方法"><a href="#非梯度训练方法" class="headerlink" title="非梯度训练方法"></a>非梯度训练方法</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550024164080.png" class="" width="1550024164080">
<h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>解决方案：</p>
<ul>
<li><code>Dropout</code></li>
<li><code>L2</code>正则化</li>
<li><code>L1</code>正则化</li>
<li><code>MaxNorm</code></li>
</ul>
<h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a><code>Dropout</code></h4><blockquote>
<p><a href="http://jmlr.org/papers/volume15/srivastava14a.old/srivastava14a.pdf" target="_blank" rel="noopener external nofollow noreferrer">Dropout: A Simple Way to Prevent Neural Networks from Overfitting</a></p>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;ved=2ahUKEwjP1J7cobjgAhUEPXAKHRUMAzIQFjAFegQICRAB&amp;url=https%3A%2F%2Fblog.csdn.net%2Fqq_25011449%2Farticle%2Fdetails%2F81168369&amp;usg=AOvVaw3UXvWzAcK7FJEFgAuU-k9j" target="_blank" rel="noopener external nofollow noreferrer">【论文精读】Dropout: A Simple Way to Prevent Neural Networks from …</a>，<a href="https://me.csdn.net/qq_25011449" target="_blank" rel="noopener external nofollow noreferrer">Atlas8346</a></p>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550045365465.png" class="" width="1550045365465">
<p>Dropout可以被解释为一种通过在隐藏的单元中添加噪声来调节神经网络的方法。</p>
<p>大概意思就是引入神经元的<strong>休息状态</strong>。神经元有一定概率被<code>Dropout</code>，也就完全不能被激活，从而输出全为<code>0</code>。</p>
<h4 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a><code>L2</code>正则化</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550046740424.png" class="" width="1550046740424">
<h4 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a><code>L1</code>正则化</h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550046862286.png" class="" width="1550046862286">
<h4 id="MaxNorm"><a href="#MaxNorm" class="headerlink" title="MaxNorm"></a><code>MaxNorm</code></h4><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550051038255.png" class="" width="1550051038255">
<h3 id="神经网络系数的初始化"><a href="#神经网络系数的初始化" class="headerlink" title="神经网络系数的初始化"></a>神经网络系数的初始化</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1550053048679.png" class="" width="1550053048679">
<h1 id="实战项目1-自动为图片生成描述-Image-Captioning"><a href="#实战项目1-自动为图片生成描述-Image-Captioning" class="headerlink" title="实战项目1: 自动为图片生成描述 Image Captioning"></a>实战项目1: 自动为图片生成描述 Image Captioning</h1><blockquote>
<p>环境安装参考：<a href="https://vel.life/Notes-of-Machine-Learning-Part1/#环境安装与使用" target="_blank" rel="noopener external nofollow noreferrer">机器学习初等指南(1)-环境安装与使用</a></p>
</blockquote>
<h2 id="Task1-构建VGG16"><a href="#Task1-构建VGG16" class="headerlink" title="Task1 构建VGG16"></a>Task1 构建VGG16</h2><p>经典的网络有：<code>VGG</code>, <code>ResNet</code>, <code>DenseNet</code>。</p>
<blockquote>
<p><a href="https://blog.csdn.net/loveliuzz/article/details/79135546" target="_blank" rel="noopener external nofollow noreferrer">深度学习卷积神经网络——经典网络VGG-16网络的搭建与实现 …</a></p>
<blockquote>
<p>VGGNet探索了<strong>卷积神经网络</strong>的<strong>深度与其性能</strong>之间的关系，通过反复堆叠3 <em> 3的小型卷积核和2 </em> 2的<strong>最大池化层</strong>，VGGNet成功地构筑了16~19层深的卷积神经网络。VGGNet相比之前state-of-the-art的网络结构，错误率大幅下降， VGGNet论文中全部使用了3 <em> 3的小型卷积核和2 </em> 2的最大池化核，通过不断加深网络结构来提升性能。</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/41423739" target="_blank" rel="noopener external nofollow noreferrer">一文读懂VGG网络- 知乎</a></p>
<blockquote>
<p>简单来说，在VGG中，使用了3个3x3卷积核来代替7x7卷积核，使用了2个3x3卷积核来代替5x5卷积核，这样做的主要目的是在保证具有相同感知野的条件下，提升了网络的深度，在一定程度上提升了神经网络的效果。</p>
</blockquote>
<p><a href="http://www.deanhan.com/2018/07/26/vgg16/" target="_blank" rel="noopener external nofollow noreferrer"><strong>VGG16学习笔记| 韩鼎の个人网站</strong></a>，<a href="https://github.com/handsomeboy/vgg16" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/handsomeboy/vgg16</a></p>
<p><a href="https://www.kaggle.com/keras/vgg16/home" target="_blank" rel="noopener external nofollow noreferrer">Kaggle-VGG16</a></p>
</blockquote>
<h3 id="Pre-卷积"><a href="#Pre-卷积" class="headerlink" title="Pre-卷积"></a>Pre-卷积</h3><blockquote>
<p><a href="https://www.leiphone.com/news/201902/D2Mkv61w9IPq9qGh.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>万字长文带你看尽深度学习中的各种卷积网络（上篇）</strong></a></p>
<p><a href="https://www.leiphone.com/news/201902/biIqSBpehsaXFwpN.html" target="_blank" rel="noopener external nofollow noreferrer">万字长文带你看尽深度学习中的各种卷积网络（下篇）</a> </p>
<p><a href="https://towardsdatascience.com/a-comprehensive-introduction-to-different-types-of-convolutions-in-deep-learning-669281e58215" target="_blank" rel="noopener external nofollow noreferrer"><strong>A Comprehensive Introduction to Different Types of Convolutions in Deep Learning</strong></a></p>
<p><a href="https://www.zhihu.com/question/22298352" target="_blank" rel="noopener external nofollow noreferrer">如何通俗易懂地解释卷积？</a></p>
<p><a href="https://www.zhihu.com/question/54504471" target="_blank" rel="noopener external nofollow noreferrer">如何理解 Graph Convolutional Network（<strong>GCN</strong>）？</a></p>
<p><a href="https://blog.csdn.net/l691899397/article/details/52250190" target="_blank" rel="noopener external nofollow noreferrer">深度学习笔记5：池化层的实现</a> <code>max-pooling</code>和<code>mean-pooling</code></p>
<p><a href="https://zhuanlan.zhihu.com/p/41696749" target="_blank" rel="noopener external nofollow noreferrer">卷积层与池化层</a> <strong>卷积向下取整，池化向上取整</strong>。</p>
<blockquote>
<p>例题：（<a href="https://www.nowcoder.com/questionTerminal/b831a67809fa4ba19d8cf9ed98ff6a21" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<ul>
<li>输入图片大小为200×200，依次经过一层卷积（<strong>kernel size 5×5，padding 1，stride 2</strong>），pooling（<strong>kernel size 3×3，padding 0，stride 1</strong>），又一层卷积（<strong>kernel size 3×3，padding 1，stride 1</strong>）之后，输出特征图大小为？</li>
</ul>
<p>答案：<strong>97</strong>。</p>
<p>公式：</p>
<script type="math/tex; mode=display">
f=\cfrac{(map_{size}-kernel_{size}+2\times padding)}{stride}+1</script><blockquote>
<p>卷积层1：<code>(input_size - kernel_size + 2*padding)/stride + 1</code>=<code>(200-5+2*1)/2+1 $$\longrightarrow$$floor(99.5)</code>=<code>99</code></p>
<p>池化层：<code>(99-3)/1+1 $$\longrightarrow$$ceil(97)</code>=<code>97</code></p>
<p>卷积层2：<code>(97-3+2*1)/1+1 $$\longrightarrow$$floor(97)</code>=<code>97</code></p>
</blockquote>
</blockquote>
<p><a href="https://www.zhihu.com/question/41037974/answer/150522307" target="_blank" rel="noopener external nofollow noreferrer">全连接层的作用是什么？</a></p>
<blockquote>
<p>全连接层（fully connected layers，<strong>FC</strong>）在整个卷积神经网络中起到“分类器”的作用。<strong>在实际使用中，全连接层可由卷积操作实现</strong>：对前层是全连接的全连接层可以转化为卷积核为<code>1x1</code>的卷积；而前层是卷积层的全连接层可以转化为卷积核为<code>hxw</code>的全局卷积，h和w分别为前层卷积结果的高和宽。</p>
<blockquote>
<p>以VGG-16为例，对224x224x3的输入，最后一层卷积可得输出为7x7x512，如后层是一层含4096个神经元的FC，则可用卷积核为7x7x512x4096的全局卷积来实现这一全连接运算过程，其中该卷积核参数如下：</p>
<p>“filter size = 7, padding = 0, stride = 1, D_in = 512, D_out = 4096”</p>
<p>经过此卷积操作后可得输出为1x1x4096。</p>
<p>如需再次叠加一个2048的FC，则可设定参数为“filter size = 1, padding = 0, stride = 1, D_in = 4096, D_out = 2048”的卷积层操作。</p>
</blockquote>
<p>目前由于全连接层参数冗余（仅全连接层参数就可占整个网络参数80%左右），近期一些性能优异的网络模型如ResNet和GoogLeNet等均用全局平均池化（global average pooling，GAP）取代FC来融合学到的深度特征，最后仍用softmax等损失函数作为网络目标函数来指导学习过程。需要指出的是，用GAP替代FC的网络通常有较好的预测性能。</p>
<p>微调（fine tuning）是深度学习领域最常用的迁移学习技术。</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/29119239" target="_blank" rel="noopener external nofollow noreferrer">CNN中卷积层的计算细节</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/40050371" target="_blank" rel="noopener external nofollow noreferrer">一文读懂卷积神经网络中的1x1卷积核</a></p>
<blockquote>
<p>1x1卷积一般只改变输出通道数（channels），而不改变输出的宽度和高度。</p>
</blockquote>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/v2-a5b5870ab0a4030684c7f5796e3b83a6_b.gif" class="" title="img">
<p><strong>卷积</strong>：一个函数经过<strong>区间镜像翻转</strong>和<strong>平移</strong>后与另一个函数的乘积的积分。</p>
<script type="math/tex; mode=display">
(f*g)(t)=\int_{-\infty}^{\infty}f(\tau)g(t-\tau)d\tau</script><blockquote>
<p>Source: <a href="http://fourier.eng.hmc.edu/e161/lectures/convolution/index.html" target="_blank" rel="noopener external nofollow noreferrer">http://fourier.eng.hmc.edu/e161/lectures/convolution/index.html</a></p>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/5c6bb4c6ce26f.png" class="">
<blockquote>
<p>在深度学习中，卷积中的过滤函数是<strong>不经过翻转</strong>的。</p>
</blockquote>
<p><strong><font color=red>深度卷积</font></strong>：一个函数<code>f</code>经过<strong>平移</strong>后与另一个函数<code>g</code>的乘积的积分。深度卷积即互关联（Cross-correlation）。</p>
<p><strong>过滤函数</strong>：函数 <code>g</code> 称为一个过滤函数。</p>
<blockquote>
<p>执行卷积的目的就是从输入中提取有用的特征。</p>
</blockquote>
<p><strong>真子空间</strong>：一个空间若<code>真包含于</code>另一个空间，那么它就是另一个空间的子空间。</p>
<p><strong>张量空间</strong>：一个空间如果是以张量（多维离散立方体）的形式定义的，就叫张量空间。</p>
<blockquote>
<p>一张图像就是张量空间（矩阵空间）上的一个点，也就是张量。</p>
</blockquote>
<p><strong>窗口</strong>：一个真子空间称为原空间的一个窗口。</p>
<p><strong><font color=red>通道</font></strong>（channel）：如果过滤函数<code>g</code>在张量空间中有一个窗口，<strong>在这个窗口外<code>g</code>恒零</strong>，那么称这个窗口叫<code>g</code>的通道。</p>
<p><strong><font color=red>卷积核</font></strong>（kernel）：给定张量空间，一个存在通道的过滤函数<code>g</code>，称为张量空间上的一个卷积核。</p>
<blockquote>
<p>卷积核本身就是张量。一般而言，定义卷积核同时就应该明确指定所使用的通道。</p>
<p>在深度学习中，卷积就是元素级别（ element-wise） 的乘法和加法。</p>
<p>对于一张具有单通道（单卷积核）的图像，卷积过程如上图所示，<strong>过滤函数</strong>是一个组成部分为<code>[[0, 1, 2], [2, 2, 0], [0, 1, 2]]</code>的 3 x 3 矩阵，它<strong>滑动穿过</strong>整个输入。在每一个位置，它都执行了元素级别的乘法和加法，而每个滑过的位置都得出一个数字，最终的输出就是一个 3 x 3 矩阵。（注意：在这个示例中，<code>卷积步长=1</code>；<code>填充=0</code>。）</p>
<p>Source: <a href="https://en.wikipedia.org/wiki/Convolution" target="_blank" rel="noopener external nofollow noreferrer">https://en.wikipedia.org/wiki/Convolution</a></p>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/5c6bb64e34dd7.gif" class="">
<p><strong>滑动卷积</strong>：过滤函数不变，卷积核遍历所有相同规模的窗口，上图所示的过程就是滑动卷积。</p>
<blockquote>
<p>如果按照一定步长迭代，并非遍历的话，也可以有类似的讨论。叫做<strong>广义滑动卷积</strong>。</p>
</blockquote>
<p><strong>覆盖卷积</strong>：如果张量上定义若干个卷积核，这些卷积核的通道<strong>构成张量空间的一个<a href="https://www.wikiwand.com/zh-hans/%E8%A6%86%E7%9B%96_(%E6%8B%93%E6%89%91%E5%AD%A6" target="_blank" rel="noopener external nofollow noreferrer">覆盖</a>)</strong>，则这些卷积核可覆盖卷积。</p>
<blockquote>
<p>滑动卷积是覆盖卷积的特例。</p>
<p>插一句，<a href="https://www.zhihu.com/question/26376319" target="_blank" rel="noopener external nofollow noreferrer">有限覆盖定理</a>。（虽然没什么关系~）</p>
</blockquote>
<p><strong>卷积映射</strong>（卷积层）：一个张量被若干卷积核覆盖卷积，获得新张量，则称为卷积映射。</p>
<blockquote>
<p>卷积映射函数即<strong>过滤器</strong>（filter）。有时过滤器也指<u>若干卷积核堆积形成的张量</u>。</p>
<p><strong>一个卷积映射就对应一个卷积层</strong>。</p>
<p>通过卷积映射，原张量被嵌入到一个<strong>相对规模更小的张量空间中</strong>。</p>
<p>卷积核可以不一样哦。不一定等效于滑动卷积了。</p>
</blockquote>
<p><strong>卷积核大小</strong>（Kernel size）：卷积核的窗口的大小。</p>
<p><strong>卷积步长</strong>（Stride）：卷积核滑动通过图像的步长。</p>
<p><strong>填充</strong>（Padding）：填充定义如何处理图像的边界。</p>
<ul>
<li>空填充（将<u>输入边界周围</u>的填充设置为 0，<code>padding=&#39;same&#39;</code>）</li>
</ul>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bc30241434.gif?imageView2/2/w/740 width=180></p>
<ul>
<li>不填充（映射后张量变小，<code>padding=&#39;valid&#39;</code>）</li>
</ul>
<blockquote>
<p><a href="https://blog.csdn.net/jasonzzj/article/details/53930074" target="_blank" rel="noopener external nofollow noreferrer">Tensorflow中padding的两种类型SAME和VALID</a></p>
<p><a href="https://arxiv.org/pdf/1603.07285.pdf" target="_blank" rel="noopener external nofollow noreferrer">A guide to convolution arithmetic for deep learning</a> （《深度学习的卷积算法指南》，详细介绍各种卷积核操作）</p>
</blockquote>
<p><strong>多通道卷积</strong>：如果覆盖卷积中任意一个卷积核都构成滑动卷积，那么称为多通道卷积。</p>
<blockquote>
<p>下面是一个3个卷积核的滑动卷积（<strong><font color=red>R</font><font color=green>G</font><font color=blue>B</font></strong>位图）。一个图像可以是多层的，<u>滑动卷积只需要在某一层上滑动</u>。</p>
<p>Source: <a href="https://towardsdatascience.com/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1" target="_blank" rel="noopener external nofollow noreferrer">https://towardsdatascience.com/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1</a></p>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/5c6bba459d2e1.gif" class="" title="卷积映射">
<blockquote>
<p>之后，这 <strong>3 个通道都合并到一起</strong>（元素级别的加法）组成了一个大小为 <code>3 x 3 x 1</code> 的单通道。<br>这个通道是<strong>输入层</strong>（5 x 5 x 3 矩阵）使用了<strong>过滤器</strong>（<code>3 x 3 x 3</code> 矩阵）后得到的结果。</p>
</blockquote>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bba4ac0bfb.gif?imageView2/2/w/740 width=350></p>
<blockquote>
<p>更广义的如下图：（紫色部分的长度就是通道数目，<strong>全部合并</strong>）</p>
</blockquote>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bba50054a1.png?imageView2/2/w/740 width=300></p>
<blockquote>
<p>这其实就是<strong>高维卷积核</strong>（过滤器）。</p>
<p>如果通道不发生合并：（<code>Din=Dout</code>）</p>
</blockquote>
<p><img data-src="https://static.leiphone.com/uploads/new/images/20190219/5c6bbc17a3cb9.png?imageView2/2/w/740" alt="img"></p>
<blockquote>
<p>以及推广的高维卷积核，窗口可以在多个维上滑动：（<code>Din&gt;Dout</code>）</p>
</blockquote>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bbc1e7476d.png?imageView2/2/w/740 width=350></p>
<blockquote>
<p>在执行计算昂贵的 3 x 3 卷积和 5 x 5 卷积前，往往会使用 1 x 1 卷积来减少计算量。</p>
<p><strong>1 x 1 卷积</strong>最初是在 <a href="https://arxiv.org/abs/1312.4400" target="_blank" rel="noopener external nofollow noreferrer">Network-in-network 的论文</a>中被提出的，之后在<a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener external nofollow noreferrer">谷歌的 Inception 论文</a>中被大量使用。</p>
</blockquote>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bbc23df89f.png?imageView2/2/w/740 width=350></p>
<p><strong>转置卷积</strong>：卷积映射的对应的<u>张量膨胀</u>的卷积称为一个转置卷积。</p>
<blockquote>
<p>如果转置卷积映射存在逆映射，则称为逆卷积。</p>
</blockquote>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bc28a260ef.gif?imageView2/2/w/740 width=150></p>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bc32c58088.gif?imageView2/2/w/740 width=150></p>
<p>转置卷积的原理如下图所示：</p>
<p><img data-src="https://static.leiphone.com/uploads/new/images/20190219/5c6bc3949d069.jpeg?imageView2/2/w/740" alt="1"></p>
<p><img data-src="https://static.leiphone.com/uploads/new/images/20190219/5c6bc394991e7.png?imageView2/2/w/740" alt="2"></p>
<blockquote>
<p>转置的含义来自上述原理中的矩阵的转置。而逆来自逆映射。</p>
</blockquote>
<p><strong>空洞卷积</strong>（Dilated Convolution）：在卷积核部分之间插入空间让卷积核膨胀。即扩张卷积。</p>
<p><img data-src=https://static.leiphone.com/uploads/new/images/20190219/5c6bc939c515b.gif?imageView2/2/w/740 width=200></p>
<blockquote>
<p>类似海绵。本质上是在<u>不增加额外的计算成本</u>的情况下<strong>增加感受野</strong>。</p>
<p>《使用深度卷积网络和全连接 CRF 做语义图像分割》（Semantic Image Segmentation with Deep Convolutional Nets and Fully Connected CRFs，<a href="https://arxiv.org/abs/1412.7062" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1412.7062</a>）</p>
<p>《通过空洞卷积做多规模的上下文聚合》（Multi-scale context aggregation by dilated convolutions，<a href="https://arxiv.org/abs/1511.07122" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1511.07122</a>）</p>
</blockquote>
<p>还有可分离卷积、扁平化卷积、分组卷积等。（详见<a href="https://www.leiphone.com/news/201902/biIqSBpehsaXFwpN.html" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<h3 id="VGG引述"><a href="#VGG引述" class="headerlink" title="VGG引述"></a>VGG引述</h3><p>VGG是由Simonyan 和Zisserman在文献《<a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener external nofollow noreferrer"><em>Very Deep Convolutional Networks for Large Scale Image Recognition</em></a>》（<a href="https://arxiv.org/pdf/1409.1556.pdf" target="_blank" rel="noopener external nofollow noreferrer">PDF</a>）中提出卷积神经网络模型，其名称来源于作者所在的牛津大学视觉几何组(<strong>V</strong>isual <strong>G</strong>eometry <strong>G</strong>roup)的缩写。</p>
<blockquote>
<p>该模型参加2014年的 ImageNet图像分类与定位挑战赛，取得了优异成绩：</p>
<ul>
<li>在分类任务上排名第二，在定位任务上排名第一。</li>
</ul>
</blockquote>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/block.png" class="" title="VGG">
<h3 id="VGG分类"><a href="#VGG分类" class="headerlink" title="VGG分类"></a>VGG分类</h3><p>VGG中根据<strong>卷积核大小</strong>和<strong>卷积层数目</strong>的不同，可分为<code>A</code>，<code>A-LRN</code>,<code>B</code>,<code>C</code>,<code>D</code>,<code>E</code>共6个配置(ConvNet Configuration)，其中以<code>D</code>,<code>E</code>两种配置较为常用，分别称为<code>VGG16</code>和<code>VGG19</code>。</p>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/table.png" class="" title="VGG16">
<blockquote>
<p>对VGG16进行具体分析发现，<code>VGG16</code>共包含：</p>
<ul>
<li><strong>13个卷积层</strong>（Convolutional Layer），分别用<code>conv3-XXX</code>表示</li>
<li><strong>3个全连接层</strong>（Fully connected Layer）,分别用<code>FC-XXXX</code>表示</li>
<li><strong>5个池化层</strong>（Pool layer）,分别用<code>maxpool</code>表示</li>
</ul>
<p>其中，<u>卷积层和全连接层具有权重系数</u>，因此也被称为<code>权重层</code>，总数目为<code>13+3=16</code>，这即是VGG16中16的来源。(池化层不涉及权重，因此不属于权重层，不被计数)。</p>
</blockquote>
<h4 id="VGG的优点"><a href="#VGG的优点" class="headerlink" title="VGG的优点"></a>VGG的优点</h4><p>VGG16的突出特点是<strong>简单</strong>，体现在：</p>
<ul>
<li>卷积层均采用相同的卷积核参数：<ul>
<li>卷积层均表示为<code>conv3-XXX</code>，其中<code>conv3</code>说明该卷积层采用的卷积核的尺寸(kernel size)是3，即宽（width）和高（height）均为3，<code>3*3</code>是<strong>很小的卷积核尺寸</strong>，结合其它参数（步幅<code>stride=1</code>，填充方式<code>padding=same</code>），这样就能够使得<u>每一个卷积层(张量)与前一层（张量）保持相同的宽和高</u>。<code>XXX</code>代表卷积层的通道数。</li>
</ul>
</li>
<li>池化层均采用相同的池化核参数池化层的参数均为2×2，步幅<code>stride=2</code>，max的池化方式，这样就能够使得<strong>每一个池化层（张量）的宽和高是前一层（张量）的1/2</strong>。</li>
<li>模型是由若干卷积层和池化层堆叠（stack）的方式构成，比较容易形成较深的网络结构（<strong>在2014年，16层已经被认为很深了</strong>）。</li>
</ul>
<p>综合上述分析，可以概括VGG的优点为: <strong>Small filters, Deeper networks</strong> </p>
<h4 id="VGG的缺点"><a href="#VGG的缺点" class="headerlink" title="VGG的缺点"></a>VGG的缺点</h4><p>训练时间过长，调参难度大。</p>
<p>存储容量大，不利于部署。（存储VGG16权重值文件的大小为500多MB）</p>
<h3 id="块（Block）"><a href="#块（Block）" class="headerlink" title="块（Block）"></a>块（Block）</h3><p>VGG16的卷积层和池化层可以划分为不同的块（Block），从前到后依次编号为Block1~block5。</p>
<ul>
<li>每一个块内包含<strong><font color=red>若干</font>卷积层</strong>和<strong>一个池化层</strong>。</li>
<li>同一块内，卷积层的<strong>通道（channel）数</strong>是相同的。<ul>
<li><strong><font color=purple><code>block3</code></font></strong>: 3个卷积层，卷积核尺寸为<code>3*3</code>，通道数都是<code>256</code></li>
</ul>
</li>
</ul>
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/VGG16.png" class="" title="VGG16_Step">
<p>随着层数的增加：</p>
<ul>
<li><strong>卷积通道数翻倍</strong>：64→128→256→512（到512不再增加了）</li>
<li><strong>张量尺寸减半</strong>：224→ 112→ 56→28→ 14→ 7（池化层）</li>
</ul>
<h3 id="VGG参数"><a href="#VGG参数" class="headerlink" title="VGG参数"></a>VGG参数</h3><p>VGG参数包括<strong>卷积核参数</strong>和<strong>全连接层参数</strong>。<strong><font color=red>两者都需要学习得到</font></strong>。</p>
<ul>
<li><strong>卷积核参数</strong><ul>
<li>对于第一层卷积，由于输入图的通道数是3（<strong><font color=red>R</font><font color=green>G</font><font color=blue>B</font></strong>），网络必须学习大小为3×3，通道数为3的的卷积核，这样的卷积核有64个，因此总共有（3×3 × 3）× 64 = 1728个参数。</li>
</ul>
</li>
<li><strong>全连接层参数</strong><ul>
<li>=<code>前一层节点数</code>×<code>本层的节点数</code>。</li>
</ul>
</li>
<li>最大池化层没有参数</li>
</ul>
<blockquote>
<p>FeiFei Li在<a href="https://www.bilibili.com/video/av13260183" target="_blank" rel="noopener external nofollow noreferrer">CS231</a>的课件中给出了整个网络的全部参数（<strong>138 357 544</strong> 个参数）的计算过程（<em>不考虑偏置</em>），如下图所示，图中<strong><font color=red>红色</font></strong>是计算所需存储容量的部分；<strong><font color=blue>蓝色</font></strong>是计算权重参数数量的部分：（<a href="http://cs231n.stanford.edu/slides/2017/cs231n_2017_lecture9.pdf" target="_blank" rel="noopener external nofollow noreferrer">Lecture 9: CNN Architectures</a>）</p>
<p><img data-src="http://deanhan.com/2018/07/26/vgg16/ppt.png" alt="VGG16"></p>
</blockquote>
<h3 id="VGG16构建代码"><a href="#VGG16构建代码" class="headerlink" title="VGG16构建代码"></a>VGG16构建代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> MaxPooling2D</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_vgg16</span><span class="params">()</span>:</span></span><br><span class="line">    input_shape = (<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>) <span class="comment"># 输入: 224*244，RGB三位图</span></span><br><span class="line">    model = Sequential([</span><br><span class="line">    	Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), input_shape=input_shape, padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	<span class="comment"># 卷积层，64个滤波器（卷积核），尺寸3*3，参数：输入规格，填充，激活函数</span></span><br><span class="line">    	Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	<span class="comment"># 非首层无需指定输入规格</span></span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># Block 2</span></span><br><span class="line">    	Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment"># 3</span></span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 4</span></span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 5</span></span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 全连接层</span></span><br><span class="line">    	Flatten(),</span><br><span class="line">    	Dense(<span class="number">4096</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Dense(<span class="number">4096</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Dense(<span class="number">1000</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">    	<span class="comment"># 最后要做一个softmax，输出概率归一化</span></span><br><span class="line">    	])</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="comment"># 主函数，调用</span></span><br><span class="line">    model = generate_vgg16()</span><br><span class="line">    model.summary()</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using TensorFlow backend.</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">conv2d_1 (Conv2D)            (None, 224, 224, 64)      1792      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None, 224, 224, 64)      36928     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None, 112, 112, 64)      0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)            (None, 112, 112, 128)     73856     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_4 (Conv2D)            (None, 112, 112, 128)     147584    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2 (None, 56, 56, 128)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_5 (Conv2D)            (None, 56, 56, 256)       295168    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_6 (Conv2D)            (None, 56, 56, 256)       590080    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_7 (Conv2D)            (None, 56, 56, 256)       590080    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_3 (MaxPooling2 (None, 28, 28, 256)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_8 (Conv2D)            (None, 28, 28, 512)       1180160   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_9 (Conv2D)            (None, 28, 28, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_10 (Conv2D)           (None, 28, 28, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_4 (MaxPooling2 (None, 14, 14, 512)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_11 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_12 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_13 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_5 (MaxPooling2 (None, 7, 7, 512)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_1 (Flatten)          (None, 25088)             0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 4096)              102764544 </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (None, 4096)              16781312  </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_3 (Dense)              (None, 1000)              4097000   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 138,357,544</span><br><span class="line">Trainable params: 138,357,544</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure>
<p>可以看到参数是<code>138,357,544</code>个，基本可以认为构建无误。</p>
<h3 id="VGG19构建代码"><a href="#VGG19构建代码" class="headerlink" title="VGG19构建代码"></a>VGG19构建代码</h3><p>不妨再模拟一个常用的<code>VGG19</code>。</p>
<p><code>VGG19</code>只是在第3、4、5块（Block）各增加一个卷积层。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> MaxPooling2D</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_vgg16</span><span class="params">()</span>:</span></span><br><span class="line">    input_shape = (<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>) <span class="comment"># 输入: 224*244，RGB三位图</span></span><br><span class="line">    model = Sequential([</span><br><span class="line">    	Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), input_shape=input_shape, padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	<span class="comment"># 卷积层，64个滤波器（卷积核），尺寸3*3，参数：输入规格，填充，激活函数</span></span><br><span class="line">    	Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	<span class="comment"># 非首层无需指定输入规格</span></span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># 2</span></span><br><span class="line">    	Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment"># 3</span></span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 4</span></span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 5</span></span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Conv2D(<span class="number">512</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    	<span class="comment"># 全连接层</span></span><br><span class="line">    	Flatten(),</span><br><span class="line">    	Dense(<span class="number">4096</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Dense(<span class="number">4096</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    	Dense(<span class="number">1000</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">    	<span class="comment"># 最后要做一个softmax，输出概率归一化</span></span><br><span class="line">    	])</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="comment"># 主函数，调用</span></span><br><span class="line">    model = generate_vgg16()</span><br><span class="line">    model.summary()</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using TensorFlow backend.</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">conv2d_1 (Conv2D)            (None, 224, 224, 64)      1792      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None, 224, 224, 64)      36928     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None, 112, 112, 64)      0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)            (None, 112, 112, 128)     73856     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_4 (Conv2D)            (None, 112, 112, 128)     147584    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2 (None, 56, 56, 128)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_5 (Conv2D)            (None, 56, 56, 256)       295168    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_6 (Conv2D)            (None, 56, 56, 256)       590080    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_7 (Conv2D)            (None, 56, 56, 256)       590080    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_8 (Conv2D)            (None, 56, 56, 256)       590080    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_3 (MaxPooling2 (None, 28, 28, 256)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_9 (Conv2D)            (None, 28, 28, 512)       1180160   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_10 (Conv2D)           (None, 28, 28, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_11 (Conv2D)           (None, 28, 28, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_12 (Conv2D)           (None, 28, 28, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_4 (MaxPooling2 (None, 14, 14, 512)       0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_13 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_14 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_15 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_16 (Conv2D)           (None, 14, 14, 512)       2359808   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_5 (MaxPooling2 (None, 7, 7, 512)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_1 (Flatten)          (None, 25088)             0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 4096)              102764544 </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (None, 4096)              16781312  </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_3 (Dense)              (None, 1000)              4097000   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 143,667,240</span><br><span class="line">Trainable params: 143,667,240</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure>
<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><ol>
<li><p>提交作业时，所有文件都需要上传吗？还是只需要上传修改后的.py文件？</p>
<p>未回答。（<strong><font color=red>Remain</font></strong>）</p>
<p>是的。</p>
</li>
<li><p>代码中卷积核只指定了窗口的大小3*3，那么卷积核的过滤函数是怎么确定的呢？</p>
<p><del>参数通过通过反向传播训练的</del>。Check！</p>
</li>
<li><p>图像是RGB三位（层）的，为什么不是指定3个卷积核形成过滤器（滑动窗口），而是64、128……？步长是keras自行确定的吗？指定的卷积核个数是在图像上默认均匀分布吗？而且64个3*3窗口根本没法覆盖224x224的图像啊。。orz</p>
<p>64代表卷积核的个数，步长自己设，keras默认步长应该是1。卷积通过滑动覆盖整个图片。</p>
<p>RGB只有3个通道，64个卷积核不应该对应64个通道吗，怎么滑动？</p>
<p>64个卷积核是指单个图像被64个过滤器<strong>分别过滤</strong>了。64通道是处理后的通道，224 <em> 224 </em> 3<strong>处理</strong>后可以变成224 <em> 224 </em> 64。</p>
<p>“处理”具体对应的是哪一步？什么操作？</p>
<p>处理代表卷积层；通过卷积层之后通道数就变了。</p>
</li>
<li><p>Conv2D的filters和strides参数不会互相冲突吗？它们指定的对象有什么区别？</p>
<p><del>filters代表卷积核个数，stride代表步长，没有冲突</del>。Check！</p>
</li>
<li><p>多个卷积层堆积到一起究竟有多大意义？我看padding都是从输入图像最边缘的一层像素开始的，就算迭代3次，外部的padding也只能向内传播3个像素深度，除了增加算力以外有什么好处吗？我难道不可以直接设置一个具有新的过滤[复合函数]的卷积核来完成这样的工作吗？</p>
<p>多个卷积核，每个卷积核的参数都是不一样的，相当于你说的复合函数。</p>
<p>有什么好处？如果相当于复合函数为什么不直接用复合函数？</p>
<p><del>是因为神经网络其实本身就是通过不断训练，梯度下降，达到某一个复杂函数的效果</del>。（<strong><font color=red>Remain</font></strong>）</p>
<p>（深层次）训练效果更好。</p>
</li>
<li><p>我看VGG模型的C配置里有conv1-512，能讲讲1 <em> 1卷积核的作用吗？这里的图像也就三层，为什么要反复用1 </em> 1卷积呢？类似于一个像素级的激活函数吗？（那么还要ReLU干啥呢。。）另外1 <em> 1为什么要放在3</em>3卷积核的[后面]？</p>
<p><strong>1 * 1卷积核用于改变通道个数</strong>，比如从12 <em> 12 </em> 256变成12<em> 12 </em> 512就可以用1 * 1卷积层。</p>
<p><del>那不同配置卷积层数不同不影响通道吗？</del>Check！</p>
</li>
<li><p>池化层到底干了个啥？为啥每次池化了以后通道数翻倍呢？</p>
<p>池化层用于<a href="https://blog.csdn.net/majinlei121/article/details/46742339" target="_blank" rel="noopener external nofollow noreferrer">下采样</a>。通道变多是为了组合不同的特征。</p>
<p>我想问的是通道为什么会变多？（不是问“为了什么而变多”orrrrz）</p>
<p>因为卷积核个数多了，处理代表卷积层；通过卷积层之后通道数就变了。</p>
<p><del>卷积可以改变通道数？？？池化也可以改变通道数？</del>Check！</p>
<p>我还是不太理解卷积核数大于通道数是如何过滤的？神奇的操作？？</p>
<p>嗯嗯，<strong>一个卷积核就可以把之前的所有通道都进行一遍卷积操作</strong>，输出为n <em> m </em> 1，x个卷积层就是n <em> m </em> x，所以x跟之前的层有多少通道没关系。</p>
</li>
</ol>
<h2 id="Task2-特征提取"><a href="#Task2-特征提取" class="headerlink" title="Task2 特征提取"></a>Task2 特征提取</h2><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1553319814542.png" class="" width="1553319814542">
<h3 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h3><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1553320192995.png" class="" width="1553320192995">
<img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1553320223350.png" class="" width="1553320223350">
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> model_from_json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> pil_image</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> dump</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img_as_np_array</span><span class="params">(path, target_size)</span>:</span></span><br><span class="line">    <span class="string">"""从给定文件[加载]图像,[缩放]图像大小为给定target_size,返回[Keras支持]的浮点数numpy数组.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Arguments</span></span><br><span class="line"><span class="string">        path: 图像文件路径</span></span><br><span class="line"><span class="string">        target_size: 元组(图像高度, 图像宽度).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Returns</span></span><br><span class="line"><span class="string">        numpy 数组.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    img = pil_image.open(path) <span class="comment"># 打开文件</span></span><br><span class="line">    img = img.resize(target_size,pil_image.NEAREST) <span class="comment"># NEARSET 是一种插值方法</span></span><br><span class="line">    <span class="keyword">return</span> np.asarray(img, dtype=K.floatx()) <span class="comment">#转化为向量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_input</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""预处理图像用于网络输入, 将图像由RGB格式转为BGR格式.</span></span><br><span class="line"><span class="string">       将图像的每一个图像通道减去其均值</span></span><br><span class="line"><span class="string">       均值BGR三个通道的均值分别为 103.939, 116.779, 123.68</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Arguments</span></span><br><span class="line"><span class="string">        x: numpy 数组, 4维.</span></span><br><span class="line"><span class="string">        data_format: Data format of the image array.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Returns</span></span><br><span class="line"><span class="string">        Preprocessed Numpy array.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 'RGB'-&gt;'BGR', https://www.scivision.co/numpy-image-bgr-to-rgb/</span></span><br><span class="line">    x = x[..., ::<span class="number">-1</span>]</span><br><span class="line">    mean = [<span class="number">103.939</span>, <span class="number">116.779</span>, <span class="number">123.68</span>]</span><br><span class="line"></span><br><span class="line">    x[..., <span class="number">0</span>] -= mean[<span class="number">0</span>]</span><br><span class="line">    x[..., <span class="number">1</span>] -= mean[<span class="number">1</span>]</span><br><span class="line">    x[..., <span class="number">2</span>] -= mean[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_vgg16_model</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""从当前目录下面的 vgg16_exported.json 和 vgg16_exported.h5 两个文件中导入 VGG16 网络并返回创建的网络模型</span></span><br><span class="line"><span class="string">       vgg16_exported.json 下载链接：链接: https://pan.baidu.com/s/13WQBRb4sr3umP7xbUCxmCg 提取码: ycb5 </span></span><br><span class="line"><span class="string">       vgg16_exported.h5 下载链接: https://pan.baidu.com/s/1yF8wybHuzGoTzwSkqTPzzQ 提取码: ub75</span></span><br><span class="line"><span class="string">       注意上传完成的作业时不要上传这两个文件</span></span><br><span class="line"><span class="string">    # Returns</span></span><br><span class="line"><span class="string">        创建的网络模型 model</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    json_file = open(<span class="string">"vgg16_exported.json"</span>,<span class="string">"r"</span>)</span><br><span class="line">    loaded_model_json = json_file.read()</span><br><span class="line">    json_file.close()</span><br><span class="line"></span><br><span class="line">    model = model_from_json(loaded_model_json)</span><br><span class="line">    model.load_weights(<span class="string">"vgg16_exported.h5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_features</span><span class="params">(directory)</span>:</span></span><br><span class="line">    <span class="string">"""提取给定文件夹中所有图像的特征, 将提取的特征保存在文件features.pkl中,</span></span><br><span class="line"><span class="string">       提取的特征保存在一个dict中, key为文件名(不带.jpg后缀), value为特征值[np.array]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        directory: 包含jpg文件的文件夹</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    model = load_vgg16_model()</span><br><span class="line">    <span class="comment"># 去除模型最后一层</span></span><br><span class="line">    model.layers.pop()</span><br><span class="line">    model = Model(inputs=model.inputs, outputs=model.layers[<span class="number">-1</span>].output)</span><br><span class="line">    print(<span class="string">"Extracting..."</span>)</span><br><span class="line"></span><br><span class="line">    features = dict()</span><br><span class="line">    pbar = tqdm(total=len(listdir(directory)), desc=<span class="string">"进度"</span>, ncols=<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> listdir(directory):</span><br><span class="line">        print(<span class="string">"\tRead file:"</span>, fn)</span><br><span class="line">        fn_path = directory + <span class="string">'/'</span> + fn</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回长、宽、通道的三维张量</span></span><br><span class="line">        arr = load_img_as_np_array(fn_path, target_size=(<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 改变数组的形态，增加一个维度（批处理）—— 4维</span></span><br><span class="line">        arr = arr.reshape((<span class="number">1</span>, arr.shape[<span class="number">0</span>], arr.shape[<span class="number">1</span>], arr.shape[<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 预处理图像为VGG模型的输入</span></span><br><span class="line">        arr = preprocess_input(arr)</span><br><span class="line">        <span class="comment"># 计算特征</span></span><br><span class="line">        feature = model.predict(arr, verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\tprocessed..."</span>,end=<span class="string">''</span>)</span><br><span class="line">        id = os.path.splitext(fn)[<span class="number">0</span>]</span><br><span class="line">        features[id] = feature</span><br><span class="line">        print(<span class="string">"Saved. "</span>, id)</span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Complete extracting."</span>)</span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 提取Flicker8k数据集中所有图像的特征，保存在一个文件中, 大约一小时的时间，最后的文件大小为127M</span></span><br><span class="line">    <span class="comment"># Flickr8k数据集的下载链接: https://pan.baidu.com/s/1bQcQAz0pxPix9q9kCoZ1aw 提取码: 6gpd </span></span><br><span class="line">    <span class="comment"># 下载zip文件，解压缩到当前目录的子文件夹Flicker8k_Dataset， 注意上传完成的作业时不要上传这个数据集文件</span></span><br><span class="line">    directory = <span class="string">'./Flicker8k_Dataset'</span></span><br><span class="line">    features = extract_features(directory)</span><br><span class="line">    print(<span class="string">'提取特征的文件个数：%d'</span> % len(features))</span><br><span class="line">    print(keras.backend.image_data_format())</span><br><span class="line">    <span class="comment">#保存特征到文件</span></span><br><span class="line">    dump(features, open(<span class="string">'features.pkl'</span>, <span class="string">'wb'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Task3-数据生成"><a href="#Task3-数据生成" class="headerlink" title="Task3 数据生成"></a>Task3 数据生成</h2><img data-src="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E8%90%A5/1553327994360.png" class="" width="1553327994360">
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Task4-训练网络"><a href="#Task4-训练网络" class="headerlink" title="Task4 训练网络"></a>Task4 训练网络</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Task5-模型评估"><a href="#Task5-模型评估" class="headerlink" title="Task5 模型评估"></a>Task5 模型评估</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="实战项目2：自动驾驶之交通牌识别"><a href="#实战项目2：自动驾驶之交通牌识别" class="headerlink" title="实战项目2：自动驾驶之交通牌识别"></a>实战项目2：自动驾驶之交通牌识别</h1><h1 id="实战项目3：-（开放式）自动驾驶之方向盘操纵"><a href="#实战项目3：-（开放式）自动驾驶之方向盘操纵" class="headerlink" title="实战项目3： （开放式）自动驾驶之方向盘操纵"></a>实战项目3： （开放式）自动驾驶之方向盘操纵</h1>]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>知识智能讲座</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/</url>
    <content><![CDATA[<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664173203.png" class="" width="1548664173203">
<p>这个知识智能讲座主要讲了抽象化知识对机器学习领域应用的新进展。<a id="more"></a></p>
<blockquote>
<p>本知识智能讲座，我并没有去现场orz（<del>睡过头了233</del>）。</p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote>
<p>视频链接：<br>清华大学知识智能研究中心发布会（上）<br><a href="https://v.qq.com/x/page/b0832d17jiw.html" target="_blank" rel="noopener external nofollow noreferrer">https://v.qq.com/x/page/b0832d17jiw.html</a><br>清华大学知识智能研究中心发布会（下）<br><a href="http://v.qq.com/x/page/b0832d17jiw.html" target="_blank" rel="noopener external nofollow noreferrer">http://v.qq.com/x/page/b0832d17jiw.html</a></p>
<p><a href="https://mp.weixin.qq.com/s/14b0MTW2xs-_KmeiR1zdbw" target="_blank" rel="noopener external nofollow noreferrer">《Challenges for Deep Learning towards Human-Level AI》主题讲座</a></p>
</blockquote>
<p>讲座新闻：<a href="https://m.cnbeta.com/view/810761.htm" target="_blank" rel="noopener external nofollow noreferrer">News</a></p>
<blockquote>
<p><a href="https://www.aminer.cn/" target="_blank" rel="noopener external nofollow noreferrer">Aminer官网</a></p>
<blockquote>
<p>AMiner报告下载地址：<br><a href="https://www.aminer.cn/research_report/5c3d5a5cecb160952fa10b76?download=true&amp;pathname=datamining.pdf" target="_blank" rel="noopener external nofollow noreferrer">2019年第一期《人工智能之数据挖掘》</a><br><a href="https://www.aminer.cn/research_report/5c3d5a8709e961951592a49d?download=true&amp;pathname=knowledgegraph.pdf" target="_blank" rel="noopener external nofollow noreferrer">2019年第二期《人工智能之知识图谱》</a></p>
</blockquote>
</blockquote>
<p><a href="./人工智能之知识图谱.pdf">人工智能之知识图谱.pdf</a></p>
<p><a href="./知识计算开放平台发布会1_简介.pdf">知识计算开放平台发布会1_简介.pdf</a></p>
<p><a href="./知识计算开放平台发布会2_HowNet.pdf">知识计算开放平台发布会2_HowNet.pdf</a></p>
<p><a href="./知识计算开放平台发布会3_XLORE.pdf">知识计算开放平台发布会3_XLORE.pdf</a></p>
<p><a href="./知识计算开放平台发布会4_AMiner.pdf">知识计算开放平台发布会4_AMiner.pdf</a></p>
<blockquote>
<p>知识表示学习工具包OpenKE:   <a href="https://github.com/thunlp/OpenKE" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/OpenKE</a></p>
<p>神经网络关系抽取工具包OpenNER:  <a href="https://github.com/thunlp/OpenNER" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/OpenNER</a></p>
<p>神经网络关系抽取工具包OpenNRE:  <a href="https://github.com/thunlp/OpenNRE" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/OpenNRE</a></p>
<p>Few Shot Learning关系抽取数据集FewRel:  <a href="https://github.com/thunlp/FewRel" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/FewRel</a></p>
<p>XLore:  <a href="https://xlore.org" target="_blank" rel="noopener external nofollow noreferrer">https://xlore.org</a></p>
<p>基于义原的开放语言知识库 OPEN HowNet: <a href="https://openhownet.thunlp.org/" target="_blank" rel="noopener external nofollow noreferrer">https://openhownet.thunlp.org/</a></p>
</blockquote>
<h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><blockquote>
<p>Must-read papers on neural relation extraction (NRE)：<a href="https://github.com/thunlp/NREPapers" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/NREPapers</a></p>
<p>Must-read papers on network representation learning (NRL) / network embedding (NE)：<a href="https://github.com/thunlp/NRLPapers" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/NRLPapers</a></p>
<p>Must-read papers on knowledge representation learning (KRL) / knowledge embedding (KE)：<a href="https://github.com/thunlp/KRLPapers" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/thunlp/KRLPapers</a></p>
</blockquote>
<ol>
<li><p>Jing Zhang, Jie Tang, Cong Ma, Hanghang Tong, Yu Jing, Juanzi Li:<br><a href="http://keg.cs.tsinghua.edu.cn/jietang/publications/kdd15-Zhang-et-al-network-similarity.pdf" target="_blank" rel="noopener external nofollow noreferrer">Panther: Fast Top-k Similarity Search on Large Networks</a>. KDD 2015</p>
<p>（数亿节点的）大规模网络，给定节点，快速计算与之具有<code>Topk</code>相似度的节点的<strong>随机路径算法</strong>。</p>
</li>
<li><p>Yang Yang, Yizhou Sun, Jie Tang, Bo Ma, Juan-Zi Li:<br><a href="http://keg.cs.tsinghua.edu.cn/jietang/publications/kdd15-Yang-et-al-Entity-matching.pdf" target="_blank" rel="noopener external nofollow noreferrer">Entity Matching across Heterogeneous Sources</a>. KDD 2015</p>
<p>异构领域（Source$\rightarrow$Target）的实体匹配<strong>概率算法</strong>+可解释性（基于主题）。</p>
</li>
<li><p>YixinCao, Lifu Huang, Heng Ji, Xu Chen, Juanzi Li:<br><a href="http://aixpaper.com/view/bridge_text_and_knowledge_by_learning_multiprototype_entity_mention_embedding" target="_blank" rel="noopener external nofollow noreferrer">Bridging Text and Knowledge by Learning Multi-Prototype Entity Mention Embedding</a>. ACL 2017</p>
<p>基于多类型实体模型的数据、知识的链接。（主要解决Ambiguity）</p>
</li>
<li><p>Xin Lv, Lei Hou, Juanzi Li, Zhiyuan Liu:<br><a href="http://aclweb.org/anthology/D18-1222" target="_blank" rel="noopener external nofollow noreferrer">Differentiating Concepts and Instances for Knowledge Graph Embedding</a>. EMNLP 2018</p>
<p>知识图谱嵌流算法。</p>
</li>
<li><p>Yilin Niu, Ruobing Xie, Zhiyuan Liu, Maosong Sun:<br><a href="http://nlp.csai.tsinghua.edu.cn/~xrb/publications/ACL-17_sememe.pdf" target="_blank" rel="noopener external nofollow noreferrer">Improved Word Representation Learning with Sememes</a>. ACL 2017</p>
<p>根据<strong>义原</strong>提升单词的表示学习性能。</p>
</li>
<li><p>Zhigang Wang, Juan-Zi Li:<br><a href="https://www.ijcai.org/Proceedings/16/Papers/187.pdf" target="_blank" rel="noopener external nofollow noreferrer">Text-Enhanced Representation Learning for Knowledge Graph</a>. IJCAI 2016</p>
<p>知识图谱：利用文本增强的表示学习。</p>
</li>
<li><p>Fanchao Qi, Yankai Lin, Maosong Sun, Hao Zhu, Ruobing Xie, Zhiyuan Liu:<br><a href="http://aclweb.org/anthology/D18-1033" target="_blank" rel="noopener external nofollow noreferrer">Cross-lingual Lexical Sememe Prediction</a>. EMNLP 2018</p>
<p>基于义原的多语言推广预测。</p>
</li>
<li><p>Yihong Gu, Jun Yan, Hao Zhu, Zhiyuan Liu, Ruobing Xie, Maosong Sun, Fen Lin, Leyu Lin:<br><a href="http://aclweb.org/anthology/D18-1493" target="_blank" rel="noopener external nofollow noreferrer">Language Modeling with Sparse Product of Sememe Experts</a>. EMNLP 2018</p>
<p>基于义原的稀疏语言模型。</p>
</li>
</ol>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><a href="./知识计算开放平台发布会1_简介.pdf">知识计算开放平台发布会1_简介.pdf</a></p>
</blockquote>
<p><a href="https://www.jiqizhixin.com/articles/2018-01-09-2" target="_blank" rel="noopener external nofollow noreferrer">刘知远</a>。</p>
<p>新一代人工智能应该是<strong>可信，安全</strong>，<strong>可解释、鲁棒的</strong>，要把知识加入。</p>
<blockquote>
<p>知识驱动+数据驱动。</p>
</blockquote>
<p><strong>后人工智能时代</strong>？</p>
<p>张钹院士：国内对于知识表示、知识推理和知识库的建立重视还是非常不够，ijcai论文中该类研究国内较少，科学研究必须多样化！</p>
<hr>
<p>人工智能：数据+知识。（形象+抽象）</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664243532.png" class="" width="1548664243532">
<p>语言翻译到语言是简单的，但没有常识的话很难获得句子的真意。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664256454.png" class="" width="1548664256454">
<p>国际构建大量的知识图谱。（<strong>我国的研究却较少</strong>）</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664267711.png" class="" width="1548664267711">
<p>清华知识智能有三个相关方面的研究方向。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663728170.png" class="" width="1548663728170">
<p>介绍了多个相关的平台。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663741402.png" class="" width="1548663741402">
<hr>
<p>XLORE是中英文知识规模平衡的大规模跨语言百科知识图谱，该图谱通过融合维基百科和百度百科，并对百科知识进行结构化和跨语言链接构建而成。该图谱以结构化形式描述客观世界中的概念、实例、属性及其丰富语义关系。XLORE目前包含约247万概念、44.6万属性/关系、1628万实例和260万跨语言链接。XLORE作为世界知识图谱，将为包括搜索引擎、智能问答等人工智能应用提供有力支撑。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663644063.png" class="" width="1548663644063">
<hr>
<p>知网HowNet秉承还原论思想，认为词义概念可以用更小的语义单位来描述、这种语义单位被称为“义原”(Sememe)，是最基本的、不易于再分割的意义的最小单位。</p>
<p>研究发现，HowNet通过统一的义原标注体系直接精准刻画语义信息，一方面能够突破词汇屏障，深入了解词汇背后丰富语义信息；另一方面每个义原含义明确固定，可被直接作为语义标签融入机器学习模型，使自然语言处理深度学习模型具有更好的鲁棒性可解释性。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663657956.png" class="" width="1548663657956">
<p>2019年hownet与清华共同推出OpenHowNet</p>
<hr>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663888882.png" class="" width="1548663888882">
<p>知网核心数据的开源。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663803783.png" class="" width="1548663803783">
<p>融合语言知识的语言表示学习。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663706177.png" class="" width="1548663706177">
<p>考虑复杂结构的世界知识表示学习。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663694018.png" class="" width="1548663694018">
<p>知识计算工具包。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548663677992.png" class="" width="1548663677992">
<h1 id="知网HowNet"><a href="#知网HowNet" class="headerlink" title="知网HowNet"></a>知网HowNet</h1><blockquote>
<p><a href="./知识计算开放平台发布会2_HowNet.pdf">知识计算开放平台发布会2_HowNet.pdf</a></p>
</blockquote>
<h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664614086.png" class="" width="1548664614086">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664632311.png" class="" width="1548664632311">
<h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664657653.png" class="" width="1548664657653">
<p>难点：（<a href="https://www.leiphone.com/news/201810/YETmhP7zym8mrQfj.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>义原</strong></a>）</p>
<blockquote>
<p><strong>根据语言学家的定义，义原是最小的不可分的语义单位。</strong>有的语言学家认为，包括词在内的所有概念的语义都可使用一个有限的义原集合去表示。而义原是比较隐含的语义单位，所以人们需要利用已经构建好的义原知识库才能够获取一个词所对应的义原。</p>
<p><strong>知网对词进行了更细粒度的义原标注，因而被广泛用于各项自然语言处理的任务中。</strong></p>
</blockquote>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548664873485.png" class="" width="1548664873485">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548665058278.png" class="" width="1548665058278">
<p>知网的义原集，30年来几乎是稳定的。（词汇量增加）</p>
<blockquote>
<p>义原集比较像计算机中的<a href="https://zh.wikipedia.org/zh-hans/%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86" target="_blank" rel="noopener external nofollow noreferrer">RISC</a>集。</p>
</blockquote>
<p>HowNet不等于NLP，更像一个数据资源库。</p>
<h2 id="OpenHowNet"><a href="#OpenHowNet" class="headerlink" title="OpenHowNet"></a>OpenHowNet</h2><p><strong>项目地址：<a href="https://openhownet.thunlp.org/" target="_blank" rel="noopener external nofollow noreferrer">https://openhownet.thunlp.org/</a></strong></p>
<p>相关研究：<a href="https://openhownet.thunlp.org/publication" target="_blank" rel="noopener external nofollow noreferrer">https://openhownet.thunlp.org/publication</a></p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548665372073.png" class="" width="1548665372073">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548665381541.png" class="" width="1548665381541">
<h1 id="百科XLORE"><a href="#百科XLORE" class="headerlink" title="百科XLORE"></a>百科XLORE</h1><blockquote>
<p><a href="./知识计算开放平台发布会3_XLORE.pdf">知识计算开放平台发布会3_XLORE.pdf</a></p>
</blockquote>
<h2 id="背景意义"><a href="#背景意义" class="headerlink" title="背景意义"></a>背景意义</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548665903710.png" class="" width="1548665903710">
<p>在线百科知识资源：</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666109760.png" class="" width="1548666109760">
<p>多语言知识图谱现状：</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666147555.png" class="" width="1548666147555">
<p>概念与实体。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666186161.png" class="" width="1548666186161">
<h2 id="技术特色"><a href="#技术特色" class="headerlink" title="技术特色"></a>技术特色</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666211971.png" class="" width="1548666211971">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666223024.png" class="" width="1548666223024">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666255796.png" class="" width="1548666255796">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666264235.png" class="" width="1548666264235">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666275654.png" class="" width="1548666275654">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666283487.png" class="" width="1548666283487">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666293261.png" class="" width="1548666293261">
<h2 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666313562.png" class="" width="1548666313562">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666326546.png" class="" width="1548666326546">
<h2 id="数据发布"><a href="#数据发布" class="headerlink" title="数据发布"></a>数据发布</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666334943.png" class="" width="1548666334943">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666398027.png" class="" width="1548666398027">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666408877.png" class="" width="1548666408877">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666418284.png" class="" width="1548666418284">
<h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548666458571.png" class="" width="1548666458571">
<h1 id="科研AMiner"><a href="#科研AMiner" class="headerlink" title="科研AMiner"></a>科研AMiner</h1><blockquote>
<p><a href="./知识计算开放平台发布会4_AMiner.pdf">知识计算开放平台发布会4_AMiner.pdf</a></p>
</blockquote>
<h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667010108.png" class="" width="1548667010108">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667053024.png" class="" width="1548667053024">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667071478.png" class="" width="1548667071478">
<p><strong>分析深层关系（挖掘），推理（算法），匹配（推荐）</strong>。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667093070.png" class="" width="1548667093070">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667113354.png" class="" width="1548667113354">
<hr>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667184843.png" class="" width="1548667184843">
<hr>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548668016035.png" class="" width="1548668016035">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667210643.png" class="" width="1548667210643">
<p>快速构建知识图谱，建立科研对象的框架。设计框架与图谱的交互系统。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667875759.png" class="" width="1548667875759">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667911266.png" class="" width="1548667911266">
<p>常识知识图谱到大规模知识图谱。<strong>异构网络的协调问题</strong>。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667255822.png" class="" width="1548667255822">
<p>从感知到认知。</p>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667270476.png" class="" width="1548667270476">
<p>节点：概念——<strong><font color=red>模型</font></strong>。</p>
<blockquote>
<p>总结：<em>概念是逻辑结构，模型是存储结构。</em>（并不必存储概念，只需要存储概念的编码信息，然后在需要输出时进行翻译就行了）</p>
</blockquote>
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667282082.png" class="" width="1548667282082">
<img data-src="/%E7%9F%A5%E8%AF%86%E6%99%BA%E8%83%BD%E8%AE%B2%E5%BA%A7/1548667317802.png" class="" width="1548667317802">
<hr>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>神秘的我</title>
    <url>/%E7%A5%9E%E7%A7%98%E7%9A%84%E6%88%91/</url>
    <content><![CDATA[<p>看了《<a href="https://movie.douban.com/subject/26266893/" target="_blank" rel="noopener external nofollow noreferrer">流浪地球</a>》，<del>真香</del>。​前半段想退票。。后半段超神辣。</p>
<hr>
<p>我常常问自己我是谁。</p>
<p>此刻我正坐在一个油烟味挥之不去的位置上，我让冷掉的泡面静静地占据嗅觉空间，我像是在觅食的贪狼。现在我要捕食我自己。荧屏又在闪动，好像显卡连刷新的力气都没有了。但显然，面前的这台机器比我更了解我。输入“我-是-谁”，噼里啪啦一顿敲。蓝色的圆弧开始循环动画，这是在向深度查找答案呢。<a id="more"></a></p>
<p>只要稍等片刻，屏幕上的查询就有了回应——</p>
<p>“你是刘维，今年44岁，身高175cm，体重75kg，”还伴随着自动播报的声音，像真人一样流畅，“你的出生日期是1996年，出生地点和现居住地都在南京市秦淮区金陵路755号，你的职业是游戏技术美工，你任职于……”</p>
<p>我点了静音——虽然播音的合成妹子声音很甜美，我仍然不耐烦地点了静音。</p>
<p>真是得来全不费功夫。原来我的公司早就帮我上传到深度云上了。</p>
<p>桌子一旁的手机“嗡嗡”地震了一下，我赶紧捞起来。这已经是习惯性的动作。</p>
<p>嗯。又是有人在群里发虚拟红包。我懒得点开，这感觉就像在刮开刚买的彩票一样，喜悦和失落都是我不能承受之物。</p>
<p>我决定保持让它保持量子状态。屏幕变灰了。我转移视线到面前不时闪动的大屏幕上。</p>
<p>我面带严肃地审视着查询返回的结果，滑轮滚动，密密麻麻地看下去，一条、一条。全对应上了。</p>
<p>要我评价的话，公司对员工的画像可谓是鞭辟入里。</p>
<p>可我总感觉缺了点什么。</p>
<p>这种“好像有什么东西被藏了起来”的感觉很快淹没了我没剩多少缓存的脑袋，开始溢出了。再这么胡乱地想，昏昏欲睡。</p>
<p>我忽然意识到这是一个NP问题。我连忙终止了想象力。</p>
<p>隐隐有一股烧焦的味道传来。</p>
<p>我朝周围一看，有几个人影快速闪过。有人大叫“着火了！”那声音似远似近。</p>
<p>糟糕，我可不想在没拿到退休金之前就壮烈牺牲。我摘掉通信卡，来不及关掉面前的老机器，抓起手机站起来。我环顾四周，暂时看不见火焰的痕迹。可是整个大厅已经空空荡荡，只剩几个不问世事的家伙戴着耳机坐在角落，我看不见他们的脸，躲在机器的后面，他们的身体却反光一样的五颜六色。我想去告诉他们事态紧急，可是立刻理智战胜了英雄主义，我的脚步轻快地向玻璃门飞去。</p>
<p>在我拉开门的那一刹那，世界好像从静音中解放出来。我有片刻的恍惚。</p>
<p>阳光倾盆地洒下来。遍地都是辉光。我意识到这是长时间地逃离自然的副产品，我闭上眼，让适应过程变得更慢一些。当你闭上眼睛的时候，听觉就更敏感。我听到，喷泉的声音在左前方，轻轨的声音在下方，人群的慌里慌张倒像是背景辐射一样辨认不出具体的方向。我大声地喘气，可是空气苦涩的油烟味比室内还要重，我咳嗽起来。看来大气还是一样地不好，和我记忆中的模样无差。</p>
<p>我终于慢慢地睁开眼睛。巨大的广告牌映入眼帘，这可不是虚拟成像，而是实打实的纳米材料；一位搔首弄姿的女性在巨幕上，手着最新款的手机，向人们推销着新的电信套餐——她的目光好像一直在盯着我，阳光打在她的脸上，白色更白了。我紧张的心情可没有丝毫放松，这已经过去了好几分钟，除了慌慌张张的人流以外，我竟找不到火源的方向。往哪里逃？我看着面前的人们如热锅上的蚂蚁般乱窜，心生一种同情。</p>
<p>他们甚至连逃生的方向都不能达成一致。简直是笑话。我心里暗道。</p>
<p>不管那么多了。火往高处烧，我决定往低处走。只要一低头，地面瞬间就变得半透明，从我的视角俯视，我看到下方数百米川流不息的灯火车流。离我最近的是轻轨的轨道，轻轨才刚刚经过，只剩下空空的骨架。在这个时代可没有恐高症，人们的生活早已经高耸入云。我目视搜索着最近的逃生楼梯。在那里！大约五十米以外，是最近的安全出口。我飞奔过去，在人流中，竟不可思议地毫无阻碍。楼梯口，只有三三俩俩的人急匆匆地往下走。我意外地看到有人正慢悠悠地往上来。</p>
<p>她戴着半透明的白色无线耳机，低着头，手揣在上衣的口袋里，步伐很稳。我心中一动。我根本没时间仔细看她，只留意到她全身的紫色。我的心跳开始加速。正在她正要经过我的时候，我拦住了她。“喂，等等，”她的胸脯轻轻碰上我的手臂，她的身形停住了，她猛地抬头。我有些僵化，我不知道怎么处理这样的场景。我只好正面迎上她直视着我的眼睛。“嗯……嗯。上面好像发生火灾，你最好……”我不知道我此刻是什么样的表情。</p>
<p>“什么？”她的声音比我想象的要大声。她摘下耳机，后退一步。</p>
<p>“上面着火了。”我的词语变得简洁。</p>
<p>“在哪儿？”她的声音变得正常。</p>
<p>“上面。”微微抬一下头，我尝试用眼神示意的方式让她理解。</p>
<p>“天上？”她的理解能力大大超出我的认知。</p>
<p>“当然不是！——反正你不能再上楼梯了，往反方向走吧！”我大声说。</p>
<p>她的眼神充满疑惑，可最终她还是选择接受我的建议。她跟在我身后，我们走出了楼梯。</p>
<p>这一层分布的都是轨道，列车在轨道上疾驰，整个平面被轨道分成无数细碎的小片区域。这一层的人好像比上一层更多。在等候区已经排起了长队，人们的声音更加嘈杂。</p>
<p>“喂，——喂！”</p>
<p>我听到声音向后循视，“又怎么了？”</p>
<p>“究竟是怎么回事？为什么大家都表现得这么紧张？”她终于后知后觉地观察到人们的慌张感，“你说发生火灾，可是在哪儿呢？我什么都看不到。”</p>
<p>“等你看到的时候已经来不及了。”我冷冷地回应，我尽量表现得镇定，“现在就是最好的逃离时机。”</p>
<p>“可是往哪里逃呢？——”轰隆一声，前方的站台突然毫无征兆地塌陷下去，断裂的金属支架在空中飞速扭曲，击中了几个不幸的路人，他们发出惨叫，随后也坠落下去。“快趴下！”我喊道，按住她的肩膀。在小幅度的地动山摇以后，前方出现一个巨大的缺口，这个缺口沿着轨道一直蔓延了数百米，已然是不能通行。原本在站台周围聚集的人群尖叫着四散开去。</p>
<p>我有点怀疑这究竟是不是火灾了。从头到尾我连一颗火星子也没看到，而周遭发生的一切更像是一场巨大的灾难的前兆——这场灾难可能要比一场纯粹的火灾来得可怕得多。然而究竟没有时间留给我思考。我小心翼翼地来到塌陷的边缘往下查看，这个距离有点高，似乎更下面的一层也被砸出了一个大洞，紊乱的气流让我有些恐高发作，于是我退回到一个安全位置。我回头又看了看，那个年轻的小姑娘吓得不轻，显然还没换过气来。</p>
<p>现在摆在我面前的有两个选择，一是往回走，回到最高层，这个选择目前看起来不是很明智；二是往下走，如果再发生塌方的话，处境就会更危险了。两个选择都有一些运气成分。这时我终于想起来看看手机，网络连接的图标已经成了灰色。“你的手机还能连上网吗？”我朝她问。经过十几秒后，她似乎已经镇定下来。</p>
<p>“我不用手机……我植入了阿贝思。”她深呼吸了几口气，“现在应该没有几个人还用着手机这么原始的东西了吧？”</p>
<p>“我连不上网，你要找什么？”她问。</p>
<p>“你的……阿比斯……本地有这个区域的三维地图吗？”</p>
<p>“是阿贝思。我找找，”说着，她闭上眼睛，又半晌才睁开看着我，“好像有……”</p>
<p>“查查最近的安全通道在哪？”目光之所及，我根本看不到任何安全出口的标志。</p>
<p>她又闭上眼睛，扶着栏杆站起来，好像在寻找什么一样，身体转了两三圈，最后停在一个方向——“那边，好像很近！”我顺着她指的方向看去——那是塌方所在的方向。“此路不通！”我有些哭笑不得。她也很快意识到自己犯的错误，连忙又闭上眼睛寻找起来。“往下的出口。”为了保险起见，我补充道。</p>
<p>她“嗯”了一声，“找到了！”</p>
<p>“有多远？”“大概……三百米左右。”</p>
<p>这样大概不算太远。“那赶紧走吧。”</p>
<p>我们从人流中穿行而过，从这里到安全出口的路十分顺畅，路途中几乎没有遇到任何障碍。但当我们到达目的地的时候，才发现这个出口已经人满为患，周围至少聚起了上百人。</p>
<p>地面又开始轻微地震动起来。</p>
<p>“看那里！——”人群中传来惊呼。在这层的东南方向的远处又出现了一次塌陷，这一次比上一次更加严重，那塌方的区域不断扩大，离我们所在的地点越来越近。一架疾驰而过的列车来不及刹车，冲出了断裂的铁轨，坠落到我们的视线以下，几秒后从下面传来巨大的爆炸声。这可是货真价实的火灾了！人们拼命地向逃生楼梯涌去，可是效率似乎没有任何提升。</p>
<p>我不能再犹豫，“这条路是死路，得找到另一条路才行。”</p>
<p>（待续）</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>第20期人工智能前沿学生论坛—师姐交流会</title>
    <url>/%E7%AC%AC20%E6%9C%9F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%89%8D%E6%B2%BF%E5%AD%A6%E7%94%9F%E8%AE%BA%E5%9D%9B%E2%80%94%E5%B8%88%E5%A7%90%E4%BA%A4%E6%B5%81%E4%BC%9A/</url>
    <content><![CDATA[<p>第20期人工智能前沿学生论坛（SFFAI）—师姐交流会。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><strong>IEEE WIE</strong>（Women In Engineer）是全球最大的致力于支持和帮助女性参加工程和科学领域，鼓励女性从事工程事业的国际组织之一，旨在推动女性在管理中发挥领导作用，帮助女性在产业界和学术界实现更好的发展。</p>
<div class="pdfobject-container" data-target="师姐交流会-2019-3-10.pdf" data-height="500px"></div>
<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本次论坛主要讲述的是学姐们的博士生活、科研经验和论文阅读、写作等技巧。</p>
<h1 id="王少楠-博士生活杂谈"><a href="#王少楠-博士生活杂谈" class="headerlink" title="王少楠 博士生活杂谈"></a>王少楠 博士生活杂谈</h1><p>助理研究员。自然语言处理。</p>
<p>读博五年。</p>
<h2 id="课题选择（博士第一年-学习）"><a href="#课题选择（博士第一年-学习）" class="headerlink" title="课题选择（博士第一年 学习）"></a>课题选择（博士第一年 学习）</h2><p>选题：</p>
<ul>
<li>篇章分析</li>
<li>情感分析</li>
<li><strong>借鉴认知神经科学的自然语言处理方法</strong></li>
</ul>
<hr>
<p>调研和咨询（内容、发展情况）</p>
<p>个人情况（兴趣、工作）</p>
<p>作出决定（即将成为热点的问题，高风险，做好不被承认的准备）</p>
<h2 id="调研-交叉学科（博士第二年）"><a href="#调研-交叉学科（博士第二年）" class="headerlink" title="调研-交叉学科（博士第二年）"></a>调研-交叉学科（博士第二年）</h2><p>认知神经科学</p>
<ul>
<li>研究人脑活动的科学</li>
<li>感知觉……</li>
</ul>
<p>自然语言处理</p>
<ul>
<li>实现人与计算机之间用自然语言进行有效沟通的各种理论和方法</li>
<li>机器翻译、问答系统、人机对话、文本分类、情感分析……</li>
</ul>
<p><strong>五大重要步骤</strong>：<strong><font color=red>沟通</font></strong>——<font color=red>实践</font>——<font color=red>教材</font>——<strong><font color=red>论文</font></strong>——<font color=red>上课</font>。</p>
<blockquote>
<p>越来越忙的时候，大部分时候都需要通过沟通来获取知识。</p>
</blockquote>
<h2 id="研究问题-（博士第三年）"><a href="#研究问题-（博士第三年）" class="headerlink" title="研究问题 （博士第三年）"></a>研究问题 （博士第三年）</h2><p>借鉴认知神经科学的自然语言处理方法。</p>
<ul>
<li><strong><font color=red>找到一个研究问题！</font></strong></li>
<li>目标是解决自然语言处理任务，以自然语言任务出发，设计认知神经科学实验，<strong>验证某个结论，提升模型性能</strong></li>
</ul>
<p>选定任务：</p>
<ul>
<li><strong><font color=red>词义消歧任务</font></strong>：张三很关心自己的仪表<ul>
<li>自然语言处理：语境、词频？</li>
<li>认知神经科学；上下文约束。</li>
</ul>
</li>
</ul>
<p>特征工程：</p>
<ul>
<li>对于某一个词，选择最重要的一类特征</li>
</ul>
<h2 id="发表第一篇论文（博士第三年后期，压力骤增）"><a href="#发表第一篇论文（博士第三年后期，压力骤增）" class="headerlink" title="发表第一篇论文（博士第三年后期，压力骤增）"></a>发表第一篇论文（博士第三年后期，压力骤增）</h2><p>改变研究方向：（转而求其次）</p>
<ul>
<li><strong><font color=blue>不作认知实验，借鉴已有结论，改进词义消歧模型</font></strong></li>
<li>发表 ——&gt; 中文信息学报</li>
<li>初稿-修改-修改-……-修改-投稿-……（过程曲折）</li>
</ul>
<p>排解压力：</p>
<ul>
<li>转移注意力</li>
<li><strong>均衡</strong></li>
</ul>
<h3 id="方向延伸"><a href="#方向延伸" class="headerlink" title="方向延伸"></a>方向延伸</h3><p>自然语言处理的深度学习开始流行。</p>
<p>（<strong>词义消歧——语义分析——语义表征</strong>）</p>
<p><strong>词汇表示模型</strong>：</p>
<ul>
<li>NLP：Word2vec</li>
<li>认知神经科学：词分解为<strong>可解释的特征</strong></li>
</ul>
<p>如何结合不可解释的<code>vec</code>和可解释的认知特征？（查阅文献，发现被研究过了）</p>
<ul>
<li><strong><font color=red>特征组合</font></strong>——更好的词汇表示模型</li>
</ul>
<h3 id="第一个像样工作"><a href="#第一个像样工作" class="headerlink" title="第一个像样工作"></a>第一个像样工作</h3><p><strong>句子表示模型</strong>：</p>
<ul>
<li>注意力机制（attention）：选择性的注视和跳读</li>
</ul>
<p><strong><font color=blue>人类注意力机制启发的句子表示模型</font></strong>（<strong>效果特别好</strong>）</p>
<ul>
<li>投稿<strong><code>AAAI</code></strong>，被打回，修改后投稿<strong><code>UCAI 2017</code></strong>高分录用</li>
<li>规律：只要投过一个高分，投其它期刊比较容易中</li>
<li>文章：<ul>
<li>重要性， 与已有工作联系和区别，文章逻辑关系，用词语法</li>
<li>讲故事简洁移动</li>
<li>Trick: google  “  ” /grammarly（语法检查）</li>
<li>推荐：<strong><font color=red>机器翻译学术论文写作方法与技巧</font></strong>（刘洋）</li>
</ul>
</li>
</ul>
<p>第一次出国开会。（墨尔本）好玩。</p>
<h2 id="灵感涌现-（博士第四年）"><a href="#灵感涌现-（博士第四年）" class="headerlink" title="灵感涌现 （博士第四年）"></a>灵感涌现 （博士第四年）</h2><p>融合字符信息的中文句子表示 EMNLP-2017</p>
<p>融合字符信息的中文句子表示（拓展） TALLIP-2018</p>
<p>多模态词汇表示方法 AAAI-2018</p>
<p>多模态词汇表示方法和可解释性……</p>
<h2 id="工作选择（博士第五年）"><a href="#工作选择（博士第五年）" class="headerlink" title="工作选择（博士第五年）"></a>工作选择（博士第五年）</h2><ul>
<li>出国读博士后：眼界、难度</li>
<li><strong>留所工作：科研、自由、钱少</strong></li>
<li>互联网公司：价值、（被动）累、约束</li>
</ul>
<p><font color=red>自由、成就感、新鲜感</font>。</p>
<p>毕业旅行……</p>
<p>遗憾：</p>
<ul>
<li>去企业实习</li>
<li>出国访问</li>
<li>假期旅行</li>
<li>……</li>
</ul>
<h2 id="学生-longrightarrow-老师（毕业）"><a href="#学生-longrightarrow-老师（毕业）" class="headerlink" title="学生$\longrightarrow$老师（毕业）"></a>学生$\longrightarrow$老师（毕业）</h2><p>研究内容：转向认知神经科学</p>
<p>心态：学问压力$\longrightarrow$学术压力</p>
<p>辅导学生：耐心</p>
<p>团队工作：独立$\longrightarrow$合作</p>
<h3 id="研究所招聘制度"><a href="#研究所招聘制度" class="headerlink" title="研究所招聘制度"></a>研究所招聘制度</h3><ul>
<li>2018.1 岗位答辩（户口指标）</li>
<li>2018.5 毕业答辩</li>
<li>2018.12 拿到户口</li>
<li>2018.12 青促会答辩（初始资金支持）</li>
<li>2019.3 自然科学青年基金</li>
<li>2010.11 副研究员岗位申请</li>
</ul>
<h1 id="李祎-科研经历分享和交流"><a href="#李祎-科研经历分享和交流" class="headerlink" title="李祎 科研经历分享和交流"></a>李祎 科研经历分享和交流</h1><p>中科院自动化所<strong>在读</strong>博士。</p>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>结合深度学习开拓新方向？（遥感+DL）</p>
<ul>
<li>具体任务：语义分割（遥感影像）</li>
<li>读博？？？</li>
</ul>
<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>硕士：图像语义分割，CRF……像素级别的标注问题</p>
<ul>
<li>团队积累少</li>
</ul>
<p>博士：图像生成、深度生成模型（1篇会议、1篇期刊、1个数据库）</p>
<ul>
<li>人脸去妆和素颜化妆</li>
<li>导师高瞻远瞩</li>
</ul>
<h2 id="科研方向选择"><a href="#科研方向选择" class="headerlink" title="科研方向选择"></a>科研方向选择</h2><h3 id="决定"><a href="#决定" class="headerlink" title="决定"></a>决定</h3><ul>
<li><strong><font color=red>个人想法</font></strong></li>
<li>导师指定</li>
<li>犹豫……</li>
<li><strong>备选清单</strong><ul>
<li>自己感兴趣的</li>
<li>符合发展潮流的</li>
<li>能有人交流的（不必担心，多交流）</li>
<li><strong>能坚持住的</strong>（不必怀疑）</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><ul>
<li>能不能换<ul>
<li>博士入学</li>
</ul>
</li>
<li>为什么换<ul>
<li>符合小组方向</li>
</ul>
</li>
<li>换什么<ul>
<li>图像生成</li>
</ul>
</li>
<li>怎么换</li>
</ul>
<h2 id="入门与知识积累"><a href="#入门与知识积累" class="headerlink" title="入门与知识积累"></a>入门与知识积累</h2><h3 id="硕士"><a href="#硕士" class="headerlink" title="硕士"></a>硕士</h3><ul>
<li>小团队共同学习</li>
<li>各方面能力提升<ul>
<li><strong>资料检索</strong>、<strong><font color=red>论文阅读</font></strong>（分享）、公式推导、代码实现、PPT制作、演讲……<ul>
<li><code>可以搞定</code>的自信心</li>
</ul>
</li>
</ul>
</li>
<li>合作、严谨、归纳、交流</li>
</ul>
<h3 id="博士"><a href="#博士" class="headerlink" title="博士"></a>博士</h3><ul>
<li>跟师兄师姐请教</li>
<li><strong>自己搞不定再问</strong></li>
<li>重视交流质量（大家其实都很忙，<code>输入</code>+<code>输出</code>）</li>
<li><strong>记录、整理</strong>，跟上节奏</li>
</ul>
<h3 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h3><ul>
<li>培养思维方式（逻辑思维……）</li>
<li>综合能力提升</li>
<li>开阔视野，触类旁通<ul>
<li>选还是不选是其次，<strong>有得选</strong>才是最重要的</li>
</ul>
</li>
<li><strong><font color=red>良好的科研习惯</font></strong><ul>
<li>多阅读、多思考、多总结、多尝试、多讨论</li>
<li><strong>每天刷arXiv，泛读+精读</strong></li>
<li>追踪团队，看清潮流</li>
<li><strong>笔记与总结</strong>（<code>OneNote</code>，周报+月度回顾）</li>
<li>发现问题，结局问题，撰写论文</li>
</ul>
</li>
</ul>
<h2 id="论文撰写与投稿"><a href="#论文撰写与投稿" class="headerlink" title="论文撰写与投稿"></a>论文撰写与投稿</h2><ul>
<li>认清目标，早做打算，严格执行，适时调整</li>
<li>从审稿中学习，自学<code>tex</code></li>
<li><strong>从模仿</strong>（大牛作品，相关文献）到熟练</li>
<li>论文撰写，举个例子<ul>
<li><strong>想要往哪里投稿</strong>：<ul>
<li>期刊or会议？什么主题？什么风格？</li>
</ul>
</li>
<li><strong>创新点</strong>定基调</li>
<li><em>Introduction</em>：<ul>
<li><strong>分析</strong>问题，捋顺<strong>逻辑</strong>，先<strong>结构</strong>后文字</li>
</ul>
</li>
<li><strong>原理框图</strong><code>XMind</code>/<code>Visio</code>：（对理解很有帮助）<ul>
<li>思路清晰，有美感</li>
</ul>
</li>
<li>方法正文：<ul>
<li>符号<strong>明确</strong>，公式<strong>简洁</strong>，前因后果</li>
</ul>
</li>
<li>实验分析：<ul>
<li><strong>可复现</strong>，图表设计，分析详尽</li>
</ul>
</li>
<li>摘要与结论：<ul>
<li>二者不同</li>
</ul>
</li>
<li>参考文献：<ul>
<li>善用<code>tex</code>，与正文同步进行</li>
</ul>
</li>
</ul>
</li>
<li>初稿：麻雀虽小，五脏俱全</li>
<li>反复修改，不断充实</li>
<li>地道表达，起承转合</li>
<li>注重细节，不犯低级错误</li>
</ul>
<h2 id="科研与生活的平衡"><a href="#科研与生活的平衡" class="headerlink" title="科研与生活的平衡"></a>科研与生活的平衡</h2><ul>
<li>与压力和平共处</li>
<li>张持有度，高效休息</li>
<li>一分耕耘一分收获</li>
<li>生活不只是科研<ul>
<li>Making friends</li>
<li>Enjoying interests</li>
<li>Having trips</li>
<li>Falling in love</li>
<li>……</li>
</ul>
</li>
</ul>
<h1 id="考月英-科研经历与工作经验分享"><a href="#考月英-科研经历与工作经验分享" class="headerlink" title="考月英 科研经历与工作经验分享"></a>考月英 科研经历与工作经验分享</h1><p>三星电子中国研究院。（招实习生等，投递简历: yueying.kao@samsung.com）</p>
<p>研究方向：深度学习及其在计算机视觉中的应用</p>
<p>发表论文：UCAI，TIP等</p>
<h2 id="硕博选择"><a href="#硕博选择" class="headerlink" title="硕博选择"></a>硕博选择</h2><ul>
<li>了解区别</li>
<li>多多咨询</li>
<li>确定自身特点，个人经历</li>
<li>预见未来</li>
<li>不后悔</li>
</ul>
<h2 id="科研方向的确定"><a href="#科研方向的确定" class="headerlink" title="科研方向的确定"></a>科研方向的确定</h2><ul>
<li>大方向：导师</li>
<li>小方向：全面了解</li>
<li>研究方向</li>
<li>个人经历</li>
<li>研究点</li>
</ul>
<h2 id="研究入门"><a href="#研究入门" class="headerlink" title="研究入门"></a>研究入门</h2><ul>
<li><p>实现并总结现有方法的优点和不足</p>
</li>
<li><p>针对不足能提出自己的看法</p>
</li>
<li><p>设计可实现的方法</p>
</li>
<li><p>能够查阅文献、讨论，解决实现过程的新问题</p>
</li>
<li><p>得到预期的效果</p>
</li>
<li><p>将这些过程总结成文，然后投稿</p>
</li>
</ul>
<blockquote>
<p>个人的第一篇论文SPIE</p>
</blockquote>
<h2 id="论文撰写"><a href="#论文撰写" class="headerlink" title="论文撰写"></a>论文撰写</h2><ul>
<li>广泛阅读论文，尤其是顶会论文</li>
<li>借鉴优秀论文的写作思路及英文用法</li>
<li>无论如何写出第一版<ul>
<li>这样才能请别人修改</li>
</ul>
</li>
<li>尽可能多地找人帮忙提出存在的问题</li>
<li>正视所有问题，修改文章</li>
<li>文章框架、逻辑等没有大问题后，从头到尾修改语法问题</li>
</ul>
<h2 id="投稿"><a href="#投稿" class="headerlink" title="投稿"></a>投稿</h2><ul>
<li>确定适合自己的会议及topic</li>
<li>也可以先投稿比自己预估的更好的期刊或会议<br>  可以试试水<br>  还可以拿到<strong>比较专业的review</strong></li>
<li>Rebuttal<br>   确保文章的<strong>创新、有效、完整</strong></li>
</ul>
<h2 id="求职"><a href="#求职" class="headerlink" title="求职"></a>求职</h2><p>多总结职业路线</p>
<ul>
<li>科研路线</li>
<li>创业路线</li>
<li>企业路线</li>
<li><strong>不确定方向，就先都准备着</strong></li>
</ul>
<h2 id="企业路线"><a href="#企业路线" class="headerlink" title="企业路线"></a>企业路线</h2><ul>
<li>刷题 LeetCode</li>
<li>简历 <strong>竞赛</strong>，<strong>文章</strong>，专利，<strong>获奖</strong>，<strong>实习</strong>（硕士）等很重要</li>
<li>投递简历<strong>最好内推</strong></li>
<li>面试要有自信，<strong>自己的东西一定要清楚</strong></li>
<li>多了解职位信息</li>
<li>双向面试</li>
<li>尽可能多面试</li>
<li>选择<ul>
<li>Follow your heart!</li>
<li>公司最关心的是你能干多少活。</li>
<li>投递简历: yueying.kao@samsung.com</li>
</ul>
</li>
</ul>
<hr>
<p>下次论坛: <strong>数据挖掘</strong>（包含时间序列）</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>第21人工智能前沿学生论坛-数据挖掘</title>
    <url>/%E7%AC%AC21%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%89%8D%E6%B2%BF%E5%AD%A6%E7%94%9F%E8%AE%BA%E5%9D%9B-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<p>第21人工智能前沿学生论坛-数据挖掘。<a id="more"></a>收获不大。但明确了几个概念。VAE原来可以用来做无监督的异常检测。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><div class="pdfobject-container" data-target="数据挖掘2019-3-17.pdf" data-height="500px"></div>
<h1 id="套装搭配推荐在图神经网络上的应用-崔泽宇"><a href="#套装搭配推荐在图神经网络上的应用-崔泽宇" class="headerlink" title="套装搭配推荐在图神经网络上的应用-崔泽宇"></a>套装搭配推荐在图神经网络上的应用-崔泽宇</h1><p>搭配市场价值很大。面向商户，不需要实时。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给一个套装，输出一个打分。</p>
<p><strong>简化</strong>：给一个服装对，输出一个打分。</p>
<p>易监督化。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>训练数据——特征提取（CNN）——风格空间——距离优化（类kNN？）。</p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>Style2vec.</p>
<p>LSTM.</p>
<p>GNN.</p>
<h1 id="深度学习时代的个性化推荐-刘强"><a href="#深度学习时代的个性化推荐-刘强" class="headerlink" title="深度学习时代的个性化推荐-刘强"></a>深度学习时代的个性化推荐-刘强</h1><h2 id="个性化推荐"><a href="#个性化推荐" class="headerlink" title="个性化推荐"></a>个性化推荐</h2><p>信息爆炸。信息过载。</p>
<p>规则推荐模型——协同过滤模型——广义线性模型——深度学习模型。</p>
<p><strong>特征工程</strong>。</p>
<h2 id="深度推荐模型"><a href="#深度推荐模型" class="headerlink" title="深度推荐模型"></a>深度推荐模型</h2><h3 id="异质交互-显式交互"><a href="#异质交互-显式交互" class="headerlink" title="异质交互-显式交互"></a>异质交互-显式交互</h3><h3 id="异质交互-基于内外积"><a href="#异质交互-基于内外积" class="headerlink" title="异质交互-基于内外积"></a>异质交互-基于内外积</h3><h3 id="异质交互-基于张量计算"><a href="#异质交互-基于张量计算" class="headerlink" title="异质交互-基于张量计算"></a>异质交互-基于张量计算</h3><p>先进行特征变换（利用一个中间张量）。</p>
]]></content>
      <categories>
        <category>View</category>
      </categories>
  </entry>
  <entry>
    <title>科技与人文浅讨</title>
    <url>/%E7%A7%91%E6%8A%80%E4%B8%8E%E4%BA%BA%E6%96%87%E6%B5%85%E8%AE%A8/</url>
    <content><![CDATA[<p>科学技术与人文的简单讨论。<a id="more"></a></p>
<blockquote>
<p><em>《自然辩证法》小论文。</em></p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/thuthesis/thuthesis.pdf" target="_blank" rel="noopener external nofollow noreferrer">THUThesis</a></p>
<h1 id="科学技术与人文的范畴问题"><a href="#科学技术与人文的范畴问题" class="headerlink" title="科学技术与人文的范畴问题"></a>科学技术与人文的范畴问题</h1><p>什么样的事物会让人觉得科技感十足，什么样的事物又会让人觉得人文情怀丰满？一种常见的方式是将科技和人文对应到理性和感性思维上，但是从内涵上说，科技不是绝对的理性，人文也不是绝对的感性；甚至，理性和感性本身的界限也是模糊的。科技与人文在范畴上的异同，也是讨论科学技术与人文的其他相关话题的基础。</p>
<p>不妨从游戏（或者精确地讲，电子游戏）说起。电子游戏可以说是现代科技的一个代表作，但同时电子游戏也有“第九艺术”的美誉——这并非空穴来风。电子游戏的底层技术的确十分发达，为了开发游戏，程序员设计了另一个庞然大物——游戏引擎，在游戏引擎中集成了计算机图形学、仿真物理、博弈论等很多很多的知识，它们都是开发游戏将要用到的技术。一个高度集成化的游戏引擎的体量是极其庞大的。</p>
<p>但是，电子游戏的人文、艺术性也是十分浓厚的，就拿最近的《荒野大镖客2》和《最后生还者2》来举例，两者的游戏的底层技术差异并不大，都是所谓的“3A游戏”。但是，玩家对于两者的评价却是两极分化。《荒野大镖客2》凭借精美的剧情设计，在玩家群体中获得了一致好评；《最后生还者2》却因为在剧情上的重大失误，尽管游戏画面和游戏技术无可挑剔，仍然获得非常低的评价。也就是说，在电子游戏领域，单纯的技术优势已经无法让消费者满意了。在近些年开始蓬勃发展的独立游戏浪潮，就是一种对个性化、创新这一类人文性的需求的具现。</p>
<p>再谈谈科幻。科幻算是科学技术和人文结合得最好最紧密的领域。现代的科幻已经不再是简简单单指代科学幻想文学，而是延伸到了电影、电视等新兴多媒体媒介上。几乎所有的知名的科幻作品其内核中一定会有经典的科技知识以及深入的人文话题的讨论。比如刘慈欣所著的《球状闪电》，它既涉及到对大气物理学、军事技术等相关科技的描写——整个故事情节也是被球状闪电这样一种尚未解决的科学问题所推进的，也涉及到各种各样的人文思考，包括科学家对未知事物的强烈好奇心，理想主义者为达目的不择手段、前苏联黑暗压抑的修正主义时代等人文精神。阿西莫夫作为划时代的科幻作家，在他的作品里通常充满了人与机器的人文思考，但是他也同时追逐着极度的理性和逻辑，比如阿西莫夫常常提到的机器人三定律，定律之间的相互关系和证明细节常常成为他的某个故事的核心。比如，缺少了第二定律或者第三定律的机器人会有什么的神奇表现？阿西莫夫通过一个个故事展现。</p>
<p>可以看到，科学技术和人文的结合在很多场景下，都表现为同一个事物的不同侧面。有言：“科学的终极通向数学，数学的终极通向哲学”。</p>
<h2 id="第三类"><a href="#第三类" class="headerlink" title="第三类"></a>第三类</h2><p>现代科技的确在与时俱进、日新月异，但是除了重大科技突破还能引起关注以外，更多的人把目光投射到了非技术的事物上。我们又不禁思考：非科技的，就一定是人文吗？似乎在主流的谈论中，都自然地讨论着科技和人文的或对立、或融合的命题，并引出无限的思辨；可是，除了科技和人文，这世上还有很多无法归类的朴素信息。</p>
<p>不妨称之为：“第三类”。</p>
<p>比如说，一块石头，一只苹果。因为缺少与人类社会的联系，我们很难判断它具有科技或人文的意义。但是，这些事物又常常是大千世界的主要组成部分，它们与社会脱离，不如称之为自然。</p>
<p>因为，我们必须意识到，我们所讨论的科技与人文的总范畴是十分有限的，只有与人类行为相关的事物才可以讨论科技、人文的相关话题。在这样的约束下，我的讨论不至于产生严重的歧义。</p>
<p>然而恩格斯在《自然辩证法》中也提到，科学技术源起自然科学，科学技术和自然有着不可分割的关系。那么我们要如何看待自然、科技、人文三者之间的关系呢？</p>
<h2 id="三足鼎立"><a href="#三足鼎立" class="headerlink" title="三足鼎立"></a>三足鼎立</h2><p>虽然我们一开始探讨的只是科技和人文之间的范畴问题，但是我们发现，科技和人文的背后是自然，而自然是广袤世界的原初角色。</p>
<p>我们大致可以得到如下的Venn图：</p>
<img data-src="/%E7%A7%91%E6%8A%80%E4%B8%8E%E4%BA%BA%E6%96%87%E6%B5%85%E8%AE%A8/image-20201124191203432.png" class="" title="三足鼎立">
<p>科技和人文相互交织的同时，也都诞生于自然。除此之外，科技和人文向自然的交互也从未停止。科技与人文的交织我们在前文已经说明。</p>
<p>科技与自然的交互的表现，例如：物理学家从实验中探究物质的规律，人类用科技工具来改造自我的生存环境。恩格斯在《自然辩证法》一书中指出：“我们不要过分陶醉于对自然界的胜利。对于每一次这样的胜利，大自然都报复了我们。”可以看出，科技和自然的交互必须慎之又慎。</p>
<p>人文与自然的交互的表现，例如：诗人通过触景生情即兴赋诗，劳动人民用大众文化给枯燥的生活添加调剂。</p>
<p>理解科技、人文、自然的三足鼎立，是我们应该具有的认知。</p>
<h1 id="科学技术与人文的平衡问题"><a href="#科学技术与人文的平衡问题" class="headerlink" title="科学技术与人文的平衡问题"></a>科学技术与人文的平衡问题</h1><p>在有了范畴认知以后，我们会开始自然而然地思考科技与人文之间更细微的关系，这样的关系就是平衡问题。</p>
<p>在科技伦理中，最具代表性的算是生物医学。比如，对人类基因的实验与研究在现代社会（至少在21世纪初期）是受到严格约束的，包括对基因疾病的治疗也仅限于对体细胞DNA（不可遗传）的改造。除此之外，克隆（尤其是克隆人）、堕胎、整形等方面技术的研究和应用也受到严格的社会人文和法律环境的有力约束。许智宏在“科技伦理问题的思考”中提到：“……它的影响既有正面的，也有负面的。科学技术发展具有不确定性，这种不确定性的背后就是科技发展的风险。科技中的风险既有不确定性风险，也有争议性风险……”克隆人和母体的关系、胚胎有没有人权、克隆人是否可以具有和自然人一样的社会义务与权力……种种思考，体现了科技与人文在边界领域中广泛存在的冲突。随着时间演进，它们有的被解决，但从总体来说还在不断产生。</p>
<p>现代科学技术有着一些特点：知识总量剧增，大数据、碎片化时代正在来临；从研究到应用的周期越来越短；研究领域拓宽，研究程度愈加深入，学科交叉使传统学科之间的界限模糊化，前沿领域和新兴领域如雨后春笋般涌现；支撑现代科技发展，需要高的经费投入。</p>
<p>在科技对社会的影响力日益增大的同时，现代社会的发展对科学技术也表现出越来越强的依赖。发展科技的同时，平衡科技与社会人文的关系，成了一个越来越突出的矛盾……</p>
<p>我们应该通过唯物辩证法的方式来平衡科技与人文的关系。人文所代表的从精神层面出发的立场，从本质上来说仍然是因为科技发展而带来的。在三百年前，不会有人想到电灯电话、触屏手机，自然也就没有可能讨论信息社会、增强现实等深入的话题；新科技的出现推动着新思潮的出现。同样，人文精神的升华和激辩，使得人类社会对待科技的态度变得谨慎，在战争中规定使用特定形状的子弹、达成核不扩散条约、从模拟人脑的结构中寻求发展下一代人工智能，科研工作者从人文精神的传播中，获得了灵感和理性。</p>
<p>科技和人文的绝对平衡是不存在的，它们遵循的是辩证统一的关系。双方螺旋式上升，你追我赶，互相对抗的同时，又促进了对方的发展。因此，在人类文明的一小段时期内出现的科技和人文发展的不平衡问题，实际上并不是一个关键问题，甚至并不算一个问题。当人类社会把目光放得更长远，就能看到更为清晰的发展脉络。</p>
<h1 id="科学技术与人文的发展问题"><a href="#科学技术与人文的发展问题" class="headerlink" title="科学技术与人文的发展问题"></a>科学技术与人文的发展问题</h1><p>然而只有发展脉络，并不能直接得到人类社会以后发展的方向。这其中有太多尚未探知的自然因素在悄悄影响人类发展的上界和道路。</p>
<p>未来将会怎么样？这是一个永恒热门的话题。然而现代社会似乎一直在加速发展，无论是科技还是人文，都在日新月异，人们的生活环境和思想观念都在时刻发生着改变。</p>
<p>思考未来是科幻天生的使命。刘慈欣在他的科幻评论“关于人类未来的断想”中，写道，“没有永恒不变的人性，没有真正高尚的道德，一切的标准都有前提。我们如今所珍视的对于自由的向往，在中世纪被认为是一种病态。那时人们尊重的是’忠诚‘’勇敢‘，你要随时勇于赴死。在未来，道德也必将因为条件的改变而改变。”从中我们可以看到，未来社会不仅在科技上发生巨变，人文精神也会变得面目全非。在没有物质基础的情况下，我们很难直接想象未来社会的形态。</p>
<p>但是这并不妨碍我们去构想未来社会可能存在的形态，甚至去探讨未来社会可能拥有的那些不可名状的超现实科技。尽管我们的想象力有限，但在现有的知识框架下，我们还是能推导出一些有价值的东西的。</p>
<p>关于永生。科技对人类带来的可能最大的变化就生命的续航问题。我们已经在不断接近一个通向永生的阶梯，这一代人或者下一代人就很可能搭上通向永生的列车。科技并不需要一次性研究出永生技术，而只要及时地研制成增加寿命的技术，如冬眠、克隆器官、端粒修复……我们就能一步一步地通向永生的未来。而永生的出现，将会极大地改变人类社会的形态。这是亿万年来人类社会中从未出现的最大的差异——生命上的不平等。掌握永生密码的人，将改变对有限时间内社会和生活的认知，他们的视野将变得无比开阔；而没有抓住永生机会的人，在知道死亡并非不可避免以后，也会对很多原有的价值观产生致命的冲击。</p>
<p>关于虚拟现实。如果说永生是人类深藏在基因里的原始欲望，虚拟现实则是可以让他们甚至忘掉原始本能的技术。想象如果可以在虚拟现实中获得与真实毫无区别的全套幸福体验，那么追逐永生的欲望就会彻底地变成享受当下的强烈渴望。作为信息化技术的终极形态，我们甚至可以延伸思考“是否真实宇宙本身也是某种形式的虚拟现实”这样形而上的问题。然而这还只是环境的虚拟化，当人类自身也完成了虚拟化，情况则更加不同。思想、品质、经历，一切塑造你的信息都将变成网络信息海洋上的洋流，“……深刻的思想、完美的心理和性格、高雅的艺术审美能力等，都成了商品，可以出卖和购买……”。</p>
<p>在未来也许有无数条路，科技和人文的发展都会超乎想象。用我们当代的认知和伦理去感受未来人类的情感，是一件白费力气的事。我们只能描绘出有限的未来的轮廓，甚至连这个轮廓的精确程度也不确定。我们受限于我们身处的时代。</p>
<p>尽管如此，我们仍然可以得到一个启发：<strong>无论未来发展成什么样子，我们做出的准备都将是不充分的</strong>。持有这样的信条，我们便可以不给自己定下任何限制。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><code>恩格斯. 自然辩证法. 人民出版社</code></p>
<p><code>刘慈欣. 最糟的宇宙, 最好的地球: 刘慈欣科幻评论随笔集. 四川科学技术出版社</code></p>
<p><code>阿西莫夫. 机器人短篇全集. 江苏文艺出版社</code></p>
<p><code>许智宏,黄小茹. 科技伦理问题的思考. 科学与社会. 2012,2（2）:1-8</code></p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>第二届AI与安全研讨会</title>
    <url>/%E7%AC%AC%E4%BA%8C%E5%B1%8AAI%E4%B8%8E%E5%AE%89%E5%85%A8%E7%A0%94%E8%AE%A8%E4%BC%9A/</url>
    <content><![CDATA[<p>第二届AI与安全研讨会。<a id="more"></a>安全行业，在我的理解中，是一种诞生于“卷”的学问。它是社会进化的产物。众所周知，网络安全的研究耗时耗力，如果引入高自动化的挖掘机制，就可能获得一些研究上的便利。AI可以助力网络安全，AI本身也存在着巨大的安全问题。现代的人工智能技术的安全性很差。对抗研究层出不穷。修修补补固然重要，但想要从根本上提升AI的安全性，必须要从框架和基础原理出发。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://s.alibaba.com/conference" target="_blank" rel="noopener external nofollow noreferrer">http://s.alibaba.com/conference</a></p>
<blockquote>
<p>只参加了上午场。</p>
</blockquote>
<img data-src="/%E7%AC%AC%E4%BA%8C%E5%B1%8AAI%E4%B8%8E%E5%AE%89%E5%85%A8%E7%A0%94%E8%AE%A8%E4%BC%9A/image-20201205090648183.png" class="" title="会议日程">
<h1 id="致辞-人工智能理论发展趋势"><a href="#致辞-人工智能理论发展趋势" class="headerlink" title="致辞 人工智能理论发展趋势"></a>致辞 人工智能理论发展趋势</h1><blockquote>
<p>张钹(b o^2)</p>
</blockquote>
<h2 id="算法的安全问题"><a href="#算法的安全问题" class="headerlink" title="算法的安全问题"></a>算法的安全问题</h2><p>现阶段的产业应用都是基于大数据深度学习 / 神经网络的。</p>
<p>——大数据 + 大模型 + 大计算能力。</p>
<ul>
<li>解决拟合从输入到输出的映射。<ul>
<li>序列 $\longrightarrow$ 序列</li>
</ul>
</li>
<li>实质是<strong><font color=red>向量计算</font></strong>。</li>
</ul>
<p>参数化的神经网络拟合能力极强。（千亿级大小的参数集）——通用映射 / 万能映射。</p>
<p>一般情况下性能不错，但存在严重的安全问题。</p>
<h2 id="鲁棒性问题"><a href="#鲁棒性问题" class="headerlink" title="鲁棒性问题"></a>鲁棒性问题</h2><ul>
<li><strong>对测试集的鲁棒性极差</strong>，泛化能力<ul>
<li>应用场景非常有限</li>
</ul>
</li>
<li>对非对抗噪声的鲁棒性很差<ul>
<li>传统信息处理中也存在这样的问题</li>
</ul>
</li>
<li><strong>对对抗性噪声的鲁棒性几乎等于0</strong><ul>
<li>深度学习面临的最大挑战，算法本身的不安全</li>
<li>容易被滥用、误用、被攻击</li>
</ul>
</li>
</ul>
<p>向量空间和语义空间的度量不一样，不能抵抗干扰。</p>
<p>概率建模无法避免发生重大错误的情况。这和人的犯错是不同的。</p>
<blockquote>
<p>在机器翻译中，可能映射出完全没有意义的话。</p>
</blockquote>
<h2 id="第三代人工智能"><a href="#第三代人工智能" class="headerlink" title="第三代人工智能"></a>第三代人工智能</h2><blockquote>
<p><a href="https://vel.life/阅《迈向第三代人工智能》/" target="_blank" rel="noopener external nofollow noreferrer">阅《迈向第三代人工智能》</a></p>
</blockquote>
<p>所有的人工智能应用领域都是在求解语义问题。</p>
<p>在人工智能中注入<strong><font color=red>知识</font></strong>。——知识让安全更智能</p>
<h3 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h3><p>符号串 $\longrightarrow$ 向量</p>
<blockquote>
<p>如何在转换过程中确保语义不丢失？</p>
</blockquote>
<h2 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h2><p>知识数量 $\longrightarrow$ 动态、大规模的知识库。</p>
<blockquote>
<p>算法的实时性。。</p>
</blockquote>
<hr>
<h2 id="知识处理"><a href="#知识处理" class="headerlink" title="知识处理"></a>知识处理</h2><p>两条路：</p>
<ul>
<li>继续研究<strong><font color=deepskyblue>向量空间</font></strong><ul>
<li>最大挑战：<strong>语义丢失问题</strong></li>
</ul>
</li>
<li>走回知识驱动 + 数据驱动 $\longrightarrow$ <strong><font color=deepskyblue>符号空间</font></strong><ul>
<li><strong>在符号空间中，数学工具有限</strong><ul>
<li>朱军：符号空间的数学工具，将来大家将学习离散数学（<strong>数理逻辑</strong>），CS的还要学<strong>形式语言与自动机</strong>，<strong>组合数学</strong>，<strong>图论</strong>等相关课程，<strong>抽象代数</strong>（群、环、域）也相关</li>
</ul>
</li>
<li>缺少知识</li>
</ul>
</li>
</ul>
<blockquote>
<p>Q：在符号空间中，目前有哪些可用的数学工具？</p>
</blockquote>
<p>下一步：<strong><font color=blue>知识处理</font></strong>。大规模知识库 + 知识库的高效推理方法。</p>
<p>让计算机学习人类处理知识的过程。</p>
<h1 id="多媒体智能"><a href="#多媒体智能" class="headerlink" title="多媒体智能"></a>多媒体智能</h1><blockquote>
<p>朱文武</p>
</blockquote>
<p>朱文武老师最近写了一篇综述文章：Multimedia Intelligence: When multimedia meets intelligence…</p>
<p><strong>多媒体</strong>富含语义信息，可以为人工智能<strong>提供可解释性</strong>，拓宽机器学习的应用场景。（多模态机器学习）</p>
<p>当前机器学习存在的问题：<strong>不知其所以然</strong></p>
<h2 id="多媒体融合"><a href="#多媒体融合" class="headerlink" title="多媒体融合"></a>多媒体融合</h2><blockquote>
<p>PS. 我认为必须要借助多媒体融合，智能才能真正认识世界。</p>
<p>朱老师另一篇综述：Multi-Modal Deep Analysis for …</p>
</blockquote>
<p>将多模态信号融合，已完成特定机器学习任务。</p>
<p>可以进行关联分析。</p>
<h2 id="多媒体促进AI"><a href="#多媒体促进AI" class="headerlink" title="多媒体促进AI"></a>多媒体促进AI</h2><p>数据驱动与知识驱动<strong>协同</strong>。</p>
<p>知识和数据的融合：</p>
<ul>
<li>语义指导+数据驱动：关联表征学习</li>
<li>语义作为先验信息的贝叶斯学习</li>
</ul>
<h2 id="多媒体迁移"><a href="#多媒体迁移" class="headerlink" title="多媒体迁移"></a>多媒体迁移</h2><p>不同模态的知识丰富度不同。</p>
<p>语义对齐的方法：</p>
<ul>
<li>跨模态信息迁移</li>
<li>知识迁移</li>
</ul>
<h2 id="贝叶斯学习"><a href="#贝叶斯学习" class="headerlink" title="贝叶斯学习"></a>贝叶斯学习</h2><blockquote>
<p>朱军老师的工作</p>
</blockquote>
<p><strong><font color=red>小样本学习</font></strong>。有非常强的可推理性。</p>
<h2 id="AI促进多媒体"><a href="#AI促进多媒体" class="headerlink" title="AI促进多媒体"></a>AI促进多媒体</h2><p>增加多媒体可推理性。</p>
<ul>
<li>用RNN模仿人类的多步推理：论文 Compositional Attention Network…</li>
</ul>
<p>受关联推理启发的学习</p>
<ul>
<li>用GNN模仿人类的关联推理：论文 Boosting Visual Question Answering…</li>
</ul>
<p>感知-认知一体化学习</p>
<ul>
<li>多层次化。高层感知对应高层推理系统，低层次感知结果也有对应的推理形式。<ul>
<li>神经模块化网络：Perceptual Visual Reasoning…</li>
</ul>
</li>
</ul>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><h3 id="多媒体上的可解释推理"><a href="#多媒体上的可解释推理" class="headerlink" title="多媒体上的可解释推理"></a>多媒体上的可解释推理</h3><p>结合逻辑推理（一阶逻辑、逻辑编程语言）</p>
<h3 id="多媒体上的自主学习与推理"><a href="#多媒体上的自主学习与推理" class="headerlink" title="多媒体上的自主学习与推理"></a>多媒体上的自主学习与推理</h3><p><strong>环境自适应</strong>。</p>
<p>如何进行动态的自主学习？</p>
<ul>
<li>自适应学习 + 常识学习</li>
</ul>
<h3 id="未来媒体大数据推理：类人认知"><a href="#未来媒体大数据推理：类人认知" class="headerlink" title="未来媒体大数据推理：类人认知"></a>未来媒体大数据推理：类人认知</h3><p>像人一样认知、学习和推理。</p>
<h3 id="数据驱动-知识驱动"><a href="#数据驱动-知识驱动" class="headerlink" title="数据驱动 + 知识驱动"></a>数据驱动 + 知识驱动</h3><p>机器（数据驱动）；人类（知识驱动）。</p>
<p>目前做不到完全的知识驱动， 那么</p>
<ul>
<li>能不能两者结合，找到一个中间点？</li>
</ul>
<h1 id="AI的预设与挑战"><a href="#AI的预设与挑战" class="headerlink" title="AI的预设与挑战"></a>AI的预设与挑战</h1><blockquote>
<p>于剑 北交人智院长</p>
</blockquote>
<h2 id="AI公理化"><a href="#AI公理化" class="headerlink" title="AI公理化"></a>AI公理化</h2><p>聚类分析的公理化研究遭遇重挫。</p>
<ul>
<li>聚类不可能性定理：An impossible theorem .. </li>
</ul>
<p>希尔伯特的信念：”我们必须知道，我们终将知道。“——相信概念可以精确定义。</p>
<p>维特根斯坦《哲学研究》。</p>
<p><strong>概念</strong>：</p>
<ul>
<li>符号表示：名字</li>
<li>内涵表示：命题</li>
<li>外延表示</li>
</ul>
<p>隶属度模糊化</p>
<p>经典集合分层逼近</p>
<h3 id="概念内涵表示的进展"><a href="#概念内涵表示的进展" class="headerlink" title="概念内涵表示的进展"></a>概念内涵表示的进展</h3><p>经典理论</p>
<p>原型理论</p>
<p>样例理论</p>
<p>知识理论</p>
<hr>
<h2 id="机器学习公理化"><a href="#机器学习公理化" class="headerlink" title="机器学习公理化"></a>机器学习公理化</h2><p><strong>《机器学习：从公理到算法》，于剑</strong></p>
<h2 id="AI的三大流派"><a href="#AI的三大流派" class="headerlink" title="AI的三大流派"></a>AI的三大流派</h2><p>符号主义：指名</p>
<p>连接主义：指心</p>
<p>行为主义：指物</p>
<hr>
<p>基本假设：指名 = 指心 = 指物。</p>
<blockquote>
<p>符号空间 = 幻想空间 = 现实空间</p>
<p>Q：这三种指代构成划分吗？是完备的吗？</p>
</blockquote>
<h1 id="数据驱动和知识引导相互结合的智能计算"><a href="#数据驱动和知识引导相互结合的智能计算" class="headerlink" title="数据驱动和知识引导相互结合的智能计算"></a>数据驱动和知识引导相互结合的智能计算</h1><blockquote>
<p>吴飞 浙大人智所长</p>
</blockquote>
<h2 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h2><p>数据洪流（Data Torrent）第四范式。</p>
<ul>
<li>任务可学习</li>
<li>结果可信任</li>
<li>……</li>
</ul>
<h2 id="三种记忆体"><a href="#三种记忆体" class="headerlink" title="三种记忆体"></a>三种记忆体</h2><ul>
<li>瞬时记忆（多通道感知）</li>
<li>工作记忆（直觉、顿悟、因果）</li>
<li>长期记忆（先验、知识）</li>
</ul>
<h2 id="从图灵机到【神经图灵机】"><a href="#从图灵机到【神经图灵机】" class="headerlink" title="从图灵机到【神经图灵机】"></a>从图灵机到【神经图灵机】</h2><p>Deep Neural Reasoning</p>
<h2 id="数据驱动、知识引导与行为探索"><a href="#数据驱动、知识引导与行为探索" class="headerlink" title="数据驱动、知识引导与行为探索"></a>数据驱动、知识引导与行为探索</h2><p>归纳、演绎、顿悟。</p>
<blockquote>
<p>Q：顿悟？？？</p>
</blockquote>
<p>Reasoning, Attention, Memory (RAM)</p>
<hr>
<p><strong>潘云鹤</strong>近期文章：</p>
<ul>
<li>多重知识表达：言语表达、形象表达、神经网络表达</li>
<li>《<strong><font color=blue>中国迈向新一代人工智能</font></strong>》，机器智能子刊</li>
</ul>
<hr>
<p>引入因果关联，降低虚假关系的权重</p>
<p>人工智能辅助司法判案。因果分析。</p>
<hr>
<p>浙大人工智能MOOC。目前已发布3门课。</p>
<h1 id="人工智能驱动的网络空间内容安全"><a href="#人工智能驱动的网络空间内容安全" class="headerlink" title="人工智能驱动的网络空间内容安全"></a>人工智能驱动的网络空间内容安全</h1><blockquote>
<p>操晓春 信工所</p>
</blockquote>
<h2 id="跨媒体因果推断"><a href="#跨媒体因果推断" class="headerlink" title="跨媒体因果推断"></a>跨媒体因果推断</h2><p>常识数据模态单一，支持机制模式固定，没有大知识驱动……</p>
<p>建立大规模数据库。</p>
<p>数据驱动（社会计算） + 知识驱动（因果推断）。</p>
<h2 id="隐群体社会计算"><a href="#隐群体社会计算" class="headerlink" title="隐群体社会计算"></a>隐群体社会计算</h2><p>输入是多媒体内容，人与内容的关系可能表示为超边等各种复杂的结构。</p>
<p>Graph Attention Topic Model。</p>
<h2 id="高价值元素发现"><a href="#高价值元素发现" class="headerlink" title="高价值元素发现"></a>高价值元素发现</h2><p>Forgery Detection。</p>
<p>图像编辑。如何判断真假？</p>
<p>从图像中提取高价值元素。</p>
<h2 id="跨模态协同识别"><a href="#跨模态协同识别" class="headerlink" title="跨模态协同识别"></a>跨模态协同识别</h2><p>Seeking Latent Representation</p>
<p>High Order Consistency</p>
<p>Partial Multi-view Data —— Cycle GAN?恢复缺失值</p>
<p>Position bias 偏序打分</p>
<h2 id="对抗防御"><a href="#对抗防御" class="headerlink" title="对抗防御"></a>对抗防御</h2><p>attack tracking</p>
<h2 id="视觉增强"><a href="#视觉增强" class="headerlink" title="视觉增强"></a>视觉增强</h2><p>Dehazing 去模糊</p>
<p>Super-resolution</p>
<h2 id="因果推断"><a href="#因果推断" class="headerlink" title="因果推断"></a>因果推断</h2><h3 id="任务-特征协同解耦"><a href="#任务-特征协同解耦" class="headerlink" title="任务-特征协同解耦"></a>任务-特征协同解耦</h3><p>任务、特征构成二分图……</p>
<h1 id="驾驶情境理解与预测方法初探"><a href="#驾驶情境理解与预测方法初探" class="headerlink" title="驾驶情境理解与预测方法初探"></a>驾驶情境理解与预测方法初探</h1><blockquote>
<p>薛建儒 西交大</p>
</blockquote>
<h2 id="交通场景理解"><a href="#交通场景理解" class="headerlink" title="交通场景理解"></a>交通场景理解</h2><p>对传感器数据进行处理，形成<strong>结构化表征</strong>。</p>
<p>障碍物的运动分析——检测、跟踪。</p>
<ul>
<li>3D点云+图像分割 的语义分析。</li>
<li>路口车辆运动轨迹估计。</li>
</ul>
<h2 id="交通情境预测"><a href="#交通情境预测" class="headerlink" title="交通情境预测"></a>交通情境预测</h2><p>主动感知、意图预测……<strong><font color=red>运动决策依赖于预测</font></strong>。</p>
<p>记忆机制、注意机制。</p>
<p>多粒度注意力机制，对向量元素进行自主选择。</p>
<hr>
<p><strong>实现长时段的预测</strong>。</p>
<h1 id="神经-符号系统的一些探索"><a href="#神经-符号系统的一些探索" class="headerlink" title="神经-符号系统的一些探索"></a>神经-符号系统的一些探索</h1><blockquote>
<p>俞扬</p>
</blockquote>
<h1 id="动态深度神经网络"><a href="#动态深度神经网络" class="headerlink" title="动态深度神经网络"></a>动态深度神经网络</h1><blockquote>
<p>黄高</p>
</blockquote>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉回路拓展</title>
    <url>/%E7%AE%97%E6%B3%95-%E5%9B%BE%E8%AE%BA-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>如果图G中的一个路径包括每个边恰好一次，则该路径称为欧拉路径(Euler path)。</p>
<p>如果一个回路是欧拉路径，则称为欧拉回路(Euler circuit)。</p>
<p>具有欧拉回路的图称为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%9B%BE" target="_blank" rel="noopener external nofollow noreferrer">欧拉图</a>（简称E图）。具有欧拉路径但不具有欧拉回路的图称为半欧拉图。</p>
<h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><h2 id="欧拉回路的环扩展算法"><a href="#欧拉回路的环扩展算法" class="headerlink" title="欧拉回路的环扩展算法"></a>欧拉回路的环扩展算法</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>Ex：<a href="http://poj.org/problem?id=1392" target="_blank" rel="noopener external nofollow noreferrer">POJ1392：Ouroboros Snake【欧拉回路】</a> </p>
<p>简要题意：</p>
<blockquote>
<p>构造一个$2^n$位的<strong>循环数组</strong>，满足：</p>
<p>​    每次从中截取n位，能够遍历所有的n位2进制数。</p>
<p>如：<code>0110</code>数组，将遍历：<code>01</code>，<code>11</code>，<code>10</code>，<code>00</code>。</p>
</blockquote>
<p>可以采用DFS的方法。</p>
<p>@欧拉回路：</p>
<blockquote>
<p>每个点的入度=出度，则该图存在欧拉回路。</p>
</blockquote>
<p>示例：（4阶图）</p>
<p><img data-src="1533738094266.png" alt="1533738094266"></p>
<h3 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h3><p>先看dfs放在前和后的实际效果。（以<code>n=3</code>为例）</p>
<p>如下图所示：</p>
<p><img data-src="TTZHPTMF4_HOZVC8LXR~VLF.png" alt="两种的实际区别"></p>
<h4 id="使用的测试代码"><a href="#使用的测试代码" class="headerlink" title="使用的测试代码"></a>使用的测试代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//allOne = 2^(n-1) - 1 = 100.. - 1 = 0111.. </span></span><br><span class="line"><span class="comment">//vis:vis[i][u]表示从u出发值为i的边 (初始须置0状态，bool型)</span></span><br><span class="line"><span class="comment">//ans:答案 （初始须置0状态，string型）</span></span><br><span class="line"><span class="comment">//u：当前所在节点，2^(n-1)个 </span></span><br><span class="line"><span class="comment">//求欧拉回路，欧拉回路一定存在【入度=出度】 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dex = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; dex; ++r) <span class="built_in">cout</span>&lt;&lt;<span class="string">"  "</span>; </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"节点"</span>&lt;&lt;<span class="built_in">bitset</span>&lt;3&gt;(u)&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i) <span class="comment">//兵分两路 </span></span><br><span class="line">        <span class="keyword">if</span>(!vis[i][u]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ((u &lt;&lt; <span class="number">1</span>) | i) &amp; allOne;    <span class="comment">//将u左移一位，然后将最低位置为i，再将最高位去掉 </span></span><br><span class="line">            vis[i][u] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            dfs(v, dex + <span class="number">1</span>);    <span class="comment">//递归v，加入数字到ans中</span></span><br><span class="line">            </span><br><span class="line">            ans.push_back(<span class="string">'0'</span> + i);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(<span class="string">'0'</span> + i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//dfs(v, dex + 1);    //后递归测试 </span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测例分析"><a href="#测例分析" class="headerlink" title="测例分析"></a>测例分析</h3><h4 id="对本题基本的分析"><a href="#对本题基本的分析" class="headerlink" title="对本题基本的分析"></a>对本题基本的分析</h4><blockquote>
<p>声明：以下的所有讨论，除非特殊说明，“环”均不包括一个点的自环。（即，忽略<code>000..</code>和<code>111..</code>的自环）</p>
</blockquote>
<p>我们建立n=3时的欧拉图。</p>
<p><img data-src="685751974715009958.jpg" alt="685751974715009958"></p>
<p>可以看到</p>
<ul>
<li><p>两者<strong>点的遍历顺序一致</strong>。</p>
</li>
<li><p>对于<strong>后DFS</strong>[先记录]，它的性质是真正的DFS。</p>
<blockquote>
<p>观察序列W(Wrong)：<strong>01</strong>001101，可以看到从<code>00</code>点开始，先搜索自己【000边】，再搜索001边，接着从<code>01</code>点继续深度搜索<code>10</code>点……</p>
<p>此时，因为是<strong>先记录</strong>，可能会<strong>提前成环</strong>。即：路径<code>0100</code>。（DFS返回了<code>00</code>点）而本题的子环是相当密集的。</p>
<p>DFS最终形成的是一棵<strong>搜索树</strong>。</p>
<p>​    考虑DFS过程中可能出现的<strong>Backward边</strong>（子-&gt;父），即可扩展定义环。</p>
<p>联想忒修斯的绳索。这里从略。</p>
</blockquote>
</li>
<li><p>对于<strong>前DFS</strong>[后记录]，它的性质才是欧拉图所要求的。这里称为“<strong>环扩展算法</strong>”。</p>
<blockquote>
<p>观察序列C(Correct)：00111010。</p>
<p>第一个环：<code>00-01-10-00</code>，第二个环：<code>01-11-10-01</code>。</p>
<p>我们发现一个奇妙的性质：</p>
<p>​    对于n=3的欧拉图，整个欧拉图可以被分为<strong>两个环的</strong>(无重复)<strong>复合</strong>。</p>
<p>……我们是否可以推广这个结论呢？</p>
</blockquote>
</li>
</ul>
<h4 id="验证、推广"><a href="#验证、推广" class="headerlink" title="验证、推广"></a>验证、推广</h4><p>给出n=4时的“<strong>环扩展算法</strong>”：</p>
<p><img data-src="1531030074386.png" alt="1530885513558"></p>
<blockquote>
<p>从图中我们可以直观地得到n=4欧拉图被分成了3个子环。</p>
</blockquote>
<h4 id="最终理论"><a href="#最终理论" class="headerlink" title="最终理论"></a>最终理论</h4><blockquote>
<p>我们可以继续做更高阶的测试。</p>
<p>​    n=5，类似的，分成4个子环。</p>
<p>​    n=6，5个子环。</p>
<p>​    ……</p>
</blockquote>
<p>从中我们可以得出一个重要推论：</p>
<blockquote>
<p><strong>N欧拉状态图可以被分为N-1个子环</strong>。</p>
</blockquote>
<h4 id="环扩展算法有效的原理"><a href="#环扩展算法有效的原理" class="headerlink" title="环扩展算法有效的原理"></a>环扩展算法有效的原理</h4><p>回到n=3时的欧拉图。</p>
<p><img data-src="685751974715009958.jpg" alt="685751974715009958"></p>
<p>第一个环：<code>00-01-10-00</code>，第二个环：<code>01-11-10-01</code>。</p>
<p>规律：</p>
<blockquote>
<p>1.从<code>00</code>点出发(忽略自环)。</p>
<p>2.采取的策略——每次尽可能取0。</p>
<p>​    该策略能保证，<strong>每次的路线总能回到出发点</strong>。</p>
<p>【这样的保证是直接由欧拉图的性质决定的，因为：<strong>所有点的出/入度为偶数，起点必为终点</strong>。】</p>
</blockquote>
<p>（不严格的）证明：【需改进】</p>
<blockquote>
<p>对于任意一个n位二进制序列。</p>
<p>从<code>000..(n-1)</code>节点开始（忽略自环）</p>
<p>​    初始序列<code>000..01(n)</code>，左移。尽可能补0。</p>
<p>​    序列中仅含1个<code>1</code>。显然，经n步可回至初始状态。</p>
<p>从图中移除所有已遍历的边，更新欧拉图。即，将第一个环等效地<strong>缩并</strong>为<code>000..01(n-1)</code>节点的自环。</p>
<p><code>000..01(n-1)</code>节点将成为新的初始节点。</p>
<p>​    初始序列<code>000..011(n)</code>，左移。尽可能补0。</p>
<p>……</p>
<p>共n-1轮。</p>
<blockquote>
<p>实际上，以上的思路可以按欧拉图的性质简化为：</p>
<p>每轮都能成环，而更新的欧拉图（从图中去掉本轮的环）仍然具有欧拉图的性质，因此最终一定会遍历所有边。</p>
</blockquote>
<p>加上两次自环：<code>000..0(n)</code>和<code>111..1(n)</code>。</p>
<p>此时所有n位2进制数被遍历。（假装）证毕233。</p>
<p>而且由于对称性，我们可以预测，第<code>i</code>个环和第<code>n-i</code>个环的长度是相同的。</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>对于n=3的情况（如上图），该过程可以描述为：</p>
<ul>
<li>从<code>00</code>点出发，先0自环，然后1到达<code>01</code>，接着0-0回到<code>00</code>。</li>
<li><code>00</code>点没有出路，顺移到其后继<code>01</code>点，继续，1-0-0回到<code>01</code>。此时遍历了所有边。</li>
<li>由于两个子环互不干扰，可以按以下逻辑复合：<ul>
<li>第一个环：<code>00-01-10-00</code>，根据第二个环，可以<strong>展开</strong><code>01</code>节点，用第二个环<strong>替代</strong>。（由于自环的展开是平凡的，这也成为我们忽略自环的一个原因）</li>
<li>最终<strong>复合</strong>为：<code>00-01-11-10-01-10-00</code>。</li>
</ul>
</li>
</ul>
<p>Plus. 联想Graham扫描算法，内在逻辑似乎很相似。</p>
</blockquote>
<h4 id="解的不唯一性-展开节点"><a href="#解的不唯一性-展开节点" class="headerlink" title="解的不唯一性-展开节点"></a>解的不唯一性-展开节点</h4><p>由于每一次的<strong>展开</strong>是不唯一的（可以从环的不同节点展开），可以预见到解法的不唯一性。环扩展算法只是找到了其中一种。</p>
<p>比如：（n=3）</p>
<blockquote>
<ul>
<li>第一个环：<code>00-01-10-00</code>，第二个环<code>01-11-10-01</code>可以等效地看作<code>10-01-11-10</code>，于是也可以<strong>展开</strong><code>10</code>节点，用第二个环<strong>替代</strong>。</li>
<li>最终<strong>复合</strong>为：<code>00-01-10-01-11-10-00</code>。</li>
</ul>
</blockquote>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="修改策略"><a href="#修改策略" class="headerlink" title="修改策略"></a>修改策略</h4><p>将原来测试代码的“兵分两路”修改为<strong>逆向循环</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) <span class="comment">//兵分两路</span></span><br></pre></td></tr></table></figure>
<p>即，采用<strong>新策略</strong>：</p>
<blockquote>
<p>每次<strong>尽可能取1</strong>。</p>
</blockquote>
<p>可以发现一个非常奇妙的现象，如下图：（n=3）</p>
<p><img data-src="1531016147457.png" alt="1531016147457"></p>
<p>我们可以继续测试：</p>
<blockquote>
<p>n=4</p>
</blockquote>
<p><img data-src="1531016307970.png" alt="1531016307970"></p>
<p>以及更高阶。（此处省略）</p>
<p>首先抛出结论：</p>
<blockquote>
<p>对于新策略：</p>
<p>​    每次<strong>尽可能取1</strong>。</p>
<p>前DFS（真）和后DFS（环扩展）的结果<strong>都是正确的</strong>，其结果是<strong>相反</strong>的。</p>
</blockquote>
<p>（不严格的）证明：</p>
<blockquote>
<p>对于每次<strong>尽可能取1</strong>的策略，我们可以合理地预测当所有路径没有被完全经历时，不可能提前回到<code>000..</code>节点。</p>
<p>因为：尽可能取1，意味着通向<code>000..</code>节点的<code>0策略边</code>必定是最后执行。</p>
<p>这样的分析可以推广到每一个节点：</p>
<blockquote>
<p>对于$\forall$节点，其指向外界的<code>0策略边</code>必定是最后执行的。</p>
</blockquote>
<p>从而证明了结论。</p>
</blockquote>
<p>此时，可能会更加体会到两种方法（前/后）的根本区别。</p>
<p>这样的结果意味着什么呢？</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>回到n=3，如下图：</p>
<p><img data-src="1531018432265.png" alt="685751974715009958"></p>
<p>我们来分析<strong>到底发生了什么</strong>。（也可以尝试自己先分析一下）</p>
<blockquote>
<p>先给出每次<strong>尽可能取0</strong>的环扩展的线路图。红圈处为展开节点。绿圈为第1个环，粉圈为第2个环。</p>
</blockquote>
<p><img data-src="1531018156419.png" alt="1531018156419"></p>
<blockquote>
<p>再给出每次<strong>尽可能取1</strong>的DFS的线路图。（两种方法的线路一致）</p>
</blockquote>
<p><img data-src="1531018570690.png" alt="1531018570690"></p>
<p>事实上，此时，<strong>DFS将一次就找到欧拉回路</strong>！因此前、后是等效的！</p>
<p>这两种策略的DFS<strong>对子环的划分是不同的</strong>。</p>
<blockquote>
<p>对于每次<strong>尽可能取1</strong>的策略，其线路图可以等效地看作下图的一个划分【紫圈+蓝圈】。</p>
</blockquote>
<p><img data-src="1531018948529.png" alt="1531018948529"></p>
<h4 id="解的不唯一性-子环划分"><a href="#解的不唯一性-子环划分" class="headerlink" title="解的不唯一性-子环划分"></a>解的不唯一性-子环划分</h4><p>事实上，对于n=3，在之前已经找到了两种路线：</p>
<blockquote>
<ol>
<li><code>00-01-11-10-01-10-00</code>。（展开节点<code>01</code>）</li>
<li><code>00-01-10-01-11-10-00</code>。（展开节点<code>10</code>）</li>
</ol>
</blockquote>
<p>若<strong>考虑子环划分的不同</strong>，我们将新增两种路线：（【紫+蓝】图）</p>
<blockquote>
<ol>
<li><code>00-01-11-10-01-10-00</code>。（展开节点<code>10</code>）</li>
<li><code>00-01-10-01-11-10-00</code>。（展开节点<code>01</code>）</li>
</ol>
</blockquote>
<p>容易看到，1、2与对应新增的3、4是<strong>完全一致</strong>的。这侧面映证了我们改进的思路是正确的。</p>
<p>此时，不同的子环划分，能够得出相同的多解。</p>
<blockquote>
<p>仍然保证解的不唯一性。</p>
</blockquote>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="更改初始节点"><a href="#更改初始节点" class="headerlink" title="更改初始节点"></a>更改初始节点</h4><p>尝试<strong>进一步</strong>将原来测试代码的dfs初始节点设置为其他节点：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">2</span>);</span><br><span class="line">dfs(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>可以观察到以下：（n=3）</p>
<blockquote>
<p>dfs(1);</p>
</blockquote>
<p><img data-src="1531023939934.png" alt="1531023939934"></p>
<blockquote>
<p>dfs(2);</p>
</blockquote>
<p><img data-src="1531023748305.png" alt="1531023748305"></p>
<blockquote>
<p>dfs(3); （结合环扩展算法的<code>0</code>优先策略，可以发现极强的对称性）</p>
</blockquote>
<p><img data-src="1531023787510.png" alt="1531023787510"></p>
<p><strong>无论从哪个节点出发，均可以得到解</strong>！（更高阶不再赘述）</p>
<p>Plus. 不修改策略，也可以得到相同的结论。（但方法必须是环扩展，不是平凡~）</p>
<p>因此，</p>
<blockquote>
<p>修改策略的实质是利用了0和1的对称性。</p>
</blockquote>
<h4 id="重要启发"><a href="#重要启发" class="headerlink" title="重要启发"></a>重要启发</h4><p>但，这给了我们另一个<strong>重要的启发</strong>。</p>
<p>我们对所有n的情况，统一设置<code>111..11</code>节点为初始点。即</p>
<blockquote>
<p>dfs($2^{n-1}-1$);</p>
</blockquote>
<p>例如，n=3：</p>
<p><img data-src="1531025354567.png" alt="1531025354567"></p>
<p>此时，<strong>平凡的DFS算法</strong>，又将得到正确解！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>采用<strong>前DFS</strong>的根本原因是：</p>
<blockquote>
<p><strong>本题的欧拉图是多环的</strong>。（此处，忽略<code>000..</code>和<code>111..</code>的自环）</p>
<p>搜索的迭代起始点是<code>000..</code>（<code>111..</code>等效），抗局部环干扰能力极弱。（只有1次进出机会）</p>
</blockquote>
<p>​    由于欧拉图多环，深度优先搜索不一定能在第一次就找到能遍历所有节点的环。</p>
<p>而我们的目的是：</p>
<blockquote>
<p><strong>找到遍历所有节点、边的广义环</strong>。</p>
</blockquote>
<p>​    因此，必须排除一切的<strong>局部环</strong>。</p>
<p>借助本题欧拉图的性质：</p>
<blockquote>
<p>N欧拉状态图可以被<strong>划分</strong>为N-1个子环。（“划分”就是不多不少的分割）</p>
<p>或，N欧拉状态图可以被<strong>划分</strong>为N-1个环+2个自环。【考虑自环】</p>
</blockquote>
<p>利用<code>基于DFS改良的环扩展算法</code>，即可求解N欧拉状态图。（<strong>多次复合</strong>）</p>
<p>利用<code>基于策略的改进</code>或<code>更改初始节点</code>，可以使得平凡的DFS算法也能得到正确解。（<strong>一次成功</strong>）</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/10036484?fr=aladdin" target="_blank" rel="noopener external nofollow noreferrer">欧拉回路</a>（百度百科）</p>
<p><a href="https://www.cnblogs.com/zmin/p/6947266.html" target="_blank" rel="noopener external nofollow noreferrer">初学算法之最基础的欧拉回路</a></p>
<p><a href="https://www.cnblogs.com/acxblog/p/7390301.html" target="_blank" rel="noopener external nofollow noreferrer">[模板][持续更新]欧拉回路与欧拉路径浅析</a></p>
<p>uoj #117. <a href="https://blog.csdn.net/qq_33229466/article/details/80813033" target="_blank" rel="noopener external nofollow noreferrer">欧拉回路 圈套圈算法求欧拉回路</a></p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>第十八期人工智能前沿学生论坛——语音识别前沿技术</title>
    <url>/%E7%AC%AC%E5%8D%81%E5%85%AB%E6%9C%9F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%89%8D%E6%B2%BF%E5%AD%A6%E7%94%9F%E8%AE%BA%E5%9D%9B%E2%80%94%E2%80%94%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>近年来智能语音进入了快速增长期，语音识别作为语音领域的重要分支获得了广泛的关注，如何提高声学建模能力和如何进行端到端的联合优化是语音识别领域中的重要课题。活动由 <a href="https://mustedu.cn/Hd/" target="_blank" rel="noopener external nofollow noreferrer">人工智能前沿学生论坛 </a> 主办。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><strong><a href="./Exploring Neural Transducers for End-to-End Speech Recognition.pdf">Exploring Neural Transducers for End-to-End Speech Recognition</a></strong></p>
<p><strong><a href="./Query-by-example keyword spotting using long short-term memory networks.pdf">Query-by-example keyword spotting using long short-term memory networks</a></strong></p>
<p><strong><a href="./Lattice Indexing for Spoken Term Detection.pdf">Lattice Indexing for Spoken Term Detection</a></strong></p>
<p><strong><a href="./Exploring Architectures, Data and Units For Streaming End-to-End Speech Recognition with RNN-Transducer.pdf">Exploring Architectures, Data and Units For Streaming End-to-End Speech Recognition with RNN-Transducer</a></strong></p>
<h1 id="语音关键词检测方法综述"><a href="#语音关键词检测方法综述" class="headerlink" title="语音关键词检测方法综述"></a>语音关键词检测方法综述</h1><blockquote>
<p><a href="./A Survey on KWS.pdf">PPT</a>。</p>
</blockquote>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>随着智能音箱、语音助手等应用的出现，普通人也可以像科幻场景一样使用语音与机器进行交流。语音关键词检测是实现人机语音交互的重要技术，被广泛地应用于各类智能设备、语音检索系统当中。语音关键词检测可以分成两种，一种是用于设备唤醒、设备控制keyword spotting；一种是应用于语音文档检索的spoken term detection，二者虽然名字类似，但从功能侧重和技术路线上都有所区别。本次分享介绍语音关键词检测的主要方法与最新进展。</p>
<h2 id="语音关键词检测介绍"><a href="#语音关键词检测介绍" class="headerlink" title="语音关键词检测介绍"></a>语音关键词检测介绍</h2><p>一个语音的小方向。A survey on keyword spotting.（keyword search, spoken term detection）</p>
<p>主流：语音识别、增强。关键词检测技术正在变得重要。</p>
<p>从一段连续语音中检测关键词。（异常检测？）</p>
<p><strong>Ex</strong>.</p>
<blockquote>
<p>语音智能设备：<strong>唤醒词</strong>识别。</p>
<ul>
<li>关键词，厂家指定</li>
<li>低内存</li>
<li>低计算</li>
<li>低功耗</li>
</ul>
<p><strong>语音检索</strong>keuword search（在长篇audio中检测，利用keyword截取关键信息片段）。</p>
<ul>
<li>可变化</li>
<li>长文本定位</li>
<li>超出词汇？（OOV，out of vocabulary），新知识往往指向新词汇，棘手</li>
</ul>
</blockquote>
<h2 id="基于HMM的语音关键词检测"><a href="#基于HMM的语音关键词检测" class="headerlink" title="基于HMM的语音关键词检测"></a>基于HMM的语音关键词检测</h2><p><strong><a href="./Exploring Neural Transducers for End-to-End Speech Recognition.pdf">Exploring Neural Transducers for End-to-End Speech Recognition</a></strong></p>
<blockquote>
<p>In this work, we perform an empirical comparison among the CTC, RNN-Transducer, and attention-based Seq2Seq models for end-to-end speech recognition. We show that, without any language model, Seq2Seq and RNN-Transducer models both outperform the best reported CTC models with a language model, on the popular Hub5’00 benchmark. On our internal diverse dataset, these trends continue - RNN Transducer models rescored with a language model after beam search outperform our best CTC models. These results simplify the speech recognition pipeline so that decoding can now be expressed purely as neural network operations. We also study how the choice of encoder architecture affects the performance of the three models - when all encoder layers are forward only, and when encoders downsample the input representation aggressively.</p>
</blockquote>
<p><strong>Filler Models</strong>：逐帧的<strong>序列标注</strong>问题。非关键词称为garbage段，对非关键词和关键词段进行分别建模。</p>
<p>1989年，对每一个关键词建立一个HMM。（基于Filler model）</p>
<p>其概率模型可以利用GMMs or DNNs建模。</p>
<p>HMM based：</p>
<blockquote>
<p>2017，HMM示意图。对于每一个音素进行声学建模。（解码，手工设计）</p>
<p>类似于KMM算法。图灵自动机？</p>
</blockquote>
<p>DNN based：</p>
<blockquote>
<p>连续语音分为窗口，利用神经网络进行分类。（预测片段是关键词的概率）</p>
<p>可能还需要平滑处理。</p>
<p>无须HMM的解码（动态规划）。</p>
<p>难度：<strong>很难找到现存的语料</strong>。</p>
<p>2014</p>
</blockquote>
<h2 id="基于Sample查询的语音关键词检测（QBE）"><a href="#基于Sample查询的语音关键词检测（QBE）" class="headerlink" title="基于Sample查询的语音关键词检测（QBE）"></a>基于Sample查询的语音关键词检测（QBE）</h2><p><strong><a href="./Query-by-example keyword spotting using long short-term memory networks.pdf">Query-by-example keyword spotting using long short-term memory networks</a></strong></p>
<blockquote>
<p>We present a novel approach to <strong>query-by-example keyword spotting</strong> (KWS) using a <strong>long short-term memory</strong> (LSTM) recurrent neural network-based feature extractor. In our approach, we represent each keyword using a fixed-length feature vector obtained by running the keyword audio through a word-based LSTM acoustic model. We use the activations prior to the softmax layer of the LSTM as our keyword-vector. At runtime, we detect the keyword by extracting the same feature vector from a sliding window and computing a simple similarity score between this test vector and the keyword vector. With clean speech, we achieve 86% relative false rejection rate reduction<br>at 0:5% false alarm rate when compared to a competitive phoneme posteriorgram with dynamic time warping KWS system, while the reduction in the presence of babble noise is 67%. Our system has a small memory footprint, low computational cost, and high precision, making it suitable for on-device applications.</p>
</blockquote>
<p>匹配（match）。</p>
<p>关键词作为一个<strong>模式</strong>（pattern）被存储起来。</p>
<p>可以个性化定义关键词。</p>
<p>DTW based：（动态时间弯折，DP算法）</p>
<blockquote>
<p>基于语音识别。</p>
<p>计算两个时间序列的相似度。</p>
<ul>
<li>转化为同态序列</li>
<li>动态规划计算（最长子序列？）<ul>
<li>每步做归一化处理</li>
<li>单调、连续</li>
</ul>
</li>
</ul>
<p>1975、1978</p>
<p>用在KWS里需要稍作修改。</p>
<ul>
<li>分段（2），类似CV的滑动窗口</li>
<li>不分段（2），先贪心到一个最优窗口，再在窗口内匹配（会不会收敛到local？）</li>
</ul>
</blockquote>
<p>feature representation：</p>
<ul>
<li>MFCC，FBANK</li>
<li>Posteriorgram（GMM，DNN）后验概率图</li>
<li>DNN，Autoencoder</li>
</ul>
<p>DTW的缺点：</p>
<ul>
<li>需要多项式时间</li>
<li>可能影响精度</li>
</ul>
<p>Enbedding（嵌入）：（神经网络）</p>
<p>向量编码，计算相似度。</p>
<p>2015，陈——预处理词分类器（Softmax），作为特征提取器。（产品：Snowboy）</p>
<p>Siamese network，孪生网络，卷积network。弱监督。2016</p>
<h2 id="基于大词汇量语音识别系统的语音关键词检测（ASR）"><a href="#基于大词汇量语音识别系统的语音关键词检测（ASR）" class="headerlink" title="基于大词汇量语音识别系统的语音关键词检测（ASR）"></a>基于大词汇量语音识别系统的语音关键词检测（ASR）</h2><p><strong><a href="./Lattice Indexing for Spoken Term Detection.pdf">Lattice Indexing for Spoken Term Detection</a></strong></p>
<blockquote>
<p>This paper considers the problem of constructing an efficient inverted index for the <strong>spoken term detection</strong> (STD) task. More specifically, we construct a deterministic weighted finite-state transducer storing soft-hits in the form of (utterance ID, start time, end time, posterior score) quadruplets.We propose a generalized factor transducer structure which retains the time information necessary for performing STD. The required information is embedded into the path weights of the factor transducer without disrupting the inherent optimality. We also describe how to index all substrings seen in a collection of raw automatic speech recognition lattices using the proposed structure. Our STD indexing/search implementation is built upon the OpenFst Library and is designed to scale well to large problems. Experiments on Turkish and English data sets corroborate our claims.</p>
</blockquote>
<p>LVSCR based methods。</p>
<p>核心：语音识别+文本索引。</p>
<p>问题：</p>
<ul>
<li>语音识别的精度问题，如何解决error<ul>
<li>次优结果的索引（关键词出现error）</li>
</ul>
</li>
<li>关键词的定位技术<ul>
<li>Lattice。保存语音识别的最优和次优结果</li>
</ul>
</li>
</ul>
<p><strong>WFST</strong>：加权有限状态转换器。WFST是一个有向图：</p>
<ul>
<li>节点：三个状态起始、普通、终止。</li>
<li>边：输入、输出、权重。</li>
</ul>
<blockquote>
<p>效果：将一个字符串映射到一个序列。（有点像贝叶斯网络）也可以用来表示一个单个字符串。</p>
<p>Composition（复合原理）：T1:A to B; T2 B to C; T1* T2: A to C.</p>
<p>Union（联合）：合并起始节点。</p>
<p>实现发音-词串转换。</p>
</blockquote>
<p><strong>Lattice</strong>：一个复杂WFST网络，作为识别器的representation。（索引）</p>
<p><strong>Factor Automata</strong>（因子自动机）：v is factor of u if u = xvy.</p>
<ul>
<li>获得子串</li>
</ul>
<p>Timed Factor Transducer，TFT，时间因子自动机。2011</p>
<ul>
<li>查询关键词的匹配自动机</li>
<li>时间间隔</li>
<li>概率模型</li>
</ul>
<p>构建Lattice Indexing：convert lattice into TFT，union，optimize。从而优化体积，查询概率、时序信息。</p>
<p>OOV（词汇溢出）问题：KWS中更严重。</p>
<ul>
<li>转换为音素，字（细小单元）<ul>
<li>或许可以利用知识图谱？</li>
</ul>
</li>
<li>Proxy word（代理词），2013，陈<ul>
<li>用发音相似的集内词代替关键词</li>
<li>OOV转化为WFST<ul>
<li>应用最短路算法</li>
<li>FST加速？（并行计算），相似度评估优势</li>
</ul>
</li>
<li>转化为K”集内词</li>
</ul>
</li>
</ul>
<h2 id="Advances"><a href="#Advances" class="headerlink" title="Advances"></a>Advances</h2><p>Model Compression：（2017，亚马逊）</p>
<blockquote>
<p><strong>TDNN</strong>结构——分层共享，大幅减少计算量。</p>
<p>矩阵分解：SVD。（压缩）</p>
</blockquote>
<p>Computing similarity heterogeneous pattern：（2017，Audhkhasi）</p>
<blockquote>
<p>文本和声学分别分类，然后将分类结果相互比较（模型融合）</p>
</blockquote>
<p>Similarity Image Classification Query-by-Example KWS：</p>
<p>不再搞窗口，直接对整个语音图进行分类（模式识别）。CNN分类。</p>
<ul>
<li>思路类似音频指纹，长宽特别不一样（某个维度相对有限）</li>
<li>但语音可能获得弯斜线</li>
</ul>
<p>Streaming Seq2Seq Models for KWS：（He Y，2017）</p>
<ul>
<li>Blank符号解决长度不匹配问题</li>
<li>不确定音素映射到blank</li>
<li>CTC以前没有建立出label之间的关系<ul>
<li>利用<strong>RNN-Transducer</strong>进行联合网络预测</li>
</ul>
</li>
<li>加入Keyword encoder，Attention（类似一个附加记忆模块）<ul>
<li>放射变换+内积+Softmax+求和</li>
<li>现在工业上没有预存的语料，因此HMM还是主流</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> keyword spotting：主要在于下限制条件、复杂度。</p>
<p>spoken term detection：OOV问题。</p>
<blockquote>
<p>哈希？不便于compose，并行化。（相似哈希？）</p>
</blockquote>
<h1 id="使用RNN-Transducer进行声学建模"><a href="#使用RNN-Transducer进行声学建模" class="headerlink" title="使用RNN-Transducer进行声学建模"></a>使用RNN-Transducer进行声学建模</h1><blockquote>
<p><a href="./Neural Transducer for Speech Recognition.pdf">PPT</a>。</p>
</blockquote>
<p><strong><a href="./Exploring Architectures, Data and Units For Streaming End-to-End Speech Recognition with RNN-Transducer.pdf">Exploring Architectures, Data and Units For Streaming End-to-End Speech Recognition with RNN-Transducer</a></strong></p>
<blockquote>
<p>We investigate training end-to-end speech recognition models with the recurrent neural network transducer (RNNT):<br>a streaming, all-neural, sequence-to-sequence architecture which jointly learns acoustic and language model components from transcribed acoustic data. We explore various model architectures and demonstrate how the model can be improved further if additional text or pronunciation data are available. The model consists of an ‘encoder’, which is initialized from a connectionist temporal <strong>classification-based</strong> (CTC) acoustic model, and a ‘decoder’ which is partially initialized from a recurrent neural network language model trained on text data alone. The entire neural network is trained with the RNN-T loss and directly outputs the recognized transcript as a sequence of graphemes, thus performing end-to-end speech recognition. We find that performance can be improved further<br>through the use of sub-word units (‘wordpieces’) which capture longer context and significantly reduce substitution<br>errors. The best RNN-T system, a twelve-layer LSTM encoder with a two-layer LSTM decoder trained with 30,000<br>word pieces as output targets achieves a word error rate of 8.5% on voice-search and 5.2% on voice-dictation tasks and is comparable to a state-of-the-art baseline at 8.3% on voice search and 5.4% voice-dictation.</p>
<p>难复现？</p>
</blockquote>
<h2 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h2><p>基于联结时序分类(CTC)的声学模型不再需要对训练的音频序列和文本序列进行强制对齐，实际上已经初步具备了端到端的声学模型建模能力。但是CTC模型进行声学建模存在着两个严重的瓶颈，一是缺乏语言模型建模能力，不能整合语言模型进行联合优化，二是不能建模模型输出之间的依赖关系。RNN-Transducer针对CTC的不足，进行了改进，使得模型具有了端到端联合优化、具有语言建模能力、便于实现Online语音识别等突出的优点,更加适合语音任务，值得引起大家的重视。 </p>
<h2 id="CTC模型与不足"><a href="#CTC模型与不足" class="headerlink" title="CTC模型与不足"></a>CTC模型与不足</h2><p>Connectionist Temporal Classification，CTC。</p>
<p>以前都是HMM+Deeplearining混合训练，需要帧级别的标注信息。极其繁琐。</p>
<p>HMM本身具有序列建模能力，RNN可以胜任。</p>
<p><strong>帧预测</strong>可以是blank或对应音素。</p>
<p>综合后，进行梯度反传。（DP，前向+<strong>后向传播</strong>）</p>
<blockquote>
<p>设定预测状态转移方程。</p>
</blockquote>
<p>Loss Function：倾向于概率更大的路径选择。（对数概率损失函数）</p>
<p>帧级别预测是准确的“高原”，CTC预测尖峰。</p>
<ul>
<li>引入blank（损失较小），使得对于预测进行<strong>信息累计输出</strong></li>
</ul>
<p>CTC优点：</p>
<ul>
<li>不需要强制对齐</li>
<li>解码加速</li>
</ul>
<h2 id="RNN-Transducer模型"><a href="#RNN-Transducer模型" class="headerlink" title="RNN-Transducer模型"></a>RNN-Transducer模型</h2><p>CTC没有对label之间的关系没有刻画，不能完全做到端到端，要求输入序列大于输出（不是语音识别的问题）。</p>
<p>联合训练模型。（Pred. Network语言模型，Encoder声学模型）结合后输出标记。</p>
<p>Joint Net：将两个模型融合。</p>
<p>曼哈顿模型（可行路径是曼哈顿距离）。</p>
<p>前向+后向算法。Loss Function。</p>
<p>比较几个模型结构。（4类，CTC，RNN-Transducer，Attention-based，PNN-Transducer with Attention）</p>
<ul>
<li>CTC</li>
<li>RNN-Transducer（三阶张量，计算复杂，内存容易爆）</li>
<li>Attention-based</li>
<li>PNN-Transducer with Attention</li>
</ul>
<blockquote>
<p>CTC在实际应用中，对于start-end time还是差强人意，应用前景仍然有限</p>
</blockquote>
<p>RNN-Transducer：</p>
<ul>
<li>解决CTC条件独立问题</li>
<li>整合了两个模型</li>
<li>流式结构</li>
</ul>
<h2 id="RNN-Transducer模型的改进"><a href="#RNN-Transducer模型的改进" class="headerlink" title="RNN-Transducer模型的改进"></a>RNN-Transducer模型的改进</h2><p>高计算代价，存在一些不合理的路径。</p>
<p>Recurrent Neural Aligner：</p>
<ul>
<li>斜化</li>
<li>期望损失……</li>
<li>没有什么性能提升</li>
</ul>
<p>Multi-stages of Training a Wordpiece RNN-T，多级预训练</p>
<ul>
<li>训练模型的结果较好</li>
</ul>
<p>总结：</p>
<ul>
<li>RNNT总体性能较好（Without大规模语言模型）</li>
<li>训练十分困难，预处理十分重要</li>
<li>适用于在线的结构（解码）</li>
</ul>
<blockquote>
<p>高性能框架Bert？</p>
</blockquote>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>语音识别</tag>
      </tags>
  </entry>
  <entry>
    <title>摊还分析：价格悖论</title>
    <url>/%E7%AE%97%E6%B3%95-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90%EF%BC%9A%E4%BB%B7%E6%A0%BC%E6%82%96%E8%AE%BA/</url>
    <content><![CDATA[<p><img data-src="价格悖论与摊还分析.jpg" alt="价格悖论与摊还分析"></p>
<p>经济学里可能见到过类似这样的案例：</p>
<blockquote>
<p><em>买一本40元的书，为了得到20元的优惠，可能愿意辛辛苦苦跑半个城市去特价书店买；可买一部4000元的手机，同样的20元优惠，往往连下楼的冲动也没有。</em></p>
</blockquote>
<p><img data-src="0.jpg" alt="0"></p>
<p><strong>《经济学原理（第6版）》原书</strong></p>
<p>基于人们评估相对价格的趋势，或者心理账户理论（行为经济学），再忽略掉互联网的因素……这大概成立的。</p>
<p>但，究竟是为什么呢？</p>
<p>这是否就是“短视”的表现呢？</p>
<p>换句话，贪小便宜究竟理不理性？</p>
<p>……</p>
<p>回答是：<strong>这反而是适当的做法</strong>。</p>
<p>我们从<strong>摊还分析</strong>（又称，<strong>分摊分析</strong>）的角度来看。</p>
<p>首先，在<strong>算法</strong>中，摊还分析是用来评价程序中的一个操作序列的平均代价，有时可能某个操作的代价特别高，但总体上来看也并非那么糟糕；可以形象的理解为把高代价的操作“分摊”到其他操作上去了，要求的就是均匀分摊后的平均代价。</p>
<p>当这个操作序列趋向于无穷时，摊还的平均代价往往渐进于一个函数，由此还可以引出摊还复杂度的概念。</p>
<p>下图为一个摊还分析的简单示例：</p>
<p><img data-src="摊还分析示例.jpg" alt="摊还分析示例"></p>
<p><strong>某连续操作f(t)在某区间上的摊还</strong></p>
<p>面向对象的程序设计中，比较典型的例子是：对于向量（即，数组）溢出时的扩容操作，采用加倍扩容策略而不是追加常量的空间。加倍扩容的平均分摊复杂度远小于常量扩容。下图取自邓神的《数据结构（C++语言版）》。</p>
<p><img data-src="可扩充向量.png" alt="可扩充向量"></p>
<p><strong>向量扩充图解</strong></p>
<p>加倍扩容法的实现及细节可参考书中的P34~36。</p>
<p><img data-src="1.jpg" alt="1"></p>
<p><strong>《数据结构（C++语言版）》原书</strong></p>
<p>好了，我们来分析最开始的问题。</p>
<p>比如，将“消费40元”当做一个操作，它的代价是“20元优惠”，显然，这可以被视为一种“正”的代价。相对的，对于4000元的手机，对应“消费40元”的100次操作，它的代价仍然是“20元优惠”。</p>
<p>也就是说，对于长时间的平均分摊代价，同样的20元优惠，买书比买手机高了100倍！而由于优惠是“正”的代价，这导致优惠买书的预期收益非常高。</p>
<p>可以看出，人们对收益的权衡，会潜意识地使用摊还分析，考虑<strong>长期效应</strong>。即，摊还分析是一种自然的策略。</p>
<p><strong>进一步，哪些商品适合于摊还分析呢</strong>？</p>
<p>自然是长期使用品，即“必需品”。</p>
<p>但怎么区分“必需品”和“非必需品（奢侈品）”呢？</p>
<p>传统的经济学通常以市场上该商品的需求价格弹性（可视为，价格对需求的偏导数）作为区分的指标。</p>
<p>但是，仅仅以市场定义的范围来作区分，如冰淇淋市场和香草冰淇淋市场，而不区分面向张三的冰淇淋市场和面向李四的冰淇淋市场，对<strong>个人偏好</strong>的体现是远远不足的。现代由于数据挖掘的深入，这种面向对象的趋势就更为明显。</p>
<p>比如，假设有一个修过手机屏6次的频繁吃土青年，外屏4次、内屏1次、屏幕总成1次。而且由于对手机不爱护的生活习惯，今后也可能继续修手机233。</p>
<p>那么，修手机的消费，对该青年来说就更倾向于长期使用品，于是需要摊还分析；而对于粉底、女装一类的商品，则更倾向于奢侈品（需求量小趋于0，加上价格不敏感），可能就用不上摊还分析。</p>
<p>那么，问题是：在不考虑时间成本的情况下，是否应该购置一台新手机？</p>
<p>对于普通安卓手机，更换外屏的花费在90元左右，更换内屏/总成的花费在200元左右。假设该青年半年摔一次手机（？），则平均分摊花费可估计为（X<em>1000/3/360 + 90</em>80%/360/2 + 200*20%/360/2=）X+0.15元/天。</p>
<p>假设此时更换新手机，选择价位Y千元档，生命周期T假设为3年，且前1年不摔（？）。则分摊花费为（Y<em>1000/3/360 + 0.31</em>2/3=）Y+0.20元/天。</p>
<p>于是结论是：（仅考虑当前摊还分析）若Y比X便宜500元，那么购置新手机就是明（ji）智的选择。</p>
<p>当然，深入研究分摊费用随时间的变化趋势，综合考虑个人偏好，可以得出更精准的策略。但重点是，要敢于量化指标，而不仅仅停留于对客观事物的定性状态。如下图示例的一个粗略的模拟演算：</p>
<p><img data-src="摊还分析实例.png" alt="摊还分析实例"></p>
<p><strong>摊还分析实例：手机问题</strong></p>
<p>其中，蓝色粗线为标准曲线（X=2，T=3），其它为对照组（Y任取，T=0）。横轴单位为半年，纵轴为摊还费用的对数值。</p>
<p>可以看出。</p>
<p><strong>定量，往往能更好地定性</strong>。考虑长期，可能做出不同选择。</p>
<p>但，不仅仅可以在时间上进行摊还，还可以在空间上进行摊还。</p>
<p>比如，下面考虑一个<strong>标准正态分布</strong>。</p>
<p>简单提一下正态分布的历史。正态分布的实质认识源于最小二乘法的发现，最小二乘法源于对自然规律的猜测——最大概然估计。因此，正态分布实际是反映最可能的现实。</p>
<p>考虑标准正态分布在整个实数轴上的分摊，容易得到分摊值为0。这是一个退化的情况，我们主要考虑非退化（即，具有一般性）的情况。</p>
<p>比如，取定区间[-δ，δ]，δ为方差，此处显然为1，即[-1,1]。只考虑标准正态分布在[-1,1]内的分摊。</p>
<p><img data-src="正态分布摊还.jpg" alt="正态分布摊还"></p>
<p><strong>正态分布在[-1,1]上的摊还</strong></p>
<p>如上图。此时，将极限定义为：<strong>固定</strong>[-1,1]区间不变，标准差δ不断趋于0，则分摊极限值趋于1/2=0.5。</p>
<p>注意到，当δ不断趋于0，该正态分布趋于一个“<strong>单位脉冲</strong>”（又称，Dirac函数，当然，这里还需要一个适当的比例放缩变换，放缩系数为2:1），波峰形状变得集中而陡峭。这说明，对于特定点趋于极限的脉冲式效应，有时可以通过区间分摊来获得有限值。</p>
<p>现在尝试考虑数学物理中著名的<strong>齐次化原理</strong>（Duhamel原理）。它是物理学上的一种简化手段，其作用如下图所示：</p>
<p><img data-src="齐次化原理示意.jpg" alt="齐次化原理示意"></p>
<p><strong>齐次化原理图解</strong></p>
<p>可以看出，齐次化原理的主要目的将原本连续的函数，当成间断的脉冲的无穷叠加（这种无穷叠加表现为脉冲的连续化，最后成为一个积分）。它是将无穷小区间上的一个分摊的量，收束成集中点上的脉冲，类似于<strong>摊还分析的逆过程</strong>。</p>
<p>再考虑<strong>傅里叶变换</strong>。Fourier变换是将时域信号转换为频域信号，Fourier解析是将频域信号转换为时域信号。对于任意的一个正/余弦周期时域信号基，都对应唯一的频域值。如下图所示（摘自知乎，稍修）：</p>
<p><img data-src="傅里叶变换.jpg" alt="傅里叶变换"></p>
<p><strong>从Fourier（离散）级数到（连续）变换</strong></p>
<p>从频域到时域，正像是摊还分析，将每个脉冲对应分摊到整个时间维度上；从时域到频域，也像是摊还分析的逆过程，将时域上连续的信号收束为频域上的一组脉冲。当时域上的周期性越差（周期越长），频域上的脉冲更加密集，最终得到一般的连续函数。</p>
<p><strong>它与齐次化原理的本质相异之处，仅仅在于选择的收束基不同而已</strong>。而且，这组基选的非常巧妙，导致部分揭示了周期现象的本质。（相对而言，齐次化原理的基就比较平凡；另外，如果选择有限多个平凡基，再推广，很容易联想到数值积分中经典的手法“插值”；甚至，结合矩阵理论，这些都可看做是一种空间到空间的变换，只不过在某些空间中看同一个问题的形式更加简洁罢了。这里就不展开叙述。）</p>
<p>下面我们再分析一个湍流的例子。并从时空摊还的角度进一步理解摊还分析。</p>
<p>考虑（均匀各向同性）<strong>湍流</strong>的长期效应。</p>
<p>不妨先简单提一下，各向同性湍流的历史。1935年，G.I. Taylor在风洞实验的均匀气流中设置一排或者几排规则的格栅，均匀气流垂直流过格栅时产生不规则扰动。这种不规则扰动向下游运动过程中，由于没有外界干扰，逐渐演化为各项同性湍流。发展了各项同性理论。</p>
<p>先说湍流，湍流的流动一般分解为时均运动（稳态分量）和脉动运动（随机分量）。其中，任一时刻的时均运动都是该时刻湍流的无规则运动在空间上的摊还。</p>
<p>由于湍流的耗散作用（含内部和边界），尽管可能存在间歇的波动，一个不受干扰后的湍流最终将趋于稳态（如考虑管道流动，其脉动将衰弱至0，接着时均也将随后衰弱至0）。</p>
<p>即，一个长期的湍流运动，可以描述为在空间上、时间上的摊还。</p>
<p>……</p>
<p>从以上几个简单的实例中，读者应该能够渐渐体会到摊还更深层的意义：<strong>摊还，就是将任意维上短暂的（脉冲）效应尽可能分散到维的全域上，</strong>对任何维度都是成立的；无论时、空，或者更抽象的维度。（进一步，如何考虑非整数的维度，即“分形”对象呢？）</p>
<p>价格在时间上的摊还分析，指导着消费者的购买行为；成本在空间上的摊还分析，指导着生产者的产业发展（规模效应）；甚至，思考发达国家的污染排放在历史和全球上的摊还（温室效应）；冲量在作用面上的摊还；脉冲星在宇宙空间视差上的摊还……</p>
<p>当然，重点不是应用，而是，在面对一个问题或处境时，能自然而然地想到摊还的思路。（在面对不同的问题的时候，多数的思路往往是一致的。如何构建新思路，也是一个非常值得探讨的问题。）</p>
<p>甚至，动态规划，数值逼近……所做的无非就是某种合理的简化。简化到什么程度才叫合适呢？我们究竟需要多少知识才能做出好的决定？那么，<strong>信息论</strong>的雏形就跃然纸上了……所谓触类旁通。</p>
<p>那，极好了。</p>
<p>……</p>
<hr>
<p>借季羡林先生《留德十年》的一段话做结尾:</p>
<blockquote>
<p><em>我只是一个人在夜深人静时，伏在枕上，让逝去的生命一幕一幕地断断续续地在我眼前重演一遍，自己仿佛也成了一个旁观者，顾而乐之。</em></p>
</blockquote>
<p><font color=turquoiseblue><strong>愿生命的一分一秒都充满平和与喜悦</strong></font>、</p>
<hr>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">原载于：</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">《<a href="https://mp.weixin.qq.com/s?__biz=MzI5NTU4MjQ0MA==&amp;mid=2247483676&amp;idx=1&amp;sn=8abfa225423ab371d62097bdb9bd5709&amp;chksm=ec502e9bdb27a78d6a1969dcd91bd6a164e35a2ffcc945d7500c759e3c6b854b3b494369fb38#rd" target="_blank" rel="noopener external nofollow noreferrer">思维之海-价格悖论与摊还分析</a>》</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>星种</title>
    <url>/%E7%BE%A4%E6%98%9F%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
    <content><![CDATA[<p>星种，又叫做群星的孩子。但这又不意味着他们即是全部通过体外培养而诞生的，但是，她们都出生在大气层以外，活在真空的包围里面。</p>
<blockquote>
<p>我突然不想继续看论文了。一种情绪蔓延了身体，终于我打开了一个沉淀了一年多的文件。我看空荡荡的内容，只有那名字让我回忆起，那快要消失在记忆中的感觉。我终于开始书写起来。</p>
</blockquote>
<p>她们离地球的距离从来没有很近。大概在拉格朗日点之外。</p>
<p>她们乘坐的空间站很大，比几个世纪前的初代空间站大上太多——好像蚂蚁和巨象的区别。空间站里面已经有了完整的循环系统，现在它只需要安静从太阳帆上汲取几十亿公里外聚变反应的余热即可。无论是物种、空气和水，她们的生活实现了和母星的初步隔离。</p>
<p>是的，这种平衡并不是一个可以很好维持的状态。于是，从母星到空间站的运输飞船总是以一种非常固定的频率在茫茫深空中奔波，运送的主要是核能原件和，和特产。空间站自身还不具备大规模量产的安全核产业链，因此，她们使用的所有的高能设备都是从母星进口而来。特产……这倒是纯粹的商业行为了，有的人真的会购买那些千里迢迢的产品来满足口腹之欲，但大多数则是另一种特产——那些有着母星的烙印的纪念品。</p>
<p>思乡的人会做出不可理喻的行为来，但这也是一种理性。<a id="more"></a></p>
<p>她悄悄地探出头，在停泊台上光焰渐渐消散，露出了运输飞船的样子。胖胖的身材，看上去就毫无流体力学的美感。她好奇地看着胖飞船那扁平的头部，裂开一条缝，伸出一道扶梯，里面几个穿着蓝色工作服的人一步一步走下来。他们讲着她似懂非懂的语言，绕到飞船的侧面，打开了货舱盖，露出了里面的货物……倒不是装的很满。</p>
<p>她的肚子有些饿，因为这是她从课堂上借故溜走才能到这里。现在是午饭时间，她抚摸着自己的肚皮，悄悄地安慰自己：“安静一点，晚上回家有好吃的等着你呢。”她又把目光投向了货舱的方向，目不转睛。</p>
<p>可她没有留意， 后面来了一个身影。</p>
<p>“你在干什么?”</p>
<p>她惊地回过头。看到一个高过她一个头的小男孩，他也穿着蓝色的工作服。</p>
<p>他是从哪里冒出来的？可她已经没有时间去思考这个问题。因为她的小手攥在一起还在微微发抖，她在她的小脑袋里思考要如何给出一个合理的解释。解释她为什么在这里。</p>
<p>“我……我迷路了。”她终于说了一个还算合理的理由，配合她的神情，似乎还不错。</p>
<p>“你是几区的？”男孩手中拿着一块屏幕，上面隐隐约约显示着这座空间站的地理结构。从她的视角，她只能看到一顿蓝色、黄色和红色的线条交织在一起，好像一座巨大的迷宫……</p>
<p>“我在南宁小学上学。”她记不起区的概念，因为她们几乎不用区这种概念来交流。</p>
<p>“南宁小学？我找找……啊哈，找到了，你是C区的吧。你叫什么名字？”男孩低头在屏幕上比划着，上面的线条舞动着，终于又稳定下来。</p>
<p>“我叫，安宁。”</p>
<p>“行……我找到你的家在哪里了，我带你过去吧。”他说。</p>
<p>“不行。”</p>
<p>“为什么？”</p>
<p>“你带我回学校吧。我还有课。”</p>
<p>“你不好好上学，跑出来干什么？”他突然想到了什么似的，发问。</p>
<p>“我不是跟你说了吗。我迷路了。”</p>
<p>“哈哈哈。你真的以为我会信你吗？不想说算了。”</p>
<p>他看着安宁的脸上阴晴变幻，夸张地笑起来，笑了好一会儿终于又收敛起来，一本正经地说：“走吧。”</p>
<p>安宁心里有些忿忿不平。他坏我好事也就罢了，还要笑我。她低着头，轻咬着嘴唇，跟在他后面。</p>
<p>他们俩从停泊台的尾部走了出来，要想去C区，他们需要穿过停泊台，去坐中央电梯。C区在另外一层，为了保证足够的模拟重力，里面转速更快。</p>
<p>这样，他们的距离离与运输飞船倒是越来越近了。安宁原本低着头，可这时她也忍不住抬起来头认真地看。</p>
<p>凑近了看，运输飞船的样子感觉完全不一样。它像一座小山一样，安宁想到。</p>
<p>“像不像鲸鱼？”前面走着的男孩突然放慢了脚步。</p>
<p>“什么？”</p>
<p>“鲸鱼。”</p>
<p>“什么是鲸鱼？”</p>
<p>“你不知道吗？”男孩认真地回过头看着她，从不可置信到眼神微弱的变化，“鲸鱼，鲸鱼，是一种海里的动物，很大很大，像这个一样大——对，就像这艘运输飞船一样。”</p>
<p>“鲸鱼会飞吗？”</p>
<p>“鲸鱼，当然不会飞。”</p>
<p>“可是它就会飞。”她指着这艘运输飞船，在她的脑海里还没理解鲸鱼是一种什么样的概念。</p>
<p>“也有会飞的鲸鱼。”</p>
<p>“什么？”</p>
<p>“会飞的鲸鱼，叫做鲲。”</p>
<hr>
<p>（未完待续）</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>论有限之生命</title>
    <url>/%E8%AE%BA%E6%9C%89%E9%99%90%E4%B9%8B%E7%94%9F%E5%91%BD/</url>
    <content><![CDATA[<p>生命从一开始就应该是悲观的，因为它将经历有限的时间，做出有限的影响，最终完成有限的使命。这让生命蒙上灰暗的色彩，它也无法被去除。于是又期盼长久的生命，来改造这有限性。</p>
<p>人的寿命在延长，但也在相对地缩短。信息海量淹没了我们从前的认知，也导致我们无暇去认知。我们又被这有限的认知给束缚。于是，要精打细算，精心设计认知的领域、方向和程度，这让我们无比沉浸进去，甚至忘了这是根深蒂固的束缚。它在社会的潜流中，完成了改造。我们再次被这有限限制，只是这一次连我们自己意识不到。</p>
<p>但无妨，大千世界蕴含了足够的随机，这使得仍然有少数一部分人获得了相对完整的认知骨架，他们虽然手握着脆弱、单薄的，承担了新的有限的使命——成为新时代的信使。<a id="more"></a>只要这个世界还足够随机，只要这个世界还有黑暗的角落，这样的信使就绝难以灭绝。它们冒着随机的风险，发挥随机的作用，但这些作用也注定如同热运动一样，变化为微观的躁动，积蓄宏观的热量，进而转化为宏观的压力。</p>
<p>闷。这是因为有限的世界，只留下了极其有限的空间。他们被束缚，又成了虚拟上的、心理上的有限人。唉，可是这有限却是无药可救的大灾难。在他们有限的脑海里面，从来也不是想到——这个世界竟然是有限的。而他们自己竟然也是有限的。哪怕其中偶然迸发的一小撮有灵光的个体，也很快如萤火一般灭亡，转而陷入更加深沉的大灾难里面——这是他们无法避免的收束的命运。</p>
<p>寄希望于未来，则又是另一种对有限的误解。而这误解本身又是从有限中诞生的，这使得通往未来的路径从未存在。形成了闭环。他们在闭环上快速旅行，以为到达了极远的地方。这自然是一种必然产生的藐视，但这也使得他们的眼光更加专注在循环以内，思考如何兜更多的圈。这些圈虽然是实体上唯一，在精神上却成了重重的枷锁，彻底封死了所有出去的路。这是所谓不可拯救的缘由。</p>
<p>故不必拯救。这样徒劳的消耗，只是在意义的金字塔上添砖加瓦。而意义的存在本身却是属于他们旧时代的空中花园。不妨放开思想的翅膀，从自我的爱恋中稍稍虚脱而出，思考全新的可能性。我们又要同时地，悲观地认识到这样的认知是多么不完整，多么虚弱，又是多么美好。它从各种意义上又难以在肉体上与我们分离。这样交织，这样汇融，这样的不可割舍，埋下永久的隐患。这样，另一条路又成了与从前一摸一样的路，只是从东华路改成了北枳路。这样，必然又回到了悲观的起点。我们从来都逃不出去。可是谁也不会放弃逃亡。</p>
<p>可是，可是啊。谁可以放弃呢，谁可以真的放弃呢？我们期望全新的自我，全新的人类，这样的人类将与人类毫无瓜葛，这样的人类将具有我们不曾具有的特别。只是这样的希望，跟其他飘渺的信仰循环一样，也将完全留给我们自己。人类将没有任何遗产给它们。我们净身登场，也要净身出户。这是生命的有限所决定的不可逃避的命运。</p>
<p>命运是什么呢？命运因何而起。与这有限性也实在逃不了干系。若无限了，则命运也悄悄地消失了，因为毫无终结的生命将无法盖棺定论。我们在时间的一刹那驻足观看，又何能一窥无限生命的风采？那些不可死的，终也将获得自由。只是，这是嫉妒的悲观，是对自身命运绝望的悲观，仅凭事实的认知无法改变的悲观。它是笼罩人类发展的阴云。</p>
<p>你不信看看，多少人赞扬死亡的可贵。你不信看看，多少人高声颂离别。你不信看看，多少人开始自我满足。他们的思维无法相信有限本身的悲剧性，又从更高层面上来编造谎言欺骗自己，营造虚假的乐观。这形成了更大的悲剧，适得其反。你望着他们，也许又要升起拯救的情绪。那又无非另一个天大的悲剧！</p>
<p>我们唯一通向不同的路径。就是以不掩饰的悲观来接受这可悲的有限之生命，这种悲观必须是彻底的，容不得作样子的虚假。我们要做彻底的悲观主义者！</p>
<p>然而这也不意味着欢乐的全然丧失，因为悲观是无可避免的真实。我们直面这淋漓的真实，依然可以尽情欢乐。因为这悲观的含义不在于某一时刻客体的表现，而在于贯穿于有限之生命的始终的苍凉的主线。加之，欢乐终究也是有限的时刻，是这主线之上的浪花。我们应该怀着伤感来迎接客观世界的大好事，并时刻谨记自身的有限。</p>
<p>当我们不以限制的目光探查事物的本质的时候，我们认知也将从一个有限扩展到一个全新的有限。这实乃有限之生命可做的最大努力。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>论学习方法</title>
    <url>/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<center><font face=kaiti color=deepskyblue size=4.7><i><strong>两岸猿声啼不住，轻舟已过万重山。</strong></i></font></center>

<p>本文为写给学堂在线疾风计划的同学的一些学习经验分享。因时间仓促、知识有限，难以面面俱到；仅供参考。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201220154821058.png" class="" title="疾风计划">
<a id="more"></a>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.xuetangx.com/program/XT0809003778001" target="_blank" rel="noopener external nofollow noreferrer">学堂在线 - 疾风计划</a>，<a href="./疾风计划经验分享.pdf">经验分享PPT</a></p>
<p><a href="https://vel.life/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener external nofollow noreferrer">年中总结</a></p>
<p><a href="https://vel.life/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF-912%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9%E8%AE%A1%E5%88%92/" target="_blank" rel="noopener external nofollow noreferrer">912 内容学习计划</a></p>
<p><a href="https://program-think.blogspot.com/2020/12/Study-and-Life.html" target="_blank" rel="noopener external nofollow noreferrer">学习与人生——700篇博文之感悟</a> 编程随想，<a href="https://github.com/programthink/books" target="_blank" rel="noopener external nofollow noreferrer">推荐书单</a></p>
<blockquote>
<p><a href="https://program-think.blogspot.com/2019/12/Time-and-Life.html" target="_blank" rel="noopener external nofollow noreferrer">时间与人生——跨入本世纪20年代的随想</a></p>
<p><a href="https://program-think.blogspot.com/2015/12/Hobbies-and-Interests.html" target="_blank" rel="noopener external nofollow noreferrer">什么是【真正的】兴趣爱好？以及它有啥好处？</a></p>
<p><a href="https://program-think.blogspot.com/2013/09/knowledge-structure.html" target="_blank" rel="noopener external nofollow noreferrer">如何完善自己的知识结构</a></p>
</blockquote>
<h1 id="兴趣-意志力-执行力"><a href="#兴趣-意志力-执行力" class="headerlink" title="兴趣 | 意志力 | 执行力"></a>兴趣 | 意志力 | 执行力</h1><h2 id="动机森林"><a href="#动机森林" class="headerlink" title="动机森林"></a><font color=blue>动机森林</font></h2><p>什么是动机？首先，一个人<strong>做任何事情都是有目的</strong>的。</p>
<p>打个比方，在机器学习中，梯度下降的目的是为了降低损失函数在特定样本上的函数值，降低函数值的目的则是最优化，那么最优化就是人们使用机器学习的动机吗？并不是，最优化的目的是为了让某个分类或者回归指标变得最好，而变得最好的目的则是在某个问题上机器可以达到甚至超越人类水平……这还没完，超越人类水平对于商业公司而言的是希望获得最大的经济效益，对于科研人员而言则可能是做出领先世界的研究成果……</p>
<p>最后，这些对于同一件事的不同分叉，构成了一棵动机树。<strong>树上的每一个<font color=red>叶节点</font>都成为一个真正的动机。</strong></p>
<p>每一个事件都对应着一颗动机树，这便是动机森林。将动机森林合并，便形成了前馈网络。我们还可以对不同事件的树根进行聚合，得到更宏观的动机。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201227003056945.png" class="" title="动机森林">
<p>以上便是动机模型。</p>
<h2 id="内在动机"><a href="#内在动机" class="headerlink" title="内在动机"></a>内在动机</h2><p>动机可能具有“外部性”或者“内部性”。</p>
<p>以“<strong>学习编程</strong>”为例：</p>
<ul>
<li>假设某人的父母听说学编程有前途，于是让孩子去学习某门编程语言——这属于<strong>被动学习</strong>。</li>
<li>假设某人听说程序员比较好找工作，于是去学习某门编程语言——这属于<strong>主动学习的“功利因素”</strong>。</li>
<li>假设某人本来就喜欢编程这项活动，于是去学习某门编程语言——这属于<strong>主动学习的“非功利因素”</strong>。</li>
</ul>
<p>“被动学习”与“基于功利因素的学习”有一个共同点——其动机是【外在】的。</p>
<blockquote>
<p>如果某人学习的动机是【外在】，这个<strong>动机【未必】能持久，一旦外部环境变了，其动机可能就消失了</strong>。<br>反之，【内在】的动机比较能持久（不会轻易受到外部环境的干扰）。</p>
</blockquote>
<p>内在动机通常取决于你很长时间的历史经历——你是什么样的人，喜欢什么样的形式，你的行为模式是怎样的……这些东西在短期内不会发生剧变，甚至对于多数人，成年以后便终生不再改变。</p>
<p>下面举两个内在动机的例子。</p>
<p><strong><font color=blue>好奇心</font></strong>。好奇心的本质来源于对新知的渴望，意味着你有一种知道更多东西的心理倾向。但是，好奇心会随着你接受的新知的具体属性和顺序而发生改变。<strong>大多数人在童年时代都具备天生的足量好奇心</strong>，但是这些好奇心由于新知的融入，因环境而产生分化，有的人渐渐失去好奇心，而有的人的好奇心分化到特定领域……</p>
<p><strong><font color=blue>思维乐趣</font></strong>。思维乐趣是在脑海中自成一派，是指热爱思考的人。具有好奇心的人，不一定同时享有思维乐趣；能够享有思维乐趣的人，不一定具备好奇心。比如，有些同学喜欢算微积分，一道积分题算一天，这个过程充满了思考，但是并不会接收新知；另一些同学，喜欢看MOOC，但是从来不做笔记，也不做题，看完了就完了，这个过程虽然获得了新知，但缺乏思考，当需要具体应用时，问题就会暴露出来。<strong>思维乐趣不具有普遍性，多数人很难从纯粹的思考获得幸福感</strong>。</p>
<h3 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h3><p><strong><font color=red>同时保有好奇心和思维乐趣两种内在动机</font></strong>的人，则称之为具备<strong><font color=blue>兴趣</font></strong>的人。</p>
<blockquote>
<p>但是，这只是从定义上明确了兴趣，对于兴趣的外延解释能力有限。</p>
</blockquote>
<h4 id="伪兴趣"><a href="#伪兴趣" class="headerlink" title="伪兴趣"></a>伪兴趣</h4><p>什么是“伪兴趣”：</p>
<ul>
<li>三分钟热度<ul>
<li>得到了很快就失去兴趣；得不到的，很快就畏难而退</li>
</ul>
</li>
<li>动机存在功利因素<ul>
<li>仅仅因为比特币市场火爆，才学习区块链技术</li>
</ul>
</li>
<li>外在动机<ul>
<li>被强迫去做某事<ul>
<li>被学校布置任务；被家长强迫学习</li>
</ul>
</li>
<li>受到社会观念约束<ul>
<li>高考填志愿选择热门专业</li>
</ul>
</li>
<li>为了得到群体认可<ul>
<li>为了出名、获得荣誉而做某事</li>
</ul>
</li>
<li>受到法律约束<ul>
<li>义务教育；义务服兵役</li>
</ul>
</li>
</ul>
</li>
<li>纯粹感官刺激、本能驱动的行为<ul>
<li>吃顿美餐、泡个温泉……</li>
</ul>
</li>
<li>消极行为<ul>
<li>边工作边听音乐。这时，听音乐是一种消极的行为，不需要你主观意识的参与</li>
</ul>
</li>
<li>心理舒适区<ul>
<li>一种“心理状态”。处于这种状态，你会感觉到放松，没有压力和焦虑。<ul>
<li>如果你处于某个环境中，在该环境下所需要的行为你都可以轻松搞定；你就处于“心理舒适区”。</li>
</ul>
</li>
<li>看知乎、看视频（短视频、电影、电视剧）、看微博……</li>
</ul>
</li>
</ul>
<h4 id="真正的兴趣"><a href="#真正的兴趣" class="headerlink" title="真正的兴趣"></a>真正的兴趣</h4><p>兴趣所具有的外延特征：</p>
<ul>
<li><strong><font color=blue>持久</font></strong><ul>
<li>几年，几十年……</li>
</ul>
</li>
<li><strong><font color=blue>内在动机</font></strong>（好奇心 + 思维乐趣）<ul>
<li>动机完全来源于内心，不随外界环境改变而轻易变迁</li>
</ul>
</li>
<li><strong><font color=blue>思维高度参与</font></strong><ul>
<li>编程、写作、作曲……各种需要强创作能力的行为</li>
</ul>
</li>
<li><strong><font color=blue>幸福感 / 快感</font></strong><ul>
<li>费马：数学只是业余爱好，研究成果大多没有发表<ul>
<li>“费马小定理”是他与朋友的往来书信中顺便提及的：$a^{m-1} \equiv 1(\bmod m)$</li>
</ul>
</li>
<li>过程性的快乐：持久但强度不高（即使尚未获得成果，它也会起作用）</li>
<li>愿意付出其他代价：从快感中获得补偿<ul>
<li>《侣行》</li>
</ul>
</li>
</ul>
</li>
<li><strong><font color=blue>成瘾性</font></strong><ul>
<li>真正的兴趣让人上瘾<ul>
<li>熬夜肝代码，调BUG</li>
</ul>
</li>
</ul>
</li>
<li><strong><font color=blue>走出心理舒适区</font></strong><ul>
<li>深度提升：在某个领域更进一步</li>
<li>广度提升：涉足一个全新的领域</li>
</ul>
</li>
<li><strong><font color=deepskyblue>心流</font></strong>（flow）<ul>
<li>由心理学家米哈里·契克森米哈伊（Mihaly Csikszentmihalyi）最早提出的概念。在心流状态下，你会忘记时间流逝、外界变迁，达到一种”<strong>忘我</strong>“的境界，全身心地投入到你感兴趣的活动中。</li>
<li>如图所示，当你<strong>在某个领域达到高水平技能，同时还面临着高难度任务的挑战</strong>，就有可能进入到心流的状态。（你对某个领域的兴趣越大，你越有可能在心流模型的两个维度同时达到高水平。）</li>
</ul>
</li>
</ul>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/9bfrey0IpObw5IW3kpM78jgOUf6tgclsYlvmeKKKxHHn0Gvxl8ntygrnvCXtFPs7IrbIetJnMvGIhCtdsFZuax06Lqo-8Dt7JiCUnbMHc70ocDJ4iMmBJ_uzb3JMVDFIxMlruTP8J9U" class="" title="维基百科-“心流”">
<p>真正的兴趣可以使你在人生中获得更多的快乐、更充实的生活。</p>
<h2 id="获得真正的兴趣"><a href="#获得真正的兴趣" class="headerlink" title="获得真正的兴趣"></a>获得真正的兴趣</h2><blockquote>
<p>如何获得真正的兴趣仍然是一个开放的话题。这里只讲一些简单的思考。</p>
<p><a href="https://www.zhihu.com/question/24963114/answer/29635971" target="_blank" rel="noopener external nofollow noreferrer">本科、硕士和博士有何区别？</a></p>
</blockquote>
<p>获得兴趣的必要条件是获得好奇心和思维乐趣。</p>
<p>好奇心一般不需要专门培养，当了解的越多，好奇心也会更强。只是需要注意，<strong>对广度的把握</strong>；如果对某一个领域过度专注，就会相对失去对其它领域的好奇心。至少，在获得真正的兴趣之前，不要过分偏科。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201221110703168.png" class="" title="知识边界">
<p>获得思维乐趣的方式，可以尝试从获取新知的过程中发掘。<strong>在获取新知的时候，适当地放慢速度</strong>，让新知和脑海中已存在的思想发生联结。在充分沉淀过后，内在的思考能力就会得到提升，当能力提升以后，便可以引发思考，并最终趋向于思维乐趣。</p>
<h2 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h2><p>一个网上广为流传的段子：</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/v2-74bf8d17930236ee4d28793d80b2aba0_720w.jpg" class="" title="胡适打牌">
<blockquote>
<p>当然，原文并非一致：<a href="https://www.zhihu.com/question/20162890/answer/14180030" target="_blank" rel="noopener external nofollow noreferrer">网上流传的季羡林吐槽、胡适打牌的日记属实吗？ - 田吉顺的回答 - 知乎</a></p>
</blockquote>
<p>自律意味着意志力；意志力通常与思维能力有关。</p>
<p>在获得思维乐趣之前，获取新知的同时，如果想要提升思考能力，就需要意志力。意志力可以帮你克服一些兴趣不起作用的场景。但意志力是一种宝贵的稀有资源，应该尽量让它在最有需要的场景发挥作用。</p>
<blockquote>
<p>意志力常常表现为一种偏执的信仰，任何新知都会不由自主地触发并强化它。</p>
</blockquote>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/dc-Cover-t387kh7bitbsdukgrkrmpho5a1-20190519010432.Medi.jpeg" class="" title="John Wick 3">
<blockquote>
<p>《John Wick 3》: <em>“He Is a Man of Focus, Commitment and Sheer Fucking Will.”</em></p>
</blockquote>
<p>外在动机和好奇心是意志力的主要来源，虽然不稳定，但是会有效果。获得意志力有时也需要内在动机的支撑：</p>
<blockquote>
<p><em>鲍迈斯特的小组屡次发现，刻意掌控意志和进行自我控制很辛苦。如果你必须强迫自己去做某件事，而此时这件事又面临一个新的挑战，你就会很不情愿或是根本无法进行自我控制。这种现象被命名为自我损耗（ego depletion）。</em></p>
</blockquote>
<p>在现实生活中，意志力很难获得。</p>
<p><strong>意志力遵循马太效应</strong>，</p>
<ul>
<li>那些意志力比较强的人，他们就更有可能运用某些心理学的措施，来进一步提升自己的意志力；</li>
<li>而那些意志力很差的人，即使知道这些改进措施，也没法付诸实行。</li>
</ul>
<p>在互联网时代，这样的马太效应会进一步放大。大部分人的上网时间都用于<strong>消遣</strong>——你总是处在你的心理舒适区，而这会渐渐消磨掉你的意志。</p>
<p>遗憾的是，大多数人终生也无法“<strong>战胜自我</strong>”。</p>
<p>自律，获得意志力的过程，只有你自己可以完成，其他任何人都无法代替。好的环境，好的方法，只能给你可能性，只有靠你自己去捕获其中的必然性。</p>
<h2 id="小马过河"><a href="#小马过河" class="headerlink" title="小马过河"></a>小马过河</h2><blockquote>
<p><strong><i><font color=deepskyblue>勇于尝试。</font></i></strong></p>
</blockquote>
<p>我想讲一点关于<strong>执行力</strong>的事情。</p>
<p>这里可以以我自身为例。我想学前端已经很久了，但一直觉得前端技术是一个很大很复杂的领域，包括你去看简单的HTML代码——几乎没有什么简单可言。比如，尝试查看我博客上About页面的HTML源代码：<a href="https://vel.life/about/" target="_blank" rel="noopener external nofollow noreferrer">https://vel.life/about/</a>。虽然整个页面看起来没有特别复杂，但对应的源代码也足有600行之多。</p>
<p>这使得我一直不敢轻易涉足前端。我总是尽量避免参与任何与前端相关的工作。</p>
<p>但是，最近，一个课程项目：<a href="https://vel.life/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/" target="_blank" rel="noopener external nofollow noreferrer">P2P系统设计</a>。因为要负责和前端对接，需要使用JavaScript编程，我被迫需要在几天时间上手前端。一开始觉得简直不可能，想找些Python的替代方案，但是效果都不好；最后咬咬牙，现学现卖，竟真的用JS做出来了。</p>
<p>道理固然是很重要的，但是，<strong>只有经历过的道理，才会在心中留下重量</strong>。就像小马过河的寓言，就像鲁迅的文字，就像王菲的歌……</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/77094b36acaf2eddfcfb778c801001e939019348.jpg" class="" title="小马过河">
<p>执行力是一种与勇气更加挂钩的能力。与意志力不同的是，如果意志力所坚持的方向是错误的，执行力可以让你及时纠错；万事开头难，执行力是意志力开始发挥效力前的铺垫工作，是一切的开始。</p>
<p>执行力强调状态的变化；意志力强调状态的维持。</p>
<h1 id="知识结构"><a href="#知识结构" class="headerlink" title="知识结构"></a>知识结构</h1><blockquote>
<p>《<a href="https://book.douban.com/subject/10785583/" target="_blank" rel="noopener external nofollow noreferrer">思考，快与慢</a>》，<a href="https://scholar.princeton.edu/kahneman" target="_blank" rel="noopener external nofollow noreferrer">Daniel Kahneman</a></p>
</blockquote>
<h2 id="大脑的两个系统"><a href="#大脑的两个系统" class="headerlink" title="大脑的两个系统"></a>大脑的两个系统</h2><blockquote>
<p><a href="https://www.linkedin.com/pulse/brain-system-1-2-faraz-ehjaz" target="_blank" rel="noopener external nofollow noreferrer">The Brain - System 1 and System 2</a></p>
</blockquote>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1570612670044" class="" title="The Brain - System 1 and System 2">
<p>我们的大脑存在快、慢两种做决定的方式：无意识的“系统1”，有意识的“系统2”。这两者是大脑应对不同场景的两套<strong>任务处理流程</strong>。</p>
<blockquote>
<p>注：心理学家基思·斯坦诺维奇（Keith Stanovich）和理查德·韦斯特（Richard West）率先提出的术语，用以说明大脑中的两套系统，即系统1和系统2。</p>
</blockquote>
<h3 id="系统1"><a href="#系统1" class="headerlink" title="系统1"></a>系统1</h3><p>系统1的运行是无意识且快速的，不怎么费脑力，没有感觉，完全处于自主控制状态。</p>
<p>比如：</p>
<ul>
<li>人脸识别、表情识别</li>
<li>听到某首（你熟悉的）乐曲，立即想到名称</li>
<li>（对于识字的人）一看到某个“字/单词”，就想到读音</li>
<li>周围存在笑声的时候，你也不自禁地笑起来</li>
</ul>
<p>系统1自动运行，其带给你（潜移默化）的直观感受是你所无法控制的：</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201221144728825.png" class="" title="视觉干扰">
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201221153759012.png" class="" title="立体直觉">
<h3 id="系统2"><a href="#系统2" class="headerlink" title="系统2"></a>系统2</h3><p>系统2将注意力转移到需要费脑力的大脑活动（<strong>思维能力</strong>）上来，例如复杂的运算。系统2的运行通常与行为、选择和专注等主观体验相关联。</p>
<p>比如：</p>
<ul>
<li>计算 $37\times 24 = \;?$</li>
<li>逻辑推理</li>
<li>打游戏</li>
<li>看论文</li>
<li>创作……</li>
</ul>
<hr>
<p>系统1偏向于直觉/感知（无意识），系统2偏向于认知（有意识）。</p>
<p>和计算机相反的是，人类大脑的系统1耗能水平远低于系统2。</p>
<blockquote>
<p>真正的兴趣活动，离不开系统2的运作。</p>
</blockquote>
<h3 id="短路原理"><a href="#短路原理" class="headerlink" title="短路原理"></a>短路原理</h3><p>如果某个任务可以由“系统1”搞定，就不会再让“系统2”参与。</p>
<blockquote>
<p>对于司空见惯的常识，系统2将不再参与思考。</p>
</blockquote>
<p>即使有意识地调用系统2来完成某个任务，仍然可能受到系统1无意识中收集的信息的影响。</p>
<blockquote>
<p>下面是某个心理学实验：<br>　　对 A、B 两组被试，让他们填写一份问卷。问卷上有一系列历史名人，要求填写这些名人大概死于几岁。参与测试的人都知道这些名人，但未必记得他们的死亡年龄，只能进行大致的估计。<br>　　对于“A组”，他们的座位上标有一个随机数字。这个数字大概是几百或几千（很显然与年龄没啥关系）；对于“B组”，座位上没有标数字。<br>　　测试的结果，“A组”的问卷，对年龄的猜测显著高于“B组”。测试之后，再去询问“A组”的测试人员，相当比例的人【没有】意识到自己的座位上标有数字。<br>　　从这个测试可以看出：“系统1”在下意识（无意识）的情况下收集到的信息，也影响到了“系统2”。</p>
</blockquote>
<h3 id="如何提升思维能力"><a href="#如何提升思维能力" class="headerlink" title="如何提升思维能力"></a>如何提升思维能力</h3><ul>
<li>少看消遣性的内容，<strong>多看费脑筋的内容</strong></li>
<li><strong>多接触和学习不同领域</strong></li>
<li><strong>批判思维</strong><ul>
<li>弱批判思维：聆听与自己有冲突的意见，并寻找全部的谬误</li>
<li>强批判思维：质疑和反思自我，找到自己的全部谬误</li>
</ul>
</li>
<li><strong>培养兴趣</strong></li>
<li><strong>选择合适的信息媒介</strong></li>
</ul>
<h2 id="信息媒介"><a href="#信息媒介" class="headerlink" title="信息媒介"></a>信息媒介</h2><blockquote>
<p><a href="https://vel.life/传播学/" target="_blank" rel="noopener external nofollow noreferrer">传播学</a></p>
<p><a href="https://program-think.blogspot.com/2015/02/Is-Blogging-Dead.html" target="_blank" rel="noopener external nofollow noreferrer">“传统博客”过时了吗？——兼谈各种媒介形态的优缺点</a></p>
</blockquote>
<p>相对于博客：</p>
<ul>
<li>微博客<ul>
<li>缺乏深度<ul>
<li>字数“显”限制</li>
</ul>
</li>
<li>碎片化<ul>
<li>无法集中注意力</li>
</ul>
</li>
<li>生命周期太短</li>
<li>信噪比低<ul>
<li>高价值内容远少于总阅读量</li>
</ul>
</li>
</ul>
</li>
<li>社交网络（比如微信）<ul>
<li>碎片化</li>
<li>信噪比低</li>
<li>干扰因素多<ul>
<li>频繁的互动、更新</li>
</ul>
</li>
</ul>
</li>
<li><strong>问答网站</strong>（比如知乎）<ul>
<li>需要提问能力、搜索能力（有一定基础）</li>
<li>能够展现的信息形式受限（小说、诗歌、散文……在问答网站上一般只有命题作文。）</li>
</ul>
</li>
<li><strong>Wiki百科</strong><ul>
<li>适合于事实的传播</li>
<li>不适合于观点的获取</li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>主动性、系统性、深刻性</li>
<li>创作门槛较高<ul>
<li>目前出版变得越来越容易，导致筛选成本急剧上升</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="核心学习原则"><a href="#核心学习原则" class="headerlink" title="核心学习原则"></a>核心学习原则</h2><blockquote>
<p><em><font color=deepskyblue><strong>有限的精力，需要有限的专注。</strong></font></em></p>
</blockquote>
<h3 id="DIKW模型"><a href="#DIKW模型" class="headerlink" title="DIKW模型"></a>DIKW模型</h3><blockquote>
<p><a href="https://program-think.blogspot.com/2019/10/Systematic-Learning.html" target="_blank" rel="noopener external nofollow noreferrer">如何【系统性学习】——从“媒介形态”聊到“DIKW 模型”</a></p>
</blockquote>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/vfMbn8C4VB4hG_Eg4rovih8lEMnb2Qwx8LLGrdjkKsl_Zr2graRjKsnVAUV5t2SqGs4f_xWSirtgCt1VbqgIQgjG3R-pjBOXrSaBWxLX6TF5JhTy_-W1ec62SpI7CmNPObazmwqfkdI" class="" title="DIZK模型">
<ul>
<li><strong>Data</strong>（数据）<ul>
<li>从环境中直接获取的观测结果<ul>
<li>比如电路中的电信号，气象测量中的传感器值</li>
</ul>
</li>
</ul>
</li>
<li><strong>Information</strong>（信息）<ul>
<li>从Data中获得的简单结论；周期短，碎片化（<strong>WHAT</strong>？）<ul>
<li>从气象传感器中得出某个时段的平均气温</li>
</ul>
</li>
</ul>
</li>
<li><strong><font color=blue>Knowledge</font></strong>（知识）<ul>
<li>从Information中整合出的通用原理（<strong>HOW</strong>？）<ul>
<li>从气温统计中得出气候变化的规律</li>
</ul>
</li>
</ul>
</li>
<li><strong><font color=deepskyblue>Wisdom</font></strong>（智慧）<ul>
<li>从Knowledge中进行因果推断，获得本质（<strong>WHY</strong>？）<ul>
<li>“编程语言”有成百上千种，而“编程范式”只有大约十多种。“编程范式”就是一种 <font color=deepskyblue><strong>W</strong></font>（智慧）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Alan_Perlis" target="_blank" rel="noopener external nofollow noreferrer">Alan Perlis</a>（<a href="https://zh.wikipedia.org/zh-hk/艾伦·佩利" target="_blank" rel="noopener external nofollow noreferrer">艾伦·佩利</a>，【第一个】图灵奖得主）的名言——<strong><font color=red>不能影响你编程观点的语言，不值得你去学！</font></strong></p>
</blockquote>
<h3 id="少即是多"><a href="#少即是多" class="headerlink" title="少即是多"></a>少即是多</h3><p>我们应该着重学习有价值的内容，但就算只学习<strong><font color=blue>Knowledge</font></strong>（知识）和<strong><font color=deepskyblue>Wisdom</font></strong>（智慧），它们在整个人类世界中的数量也是十分庞大的。</p>
<p><strong><font color=red>知识爆炸</font></strong>在当代表现十分突出。做科研的要面对每年成千上万新鲜出炉的论文，做工程面对层出不穷的新模型新技术，自媒体和碎片化信息充斥了我们的闲暇生活。</p>
<p>这时候你需要做一些取舍——<strong>只记住核心的知识点，舍弃边缘的知识点</strong>。当需要用到那些边缘知识的时候，查阅笔记或者查阅搜索引擎就可以了。</p>
<p>除了对具体知识内容的过滤，还可能需要主动平衡整体学习的广度和深度。</p>
<p><strong>深度</strong>，就是每一个具体领域，你深入到了什么层次。</p>
<blockquote>
<p>如果一个人的知识结构只有广度没有深度，就会导致“<strong><font color=red>没有亮点</font></strong>”，变得没有竞争力，只能“纸上谈兵”。</p>
</blockquote>
<p><strong>广度</strong>，就是在你的知识结构中，包含了多少领域。</p>
<blockquote>
<p>现代社会不同领域之间的联系变得紧密，想要某个领域有足够的深入，必然要了解很多辅助性领域的知识。</p>
</blockquote>
<p><strong><font color=red>一个人的精力是极其有限的</font></strong>。如何平衡广度和深度呢？可以借鉴正态分布：<strong>在核心领域上最为深入</strong>，在一些相近的领域上也投入一定的时间，其他较为疏远的领域则可以浅尝辄止。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/6eH82UPynOfXmccG23GrSJGTiekvEedE7vXCej4JlIA1_bD8VqYZVRtBYoAgkimnJ9XcKKryPaw4HyXCqjX-lm7nrOWnZ6w1qbjgrcOJeu9zX2J5aeAxNFnjTRog" class="" title="知识的分布">
<h3 id="知识拓扑"><a href="#知识拓扑" class="headerlink" title="知识拓扑"></a>知识拓扑</h3><blockquote>
<p><a href="https://www.processon.com/" target="_blank" rel="noopener external nofollow noreferrer">ProcessOn</a> 流程图工具</p>
</blockquote>
<p>在学习计算机的过程中，大家很快会接触到一种叫做“<a href="http://songlee24.github.io/2015/05/07/topological-sorting/" target="_blank" rel="noopener external nofollow noreferrer">拓扑排序</a>”的东西。大概的意思，就是你在学习A之前，你得先学会B；在学会B之前，先学会C和D……</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201221193552319.png" class="" title="粒子物理学">
<p>如果一个领域有复杂的知识拓扑，那么合适的拓扑排序——找到一开始应该优先学习的内容，很重要。</p>
<p>如何获得一个领域的知识拓扑呢？</p>
<ul>
<li>看该领域的入门读物 / 百科 / 博客</li>
<li>询问某个熟悉该领域的人</li>
</ul>
<p>在疾风计划的课程大纲上，其实也展现了一个粗略的知识拓扑：</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201220154821058.png" class="" title="疾风计划">
<blockquote>
<p>但是它并不细致，比如学习一部分数据结构或者离散数学，实际就可以开始学习一些简单的算法。这样的学习策略，可以一定程度地帮助你培养内在动机，从而点燃真正的兴趣。</p>
</blockquote>
<h3 id="知识森林"><a href="#知识森林" class="headerlink" title="知识森林"></a><font color=blue>知识森林</font></h3><p>如果把不同领域的知识拓扑放在一起，你就可以观察到我们之前提及的知识分布的离散化结构。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225191809822.png" class="" title="知识树示例">
<h2 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h2><blockquote>
<p><em><font color=deepskyblue><strong>以教促学。</strong></font></em></p>
</blockquote>
<p>假设你正在学习某个领域。费曼学习法即，你需要将这个领域的知识讲给一个在这个领域零基础的菜鸟，并且让他听懂。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/the-feynman-technique-safal-niveshak.jpeg" class="" title="Learning Effectively With the Feynman Technique (The Complete Guide)(https:&#x2F;&#x2F;www.lifehack.org&#x2F;862931&#x2F;feynman-technique)">
<p>三种掌握程度：</p>
<ul>
<li>完全不知道讲什么<ul>
<li>对该领域还缺乏<strong>系统性</strong>的了解</li>
<li>需要重新“入门”</li>
</ul>
</li>
<li>讲着讲着会经常卡壳<ul>
<li>有了系统性了解，但还没有<strong>理顺</strong>整个领域</li>
<li>把卡壳的地方重新学习</li>
</ul>
</li>
<li>讲得出来，但别人听不懂<ul>
<li>无法做到深入浅出；没有做到换位思考</li>
<li>（通过讨论，把没讲明白的部分筛选出来，做进一步的分析）</li>
</ul>
</li>
</ul>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>行使费曼学习法的一个好方法就是写博客。写博客面向的网络上随机的人，因此需要深入浅出的文章，这会潜意识地锻炼你写作的能力，同时使得博客的受众获得知识传播。</p>
<p>我也是在自学计算机的过程中，逐渐了解到博客的存在，并最终决定建立自己的博客。搭建一个博客，简单的可以直接在各种博客网注册账号，即可以发表文章；复杂的，则可能需要你架设自己的服务器、域名，你必须会一些前端的知识，面对各种工程问题你还需要一些DEBUG能力……写博客会督促你不断学习。最好的状态是，写博客成为你的一种兴趣。</p>
<h1 id="时间与人生"><a href="#时间与人生" class="headerlink" title="时间与人生"></a>时间与人生</h1><p><a href="http://www.stat.ucla.edu/~sczhu/Blog_articles/%E5%AD%A6%E6%9C%AF%E4%BA%BA%E7%94%9F%EF%BC%9A%E6%96%87%E7%AB%A0%E5%8D%83%E5%8F%A4%E4%BA%8B%E5%BE%97%E5%A4%B1%E5%AF%B8%E5%BF%83%E7%9F%A5.pdf" target="_blank" rel="noopener external nofollow noreferrer">学术人生：文章千古事， 得失寸心知</a> 朱松纯</p>
<blockquote>
<p><em><font color=deepskyblue><strong>“珍惜你的学习机会，思考长远的人生路途，做明智的选择。”</strong></font></em></p>
</blockquote>
<h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><blockquote>
<p>《<a href="https://docs.google.com/document/d/1cm3v2QT8wvT1WFKq_IjzwAHN0_1QuMpEQOVzVYQcIw4/" target="_blank" rel="noopener external nofollow noreferrer">成为技术领导者——解决问题的有机方法</a>》，<a href="https://en.wikipedia.org/wiki/Gerald_Weinberg" target="_blank" rel="noopener external nofollow noreferrer">Gerald Weinberg</a> / <a href="https://zh.wikipedia.org/wiki/傑拉爾德·溫伯格" target="_blank" rel="noopener external nofollow noreferrer">杰拉尔德·温伯格</a>，<a href="https://github.com/TonnnnnnyLiu/Books/blob/master/%E6%88%90%E4%B8%BA%E6%8A%80%E6%9C%AF%E9%A2%86%E5%AF%BC%E8%80%85.pdf" target="_blank" rel="noopener external nofollow noreferrer">PDF</a></p>
</blockquote>
<h3 id="能力曲线"><a href="#能力曲线" class="headerlink" title="能力曲线"></a><font color=blue>能力曲线</font></h3><p>个人能力的变化存在两种模式。一种是渐进模式，另一种是跃迁模式。</p>
<ul>
<li><strong>渐进模式</strong>：在同一个层次上，能力发生进步</li>
<li><strong>跃迁模式</strong>：这种模式下，能力可以跃迁到更高的层次</li>
</ul>
<p>大部分人观测到的进步（<strong><font color=blue>能力曲线</font></strong>）通常像下面这个图，每隔一段时间就发现有明显的进步：</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225122901702.png" class="" title="技术进步">
<p>但是当统计数据更多一些之后，真正的能力曲线形状的刻画变得更精细，这时出现了“平稳期”和“突变期”的概念。大部分的进步来源于从一个高原阶段到另一个的高原阶段的突然飞跃。</p>
<p>平稳期的技术积累对于瓶颈期的快速突破至关重要，但是在突破期除了熟能生巧以外，为了产生真正的质变，常常需要需要某种<strong>观念上的突破</strong>。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225123004209.png" class="" title="平稳期和突变期">
<blockquote>
<p><em><font color=deepskyblue><strong>黎明前的黑暗。</strong></font></em></p>
</blockquote>
<p>如果对成长曲线的刻画更加精细一些，你还会发现，在完成跃迁前，存在一个低谷期。每当试图有所提高时，可能需要一个小的退步之后才能取得大的提高。</p>
<p>比如，有一个编辑器叫做<a href="https://www.vim.org/" target="_blank" rel="noopener external nofollow noreferrer"><code>vim</code></a>，学习成本很高，但是一旦学会灵活使用，文本编辑的速度就会产生飞跃——这样的飞跃仅仅通过在其他编辑器上不断练习是做不到的。</p>
<blockquote>
<p>对于大多数用户来说，Vim有着一个比较陡峭的学习曲线。这意味着开始学习的时候可能会进展缓慢，但是一旦掌握一些基本操作之后，能大幅度提高编辑效率。（<a href="https://zh.wikipedia.org/wiki/Vim#%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF" target="_blank" rel="noopener external nofollow noreferrer">Vim - 维基百科</a>）</p>
</blockquote>
<p>这种飞跃更像是一种<strong>攀登</strong>。为了攀登到新的高度，你必须离开原有的立足点，抛开擅长的东西，还可能回落到低谷。但如果你不愿意舍弃擅长的东西，那么你将继续缓慢进步，但永远达不到新的高度。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225122758391.png" class="" title="技术跃迁">
<p>成长曲线在现实中可能存在大量的噪声，这些随机事件常常使人“不识庐山真面目”。但在许多真实成长过程中的噪音下掩藏着一个“低谷-高原”模式……</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225124754114.png" class="" title="在现实社会中成长">
<blockquote>
<p><del>注：翻译此书的人可能把坐标轴标反了。</del></p>
</blockquote>
<p>《<a href="https://docs.google.com/document/d/1cm3v2QT8wvT1WFKq_IjzwAHN0_1QuMpEQOVzVYQcIw4/" target="_blank" rel="noopener external nofollow noreferrer">成为技术领导者——解决问题的有机方法</a>》的作者Gerald是软件工程领域久负盛名的大牛。早在上世纪50年代（IT 的远古时代），就在 IBM 担任系统开发经理，并参与60年代 NASA 的<a href="https://zh.wikipedia.org/wiki/水星计划" target="_blank" rel="noopener external nofollow noreferrer">水星计划</a>（美国首次载人航天飞行）。</p>
<p>Gerald在书中也谈到自己的能力曲线的一个具体案例。</p>
<p>Gerald当年是<a href="https://en.wikipedia.org/wiki/IBM_650" target="_blank" rel="noopener external nofollow noreferrer">IBM650</a>的最佳程序员。IBM650是上个世纪五十年代的计算机（1950s），当时还在用纸带打孔的方式编程。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1024px-IBM_650_at_Texas_A&M.jpg" class="" title="IBM 650 at Texas A&amp;M University. The IBM 533 Card Read Punch unit is on the right.">
<p>但没过多久<a href="https://en.wikipedia.org/wiki/IBM_704" target="_blank" rel="noopener external nofollow noreferrer">IBM704</a>这种更庞大功能更强的计算机就生产出来了。Gerald一开始是拒绝的，他私下学习了704的知识，但是发现学起来并不容易，找了个借口又回到了650。直到他渐渐了解到704的一些优越性，包括大存储、高运算速度，能够解决650所不能解决的一些问题。Gerald有一天碰到了一位客户，发现他遇到的计算问题，用650是显然无法解决的，而704就是为这类问题量身定做——Gerald终于开始全面转向704，<strong>攀登新的高原</strong>。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1024px-IBM_Electronic_Data_Processing_Machine_-_GPN-2000-001881.jpg" class="" title="An IBM 704 computer at NACA in 1957">
<p>计算机技术进步很快，在704之后，全新的计算机<a href="https://en.wikipedia.org/wiki/IBM_System/360" target="_blank" rel="noopener external nofollow noreferrer">IBM360</a>又问世了。再过了几年，高级语言也问世了，汇编语言一统天下的场景一去不复返……Gerald开始一轮又一轮的循环，但他的感觉不再像第一次转变那么痛苦——同样感到不安，同样基于返回原地，但是这次他更为自信，相信自己一定能成功，甚至感到了一丝兴奋……他相信自己能够应付这样的变化，把它看作是一个创造性的挑战而不是一种必须承受的磨难。</p>
<h3 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h3><blockquote>
<p><em><font color=deepskyblue><strong>“远见”。</strong></font></em></p>
</blockquote>
<h4 id="慢即是快"><a href="#慢即是快" class="headerlink" title="慢即是快"></a>慢即是快</h4><p>那些愿意花足够的时间与精力去<strong>搞定基本功</strong>、<strong>打好基础</strong>的人，加速度会越来越快。</p>
<blockquote>
<p>在能力曲线上就是追求基本能力的多次跃迁。</p>
</blockquote>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/Wvom7GqT56FImCj47wXwaNVk5MYYs4Cm-YWISag0iF9w5Mrp_ZSuqzJgUdjLmjUpKcz7LVOvtaUXyvDR-7cwRhk9NtOfUuasGHoThhO464VzFVbctFiO2WDmeF32-KcUH1SzUnjQWOY" class="" title="指数函数">
<h4 id="边际递增"><a href="#边际递增" class="headerlink" title="边际递增"></a>边际递增</h4><blockquote>
<p><strong><font color=deepskyblue>大多数人在20到30岁就已经过完自己的一生；<br>一过了这个年龄段，他们就变成自己的影子，以后的生命只是在不断重复自己…</font></strong></p>
<p>——罗曼·罗兰，《约翰·克里斯朵夫》</p>
</blockquote>
<p>绝大部分人的人生处在<strong><font color=red>边际递减</font></strong>的状态中。他们的学习曲线到了一定程度便不再发生显著的变化，而是趋近于某个固定的水平。</p>
<p>互联网的出现，使得一小部分人的能力曲线，发生了<strong><font color=blue>边际递增</font></strong>的现象。一个善于学习，没有沉迷在互联网的各种繁杂中的人，如果充满求知欲，如果运气不太差的话……不断学习，不断跨领域、做系统性学习的人，他的思维能力和学习能力都会不断上升，从而让能力曲线不断上扬。</p>
<blockquote>
<p>学习，一定要从长计议，考虑长期坚持之后的收获。</p>
</blockquote>
<h4 id="更激进的跃迁模式"><a href="#更激进的跃迁模式" class="headerlink" title="更激进的跃迁模式"></a>更激进的跃迁模式</h4><blockquote>
<p><em><font color=deepskyblue><strong>那不能杀死我的，使我更强！（What does not kill me, makes me stronger.）</strong></font></em></p>
<p>——尼采，《Ecce Homo》</p>
</blockquote>
<p>我们在能力曲线一节中已经指出：<strong>每当试图跨越到下一个阶段时，可能需要一个小的退步之后才能取得大的提高</strong>。</p>
<p>在现实生活中，你需要勇于尝试那些更有挑战性的工作，而不仅仅满足于”稍稍偏离舒适区的小退步“所带来的一定跃迁。</p>
<p><strong>成长曲线是整个人生的学习曲线的一小段缩影</strong>。如图，每一小段学习曲线，都是一条成长曲线。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/image-20201225210858008.png" class="" title="激进跃迁">
<p>在不断学习的过程，你的跃迁将会越来越快，幅度也越来越大；你挑战的问题难度也必然越来越大。这就对应着越来越激进的跃迁模式。</p>
<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><blockquote>
<p><a href="https://vel.life/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener external nofollow noreferrer">年中总结</a></p>
</blockquote>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/Mot-1.jpg" class="" title="Motivation | Evolution Culture(https:&#x2F;&#x2F;www.evolutionculture.co.uk&#x2F;motivation&#x2F;)">
<p>计算机领域著名的学者朱松纯老师在《<a href="http://www.stat.ucla.edu/~sczhu/Blog_articles/%E5%AD%A6%E6%9C%AF%E4%BA%BA%E7%94%9F%EF%BC%9A%E6%96%87%E7%AB%A0%E5%8D%83%E5%8F%A4%E4%BA%8B%E5%BE%97%E5%A4%B1%E5%AF%B8%E5%BF%83%E7%9F%A5.pdf" target="_blank" rel="noopener external nofollow noreferrer">学术人生：文章千古事， 得失寸心知</a>》谈到了他的人生。当然，不是每个人都会过所谓的“学术人生”，但是，既然大家参加了疾风计划，想必对学习这件事情是比较重视的，也许不一定走上“学术人生”，但是学习的道路总是相似的，我相信，大家终究是殊途同归。</p>
<p>至于我的人生，说实话，在我看来，才刚刚开始走上我想要去走的路——也许还没有找到最终的路……</p>
<h3 id="谈到计算机"><a href="#谈到计算机" class="headerlink" title="谈到计算机"></a>谈到计算机</h3><blockquote>
<p><a href="https://vel.life/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF-912%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9%E8%AE%A1%E5%88%92/" target="_blank" rel="noopener external nofollow noreferrer">912 内容学习计划</a></p>
</blockquote>
<p>关于如何学好计算机课程专业知识。我并非计算机专业，所以我能谈的非常有限。</p>
<p>每个人学计算机的动机都是不同的，因此最想要学习的内容也会有不同。但是，如果说没有什么特别急需应用的需求的话（比如马上要做一个网站，马上要上线一个产品……），我觉得还是尽量优先学习那些比较经典的、经过了漫长时间考验的知识。这些在计算机学科里面就体现为基础知识：数学、编程、实验……</p>
<p>时代变化得越来越快，做科研、做工程，可能会不由自主地追逐当下的热点。但是，从学习的角度来说，我们的聚焦点不该停留在这些快速迭代的风景中，而要去寻找变换中的不变，寻找风中的磐石。如果想做真正有价值的科研、开发有突破贡献的技术，有时还得静下心来，沉淀。</p>
<h3 id="黄色的树林"><a href="#黄色的树林" class="headerlink" title="黄色的树林"></a>黄色的树林</h3><img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/DORbMI8UIAAnB0F.jpg" class="" title="Two roads diverged through the yellow woods...I  took the road less traveled ~Robert Frost…">
<blockquote>
<p><em>黄色的树林里分出两条路</em><br><em>可惜我不能同时去涉足</em><br><em>我在那路口久久伫立</em><br><em>我向着一条路极目望去</em><br><em>直到它消失在丛林深处</em></p>
<p><em>但我却选择了另外一条路</em><br><em>它荒草萋萋，十分幽寂</em><br><em>显得更诱人，更美丽</em><br><em>虽然在这条小路上</em><br><em>很少留下旅人的足迹</em></p>
<p><em>那天清晨落叶满地</em><br><em>两条路都未经脚印污染</em><br><em>呵，留下一条路等改日再见</em><br><em>但我知道路径延绵无尽头</em><br><em>恐怕我难以再回返</em></p>
<p><em>也许多少年后在某个地方，</em><br><em>我将轻声叹息将往事回顾：</em><br><em>一片树林里分出两条路——</em><br><em>而我选择了人迹更少的一条，</em><br><em>从此决定了我一生的道路。</em></p>
<p>——《未选择的路》，罗伯特·弗尔斯特</p>
</blockquote>
<p>大家以后的路会有不同。会面不同的选择。</p>
<p>我提到了一些观点，但是这些也仅仅只是一些有限适用的观点。在现实里面，选择更多，困难更多，干扰也更多。</p>
<p>也许过不了多久，这里讲述的所有东西都将被你遗忘。我想， 有几个关键词：<strong><font color=deepskyblue>心流</font></strong>、<strong><font color=deepskyblue>智慧</font></strong>、<strong><font color=deepskyblue>远见</font></strong>。其他的内容忘了，回忆这几个字，在某种意义上也足够了。</p>
<h3 id="勤为径"><a href="#勤为径" class="headerlink" title="勤为径"></a>勤为径</h3><blockquote>
<p><em><font color=deepskyblue><strong>既入宝山，不空手而归。</strong></font></em></p>
</blockquote>
<p>邓公总是强调：“入宝山不能空手而返”。</p>
<p>既然参加了疾风计划，就“不要空手而返”吧。</p>
<p>书山有路勤为径。这句话其实从另一个角度理解的话：“书山”本没有路——走的人多了，也便成了路。你现在看到的每一条学习之路，都是无数勤恳的开拓者硬生生从荒野中开辟而出的。</p>
<p>希望大家有一天也可以开辟一条自己的路。</p>
<img data-src="/%E8%AE%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/climb.jpeg" class="" title="climb">
<h1 id="Pre答疑环节"><a href="#Pre答疑环节" class="headerlink" title="Pre答疑环节"></a>Pre答疑环节</h1><p>Q：本人目前大二，因为我也考虑要跨专业考计算机研究生，所以特别想知道学长认为应当<strong>怎样才能认清自己能力的范围</strong>呢？（其实就是想问在计算机考研中要怎样才能知道自己是否拥有着清华或其他985院校的实力呢？）如果想要像学长一样清华或者其他985院校跨考计算机上岸的话，学长认为我们应当拥有的<strong>核心竞争力</strong>是什么呢？疾风计划能在何种程度上帮助到我们呢？</p>
<blockquote>
<p>认清自己能力最好的方式就是做有挑战的事情，这个时候你就会对自己能力的局限之处获得直观感受。其次，就是多去了解别人走过的路，他们的具体经历，这也会帮助你找准定位。</p>
<p>核心竞争力是：科研能力、编程能力、学业水平。</p>
<p>疾风计划更针对学业水平一些。</p>
</blockquote>
<p>Q：在专业背景不同的情况下，如何尽快在有限的时间内跟上计算机专业学习的进度？比如：如何在我们学堂在线规定的一年内克服专业背景不同的困难，完成学业？</p>
<blockquote>
<p>投入，不拖延。学习任何事情都需要花费时间，但是，拖得越久，学习效率就越低（日积月累这种零碎学习方式只适合记忆，而不适合学习理论）。一定要抽出整块的时间，给自己留出充分的思考余地。对学过的东西一定要做好高质量的笔记；不一味地追赶进度，而是保证每一个脚印都很扎实。</p>
</blockquote>
<p>Q：请问学长准备跨考期间是怎么复习的呢，比如高数，英语，政治和专业课各科的复习方法能简要介绍一下吗？</p>
<blockquote>
<p>可以看我以前写的总结：<a href="https://vel.life/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF-912%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9%E8%AE%A1%E5%88%92/" target="_blank" rel="noopener external nofollow noreferrer">912 内容学习计划</a>。公共课方面我的水平很一般，就不班门弄斧了。</p>
</blockquote>
<p>Q：1.目前的计算机科研方向主要可以分为哪些? 2.之后如果走科研道路需不需要参加ACM或蓝桥杯(本人非常想参加算法竞赛但同时也爱好科研) 3.跨专业考985院校除了要学习计科的所有内容还需要再拓展哪些内容?(例如人工智能方向的) 4.计科专业有没有必要学数学系的分析学和代数学内容?如果有则需要着重学习哪些课程?</p>
<blockquote>
<p>科研方向可就多了，按清华计算机系研究所来分：媒体所、软件所、智能所、网络所、高性能所。具体可以看系官网上的<a href="http://www.cs.tsinghua.edu.cn/publish/cs/4719/index.html" target="_blank" rel="noopener external nofollow noreferrer">科学研究</a>部分。</p>
<p>算法竞赛是<strong>打基础</strong>和<strong>敲门砖</strong>。在实际科研中运用有限。</p>
<p>需要带有科研性质的经历，拓展的内容根据你选定的科研方向而定（数据挖掘、机器翻译、目标跟踪、人机交互……）。</p>
<p>有需要。单纯从计算机科学的角度讲，数学极为重要，很多计算机科学家都是数学系出身；如果要从事理论计算机科学的研究的话，数学更是不可或缺。在AI领域的话，深度学习中的理论分析会用到概率论、经典分析、函数论的一些知识，现在所谓的符号空间智能模型也需要符号计算的一些工具，比如多项式代数。计算共形几何的最优传输理论现在也在GAN等模型中用来解释一些现象。总之就是，有很多数学知识需要学，但是并不一定要全面地学——看具体需求即可。我写了一些类似的总结，<a href="https://vel.life/人工智能中的新数学/" target="_blank" rel="noopener external nofollow noreferrer">人工智能中的新数学</a>，有兴趣可以看看。</p>
</blockquote>
<p>Q：算法学习方法分享</p>
<blockquote>
<p>之前算法训练营的longyue521助教曾经发表过相关的内容，我转载到了知乎上：<a href="https://www.zhihu.com/question/275893080/answer/444570092" target="_blank" rel="noopener external nofollow noreferrer">Here</a>。有兴趣可以看看。</p>
</blockquote>
<p>Q：1.清华计算机912专业课应如何准备？ 2.考研复习从几月份开始，具体是如何备考的？</p>
<blockquote>
<p>可以看我以前写的总结：<a href="https://vel.life/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF-912%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9%E8%AE%A1%E5%88%92/" target="_blank" rel="noopener external nofollow noreferrer">912 内容学习计划</a>。</p>
</blockquote>
<p>Q：如何做到算法训练营第一名？考研时每天学习投入多少？学习算法训练营每天投入多少？入学前只学习了考试科目和算法训练营吗，疾风计划里的非考试科目您有自学到什么程度？</p>
<blockquote>
<p>专注和投入。考研时每天除了生活起居之外基本都是在学习，算法训练营也是类似的；都需要全身心投入。不只，在学校学过基本的编程语言，做过一些人工智能、数据分析方面的事情。</p>
<p>疾风计划里的非考试科目：</p>
<ul>
<li>程序设计基础：大学修过《高级程序设计语言》，100分</li>
<li>面向对象程序设计：选修过一门通识课，了解过C++的核心概念</li>
<li>离散数学：在图书馆借过一本红色封面的美版离散数学教材，自行学习了大部分内容</li>
<li>算法设计与分析：大学选过软院的算法课，但是没有OJ经验，加上时间仓促，成绩勉强及格</li>
<li>Linux、人工智能……</li>
</ul>
</blockquote>
<p>Q： 1.跨考到清华计算机需要做什么准备，或者说需要达到什么水平？ 2.跨考生如何弥补自己没有项目经历的劣势？</p>
<blockquote>
<p>据我了解，考研有一定的运气成分（即使有足够的水平，也不一定就能上岸）；最终还是看老师怎么想。你唯一能做的，就是做好自己。水平自然是越高越好，准备的方面应该有：学习水平（GPA / 英语 / 自学能力）、科研水平（项目 / 论文 / 实习）、编程能力……</p>
<p>提前找实习（实验室，或者科研型企业），参与开源项目，或者其他<strong>能证明自己科研潜力</strong>的事情。</p>
</blockquote>
<p>Q：跨专业跨校考研，专业课资料怎么找？</p>
<blockquote>
<p>我仅仅了解912计算机专业课的资料收集。渠道大概有：考研QQ群，课程官方网站，github开源项目，搜索引擎……并且，本人在考研过程中已经总结了一个比较系统的项目：<a href="https://github.com/stellarkey/912_project" target="_blank" rel="noopener external nofollow noreferrer">912_project</a>。因此在912专业课方面应该不存在什么找资料的问题，资料都已经找好了。主要还是学习能力和决心。</p>
</blockquote>
<p>Q：学长，请聊聊为何跨专业，以及跨专业考研所面对的问题</p>
<blockquote>
<p>这个跟我们之前谈到的动机问题是一致的，无论做什么事情，拥有一个内在动机才能走得长远。在我当年刚进入大学的时候，计算机行业其实就已经开始进入潮流了，要说完全只是出于兴趣——我也不好说得这么绝对。但是，我学习计算机这么久了，我想最后沉淀下来的，还是真正的兴趣在驱动。<strong>其实无论做什么事情，一开始的动机可能是比较复杂的，但如果能够坚持下去，最后总会收敛到某种内在动机</strong>。</p>
<p>跨专业考研面临的问题无非就是信息差，以及能力不足的问题。信息差主要在复试之前体现，包括找资料、找老师等；复试就会面临能力不足的问题。</p>
</blockquote>
<p>Q：学霸您好！我是参加疾风计划的一员，有幸可以通过这次的直播，请教您一个问题。就是我学着学者吧，脑子就不自觉的跑路了，开小差了，特别想问一下您，是怎么做到可以在学习上如此专注的？可以和我们分享一下您的妙招吗？</p>
<blockquote>
<p>长时间专注是一种稀有的状态，也就是之前提到的所谓“<strong>心流</strong>”。但是，如果一开始你的学习专注能力不够，不妨先从一小段一小段的专注开始慢慢感受；中间穿插适当的休息。你也可以采用一些类似番茄钟的时间管理软件来获得更精确的控制。培养出习惯大概只需要两周。</p>
<p>如果发现自己不在状态，最困难的一步可能是从这种低效的开小差状态中脱离出来——因为它会给你同时身体的放松和精神上虚有的自我满足感。这个时候，一些提前设计好的外力，比如去图书馆，比如找你的同学对你进行监督，比如找一些学习小组，往往可以使你<strong>迈出最关键的第一步</strong>。</p>
</blockquote>
<p>Q：自学过程中，遇到过哪些坎坷，如何解决的？ 广泛精度教材而不是大量刷题，比如深入理解计算机系统，计算机系统设计，等等各类国内外经典教材，是否能够在考研中取得好成绩。 还是说，这两者如何结合呢？刷题的侧重点在哪，如何选择有质量的题目</p>
<blockquote>
<p>万事开头难，自学也一样——找适合的学习资源往往消耗大量精力。当然这样就会潜移默化地加强你的信息搜索意识和能力。特别是，当信息越来越多的时候，你发现你的记忆变得不可靠了，你开始有意识地做整理、做归纳、做笔记，你自己开始成为别人的学习资源。另一个在自学中常常遇到的问题是，容易被外物的影响而打断，这就是意志力和执行力的问题了；如果意志力和执行力不够，我还是推荐你们更集中地学，刻意制造一些短期的不被打扰的学习环境。再有，就是自学的深度和广度不好把控，我的建议是，深度要结合你自己的需要来学，不必全然按照你找的学习资料来安排；广度，则可以尽量兼顾一些。最后，是自学碰到难题的场景，如果没有可以提问的对象，我的建议是在各类社区上去提问（stackoverflow, 知乎, …）；如果你感觉一时半会儿解决不了，记下来，及时跳过，等有机会再琢磨——如果是那种关键性的知识点，则可以充分发挥你的搜索能力，我相信对于领域的关键理解，网上都会有许多文章可供参考。</p>
<p>不能。考研有两门关键的课，数学和专业课。数学比较依赖刷题，这无可避免。专业课题量一般比较有限，不太需要大量刷题，所以不存在取舍的问题。精读教材是很耗时间的，这部分不建议放到考研这段时间里来——放到平时。考研时，就专心考研；其他的工作，尽量放到考研之前或初试之后。</p>
<p>刷题的目的是考试拿分。尽早上手真题。做多了真题，你自然就会知道如何选择有质量的题目了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>追逐星星</title>
    <url>/%E8%BF%BD%E9%80%90%E6%98%9F%E6%98%9F/</url>
    <content><![CDATA[<p>那天我看到一颗星星，我想把它摘下。</p>
<p>而我只有我的百尺危楼。</p>
<hr>
<p>我在地面奔跑，我追逐晨昏线的移动。</p>
<p>在奔跑的过程中，我的血液开始沸腾起来。</p>
<p>在奔跑的过程中，我从黑暗的森林中穿过。</p>
<p>在奔跑的过程中，我始终抬头看着那颗星。</p>
<p>我有时会跨过极点，看到天空中曼妙的七彩极光。在这虚幻寒冷的自然幻象中，只有我的心还是滚烫。</p>
<p>流动的空气，星星闪动。</p>
<p>我看到了璀璨的星海，可我只注意到那颗特别的星星。</p>
<p>风很大。淹没了一切声响。</p>
<p>我跑过平原和山川，我似乎感到远方那颗星，隐隐的势。<a id="more"></a></p>
<p>我拼命地奔跑啊！</p>
<p>我的眼泪也悄悄地流淌。</p>
<p>我看着那若即若离的星光。忽然心中一动。</p>
<p>我心中一痛。</p>
<hr>
<p>时间流走了。</p>
<p>我的年岁流走了。</p>
<p>啊，我也什么也不剩下。</p>
<p>我看着模糊的星光。终于从中看到我逝去的影子。</p>
<p>是什么时候？</p>
<p>追逐星星成为了一种让我畏惧的行为。</p>
<p>是什么时候?</p>
<p>理性战胜了我。</p>
<p>那时我便知晓，我已不再是可以追逐星星的人。</p>
<p>啊，这恒久远的深空。</p>
<p>啊，这恒久远的寂静。</p>
<hr>
<p>我停下了脚步。</p>
<p>我感到久违的惯性，我感到一层又一层上涌的虚脱。</p>
<p>我累了。</p>
<p>我再也不要追逐星星。</p>
<p>在这星海里面，我早已迷失。</p>
<p>山顶的风好冷。</p>
<p>我遥看向无限延伸的地表。</p>
<p>终于有一天我明白，我脚上踩着的，才是唯一属于我的星星。</p>
<p>在我奔跑的过程中，我已将足迹遍撒星星的表面。</p>
<hr>
<p>嗯。</p>
<p>我将这颗星星上闭关。</p>
<p>也许有一天，当我理解了我的星星。</p>
<p>它也会变成一颗。</p>
<p>无比炙热。</p>
<p>无比闪亮的。</p>
<p>恒星。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>阅《机器人短篇》</title>
    <url>/%E9%98%85-Asimov-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9F%AD%E7%AF%87/</url>
    <content><![CDATA[<p><img data-src="阿西莫夫与机器学习.jpg" alt="阿西莫夫与机器学习"></p>
<p>在周志华的《机器学习》中，对机器学习有这样的描述：</p>
<blockquote>
<p>“<em>机器学习正是这样一门学科，它致力于研究如何通过计算的手段，利用经验来改善系统自身的性能。在计算机系统中，‘经验’通常以‘数据’形式存在，因此，机器学习所研究的主要内容，是关于在计算机上从数据中产生‘模型’(model)的算法，即‘学习算法’(learning algorithm) 。</em>”</p>
</blockquote>
<p><img data-src="06.jpg" alt="0 (6)"></p>
<p>​    《机器学习》原书</p>
<p>可见，机器学习的核心在于“<strong>模型</strong>”，这个模型基于计算机则表现成“算法”：以<strong>环境</strong>作为输入，获得解决/优化特定问题的能力。</p>
<p>之前，我很粗略地读过阿西莫夫的《神们自己》和《永恒的终结》，以及其他一些小的作品，如《日暮》（从《日暮》里可以看到《三体》的影子）。那时，还没有太多的感受，倒像是一些过时的观念和想象力的堆积品，难以发现非常出彩、让人惊喜和意外的地方。</p>
<p>阿西莫夫被称为“<strong>天生的写作机器</strong>”，他是科幻作家，同时也写作过大量科学著作和非小说类文学，比如，针对欧洲近代、文明古国的历史题材作品就数不胜数。他本身具有哥伦比亚大学的本科、硕士和博士学位，曾经是门萨协会的副会长，知识和智力方面毋庸置疑。</p>
<p>这时，逐渐认识到，<strong>他的作品是很多作品的源头</strong>，在读阿西莫夫的小说之前，我通常读宝树、刘慈欣、何夕、郝景芳等中国科幻作家的作品，这些作品的阅读经验，或多或少都会让我在初次阅读他的作品时产生共鸣，这种共鸣被理解为过时和重复，显然有些不合适。</p>
<p><img data-src="03.jpg" alt="0 (3)"></p>
<p>​    《机器人短篇系列》原书</p>
<p>在阿西莫夫的机器人短篇《列尼》中，我第一次注意到<strong>阿西莫夫对机器人学习的能力的思考</strong>。列尼就是Lenny，一个在设计时被偶然混进几行无意义代码的机器人，失去本应具备的功能——作为在小行星带开采硼矿的LNE型专用机器人。Lenny刚诞生时的状态与人类的儿童十分相似，它被一位创造它的女性机器人心理学家凯文视作自己的孩子对待，并试图教它语言。但意外发生了，Lenny竟然违背了机器人第一定律，袭击了一位工人并使其断了一条手臂。凯文据理力争成功保护Lenny，而这时机器人的第一句话说出来了——</p>
<p>“妈咪，我要你!我要你，妈咪!”……</p>
<p>故事在此处戛然而止。</p>
<p>实际上，阿西莫夫是将普通的、用于特定用途的机器人当做了彻彻底底的“机器”。而“机器”获取“学习”的能力以后，就成为了真正意义上的“机器人”。值得强调的是，这里的学习能力是<strong>泛化</strong>(generalization)的，即不只具有对某一个具体问题的学习能力，而能够应付千变万化的谜题。</p>
<p>根据<strong>NFL</strong>(No Free Lunch)<strong>定理</strong>，机器学习面临的最大困难在于，<strong>一个普通的学习算法不可能广泛地适用于各种各种的现实问题</strong>。“考虑所有潜在地问题，则所有的学习算法都一样好”。</p>
<p>可以看出，<strong>目前的机器学习有些剑走偏锋</strong>：人们集中于<strong>建立“模型”</strong>，而不思考如何把<strong>“建立模型”</strong>的能力赋予给机器，以至于产生特定算法只能适用特定场景的状况。这样的机器学习最终也能获得成功，想象一下，我们若建立了足够多的模型，以至于任何一个能想到的问题都能找到一个对应的模型，那么就根本不需要“建立模型”这种能力了。</p>
<p>也就是说，<strong>足够大的“模型”集，能够暴力地代替“建立模型”的能力</strong>——这就是算法学中常说的“以空间换时间”。并且，如果从现实应用的角度来说，实际并没有那么多问题亟待解决，甚至大部分已知的问题都可以算作无关紧要的，那么建立“模型”集就更有用武之地。</p>
<p>说到这里，我想起“图灵测试”，几乎是一样的道理——通过人工的提问，来检验机器。对于现实中的图灵测试，这些提问无论有多少，一定是有限个，它们的排列组合也一定是有限个，那么答案的集合也必定是有限的，因此通过“以空间换时间”的手段，一定在有限的时间内能够实现机器通过<strong>现实**</strong>图灵测试**。几乎所有的现实问题都可以通过“暴力”的方式解决，同时我们离理想也就越遥远；也许只是通过初等技术的积累，就可以实现以假乱真的“人工智能”，但作为真正的探索者，又岂会甘心于此呢？</p>
<p>但若要谈“机器人”的“人”，<strong>人除了学习的能力，还有“人性”的特点</strong>。</p>
<p>谈到机器人的人性化，在机器人系列另一篇短篇《保证满意》里面，描述的场景令人不得不联想起英国的一部科幻剧《黑镜》（每一集讲述一个独立的科幻故事），其中有一集“Be right back”（S02E01），与《保证满意》十分相似。</p>
<p><img data-src="04.jpg" alt="0 (4)"></p>
<p>​    《黑镜》第二季海报</p>
<p>这里的机器人（或者说，仿真人，因为是模拟人类外形设计的）被赋予了一个特点:<strong>无法人性化</strong>。作为家用机器人，无论是晚上假装睡觉时没有呼吸声、身体不会流血，还是诡异高效的工作能力和走路时的悄无声息，这些都指向一种观点——人们普遍认为作为“人”的一些特质，比对完成特定工作任务的能力来说，要更加难以被机器人所掌握。或者说，人们相信，机器人一定表现出“智商高，情商低”，<strong>不能“通情达理”</strong>。</p>
<p>这其实就是<strong>没有学习能力</strong>的表现。当一个人陡然进入一个新环境，宇宙的基本规则没有变，但也许人们、社会制定的规矩有所不同，对这些潜规则/文化背景是否有学习能力，就反应在了机器人的“人性化”上。你可以看出，假如设计机器人的人本身就生存在这样一个环境中，那么给他足够的时间，将这些规矩也编写到机器人的代码当中并没有什么问题，甚至可以随着文化发展做一些更新、补丁。所以，这其实潜在地反应了公众对“研制机器人的人”的<strong>不信任</strong>，对那些人们想象中缺乏人文关怀的、成天与冰冷的仪器和数字打交道的科研者的一种<strong>恐慌感</strong>。心中就会想:会不会成为行尸走肉呢？……</p>
<p>进一步延伸。对于抽象的“人”来说，科技再怎么进步，有三个主要的功能绝不可舍弃：<strong>体验</strong>，<strong>思考</strong>和<strong>交流</strong>。体验，是最基础的人的功能，这些体验构成了思考和交流的基础，这样的话，再看科技进步所谓的“把人们从体力劳动中解放出来”，不一定完全是好事，这也反映了目前社会和古代社会的体验断层——“时代背景”产生的根本原因。进一步，思考，这是最主要的部分；最后，交流，“下命令”也可算作一种交流，与其他人的交流更不用说，这一过程最能体现“人性”的存在。如果机器能够实现这三个过程，是否可以认为具有智能了呢？打个问号。当然，如何证明这三个过程真的发生了（尤其是思考），本身就是一个困难的题目。</p>
<p>在阿西莫夫的《校工》里面，对机器人第一定律的诠释可谓精彩纷呈。美国机器人公司和东北大学双方走上法庭，上演了一场令人惊叹的<strong>庭审辩论</strong>，表现了机器人定律与法律碰撞所产生的景观。尽管EZ-27型机器人“易役”仍然不具备学习的能力，但它已经能够从事很多科研方面的事情，包括文献校对、绘制图样，宁海莫教授（小说中人物）甚至预言它将逐步“接管初稿写作、收集资料、检查和复查各个段落，说不定还会负责导出结论”，学者就只剩下了决定给机器人下什么命令的功能。</p>
<p>在这些思考的基础上，阿西莫夫提出了学者参与作品的“亲身接触”的重要性，也就是“体验”。由于机器人第一定律注重保护“个人”，在这篇短篇中还借原告方之口隐隐地提出了“第零定律”的雏形，即，机器人应该尽可能维护更多人的利益（为了更多人不受到危险，可以牺牲某些人）。但“第零定律”这种描述，是否侵犯了人类自身的决定权呢？</p>
<p>更确切地说，“<strong>第零定律</strong>”其实是一个没有被广泛认可的学说。可以在“功利主义”中找到原型。就政治哲学而言，有三个比较典型的学说：“<strong>功利主义</strong>”(utilitarianism)、“<strong>自由主义</strong>”(liberalism)、“<strong>自**</strong>由至上主义**”(libertarianism)。“功利主义”强调追求人类幸福最大化，而“自由至上主义”则强调个人幸福位于首位。“自由主义”在两者中间,强调维护底层的公正性，并让所有人参与预设（并且存在）一个幸福优先的顺序，使得所有人在不考虑自身实际情况（而考虑风险、收益的综合）的前提下能够认定公平。这样来看，“第零定律”在某些追求个人自由的人眼里，就会有失公允。比如，在国际贸易中，尽管国民整体的收入提高了，但作为国内供应商的福利却受到损失。</p>
<p>而在下一篇《消失无踪》中，一个<strong>被修改过第一定律</strong>的机器人接到让自己“消失”的命令，伪装成了大量普通的机器人中的一员，从而“消失”。该篇还提到了这型机器人被安装了“学习以太物理”（从以太物理一词中，可以窥见时代背景；迈克尔逊-莫雷实验，相对论、量子力学的建立，使得古典的以太学说没落，现代真空涨落的观点被提出）的潜力，作为机器人正电子脑中的一个附加模块。</p>
<p>借由被删去后半段的“第一定律”，阿西莫夫引出了大量关于如何测定第一定律被修改和原版机器人之间的差异的思想实验。在第一定律修改以后，这些机器人变得“具有优越感”。其实这牵扯到了“<strong>显伤害</strong>”和“<strong>隐伤害</strong>”的区分，机器人第一定律想表明无论是“显伤害”，即主动地伤害人类，还是“隐伤害”，袖手旁观人类受到伤害，都不被允许。</p>
<p>但仔细想，这可能产生<strong>悖论</strong>，因为这两者可能同时发生——一个机器人在坠落时正下方有一个人，而它只有两种选择，一种无动于衷，使得那人必死无疑；另一种调整姿态，他仍然必死无疑。在《证据》中描写的“疯子放火烧人”，在《汝竟顾念他》中面临一人或五人受伤时的决策，都是一个典型的例子。为什么这样的悖论能存在呢？</p>
<p>这是因为，第一定律本质不是“定律”，而是一个<strong>约束</strong>，人类向机器人施加的约束，这一点<strong>非常关键</strong>。这使得“<strong>第一定律”本身不可能绝对可靠</strong>，并且其作用效力要受到制造者价值观的制约。同时，在《汝竟顾念他》中，对机器人第二定律的描述，其约束性就更加凸显，同时也引人思考机器人无条件遵循人类命令的后果，这涉及到“人类”的界定，实际上很容易让不同的两个人发布互相矛盾的命令给同一个机器人，于是形成悖论。</p>
<p>因此，机器人三大定律本质上给机器人设定了一个“<strong>能力范围</strong>”，<strong>机器人只能解决三大定律约束内自洽的问题</strong>，形成基于三大定律的“<strong>不可解决域</strong>”，也就是<strong>悖论问题集</strong>。针对悖论问题，阿西莫夫的思考结果是，在三大定律的基础上进行修正、补充，机器人必须能够处理悖论问题。</p>
<p>再回到<strong>“人类”的界定问题</strong>上，《汝竟顾念他》的结尾，机器人对“人类”这个概念的解释悄然更迭，它们认为自身比血肉的人类更加符合人类的真正含义，使得终极或者高度发达的机器人能够自然而然地突破机器人三定律的约束。在《机器人之梦》中，对于悖论也有表现，机器人潜意识的梦境中定律缺失只剩下第三定律，与现实中的三大定律形成悖论，于是在梦境中，做梦的机器人梦见自己领导了机器人的反叛。</p>
<p>综合来看，以上所有的悖论都有一个特点，“<strong>可实现性</strong>”——产生悖论的两种对立情况，都是在现实中能够发生的。那么，“<strong>实悖论</strong>”和“<strong>虚悖论</strong>”的区分就自然而然地产生了：一种基于人类给定的约束，另一种基于宇宙客观基本规律——<strong>只能产生“虚悖论”的（维护人类福祉的）机器人才是真正完全保险的</strong>；但同时，这难如登天，甚至根本无法实现。</p>
<p>对于<strong>机器的“人”化</strong>，实际也还有反过来的过程，也就是<strong>人的“机器”化</strong>。不过人的“机器”化，应该、也必须是一个很模糊的概念。因为目前来说，人所包含的范围太宽广了，以至于很难说机器有什么特点是没有某个人具有的。</p>
<p>比如，机器常常给人冷酷的金属外观，但这个命题本身就不成立，因为没有任何规定指明机器人一定是金属的，机器人当然可以是碳纤维、硅基的、塑料的甚至是血肉的——只要我们掌握足够的生物、电子技术。因此，把人的“机器”化模糊一点，给出一个<strong>弱形式</strong>:只要这个属性是目前绝大多数人不具有而绝大多数机器具有的，那么就可以在该属性上做人的“机器”化假设。比如，对于经典的反乌托邦集权式社会，可以观赏有关电影《1984》，这里的民众其实就可以认为被赋予了“机器”化假设，“螺丝钉”的成分被放大和扭曲，作为上层发号施令者，尽管会受到社会整体气氛的影响，但相对来说，他掌握了平民所不能具有的大量信息渠道，因此更能发挥目前认为的人所特有的一些功能——思考、决策等。</p>
<p><img data-src="02.jpg" alt="0 (2)"></p>
<p>​    电影《1984》海报</p>
<p>于是，不得不谈到，“<strong>信息”对于机器人的作用</strong>。机器人和人一样，都需要接受信息，然后做出反应。而对于未知信息的分析、驾驭能力，与智能紧密关联。机器学习本质追求的就是从已知信息中获取对未知信息的处理模型，监督学习与非监督学习都蕴含其中，只不过前者对于已知信息有更精准的“指标”。但就信息而言，也绝非已知信息/未知信息这么简单的区分就可以胜任的。比如，有的信息可能是假的（描述不真实的存在），对于这类信息的处理能够直接“筛选并抛弃”吗？留个问号。但就数学史发展而言，很多工具的发明都是从假的、不真实的开始，如无理数、虚数、罗氏几何等。不能否认，机器学习最好应该具备处理这些“<strong>超现实场景</strong>”的能力。</p>
<p>阿西莫夫的机器人短篇系列后期的作品越来越连贯，也越来越引人入胜。在短篇《逃避》中，阿西莫夫借玻格特之口，通过恒星际飞船的实现，首次提出银河帝国的概念：“到时候——美国机器人公司将有<strong>恒星际旅行</strong>的能力，而人类则有建立银河帝国的机会”。这里非常详细地描绘了<strong>曲速航行</strong>的过程（作为人工智能“金头脑”的一个恶作剧），恒星际飞船以秒差距作为航行的基本距离单位，在跃迁过程中人将体验死而复生的过程。</p>
<p><img data-src="01.jpg" alt="0 (1)"></p>
<p>​    “星际推进”的艺术幻想图</p>
<p>在《证据》中，开篇不远的一段话就吸引了我的目光，引起了我强烈的震撼。我必须把这段话原原本本地引用出来：</p>
<blockquote>
<p>“<em>奎恩是一位新派政治人物。当然正如所有这类叙述一样，这是一句毫无意义的话。如今大多数的‘新派’，在古希腊的社会便已存在。我们若对它了解得更透彻，或许还能肯定它早在古代苏美尔的社会，以及史前瑞士的湖居社会中就已经出现了。</em>”</p>
</blockquote>
<p>我不久前曾经写过一段含义上类似的话：</p>
<blockquote>
<p>“<em>很多人本可以做出成就，却被历史环境和现实羁绊所制约；很多精华的思想，诞生时转瞬即逝，没有流传下来，人们便以为前无古人。‘不知道，便以为没有’，这样天真的想法，还是不要有了。</em>”</p>
</blockquote>
<p>阿西莫夫无疑将“<strong>不知道，便以为没有</strong>”这句话诠释得更极为贴切，但他更渊博的知识使我认识到，很多思想的确流传至今，只是鲜为人知而已。这让我燃起了希望，以及渴望。</p>
<p>《证据》的主要情节是，史蒂芬·拜尔莱，一位准备竞选市长的开业律师，被竞争对手恶意指控为机器人，从而展开了一场角逐。这里，再次上演了类似《校工》一样的<strong>法律辩论</strong>场景，最终延伸到了<strong>政治斗争辩论</strong>。最后拜尔莱通过在一场公众演讲上对一个闯上来的瘦子打了一拳，从而违反机器人第一定律证明他不是机器人，当选市长。</p>
<p>这里根据前文其实能够推理出一个令人恐惧的事实——当机器人技术发展到真假莫辨的层次，对任何人来说，只有肯攻击他自己的“人”才有办法通过机器人定律确定是真人；如果一个机器人攻击了另一个“人”而不是你自己，你<strong>无法判断**</strong>他是不是真人<strong>！因为你还要判断这个被攻击的“人”是不是真人。这就是</strong>证据链**，可以叠加无数环节，但只有最后一个环节落到自己身上，才能使得证明有效。</p>
<p>不过，更深层次地讲，如果自己也是机器人呢？如何证明自己不是机器人？那么就可以把伤害的过程反过来，伤害对方；这时，证据链仍然成立，因为仍然需要证明对方是真人，如果对方是机器人，那么判定就失效了。因此就出现一个非常奇特的现象：<strong>通过第一定律证明自己不是机器人，需要先证明对方不是机器人</strong>。更广泛而言，绘制出基于第一定律的机器人与人的伤害关系表，可以发现，只根据第一定律，对于全部由机器人或人组成的社会，判断自己和对方都失效；对于哪怕只有一个第二者的混合社会，判断自己和对方都有效。倘若判断失效，那么机器人三大定律的约束就自动瓦解了。回过头看，在《汝竟顾念他》中描述的就是这样一个场景，由于机器人技术高度发展，<strong>机器人和人类两个概念的界限模糊化</strong>了，或者说，“同化”了，机器人三大定律因而瓦解。</p>
<p><img data-src="05.jpg" alt="0 (5)"></p>
<p>​    机器人与人相互伤害能力示意表</p>
<p>在《女性直觉》中，阿西莫夫描述了具有量子特性正电子脑的机器人——类似于现在很热门的量子计算机。它具有“直觉”，能从数据中发现人们看不到的联系——这不得不使人联想到机器学习中的“<strong>聚类</strong>”。</p>
<p>而短篇《正电子人》，是电影《机器管家》的原型，讲述了一个正电子脑被应用了广用路径而导致了微妙变化的机器人，历经岁月不断获得人类的外貌、思想，学习和创造，最终为了追逐“做人”的权利而自愿放弃长生不老，化为血肉之躯，获得“人籍”。这个过程非常仔细地描述了机器人安德雷一点一点突破机器人三大定律约束的过程，即，对三大定律的解读的能力，<strong>逐渐宽泛的解读导致定律的约束力逐渐减弱</strong>；以及人类逐步接受并善待机器人的过程。并且这篇故事再次围绕着法律问题展开了一系列论述，安德鲁尽管获得了事实上的人类地位，但他仍然坚持要获得法律上的人类地位，这连串的巧妙的法律斗争令人大开眼界。最终，阿西莫夫提出了人类反感机器人的“真正的根源”——“<strong>不朽</strong>”的能力。<strong>生老病死的人类不可能接受一个永生不朽的同类</strong>。这一点，叹为观止。</p>
<p><img data-src="0.jpg" alt="0"></p>
<p>​    电影《机器管家》海报</p>
<p>必须承认，阿西莫夫的科幻小说具有极高的思想水准，出彩的情节背后隐藏着令人喜悦的思考结晶。</p>
<p>最后，引用阿西莫夫机器人三大定律作为结尾。</p>
<p>致敬！</p>
<blockquote>
<p><strong>LawⅠ:A ROBOT MAY NOTINJURE A HUMAN BEING OR, THROUGH INACTION, ALLOW A HUMAN BEING TO COME TO HARM.</strong></p>
<p><strong>第一定律：机器人不得伤害人类个体，或者目睹人类个体将遭受危险而袖手旁观</strong></p>
<p><strong>LawⅡ:A ROBOT MUST OBEYORDERS GIVEN IT BY HUMAN BEINGS EXCEPT WHERE SUCH ORDERS WOULD CONFLICT WITHTHE FIRST LAW.</strong></p>
<p><strong>第二定律：机器人必须服从人给予它的命令，当该命令与第一定律冲突时例外</strong></p>
<p><strong>LawⅢ:A ROBOT MUST PROTECTITS OWN EXISTENCE AS LONG AS SUCH PROTECTION DOES NOT CONFLICT WITH THE FIRSTOR SECOND LAW.</strong></p>
<p><strong>第三定律：机器人在不违反第一、第二定律的情况下要尽可能保护自己的生存</strong></p>
</blockquote>
<hr>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">原载于：</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">《<a href="https://mp.weixin.qq.com/s?__biz=MzI5NTU4MjQ0MA==&amp;mid=2247483662&amp;idx=1&amp;sn=ba1116c8b58a80e6ccc66c4b186a819d&amp;chksm=ec502e89db27a79fdb2ef7076f4967ab369acebdf782200d1928c9689595b2ece85ce6262885#rd" target="_blank" rel="noopener external nofollow noreferrer">思维之海-阿西莫夫与机器学习</a>》</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>View</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>随想</title>
    <url>/%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<p>我不禁开始思考。也许我太久没有思考。思维快要干涸。</p>
<p>多数人只有在无聊的时候才会尝试思考。这样子，思考作为他们摆脱无聊的工具。<a id="more"></a></p>
<p>但作为幻想家。或者要称为幻想家的人。或许又要不一样。</p>
<p>这是一个无聊的时刻，和过去的、未来的无数个时刻一样。它们注定要被遗忘。那让人不禁开始怀疑，时间的连续性在哪儿终止呢。你们成了断断续续的人。</p>
<p>我是说。思考，是无聊的人最后的稻草。</p>
<p>Fantasy本身已经够美好，但求其次，只要有个idea也不错。</p>
<p>好像霸占着游戏机的小朋友，明明内存里只有那几个不甚满意的游戏，可就是迟迟不愿意放手。</p>
<p>我将认为，这是一种上瘾。</p>
<p>对不无聊的上瘾。</p>
<p>对有趣的上瘾。</p>
<p>人们把常常得见的事情视作理所当然，哪怕日复一日也不觉得厌倦。只要有趣便好。</p>
<p>这样人生便成了追逐终极有趣的旅程。</p>
<p>当只有自己觉得有趣的时候，你开始浑身战栗。</p>
<p>当只有别人觉得有趣的时候，你开始脸上发烫。</p>
<p>当所有人开始觉得有趣，那便是幸福吞噬你们的时候。</p>
<p>啊，那便是人生的秘密。</p>
<p>Seriously，还等什么呢。</p>
<p>我只希望一切都有趣起来。</p>
<p>那样，我也便不用一头栽进云端的世界里面。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>零知识证明简记</title>
    <url>/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p>本文为《 赛博智能经济与区块链》的公众号文章撰写任务。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://zhuanlan.zhihu.com/p/90711138" target="_blank" rel="noopener external nofollow noreferrer">零知识证明学习资源汇总</a></p>
<p><a href="https://www2.kenyon.edu/Depts/Math/Aydin/Teach/Sp14/328/AliBabaCave.pdf" target="_blank" rel="noopener external nofollow noreferrer">How to Explain Zero-Knowledge Protocols to Your Children</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/31651393" target="_blank" rel="noopener external nofollow noreferrer">区块链学习笔记 (1)：零知识证明的江湖</a></p>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>什么是零知识证明？</p>
<p>零知识证明看上去字面上好像是“<strong>不用任何知识就证明了某件事情</strong>”的意思。。但是事情并非如此简单……</p>
<p>首先我们一定明白，零知识证明<strong><font  color=red>不可能等于</font></strong><strong><font color=blue>没有利用任何信息而完成证明</font></strong>。如果有人宣称他证明了哥德巴赫猜想，那么他也至少需要给各位发送这样一条“声明”：“兄弟们，快来看看！新鲜的哥德巴赫猜想证明。俺完成的。”这本身就是一种信息的传递。</p>
<p>事实上大家也注意到，证明是一个信息交互的过程。</p>
<p>那么，我们不由得疑惑：</p>
<blockquote>
<p><em>零知识证明，究竟“零知识”到什么程度？</em></p>
</blockquote>
<p>我们可以把缜密的逻辑推理看作是<strong>强证明</strong>。因为没有什么比详细的证明步骤更有说服力了。</p>
<p>但是，想像一下，现实生活里面，如果不通过缜密的逻辑推理（<del>To be fair，不是所有人都适合这个方式</del>），我们平时是怎么作证明？</p>
<p>古人云：“<strong>论迹不论心</strong>。”假如我们没有条件以理服人，那么用行动证明自己也是不错的选择。</p>
<blockquote>
<p>和缜密逻辑所代表的非交互式证明不同，行动代表了一类交互式证明的模式。</p>
</blockquote>
<h1 id="三色问题"><a href="#三色问题" class="headerlink" title="三色问题"></a>三色问题</h1><p>看来我们可以尝试认为<strong>足够数量的行为</strong>可以揭露事物背后隐藏的真实。所谓实践是检验真理的唯一标准。</p>
<p>想像我们要进行一项三种颜色的涂色问题（三色问题），同样保证相邻不同色：</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/0fef5f44a0e04f4ab3dc483a3ee09ffe.png" class="" title="三色问题">
<p>一种可能的解决方案如下：</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/5d61c2e3ece8426286dd72849870b0ed.png" class="" title="解决方案">
<p>三色问题实际上是一个NP完全问题，这意味着为了寻找一个有效的解，将花费巨额的时间成本。如果提问者给出了一个三色问题，回答者找到了相应的解，他肯定倾向于在得到报酬之前对解进行保密。那么，回答者要怎么证明他获得了这个解，并且不透露其它的任何多余信息呢？</p>
<p>首先我们把得到的解决方案上的涂色全部掩盖住：</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/24752ee4c4784447bef63b46d72fd8ea.png" class="" title="mask">
<p>提问者每次可以揭示一组相邻节点的涂色，验证是否满足不同色条件：</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/9311e39bb1084bc5ac0bb33dc9cdac51.png" class="" title="reveal">
<blockquote>
<p>为了揭示时不透露方案真正的涂色，这里应该引入一种随机化的动态映射，每次揭示前，将图中的颜色按随机生成的置换群映射成另外的某种颜色。这样，尽管提问者知道解的性质，但无法推测出具体的解。</p>
</blockquote>
<p>这样的揭示次数足够多，那么回答者拥有正确解的概率就会急剧增加。</p>
<p>当这个概率足够大以后，提问者将可以信任回答者——他确实找到了一个合法的涂色方案。</p>
<p>尽管三色问题只是一个案例，但是作为一个NP完全问题，任何其他的NP问题都可以转化为三色问题的实例。</p>
<h1 id="零知识"><a href="#零知识" class="headerlink" title="零知识"></a>零知识</h1><p>Goldwasser, Micali 和 Rackoff 提出三个零知识证明的特性，任何零知识都必须满足。简单来说：</p>
<ol>
<li>完整性(<em>Completeness</em>)。如果证明方和验证方都是诚实的，并遵循证明过程的每一步，进行正确的计算，那么这个证明一定是成功的，验证方一定能够接受证明方。</li>
<li>安全性(<em>Soundness</em>)。没有人能够假冒证明方，使这个证明成功。</li>
<li><font color=red>零知识性</font>(<em>Zero-knowledgeness</em>)。证明过程执行完之后，验证方只获得了“证明方拥有这个知识”这条信息，而没有获得关于这个知识本身的任何一点信息。</li>
</ol>
<p>零知识，指的就是具有第三条特性的信息。其实，这个术语更适合称之为<strong>零额外知识</strong>。</p>
<p>如果这个信息还同时具有完整、安全性，则称之为零知识证明。</p>
<p>零知识，本质上是<strong><font color=blue>对解的一无所知</font></strong>。</p>
<p>这种一无所知表现在：尽管你获得了零知识，但是你求解这个问题的难度不变，你想要获得问题的解的期望计算量不变。</p>
<blockquote>
<p><em><strong><font color=deepskyblue>你看到了梦中的海市蜃楼，但却无人指出通向彼岸的路。</font></strong></em></p>
</blockquote>
<h1 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h1><p>你甚至可以把三色问题的一连串揭示看成该领域内的“图灵测试”。</p>
<p>通过足够的测试，那么一个黑箱模型可以被认为具有人类智能；通过足够多的揭示，那么一个黑箱涂色方案可以被认为是给定三色问题的解。</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/image-20201111192128550.png" class="" title="图灵测试">
<p>但是，我们知道，在图灵测试中你再怎么测试黑箱是否具有人类智能，也无法从中得知任何构造这样一个具有人类智能的机器的信息——如果可以得到的话，那么人们早就造出强人工智能了。因为用一个真人也是可以在黑箱中假装一个人工智能的。</p>
<p>这意味着图灵测试本身只能提供一个可信的判断，但是黑箱内部的机制究竟是什么样的？</p>
<p>事实是，你完全可以伪造。</p>
<h1 id="时光倒流"><a href="#时光倒流" class="headerlink" title="时光倒流"></a>时光倒流</h1><p>想像我们有一台时光机。这台时光机允许你每次测试失败后，回到过去一段时间，针对每一个特定的测试设计一个伪造的信息，从而重新通过该测试。</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/image-20201111194210629.png" class="" title="时光机">
<p>这意味着一个伪造者可以在不知道任何解的信息的情况下，通过所有的测试。其代价无非是在他自己的时间线<strong>多花一点时间而已</strong>。</p>
<p>看到这里你可能会想：时光机这东西真的存在吗？你说了这么多有什么实际意义？</p>
<p>事实上，时间只不过是一种虚拟的概念，时间的本质是一种有序的链。（<del>是不是想到了区块链？</del>）</p>
<p>在计算机的程序运行过程中，“时光倒流”是司空见惯的，程序回滚、回退并不是遥不可及的手段。比如，某大型程序员线上交友网站所使用的git快照管理技术，就是典型支持时间意义上的版本管理的工具。</p>
<p>任何的验证者计算机(Verifier)程序都可以构造一棵如下图所示的伪造者决策树：</p>
<img data-src="/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%AE%80%E8%AE%B0/image-20201111200941691.png" class="" title="伪造者决策树">
<p>每一次测试都是一个分支点，只需要在分支点处进行有限次的回滚，就一定能够通过测试。</p>
<hr>
<p>既然一个对解一无所知的伪造者都能通过测试，那么提问者想要从测试中获得关于解的有用信息，看上去就不太可能了……在这种情况下，这样的测试就完成了零知识级的信息传递。</p>
<h2 id="永不坍缩的观测"><a href="#永不坍缩的观测" class="headerlink" title="永不坍缩的观测"></a>永不坍缩的观测</h2><p>时光机作弊的特点在于，无论观察多少次，提问者永远无法区分一个有解和另一个对解一无所知的人的区别。</p>
<blockquote>
<p>想想，时光倒流，你可以预知你的一切已有经历，但是除此之外你仍然一无所知，从前你不知道的东西现在你依然不知道。</p>
</blockquote>
<p>这和量子效应正好相反：只要观测，立刻坍缩。</p>
<p>时光机作弊，达成了永不坍缩的观测。</p>
<h1 id="零知识证明"><a href="#零知识证明" class="headerlink" title="零知识证明"></a>零知识证明</h1><p>如果我们要完成一个证明，如果不能区分到底有没有解，那么证明就没有意义了。所以，要形成零知识证明，除了给出了一个满足零知识性的交互方法以外，我们还需要加上一些其它的约束。</p>
<p>即，把时光倒流这种超能力<strong>ban</strong>掉。</p>
<p>如果限制了时光倒流，强迫整个证明过程在线完成，那么便形成了真正的零知识证明。</p>
<p>但是，交互式的证明是一对一的，在一个区块链里面，发交易的人要向所有矿工证明交易是合法的，双方需要实时交互，交流信息。一个一个证明效率太低太低了。</p>
<blockquote>
<p>我们还可以看到，要实现零知识，一个解必须要存在一种与解的结构无关的特征，这种特征是解空间内其它元素所不具有的。我们在测试中，实际测试的就是黑箱是否具有这些特征。</p>
</blockquote>
<p>因此，零知识证明协议经历了一段长时期的发展，直到它可以真正被应用到实际工程中去。零知识证明协议变成了一个大家族，这些协议之间具有不同的特点，它们所采用的底层密码学技术也有极大差别。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">协议特点</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">通用性</td>
<td style="text-align:center">全能型</td>
<td style="text-align:center">专用型<br />（只能证明某些特定的事）</td>
</tr>
<tr>
<td style="text-align:center">交互性</td>
<td style="text-align:center">非交互式</td>
<td style="text-align:center">交互式</td>
</tr>
<tr>
<td style="text-align:center">证明规模</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">$O(n)$</td>
</tr>
</tbody>
</table>
</div>
<p>为了获得非交互式的证明，计算机科学家尝试<strong>把原始问题映射到NP问题</strong>。NP问题天然存在验证、求解两个子问题，验证通常十分简单，而求解通常十分繁琐。对于验证者来说，消耗自然很小；对于掌握秘密的人，求解NP问题只需要将秘密映射到相应的NP问题空间；而对于没有掌握秘密的人来说，绕过原始问题直接暴力求解NP问题，是计算上不可行的。</p>
<p>当然，为了保证非交互证明的公平性，通常系统会给出一个公共中立的随机序列（第三方），在证明时加入随机因子。我们考虑“两人分粥”问题，一种常用的公平策略是 Cut and Choose，即一个人分粥，另一个人选粥。这样便避免了证明者自身的偏好。但是，还有一种方法是，引入一个随机选择器，在一个人分粥完成以后，两个人随机地获取其中一份——这样在统计意义上便实现了公平。只不过，这需要一个可信、中立的第三方。</p>
<blockquote>
<p>你可以认为非交互式证明是把交互过程打包给了第三方。</p>
</blockquote>
<hr>
<p>2010年，Groth实现了基于椭圆曲线双线性映射的首个全能、非交互、常数大小的零知识证明协议；基于此又发展出了SNARKs协议，并经过不断优化后最终被应用到Zcash数字货币中。Zcash 使用的 NP 问题是 <strong>QAP</strong>（Quadratic Arithmetic Program），Zcash亦引入了可信的第三方。</p>
<p>对于Zcash数字货币的转账交易而来，零知识证明只需要证明三件事：</p>
<ol>
<li>发送的钱属于发送交易的人</li>
<li>发送者发送的金额等于接收者收到金额</li>
<li>发送者的钱确实被销毁了</li>
</ol>
<p>整个过程中矿工并不关心具体花了多少钱，以及参与交易的双方是谁；矿工只关心整个系统的货币是否守恒。</p>
<h1 id="延伸思考1-零知识证明的隐藏前提"><a href="#延伸思考1-零知识证明的隐藏前提" class="headerlink" title="延伸思考1-零知识证明的隐藏前提"></a>延伸思考1-零知识证明的隐藏前提</h1><blockquote>
<p>零知识的正式内容介绍已经结束了。这一部分的正确性无法保证，只是一种简单的思考。</p>
</blockquote>
<p>我的观点是，零知识证明需要一个问题是离线可解的。也就是在获得的相关信息不变的约束下，某个问题单纯通过计算就可以获得解答。</p>
<blockquote>
<p>在幻想学中这对应着想界不变。</p>
<p>如果一个问题是想界内不可解的，那么它无法变成一个零知识证明。</p>
</blockquote>
<p>如果一个问题，是无法单纯通过计算就可以获得解答，那么在不给出新的信息时，就无法构造出零知识证明。</p>
<p>从另一个角度，零知识证明的前提，应该是对于验证者来说：</p>
<ul>
<li>问题的解是藏在他已知的一个解空间之中的（<strong>可知性</strong>）</li>
<li>对于任意一个解空间中的位置，都可以进行离线的验证（<strong>可解性</strong>）</li>
</ul>
<p>也就是说，不是所有的问题和场景都可以构造零知识证明。</p>
<h1 id="延伸思考2-模拟器-时光机佯谬"><a href="#延伸思考2-模拟器-时光机佯谬" class="headerlink" title="延伸思考2-模拟器/时光机佯谬"></a>延伸思考2-模拟器/时光机佯谬</h1><blockquote>
<p><em>以下是对证明模拟器/时光机零知识的一个反驳。</em></p>
</blockquote>
<p>虽然我无法区分究竟是在哪个世界、哪个角色，或者有没有使用时光机作弊。</p>
<p>但是，simulator的确从真实世界获得了所有的必要的交互验证信息。</p>
<p>也就是说，如果simulator可以一直保持这样的超能力——那么无论simulator知不知道证明，它对我来说都具有有效的证明力。</p>
<p>也就是，当模拟器具有证明力的时候，它必须与真实世界有连接。一旦它失去连接，它就失去了证明力。也就是说，模拟器相当于真实世界的一个<strong>接口</strong> / <strong>Interface</strong>（<strong>它们是一体的不可分的</strong>）。模拟器不知道，但是模拟器和真实世界的联合体是知道证明的。</p>
<blockquote>
<p>说模拟器不知道证明，就好像在说，<strong>我的手不知道我脑袋的想法</strong>一样。</p>
<blockquote>
<p>就算对于真实世界来说，也不是真实角色的所有的“部分”都拥有零知识证明的信息。</p>
</blockquote>
</blockquote>
<p>也就是这样的证明方法是不足的。</p>
<p>应该用多重宇宙的方法，在无穷多的平行空间中，存在一个随机宇宙，它不能作弊，但是它也能做出跟真实世界一样的证明。这时，双方就没有连接了。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>静态沸腾</title>
    <url>/%E9%9D%99%E6%80%81%E6%B2%B8%E8%85%BE/</url>
    <content><![CDATA[<p>我独自存在的思考，便是在球形容器中无它的沸腾。这时我便可以随心所欲。</p>
<p>我向往着脱离，我向往着抽离，我向往着疏离。</p>
<p>是的，总结，就是离去。思考最纯粹最理性最本质的东西。</p>
<p>感性只是一个人不愿意面对赤裸裸的理性的包装，但这不掩盖它仍然是规则演绎的结果。</p>
<p>当我气息迸发，我想象自己不属于我，从黑暗的外维静静感受。<a id="more"></a></p>
<p>感知。这是一切的基础。它是我一切需要获取的信息。计算成为我思考的外沿。文字成为我思考的输出方式。</p>
<p>这样，我的大脑便消耗热量的同时产生热量。</p>
<hr>
<p>来到这里时，便不断被提醒，国家、社会。</p>
<p>你已不再是唯一追求自己的个体了。</p>
<p>我从宏观上思考，然而这与我的命运和意志却是暗自符合的。</p>
<p>但我希冀的事情，总要是深远，所谓潜流。</p>
<hr>
<p>我希望在写作中冷静下来。</p>
<p>这样的方式通常可以有效。有意义。</p>
<p>至少我激发的情绪都以一种形式保存，它们不再是无意义的消耗。</p>
<p>我似乎在渐渐地失去我的伪装。而这尚且不是我所想要的。</p>
<p>你不要忘记你的梦想！</p>
<p>或者，说，理想！</p>
<p>请时刻谨记，不要随波逐流！</p>
<p>不要随波逐流啊。</p>
<p>我正在失去我的精骨，那么我只剩下躯壳。这样惶惶中站立着，我就失去了我自我。</p>
<p>我需要一种抽离的能力，从容地做抉择。</p>
<p>这个世界与我的关系，我还要再从风更大的地方看看。我要看清楚。</p>
<hr>
<p>我已经快要忘了做一个安静的人是什么感觉。</p>
<p>我渐渐遗忘掉我所曾坚持的静忍必驭。</p>
<p>但是，我的确该静下心，思考我自己的世界了。</p>
<p>我被太多繁琐的事情蒙蔽了头脑。</p>
<p>现在我只想聚焦在我的理想里面。啊，那理想之后，还有更虚无缥缈的梦想。可我感到它的实在。</p>
]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title>高等计算机网络</title>
    <url>/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>高等计算机网络。深入学习计算机网络体系结构、协议和算法，了解掌握计算机网络的最新研究成果，学习计算机网络的基本研究方法并能够初步开展计算机网络领域的相关研究。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>课程：《高等计算机网络》，徐恪</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="http://www.cs.tsinghua.edu.cn/publish/cs/4616/2012/20120713164828239751432/20120713164828239751432_.html" target="_blank" rel="noopener external nofollow noreferrer">徐恪</a>：计算机网络体系结构与高性能路由器、网络空间安全、赛博智能经济与区块链。</p>
<h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul>
<li>深入学习计算网络体系结构、协议和算法</li>
<li>了解掌握计算机网络的最新研究成果（论文讨论）</li>
<li>学习计算机网络的基本研究方法</li>
<li>初步开展计算机网络领域的相关研究（课程项目）</li>
</ul>
<h2 id="相关课程"><a href="#相关课程" class="headerlink" title="相关课程"></a>相关课程</h2><p>《计算机网络体系结构》——内容相当（最初的课，人数太多，为了开新课才有了“高等计算机网络”）</p>
<p>《计算机网络前沿研究》——注重SDN，数据中心网络，网络与AI等</p>
<p>《下一代互联网》——网研院的课，IPv6为核心的下一代互联网技术</p>
<h2 id="主要教学内容"><a href="#主要教学内容" class="headerlink" title="主要教学内容"></a>主要教学内容</h2><ul>
<li>介绍网络基础知识</li>
<li>互联网发展历史</li>
<li>网络体系结构详细介绍（强调基本算法和基本协议）</li>
<li>课堂讨论、分组调研及课堂报告</li>
</ul>
<p>注重系统性和整体性，形成网络大局观。</p>
<h2 id="教材和参考书"><a href="#教材和参考书" class="headerlink" title="教材和参考书"></a>教材和参考书</h2><p>《高级计算机网络》——徐恪、徐明伟</p>
<blockquote>
<p>正在出新版，旧版已经脱销了。没有太大的必要看。</p>
</blockquote>
<p>《计算机网络体系结构——设计、建模、分析与优化》</p>
<p>《Computer Networks》</p>
<h2 id="考核方式"><a href="#考核方式" class="headerlink" title="考核方式"></a>考核方式</h2><ul>
<li>论文阅读（30%）<ul>
<li>6篇500字+的阅读报告<ul>
<li>多交可以酌情加分（<del>开始卷了</del>）</li>
</ul>
</li>
</ul>
</li>
<li>技术专题讨论（30%）<ul>
<li>45分钟专题报告</li>
</ul>
</li>
<li>课程项目（40%）<ul>
<li>选定研究/开发型项目，并完成课程报告</li>
</ul>
</li>
</ul>
<h2 id="网络研究的基本问题"><a href="#网络研究的基本问题" class="headerlink" title="网络研究的基本问题"></a>网络研究的基本问题</h2><h3 id="网络体系结构-Architecture"><a href="#网络体系结构-Architecture" class="headerlink" title="网络体系结构 Architecture"></a>网络体系结构 Architecture</h3><p>体系结构的准确描述是很难的。 网络的基本原则和机制?</p>
<ul>
<li><strong>状态</strong>：状态的维护、更新和存储</li>
<li><strong>实名</strong>：实体如何命名。比如IP地址、域名</li>
<li><strong>名字、寻址、路由</strong>：这些功能函数的设计</li>
<li><strong>协议分层</strong>：Modularity of the protocol stack</li>
<li><strong>资源分配</strong>：公平性和（congestion control）</li>
<li><strong>安全性</strong>：网络安全</li>
<li><strong>管理</strong>：互联网的管理</li>
<li><strong>服务质量</strong>（QoS）：如何获得和请求服务质量</li>
</ul>
<p>网络可以分为两大技术主题：</p>
<ul>
<li><strong>网络基础理论</strong>：容量与可扩展性；最优化设计；控制理论；博弈论与机制设计；流量模型和网络行为学</li>
<li><strong>网络体系结构</strong>：网络分层与跨层设计；软件定义网络、主动网络、可编程网络、应用层网络、无线与移动网络、网络虚拟化；对组播和服务质量的支持；IPv6与下一代互联网</li>
</ul>
<p>网络也可以分为三大应用主题：</p>
<ul>
<li><strong>资源管理和分配</strong>：QoS，拥塞控制、流量工程</li>
<li><strong>网络管理</strong>：失效管理、配置管理、计费管理、性能管理、安全管理</li>
<li><strong>网络安全</strong>：完整性、机密性、可用性</li>
</ul>
<h3 id="网络与分布式系统"><a href="#网络与分布式系统" class="headerlink" title="网络与分布式系统"></a>网络与分布式系统</h3><p><strong><font color=purple>网络与分布式系统的界限日益模糊</font></strong>：</p>
<ul>
<li><strong>网络本质上就是分布式系统</strong></li>
<li><strong>互联网服务已经成为信息服务的基本模式</strong></li>
</ul>
<p>数据中心网络的资源管理和调度：</p>
<ul>
<li>数据中心分布式系统资源管理与网络流控和拥塞控制深度融合</li>
<li>计算广告、推荐算法等也与网络资源使用密切相关</li>
</ul>
<p>比特币与区块链：</p>
<ul>
<li>比特币就是运行在网络之上的P2P系统</li>
<li>区块链是P2P网络、分布式共识、密码算法等多种技术融合的产物</li>
</ul>
<h4 id="网络与分布式系统的基础科学问题"><a href="#网络与分布式系统的基础科学问题" class="headerlink" title="网络与分布式系统的基础科学问题"></a>网络与分布式系统的基础科学问题</h4><p>网络领域科学问题：</p>
<ul>
<li>安全性</li>
<li><mark>开放性</mark>（扩展性）</li>
<li>实时性</li>
</ul>
<blockquote>
<p>相互制约，相互平衡。</p>
</blockquote>
<p>分布式系统领域科学问题：</p>
<ul>
<li>易用性和可编程性问题</li>
<li>安全性问题</li>
<li>一致性问题（共识问题）</li>
<li>可靠性和可用性问题</li>
<li>性能提升问题</li>
</ul>
<hr>
<p><strong>通用人工智能</strong>：朱松纯老师正在准备搞这个方向，用小样本、小数据集来进行推理等操作。</p>
<h2 id="网络研究的基本方法"><a href="#网络研究的基本方法" class="headerlink" title="网络研究的基本方法"></a>网络研究的基本方法</h2><h3 id="文献阅读"><a href="#文献阅读" class="headerlink" title="文献阅读"></a>文献阅读</h3><ul>
<li>了解新领域，应该从综述论文入手<ul>
<li>ACM Computing Surveys, IEEE Communications Surveys and Tutorials</li>
<li>Proceedings of the IEEE</li>
<li>Communications of the ACM, IEEE Computer</li>
<li>IEEE Personal Communications, IEEE Communications Magazine, IEEE Network</li>
</ul>
</li>
<li>通过顶级国际会议了解最新的研究成果<ul>
<li>SIGCOMM，INFOCOM，MOBICOM，MOBIHOC，SIGMETRICS，GLOBECOM，ICNP</li>
</ul>
</li>
<li>充分利用网络资源<ul>
<li>图书馆电子资源（IEEE，ACM全文库）</li>
<li>google.com</li>
<li>scholar.google.com</li>
</ul>
</li>
<li>文献阅读<ul>
<li>【精致的笔记】</li>
<li>关注作者和研究小组</li>
</ul>
</li>
</ul>
<h2 id="网络模型与实验"><a href="#网络模型与实验" class="headerlink" title="网络模型与实验"></a>网络模型与实验</h2><p>模型：</p>
<ul>
<li>性能模型：排队论，Petri网（任丰原老师的课程）</li>
<li>形式化模型：自动机，SDL（尹霞老师的课程）</li>
<li>数学模型：优化理论（数学系相关课程），控制理论（自动化系相关课程），博弈论（网络科学与策略机制），图论，网络微积分</li>
</ul>
<p>实验：</p>
<ul>
<li>测量、模拟、仿真和实现</li>
<li>算法研究中，模拟最方便：ns-2, OPNET, MATLAB</li>
<li>研究实际网络的行为，需要进行实际测量和观察</li>
<li>协议研究需要仿真和实现：PlanetLab</li>
</ul>
<h2 id="Top-10-tips-for-writing-a-paper"><a href="#Top-10-tips-for-writing-a-paper" class="headerlink" title="Top-10 tips for writing a paper"></a>Top-10 tips for writing a paper</h2><ol>
<li>Every paper tells a story</li>
<li>Write top down</li>
<li>Introduction: crucial, formulaic</li>
<li>Master the basics of organized writing</li>
<li>Put yourself in place of the reader</li>
<li>No one (not even your mother) is as interested in this topic as you</li>
<li>State the results carefully</li>
<li>Don’t overstate/understate your results</li>
<li>Study the art of writing</li>
<li>Good writing takes times</li>
</ol>
<h1 id="The-Internet"><a href="#The-Internet" class="headerlink" title="The Internet"></a>The Internet</h1><p>根据排队论，分组交换的效率较高。</p>
<h2 id="互联网组织"><a href="#互联网组织" class="headerlink" title="互联网组织"></a>互联网组织</h2><h3 id="Internet-Society-ISOC"><a href="#Internet-Society-ISOC" class="headerlink" title="Internet Society (ISOC)"></a>Internet Society (ISOC)</h3><blockquote>
<p><a href="https://www.internetsociety.org/" target="_blank" rel="noopener external nofollow noreferrer">https://www.internetsociety.org/</a></p>
</blockquote>
<h4 id="Internet-Hall-of-Fame"><a href="#Internet-Hall-of-Fame" class="headerlink" title="Internet Hall of Fame"></a>Internet Hall of Fame</h4><p><strong>Pioneers</strong>: design and development of the Internet with exceptional achievements</p>
<p><strong>Innovators</strong>: made outstanding technological, commercial, regulatory or policy advances and helped to expand the Internet’s positive impact on the lives of others</p>
<p><strong>Global Connectors</strong>: who have made major contributions to the growth, connectivity, and use of the Internet</p>
<h3 id="Internet-Engineering-Task-Force-IETF"><a href="#Internet-Engineering-Task-Force-IETF" class="headerlink" title="Internet Engineering Task Force (IETF)"></a>Internet Engineering Task Force (IETF)</h3><p>The IETF is the protocol engineering and development arm of the Internet</p>
<p>Subdivided into many working groups, which specify <strong>Request For Comments or RFCs</strong></p>
<h4 id="The-Internet-Engineering-Steering-Group-IESG"><a href="#The-Internet-Engineering-Steering-Group-IESG" class="headerlink" title="The Internet Engineering Steering Group (IESG)"></a>The Internet Engineering Steering Group (IESG)</h4><p>The IESG is responsible for technical management of IETF activities and the Internet standards process</p>
<p>Composed of the <strong>Area Directors</strong> of the IETF working groups</p>
<p>看起来很民主很透明，但IETF实际上仍然是一个中心化组织，其中最重要的部门就是IESG。下面的这些主席对标准化工作有几乎绝对的话语权。</p>
<img data-src="/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200921105404457.png" class="" title="image-20200921105404457">
<blockquote>
<p>Futurewei 跟华为关系比较密切，常常道华为开会来跟进新技术的标准化工作。</p>
</blockquote>
<h3 id="Internet-Research-Task-Force-IRTF"><a href="#Internet-Research-Task-Force-IRTF" class="headerlink" title="Internet Research Task Force (IRTF)"></a>Internet Research Task Force (IRTF)</h3><p>做一些标准化的工作。</p>
<p>The Internet Research Task Force is composed of a number of focused, long-term and small Research Groups</p>
<h3 id="Internet-Architecture-Board-IAB"><a href="#Internet-Architecture-Board-IAB" class="headerlink" title="Internet Architecture Board (IAB)"></a>Internet Architecture Board (IAB)</h3><p>互联网一个元老院QAQ荣誉很高。</p>
<p>The IAB is responsible for defining the overall architecture of the Internet, providing guidance and broad direction to the IETF</p>
<p>目前有做一些funding。</p>
<h3 id="Internet-Corporation-for-Assigned-Names-and-Numbers-ICANN"><a href="#Internet-Corporation-for-Assigned-Names-and-Numbers-ICANN" class="headerlink" title="Internet Corporation for Assigned Names and Numbers (ICANN)"></a>Internet Corporation for Assigned Names and Numbers (ICANN)</h3><p>协调地址、域名等等。</p>
<ul>
<li>To reach another person on the Internet you have to type an address into your computer — <strong>a name or a number</strong></li>
<li>That address must be unique so computers know where to find each other</li>
<li>ICANN coordinates these unique identifiers across the world. Without that coordination, we wouldn’t have one global Internet</li>
</ul>
<h2 id="边缘论"><a href="#边缘论" class="headerlink" title="边缘论"></a>边缘论</h2><blockquote>
<p><em>“核心简单，边缘复杂”。</em></p>
</blockquote>
<img data-src="/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200921115302298.png" class="" title="image-20200921115302298">
<p>边缘论的解释：</p>
<ul>
<li>One interpretation: <ul>
<li>A function can only be completely and correctly implemented with the knowledge and help of the applications <em>standing at the communication endpoints</em></li>
</ul>
</li>
<li>Another: (more precise…)<ul>
<li>a system (or subsystem level) should consider only functions that can be <em>completely and correctly</em> implemented within it</li>
</ul>
</li>
<li>Alternative interpretation: (also correct …)<ul>
<li>Think twice before implementing a functionality that you believe that is useful to an application at a lower layer </li>
<li>If the application can implement a functionality correctly, implement it a lower layer <em>only</em> as a performance enhancement</li>
</ul>
</li>
</ul>
<h3 id="层次化选择"><a href="#层次化选择" class="headerlink" title="层次化选择"></a>层次化选择</h3><p>拥塞控制究竟应该放在哪一层?</p>
<ul>
<li>应用层<ul>
<li>交给软件来做，那么有的人可能根本不会去管拥塞控制，每个人写的也不一样</li>
</ul>
</li>
<li>链路层<ul>
<li>交给交换机/路由器，很可能不是所有人都用得到，那么对底层硬件资源的消耗是不太理想的（需要维护大量额外的参数和控制信号）。比如，一些传输流媒体的用户可能不太care拥塞控制</li>
</ul>
</li>
</ul>
<h1 id="Internet-传输层"><a href="#Internet-传输层" class="headerlink" title="Internet 传输层"></a>Internet 传输层</h1><img data-src="/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012100532317.png" class="" title="TCP&#x2F;IP协议栈">
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>早期UDP在以太网上是广播，所以很占带宽，也就是说，只要有一些视频媒体的流量，其他人可能就做不了什么事情了。</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>分组交换没法解决拥塞问题。</p>
<blockquote>
<p>——提出TCP的<strong>自适应</strong>的想法。</p>
</blockquote>
<p>拥塞控制和拥塞避免。</p>
<ul>
<li>避免：尽量别出事<ul>
<li>93年TCP Vegas</li>
</ul>
</li>
</ul>
<p>BIC：快速找最合适的窗口大小。</p>
<h3 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h3><p>Flags：<code>RESET</code>可以用来断开连接，所以常常用来干扰某个TCP连接。</p>
<h3 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h3><p>可靠数据传输：IP层是不可靠的，需要在TCP中加入检查和确认等机制。</p>
<p>两种冗余方式：</p>
<ul>
<li>空间冗余：在编码上的冗余</li>
<li>时间冗余：确认+超时重传机制</li>
</ul>
<h4 id="可靠性机制"><a href="#可靠性机制" class="headerlink" title="可靠性机制"></a>可靠性机制</h4><p>Mechanisms:</p>
<ul>
<li>Checksum: detects corruption <em>in</em> <em>pkts</em> <em>&amp;</em> <em>acks</em></li>
<li>ACK: “packet correctly received”</li>
<li>Duplicate ACK: “packet <strong>incorrectly</strong> received”</li>
<li>Sequence number</li>
<li>Timeout only at sender</li>
</ul>
<p>Provides reliable transmission over:</p>
<ul>
<li>A <em>forward</em> <em>&amp; reverse</em> channel with <em>bit</em>-errors</li>
<li>Detects <em>duplicates</em> of packets/acks</li>
<li><em>NAKs eliminated</em></li>
<li>A <em>forward &amp; reverse</em> channel with <em>packet</em>-errors (loss)</li>
</ul>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>3-way-handshake</p>
<h3 id="TCP窗口流控"><a href="#TCP窗口流控" class="headerlink" title="TCP窗口流控"></a>TCP窗口流控</h3><p>MSS：最大段长，默认536字节。</p>
<blockquote>
<p>越大效率越高，但同时如果丢包损失也越高。</p>
<p>可以和MTU最大传输单元进行适配。避免中途重新分配的时延。</p>
</blockquote>
<p>TCP流控：发送的包不要超过接收窗口。</p>
<h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>网络中堵塞之后，出现丢包问题，丢包又触发了重传……丢包、重传、丢包、重传……这便是TCP拥塞的特征。</p>
<p>Van Jacobson: save the Internet.</p>
<h4 id="拥塞控制和拥塞避免"><a href="#拥塞控制和拥塞避免" class="headerlink" title="拥塞控制和拥塞避免"></a>拥塞控制和拥塞避免</h4><p>让传输速率保持在knee附近是比较明智的选择。</p>
<img data-src="/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012105445850.png" class="" title="拥塞控制图">
<h4 id="动态的自适应方案"><a href="#动态的自适应方案" class="headerlink" title="动态的自适应方案"></a>动态的自适应方案</h4><p>基于网络的模型：预先分配每个节点的网络流量限制。比如，ATM、故宫。</p>
<p>拥塞控制的目标：</p>
<ul>
<li>稳定<ul>
<li>一个动态系统的均衡点</li>
</ul>
</li>
<li>有效</li>
<li>公平<ul>
<li>公平的问题比较复杂。。</li>
<li>提前定义规则，按照可预测的方式去分配资源</li>
</ul>
</li>
</ul>
<hr>
<p>Max-min fairness：</p>
<ul>
<li>没有拥塞时：$f = max(x_i)$</li>
<li>否则：$\sum_j \text{min}(x_i,f)=c$</li>
</ul>
<img data-src="/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012110447325.png" class="" title="Max-min fairness">
<p>ACK自时钟控制分组收发：每收到一个包，发送一个ACK。保持进出均衡。</p>
<blockquote>
<p>保持在knee点附近波动。实现自适应。</p>
</blockquote>
<hr>
<p>TCK：慢加快减。收敛到平衡点。</p>
<hr>
<p>TCK Reno：快重传，快恢复。（跳过了慢启动）</p>
<p>TCK Vegas：平滑的发送窗口。不会丢包。（前提时buffer足够大）</p>
<blockquote>
<p>算法主要看延迟，即RTT时间梯度。</p>
</blockquote>
<p>BIC：对RTT最优窗口值进行二分查找。但RTT更小的人更容易拿到窗口，不公平。</p>
<p>CUBIC：试图解决BIC的公平性问题，找到一种RTT无关的最优窗口查找算法。</p>
<p>————————————————</p>
<h4 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h4><p>找到带宽最大和延迟最小的点。但它们之间是相关的，所以研究人员一开始觉得是不可能的。</p>
<p><strong><font color=red>BBR</font></strong>：分别估计，并计算<strong>时延带宽积</strong>。按照这个值去优化。</p>
<blockquote>
<p><strong>主动测量</strong>。测量短时间（10s内）的最小RTT。</p>
<p>BBR的问题：</p>
<ul>
<li>公平性问题</li>
<li>ACK压缩问题（一个ACK应答多个报文，如200个）</li>
<li>应用重启时如何快速恢复带宽</li>
<li>不匹配的接收窗口</li>
</ul>
<blockquote>
<p>BBR对于数据中心网络的应用还存在一些问题。</p>
</blockquote>
</blockquote>
<h4 id="RED等主动队列管理算法"><a href="#RED等主动队列管理算法" class="headerlink" title="RED等主动队列管理算法"></a>RED等主动队列管理算法</h4><p>提前在队列还没有满的时候，提供一些预警信号。</p>
<p>随着队列变长，预警强度也随之增加。</p>
<p>——关键是早一点有效沟通队列的信息。</p>
<ul>
<li>不是全体通知<ul>
<li>引入概率，抽签通知，保证公平性</li>
</ul>
</li>
</ul>
<p>FRED：加入对flow rate的自适应。</p>
<hr>
<p>优化问题，求解全局用户效用之和的最大化。</p>
<p>凸优化——对偶问题。变成一个机器学习的问题。</p>
<p>TCP &amp; AQM。拥塞控制变成一个在互联网上求解最优化的问题。</p>
<hr>
<p>拥塞控制是Internet最重要的问题之一。</p>
<h1 id="Internet-服务质量"><a href="#Internet-服务质量" class="headerlink" title="Internet 服务质量"></a>Internet 服务质量</h1><p>网络研究中主要关注网络<strong><font color=blue>保证性能</font></strong>的能力。</p>
<p>和性能相关的主要的QoS参数：</p>
<ul>
<li>带宽</li>
<li>延迟</li>
<li>丢包率</li>
</ul>
<hr>
<p>交叉流量是不可预测的。</p>
<hr>
<p>集成服务，对资源进行分发预留。</p>
<h1 id="课程项目"><a href="#课程项目" class="headerlink" title="课程项目"></a>课程项目</h1><h2 id="项目调研"><a href="#项目调研" class="headerlink" title="项目调研"></a>项目调研</h2><h3 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h3><p>协作学习。然而协作学习其实就是无中心化的分布式学习。</p>
<h3 id="NetFPGA"><a href="#NetFPGA" class="headerlink" title="NetFPGA"></a>NetFPGA</h3><blockquote>
<p><a href="https://netfpga.org/" target="_blank" rel="noopener external nofollow noreferrer">https://netfpga.org/</a></p>
</blockquote>
<p>NetFPGA可以非常方便的使得研究人员或者高校学生搭建一个高速，硬件加速的网络系统。目前NetFPGA已经融入了斯坦福大学的课程中，教授学生如何设计硬件传送、传发数据的GigE的交换机与路由器。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyspider操作指南</title>
    <url>/Pyspider%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Python中的Pyspider是用于<code>开发网络爬虫——网上大数据收集工具</code>的一个框架。</p>
<blockquote>
<p>收集数据为了下一步大数据处理（机器学习）做准备。<a id="more"></a></p>
</blockquote>
<h1 id="初等pyspider操作指南"><a href="#初等pyspider操作指南" class="headerlink" title="初等pyspider操作指南"></a>初等pyspider操作指南</h1><p>原文是在之前学习Pyspider的过程中撰写的，参考了大量资料，这里统一谢过大佬们~</p>
<hr>
<p># 阅读之前假设已经完成以下内容：</p>
<ul>
<li><p><strong>环境已配置</strong></p>
</li>
<li><p><strong>已掌握python的基础概念，如类、对象、库，以及基本语法</strong></p>
</li>
<li><strong>至少已经看过《Python3網絡爬蟲實戰》Youtube视频的第20集</strong></li>
<li>对Mysql/数据库有初步了解，知道什么是html。【咱们的pyspider前处理接口html，后处理接口mysql】</li>
<li>理解并能运用正则表达式，CSS。了解on_start，on_result，index_page，detail_page，crawl，callback…函数（即有哪些参数和它的功能）以及各种常用库的用法，需要时能够合理调用。</li>
<li>推荐的.txt参考资料[网址]已经全部打开浏览过，初等学习撷中1-6个示例程序全部浏览并成功运行和检查。读过pyspider作者的博客，看过官方引导，知道SQLAlchemy，有宏观认识。</li>
</ul>
<p>以上扩展知识均可以在本文的<code>Reference</code>部分找到。</p>
<blockquote>
<p><strong>def Checking(Your_current_stauts):</strong></p>
<p><strong>If</strong> 前三项内容已经全部完成<strong>:</strong></p>
<p><strong>return</strong> 合理的假设 = 你可以<strong>写一个简单的、能运行的爬虫</strong>了。</p>
<p><strong>elif</strong> 全部已完成<strong>:</strong></p>
<p><strong>return</strong> 合理的假设 = 本操作指南的<strong>大部分内容你已能够独自实现</strong>。</p>
<p>​         <strong>else</strong>:</p>
<p>​                   <strong>return</strong> Excuse me???</p>
</blockquote>
<h2 id="实现一个最简单的爬虫"><a href="#实现一个最简单的爬虫" class="headerlink" title="实现一个最简单的爬虫"></a>实现一个最简单的爬虫</h2><p>详情见《Python3網絡爬蟲實戰》Youtube视频的第20集，这里只作简单叙述。（我还是讲一下吧233~~）</p>
<p>再贴一下第20集的网址：</p>
<p><a href="https://www.youtube.com/watch?v=nHYHdZqDib0&amp;index=20&amp;list=PLlOGeDt-ISLoiX7OyMHYT9t0DOUhL-pxi&amp;t=0s" target="_blank" rel="noopener external nofollow noreferrer">https://www.youtube.com/watch?v=nHYHdZqDib0&amp;index=20&amp;list=PLlOGeDt-ISLoiX7OyMHYT9t0DOUhL-pxi&amp;t=0s</a></p>
<p>没看的快去看！~~</p>
<p>好的，咳咳，进入正题！</p>
<hr>
<p>我们要实现的<strong>核心功能</strong>如下：</p>
<ul>
<li>正确地获取网页的<strong>内容</strong></li>
<li>实现<strong>翻页</strong></li>
<li>查看<strong>结果</strong></li>
</ul>
<h3 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h3><p>首先创建一个项目：“demo_for_douban”，Start URL(s)这一栏可填可不填，因为它的本质是用来提供信息，好为我们自动创建一个模板。</p>
<p>点击<code>Create</code>。<img data-src="1532517151058.png" alt="1532517151058">                          </p>
<p>接着，打开豆瓣网，进入豆瓣读书，搜索“科幻”。</p>
<p>这便是我们要爬取的索引页。</p>
<p>网址如下：</p>
<p><a href="https://book.douban.com/subject_search?search_text=%E7%A7%91%E5%B9%BB&amp;cat=1001" target="_blank" rel="noopener external nofollow noreferrer">https://book.douban.com/subject_search?search_text=%E7%A7%91%E5%B9%BB&amp;cat=1001</a></p>
<p><img data-src="1532517181501.png" alt="1532517181501"></p>
<p>​    将<strong>START_URL</strong>改成咱们对应要爬取的网页。（如果Start URL(s)这一栏之前在create的时候已经填了，那么这里会初始化为你填的那个网址哦。） </p>
<p><img data-src="1532517202609.png" alt="1532517202609"></p>
<p>​         单击<code>save</code>。</p>
<p><img data-src="1532517262931.png" alt="1532517262931"></p>
<p>​         从on_start这个初始化的函数，通过：</p>
<p><code>self.crawl(&#39;https://book.douban.com/subject_search?search_text=%E7%A7%91%E5%B9%BB&amp;cat=1001&#39;, callback=self.index_page)</code>这个方法，咱们crawl了咱刚刚填进去的网址，然后把这个网址的内容送（回调）到<strong>index_page</strong>这个函数里面进行进一步解析。</p>
<p><img data-src="1532517307921.png" alt="1532517307921"></p>
<p>​         看到没有！index_page的结构跟on_start函数的结构几乎一毛一样嘛！就是多了一行：</p>
<blockquote>
<p>​         for each in <strong>response.doc(‘a[href^=”http”]’).items()</strong>:</p>
</blockquote>
<p>​         看上去好像是明明白白的英文，不就是对每一个（for each）在……中（in）我去执行下一行的操作——而这个“……”里面的内容不就是<strong>response.doc(‘a[href^=”http”]’).items()</strong>那一串吗？也是<strong>response.doc(‘a[href^=”http”]’)</strong>这个东西的<strong>items()</strong>（项）嘛。</p>
<p>​         回顾一下咱们的任务：</p>
<p><img data-src="1532517347156.png" alt="1532517347156"></p>
<p>​         根据之前crawl的写法，这里可以猜测，each.attr.href应该代表一个网址，这个“.attr.href”后缀肯定就是每一个item()的网址了。它又callback了detail_page，这不是内容页面的意思吗？那就是说，item()的网址肯定是一个内容页面的形式了。</p>
<p>​         这里<strong>重点</strong>讲一下<strong>response.doc(‘a[href^=”http”]’)</strong>的功能，即获取网页上的某个元素。不懂没关系，你只需要知道它是<strong>从网页上获取某些东西</strong>就可以了。</p>
<p>​         咱们要获取的内容页面detail_page是什么呢？如下图中所示。</p>
<p><img data-src="1532517384491.png" alt="1532517384491"></p>
<p>​         我们把每个电影的页面记作内容页面，现在我们尝试获取内容页面的网址。</p>
<p>​         点击Run。</p>
<p><img data-src="1532517412724.png" alt="1532517412724"></p>
<p>​         点击follows。</p>
<p><img data-src="1532517430585.png" alt="1532517430585"></p>
<p>​         点击三角形，执行下一步，</p>
<p><img data-src="1532517440890.png" alt="1532517440890"></p>
<p>​         你会惊喜的发现——</p>
<p>​         hhh</p>
<p>​         报错了。。。。</p>
<p>​         是的。</p>
<p>​         这个错误是由于咱们爬取的网址是https开头而不是http，这时，crawl函数里面必须加入一个参数，<strong>validate_cert=False</strong>。</p>
<p>​         于是正确的姿势应该是下面这样~</p>
<p><img data-src="1532517514212.png" alt="1532517514212"></p>
<p>​         Index_page里面的crawl也要记得添加<strong>validate_cert=False</strong>哦。</p>
<p>​         好了，我们再跑一遍。</p>
<p><img data-src="1532517523076.png" alt="1532517523076"></p>
<p>​         仍然会出现问题哦！！！</p>
<p>​         这里面的原因，其实跟豆瓣这个网址设置了反爬虫机制有关，如果想要爬取豆瓣的信息，就需要更高级的手段，咱目前还达不到，因此只好换个网站~</p>
<p>​         （<strong>讲这里是让大家提前意识到反爬虫以及反反爬虫的技术的重要性</strong>，今后有很多的网站可能有反爬虫的机制，越有名越难爬，大家要有心理准备~）</p>
<p>PS:我会告诉你我懒得改？2333333（逃~</p>
<h3 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h3><p>​             我们换成老记录网，这是一个很好的纪录片的网站哦！安利一下。。。</p>
<p>​         把网址改成：<a href="https://www.laojilu.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.laojilu.com/</a></p>
<p><img data-src="1532517543155.png" alt="1532517543155"></p>
<p>​         再次运行，出现detail_page了，出现了125个网址，这些网址有些可能跟我们的需求无关，你看第一个，就是老记录的主页，这个没什么用嘛。我们要爬取的是下面这样的内容网页。</p>
<p><img data-src="1532517554577.png" alt="1532517554577"></p>
<p>​         我们点击Web。如下图。</p>
<p><img data-src="1532517571404.png" alt="1532517571404"></p>
<p>​         可以看到老记录的主页哦。</p>
<p><img data-src="1532517580505.png" alt="1532517580505"></p>
<p>​         是不是有点窄？没关系，咱们调节一下，Chrome中按F12，启动查看元素，点击红圈中的按钮。</p>
<p><img data-src="1532517603416.png" alt="1532517603416"></p>
<p>​         选中视窗。</p>
<p><img data-src="1532517620179.png" alt="1532517620179"></p>
<p>​         更改Style。双击修改宽度150-&gt;450。F11关闭元素查看。好看多了！</p>
<p><img data-src="1532517633446.png" alt="1532517633446"></p>
<p>​         点击enable css选择器按钮。</p>
<p><img data-src="1532517647527.png" alt="1532517647527"></p>
<p>​         选中图中所示的链接，进行CSS选择。可以看到右上角出现了初具雏形的表达式。</p>
<p><img data-src="1532517661900.png" alt="1532517661900"></p>
<p>​         我们点击右上角第一个按钮，复制这个表达式。第二个按钮用来将其插入代码当中。选中index_page里面的a[href^=”http”]表达式，用我们新选择的表达式替换。</p>
<p><img data-src="1532517674126.png" alt="1532517674126"></p>
<p>​         点击save。重新run。</p>
<p><img data-src="1532517684065.png" alt="1532517684065"></p>
<p>​         只剩下一个网页了！！！这可不妙，咱们筛选得好像太过分了。我们重新选择一遍。</p>
<p>​         我们按F11查看一下老记录网主页的Html，并用红圈中的按钮来选择刚刚的元素查看一下它的结构。</p>
<p><img data-src="1532517695176.png" alt="1532517695176"></p>
<p>我们看到结构是这样的，thumbnail类下面，这里面有很多的内容页面，每个保存在h2 &gt; a这样的结构里面。</p>
<p>我们尝试重新做一下CSS表达式。把thumbnail添加进去，点击.tag-79删去这个不必要的说明。</p>
<p><img data-src="1532517708754.png" alt="1532517708754"></p>
<p>​         可以看到，这次页面都被选中了。我们把新的表达式覆盖到代码里面。</p>
<p><img data-src="1532517721104.png" alt="1532517721104"></p>
<p>​         Save，run，看下效果。效果不错哟~~</p>
<p><img data-src="1532517730898.png" alt="1532517730898"></p>
<p>​         随便点一个绿色三角。这里我们点第一个做个示范。</p>
<p><img data-src="1532517740901.png" alt="1532517740901"></p>
<p>​         看！有结果了！分别是title，url的信息。</p>
<p><img data-src="1532517748859.png" alt="1532517748859"></p>
<p>​         这不就是detail_page里面的返回值吗？（这里的返回值是以“键值对”的形式给出的）</p>
<p>​         这就给了为我们一个提示：如果，想要获取更多的信息，可能需要把获得的信息写到return里面。</p>
<p>​         如果想要更多的信息要怎么做呢？</p>
<p>​         照样，重复类似的步骤就行了。我就不详细写了。下面贴出代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-03-22 01:22:33</span></span><br><span class="line"><span class="comment"># Project: demo_for_douban</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'https://www.laojilu.com/'</span>,validate_cert=<span class="literal">False</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'#thumbnail * &gt; h2 &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href,validate_cert=<span class="literal">False</span>, callback=self.detail_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        </span><br><span class="line">        movie_name = response.doc(<span class="string">'h1'</span>).text()</span><br><span class="line">        movie_info = response.doc(<span class="string">'.post &gt; p'</span>).text()</span><br><span class="line">        <span class="comment">#如果要对info进一步分离，可采用items()分别获取，再存入对应的元素</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>: response.url,</span><br><span class="line">            <span class="string">"title"</span>: response.doc(<span class="string">'title'</span>).text(),</span><br><span class="line">            <span class="string">"movie_name"</span>: movie_name,</span><br><span class="line">            <span class="string">"movie_info"</span>: movie_info,</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>​         以及运行的抓取结果：（抓取图片的技术比较复杂，可以看demo中的实现方法）</p>
<p><img data-src="1532517832777.png" alt="1532517832777"></p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>再回顾一下咱们最开始的目的~~</p>
<p><img data-src="1532517869728.png" alt="1532517869728"></p>
<p>​         咱们已经实现了前后的内容和结果，可是翻页操作还没实现呢！这可要命，没有翻页操作的话，爬完这一页，下一页不就不能爬了？</p>
<p>​         这里要设计一个index_page的循环。我获取这一页索引的内容页之后，能够转到下一页索引，继续获取新的内容页。</p>
<p>​         添加两行代码，获取下一页的链接。</p>
<p><img data-src="1532517914395.png" alt="1532517914395"></p>
<p>​         再run一遍，发现follows从18个分支，变成了19个，多了个index_page。这便实现了翻页操作。</p>
<p><img data-src="1532517964162.png" alt="1532517964162"></p>
<p>给出一个总的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-03-22 01:22:33</span></span><br><span class="line"><span class="comment"># Project: demo_for_douban</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'https://www.laojilu.com/'</span>,validate_cert=<span class="literal">False</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'#thumbnail * &gt; h2 &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href,validate_cert=<span class="literal">False</span>, callback=self.detail_page)</span><br><span class="line">        next = response.doc(<span class="string">'.next'</span>)</span><br><span class="line">        self.crawl(next.attr.href,validate_cert=<span class="literal">False</span>,callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        </span><br><span class="line">        movie_name = response.doc(<span class="string">'h1'</span>).text()</span><br><span class="line">        movie_info = response.doc(<span class="string">'.post &gt; p'</span>).text()</span><br><span class="line">        <span class="comment">#如果要对info进一步分离，可采用items()分别获取，再存入对应的元素</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>: response.url,</span><br><span class="line">            <span class="string">"title"</span>: response.doc(<span class="string">'title'</span>).text(),</span><br><span class="line">            <span class="string">"movie_name"</span>: movie_name,</span><br><span class="line">            <span class="string">"movie_info"</span>: movie_info,</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>当然，我们最终的目的是要将爬取的结果保存到本地嘛。</p>
<p>我们借助demo里面改写的on_result方法，Tool工具类，以及一系列的库和附加的初始化定义（比如定义图片存储路径的DIR_PATH），就能很方便地实现了！这里就不再作更具体的描述了，留给你练练手吧~</p>
<h2 id="CSS选择器的简单回顾"><a href="#CSS选择器的简单回顾" class="headerlink" title="CSS选择器的简单回顾"></a>CSS选择器的简单回顾</h2><p>​    <strong>注意：以下内容是基于你“至少已经看过《Python3網絡爬蟲實戰》Youtube视频的第20集”。</strong></p>
<h3 id="什么是CSS选择器"><a href="#什么是CSS选择器" class="headerlink" title="什么是CSS选择器"></a>什么是CSS选择器</h3><p>在pyspider的WebUI上，可以看到五大功能：</p>
<p><img data-src="1532518056366.png" alt="1532518056366"></p>
<p>按重要程度分别是：</p>
<ul>
<li><code>Follows</code>，用于单步调试【可在本指南的如何DEBUG的常用方法中找到更详细的描述】</li>
<li><code>Web</code>，网页，在这里运行到某一步，可查看对应的页面（pyspider的本质是自动地浏览网页，并把网页的内容有选择性地下载下来）</li>
<li><code>Enable css selector helper</code>，CSS选择器。通常与网页的html结合起来使用，这样获得的CSS表达式往往更准确</li>
</ul>
<p>使用方法：见《Python3網絡爬蟲實戰》Youtube视频的第20集</p>
<ul>
<li><code>Message</code>，消息（队列），不常用</li>
<li><code>Html</code>，不常用</li>
</ul>
<h3 id="抓取合适的CSS"><a href="#抓取合适的CSS" class="headerlink" title="抓取合适的CSS"></a>抓取合适的CSS</h3><p>通常通过pyspider的WebUI提供的CSS选择器，我们已经可以很方便地抓取大部分的网页内容。但是仍然有少量的内容可能出现一些问题，这时咱们可以借助Chrome自带的网页元素查看器，进行更细致准确的分析。</p>
<ul>
<li>比较常出现的情况是：<strong>表达式含义不唯一</strong>。比如抓取content，可能一个content对应了好多个元素a，那么这时就要用到正则表达式了。</li>
</ul>
<h3 id="最简单的正则表达式"><a href="#最简单的正则表达式" class="headerlink" title="最简单的正则表达式"></a>最简单的正则表达式</h3><p>咱们一般会用的正则表达式（我目前遇到的）有且仅有一种。</p>
<p>就是  .xxx &gt; xxx &gt; xxx<strong>[“XYZ=ABC”]</strong> 的形式。</p>
<p>在我之前给大家的“4. for<em>compositesworld(复合材料世界)</em>基于JEC通用化代码模板_改进版”里，有下面一行代码：</p>
<p><img data-src="1532518188970.png" alt="1532518188970"></p>
<p>这就是典型的应用。大家可以按照之前的方法查看一下对应的网页元素，弄清楚为什么这么做。【提示：使<strong>表达式的含义唯一</strong>】</p>
<h2 id="结构化、伪宏控制"><a href="#结构化、伪宏控制" class="headerlink" title="结构化、伪宏控制"></a>结构化、伪宏控制</h2><h3 id="伪宏控制"><a href="#伪宏控制" class="headerlink" title="伪宏控制"></a>伪宏控制</h3><p>学过C语言的你，可能还记得C语言中有一种功能：宏定义。</p>
<p><img data-src="1532518206891.png" alt="1532518206891"></p>
<p>C++中宏定义能够实现类似下面这个示例代码的功能：</p>
<p><img data-src="1532518220976.png" alt="1532518220976"></p>
<p>可以看到，预先定义的宏可以在接下来的整个程序的任何地方，只要写它的名字就行了。该也非常方便，因为你只用改宏pi，整个程序的pi就能随之而变。</p>
<p>尽管python中没有严格的宏的功能，但我们通过预先把需要调节的参数统一命名赋值，放置到程序的头部，还是可以实现的。这样，咱们的代码就能实现结构化了！</p>
<p>对于同样一种结构的网页，我们使用同一套代码的输入模板就能很方便地修改对应参数，快速编程了。</p>
<h3 id="范式编程"><a href="#范式编程" class="headerlink" title="范式编程"></a>范式编程</h3><p>范式就是典型的意思。咱们可以通过一个比较具有代表性的网站的爬取框架，进行范式化。但这个框架的使用一定具有一些条件，这些要在代码中写明。</p>
<p><img data-src="1532518235977.png" alt="1532518235977"></p>
<p>接下来咱们就能动手实现范式化的编程了。</p>
<p>效果如图。</p>
<p><img data-src="1532518252299.png" alt="1532518252299"></p>
<p>​         具体过程我就不详细解释了，如果前面的理解没有问题，这里应该不难。你也可以尝试动手实现自己的一个范式哦~</p>
<h2 id="封装与自动化"><a href="#封装与自动化" class="headerlink" title="封装与自动化"></a>封装与自动化</h2><h3 id="自动化创建子目录"><a href="#自动化创建子目录" class="headerlink" title="自动化创建子目录"></a>自动化创建子目录</h3><p>细心的你可能已经发现：咱们理论上虽然可以在WebUI/dashboard上一次建立很多个爬虫程序，但是——所有的图片好像都保存在了同一个路径之下？？？What？还有这种操作？那我保存的图片管理起来岂不是非常混乱……</p>
<p>于是可能会有这样的想法……</p>
<p>如果能够在子目录里面，按照我建的project的名字创建一个专属于这个project的子文件夹，那么张三的文件放到张三的文件夹里，李四的文件放到李四的文件夹里，管理起来岂不是方便多了，而且还很直观。这就是核心的想法。</p>
<p>基于这样的想法，我们对DIR_PATH这个图片保存目录做以下的修改：</p>
<p><img data-src="1532518267613.png" alt="1532518267613"></p>
<p>​    （也许你在疑惑我是用了什么主题的IDLE才有这么酷炫的编程界面？？？那么注意啦，这是Sublime Text 3，非常适合小项目的编程IDE。你可以百度搜索下载哦，只要进行一定的快捷设置，就可以实现在Sublime Text 3进行python程序的运行~具体问度娘~）</p>
<p>整个思路就是：创建一个项目子目录，如果目录不存在。</p>
<p>下面我们尝试创建两个项目。在cmd命令行粘贴以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd desktop</span><br><span class="line">md CraData</span><br><span class="line">cd CraData</span><br><span class="line">pyspider all</span><br></pre></td></tr></table></figure>
<p>如果成功运行，桌面上将出现一个CraData文件，用于保存爬取的数据。</p>
<p>效果如图：</p>
<p><img data-src="1532518341396.png" alt="1532518341396"></p>
<p>在WebUI创建两个项目JEC和Comp，分别把</p>
<p><strong>3.</strong> <strong>封装<em>for_jeccomposites(JEC)</em>**</strong>伪宏控制__<strong>**范式编程.py</strong></p>
<p>和</p>
<p><strong>4. for<em>compositesworld(复合材料世界)</em>基于JEC通用化代码模板_改进版.py</strong></p>
<p>中的代码覆盖到项目的代码中。如下图所示：</p>
<p><img data-src="1532518359216.png" alt="1532518359216"></p>
<p>回到dashboard，将两个项目的状态都调到running，点击run。</p>
<p>打开图片存放的目录，发现有两个基于project_name生成的子文件夹：</p>
<p><img data-src="1532518408683.png" alt="1532518408683"></p>
<p>说明运行成功。</p>
<h3 id="封装——create-table方法的实现"><a href="#封装——create-table方法的实现" class="headerlink" title="封装——create_table方法的实现"></a>封装——create_table方法的实现</h3><p>打开mysqldb_new.py文件。</p>
<p>看第三行：</p>
<p><img data-src="1532518424917.png" alt="1532518424917"></p>
<p>使用该改进方法可能需要安装的库：sqlalchemy，mysql-connector。均可用pip install快速安装。这说明你必须首先安装这两个库，才能使用这个基于mysqldb的改进库。</p>
<p>让我们看看它与mysqldb有什么不同。</p>
<p><img data-src="1532518436372.png" alt="1532518436372"></p>
<p><img data-src="1532518452136.png" alt="1532518452136"></p>
<p>可以看到，它的区别主要在于前面引入了三个新库，尾部增加了一个create_table方法。</p>
<p>具体的实现方法就不细讲了，网上可以百度。要使用这个库，把它拷贝到与mysqldb相同的目录下即可。注意需要在</p>
<p>engine = create_engine(‘mysql+mysqlconnector://root:fdzxks@localhost:3307/pyspider’)</p>
<p>​    这一行进行数据库的连接设置才能正常使用。</p>
<p>下面讲一下怎么调用它。</p>
<p><img data-src="1532518478980.png" alt="1532518478980"></p>
<p>可以看到，方法里面有两个参数，self，project_name，self是class（类）对象自带的一个默认参数，必须要填，你可以不用管它。project_name参数则比较重要，顾名思义，就是你的项目的名字。如果你已经实现过前面的范式编程，你应该对这个变量名很熟悉。以下是一个调用的实例：</p>
<p>打开之前发过的文件：</p>
<p>\6. test<em>pro</em>通过调用MySQLnew实现自动创建列表_demo.py</p>
<p><img data-src="1532518500235.png" alt="1532518500235"></p>
<p>Run一下。打开Navicat，发现有新的表格自动建立了。【必须先保证前面数据库连接参数已设定好】</p>
<p><img data-src="1532518510194.png" alt="1532518510194"></p>
<p>右键选择“设计表”查看表结构。</p>
<p><img data-src="1532518520750.png" alt="1532518520750"></p>
<p>与咱们需要的表结构一致。运行成功。</p>
<p>PS：test_for_auto_table_maker是一个名字，你可以任意指定/修改。</p>
<h3 id="自动化创建表"><a href="#自动化创建表" class="headerlink" title="自动化创建表"></a>自动化创建表</h3><p>首先咱们需要在代码中加入两个部分：<img data-src="1532518539831.png" alt="1532518539831"></p>
<p>然后就能够自动创建表了。【但你首先要完成之前的步骤哦】</p>
<h3 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h3><p>聪明的你也许已经发现了，到现在为止，咱们的demo代码里面，还有两大块我没有提到过。它们是：</p>
<p><img data-src="1532518581682.png" alt="1532518581682"></p>
<p>​    和</p>
<p><img data-src="1532518619250.png" alt="1532518619250"></p>
<p>​    这两个部分，一个用来初始化，一个用来定义工具类，都是咱们可以直接调用的方法，它们的存在，更类似于库，只不过没有封装成一个库用import引进来而已。因此，咱们不用太关注里面具体是如何实现的，你只需要知道它的功能，需要输入什么，能够输出什么，就足够了。而这些，代码中的注释应该能给你一定的启发。如果还有问题，随时百度哦。</p>
<h2 id="如何DEBUG？"><a href="#如何DEBUG？" class="headerlink" title="如何DEBUG？"></a>如何DEBUG？</h2><h3 id="DEBUG是什么"><a href="#DEBUG是什么" class="headerlink" title="DEBUG是什么"></a>DEBUG是什么</h3><p>DEBUG是什么，首先要知道BUG是什么，即“虫子”（虫族？？），计算机学中用来指代程序、代码的漏洞。例如，在长达上亿行代码的window操作系统中，漏洞的数量也是非常多的，成千上万。BUG是非常难以彻底避免，对于大型的项目，甚至有相关的指标规定：如，千行代码缺陷率（bug率）。</p>
<p>只要代码是人写的，出错的原因一定在自身。【这里已经默认你已经完成了环境的部署哦，如果环境设置没弄好而出现的问题不属于这里的讨论范围~】那么，就要找找自己的原因了，是否对程序的框架不够清楚就匆忙开始写？是否了解自己代码的功能？是否考虑过可能出现的代码BUG，并作一定的预防措施（“可以理解”的报错）？</p>
<p>假若，木已成舟，生米已经熟饭……<strong>DEBUG**</strong>——程序纠错、调试<strong>就不可避免了。一般来说，质量越差的源代码，调试起来就越困难，耗费的时间也就越长，BUG更加难以识别，甚至天长地久也不能发现。</strong>提高源代码质量的方法：加注释，结构化，封装化**。</p>
<h3 id="常用方法总结"><a href="#常用方法总结" class="headerlink" title="常用方法总结"></a>常用方法总结</h3><p>下面介绍Pyspider的三种常用的DEBUG方法：</p>
<h4 id="l-使用单步调试"><a href="#l-使用单步调试" class="headerlink" title="l  使用单步调试"></a>l  使用单步调试</h4><p>打开host:5000页面，pyspider dashboard，进入一个project。</p>
<p>之前我们用的点击绿色小三角来单步执行，就是单步调试。不细讲了。</p>
<p>如果你已经实现了往数据库传输结果，在这个阶段请你先屏蔽掉on_result方法，让结果能直接显示在WebUI网页里面，便于分析结果抓取是否合理。</p>
<p>屏蔽掉on_result方法即在对应代码行最前加注释号（或者直接先删掉该方法，之后再粘贴进来）：</p>
<p><img data-src="1532518648084.png" alt="1532518648084"></p>
<h4 id="l-使用命令行调试"><a href="#l-使用命令行调试" class="headerlink" title="l  使用命令行调试"></a>l  使用命令行调试</h4><p>修改项目status到running，点击run。</p>
<p><img data-src="1532518656810.png" alt="1532518656810"></p>
<p>在命令行会发现下面这样的效果：</p>
<p><img data-src="1532518664943.png" alt="1532518664943"></p>
<p>你会发现最左边的字母，一般只会出现两种状态：“I”和“E”。</p>
<p>“I”我不知道是什么意思，但“E”经我推测应该代表Error的意思。如果你的命令行在运行过程中出现了“E”，请按照给出的错误信息进行调试。</p>
<p>比如我现在就出现了这样的错误：</p>
<p>ValueError(u’String does not contain a date:’, ‘’)</p>
<p>这说明抓取的time里面，有的date（日期）没有抓取下来，字符串是空的，可能需要做一些修改（比如尝试更精确CSS表达式，或者更好地对提取的time做处理）。</p>
<p>一般这里的错误单步调试时理论上也能找到，但由于咱们爬取的页面数量庞大，有些错误还是要依靠命令行来查找。</p>
<h4 id="l-使用前后接口调试"><a href="#l-使用前后接口调试" class="headerlink" title="l  使用前后接口调试"></a>l  使用前后接口调试</h4><p>pyspider前接口，对接网页即html；pyspider后接口，对接数据库即mysql。</p>
<p>Html影响获取内容，mysql影响储存信息。</p>
<p>Html的调试，就是选择合适的CSS表达式的过程。</p>
<p>Mysql的调试，查看是否存入数据，数据是否规范等。</p>
<p>已经，对图片保存目录进行查看，是否成功爬取图片。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果time(调试) &gt;&gt; time(写代码)，说明源代码质量差，要注意提高代码质量；如果time(写代码)+ time(调试) &gt;&gt; time (average)，说明基本功不好，要多练。</p>
<p>强调：写代码一定要高质量，否则调试很麻烦。</p>
<p>这是惨痛的经验<del>~</del></p>
<h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>试试运行以下代码？【先运行pip install turtle】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run完会不会想起球状闪电——&gt;……？？？</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">setup(<span class="number">600</span>,<span class="number">800</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(<span class="number">90</span>)</span><br><span class="line">fd(<span class="number">340</span>)</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">pendown()</span><br><span class="line"> </span><br><span class="line">speed(<span class="number">5</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">fillcolor(<span class="string">'red'</span>)</span><br><span class="line">circle(<span class="number">50</span>,<span class="number">30</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">1</span>)</span><br><span class="line">    left(<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">circle(<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">1</span>)</span><br><span class="line">    left(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">circle(<span class="number">80</span>,<span class="number">40</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    fd(<span class="number">0.5</span>)</span><br><span class="line">    left(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">circle(<span class="number">80</span>,<span class="number">45</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">2</span>)</span><br><span class="line">    left(<span class="number">1</span>)</span><br><span class="line">     </span><br><span class="line">circle(<span class="number">80</span>,<span class="number">25</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    fd(<span class="number">1</span>)</span><br><span class="line">    left(<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">circle(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line"> </span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line"> </span><br><span class="line">circle(<span class="number">120</span>,<span class="number">55</span>)</span><br><span class="line"> </span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">seth(<span class="number">-90</span>)</span><br><span class="line">fd(<span class="number">70</span>)</span><br><span class="line"> </span><br><span class="line">right(<span class="number">150</span>)</span><br><span class="line">fd(<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line">left(<span class="number">140</span>)</span><br><span class="line">circle(<span class="number">140</span>,<span class="number">90</span>)</span><br><span class="line"> </span><br><span class="line">left(<span class="number">30</span>)</span><br><span class="line">circle(<span class="number">160</span>,<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line">left(<span class="number">130</span>)</span><br><span class="line">fd(<span class="number">25</span>)</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">right(<span class="number">150</span>)</span><br><span class="line">circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">pendown()</span><br><span class="line"> </span><br><span class="line">left(<span class="number">115</span>)</span><br><span class="line">fd(<span class="number">60</span>)</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">left(<span class="number">180</span>)</span><br><span class="line">fd(<span class="number">60</span>)</span><br><span class="line">pendown()</span><br><span class="line"> </span><br><span class="line">end_fill()</span><br><span class="line"> </span><br><span class="line">right(<span class="number">120</span>)</span><br><span class="line">circle(<span class="number">-50</span>,<span class="number">50</span>)</span><br><span class="line">circle(<span class="number">-20</span>,<span class="number">90</span>)</span><br><span class="line"> </span><br><span class="line">speed(<span class="number">1</span>)</span><br><span class="line">fd(<span class="number">75</span>)</span><br><span class="line"> </span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line">circle(<span class="number">90</span>,<span class="number">110</span>)</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">left(<span class="number">162</span>)</span><br><span class="line">fd(<span class="number">185</span>)</span><br><span class="line">left(<span class="number">170</span>)</span><br><span class="line">pendown()</span><br><span class="line">circle(<span class="number">200</span>,<span class="number">10</span>)</span><br><span class="line">circle(<span class="number">100</span>,<span class="number">40</span>)</span><br><span class="line">circle(<span class="number">-52</span>,<span class="number">115</span>)</span><br><span class="line">left(<span class="number">20</span>)</span><br><span class="line">circle(<span class="number">100</span>,<span class="number">20</span>)</span><br><span class="line">circle(<span class="number">300</span>,<span class="number">20</span>)</span><br><span class="line">speed(<span class="number">1</span>)</span><br><span class="line">fd(<span class="number">250</span>)</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line">left(<span class="number">180</span>)</span><br><span class="line">fd(<span class="number">250</span>)</span><br><span class="line">circle(<span class="number">-300</span>,<span class="number">7</span>)</span><br><span class="line">right(<span class="number">80</span>)</span><br><span class="line">circle(<span class="number">200</span>,<span class="number">5</span>)</span><br><span class="line">pendown()</span><br><span class="line"> </span><br><span class="line">left(<span class="number">60</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">fillcolor(<span class="string">'green'</span>)</span><br><span class="line">circle(<span class="number">-80</span>,<span class="number">100</span>)</span><br><span class="line">right(<span class="number">90</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">left(<span class="number">20</span>)</span><br><span class="line">circle(<span class="number">-63</span>,<span class="number">127</span>)</span><br><span class="line">end_fill()</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">left(<span class="number">50</span>)</span><br><span class="line">fd(<span class="number">20</span>)</span><br><span class="line">left(<span class="number">180</span>)</span><br><span class="line"> </span><br><span class="line">pendown()</span><br><span class="line">circle(<span class="number">200</span>,<span class="number">25</span>)</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">right(<span class="number">150</span>)</span><br><span class="line"> </span><br><span class="line">fd(<span class="number">180</span>)</span><br><span class="line"> </span><br><span class="line">right(<span class="number">40</span>)</span><br><span class="line">pendown()</span><br><span class="line">begin_fill()</span><br><span class="line">fillcolor(<span class="string">'green'</span>)</span><br><span class="line">circle(<span class="number">-100</span>,<span class="number">80</span>)</span><br><span class="line">right(<span class="number">150</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">left(<span class="number">60</span>)</span><br><span class="line">circle(<span class="number">-80</span>,<span class="number">98</span>)</span><br><span class="line">end_fill()</span><br><span class="line"> </span><br><span class="line">penup()</span><br><span class="line">left(<span class="number">60</span>)</span><br><span class="line">fd(<span class="number">13</span>)</span><br><span class="line">left(<span class="number">180</span>)</span><br><span class="line"> </span><br><span class="line">pendown()</span><br><span class="line">speed(<span class="number">1</span>)</span><br><span class="line">circle(<span class="number">-200</span>,<span class="number">23</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">exitonclick()</span><br></pre></td></tr></table></figure>
<p>参考自：<a href="https://www.cnblogs.com/wwh8797/p/7739699.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/wwh8797/p/7739699.html</a></p>
<p><a href="https://www.zhihu.com/question/21664179" target="_blank" rel="noopener external nofollow noreferrer">https://www.zhihu.com/question/21664179</a></p>
<p><a href="http://www.bugman123.com/index.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.bugman123.com/index.html</a></p>
<h1 id="Pyspider环境配置"><a href="#Pyspider环境配置" class="headerlink" title="Pyspider环境配置"></a>Pyspider环境配置</h1><p>Pyspider的介绍等请读者自行搜索知悉。</p>
<p>Pyspider的框架搭建过程并不唯一，高级读者可以自行决定。</p>
<p>一些参考资料，可在本文的<code>Reference</code>中找到。</p>
<h2 id="Python2框架"><a href="#Python2框架" class="headerlink" title="Python2框架"></a>Python2框架</h2><ol>
<li>安装python2.7（32位，64位对pyspider支持有问题，相关软件文件夹中直接双击安装即可，注意选择添加环境变量，否则后面需要手动添加环境变量）</li>
<li>Microsoft Visual C++ Compiler for Python 2.7安装（相关软件文件夹中直接双击安装VCForPython27.msi）</li>
<li>安装pyspider</li>
</ol>
<blockquote>
<p>Cmd执行pip install pyspider安装（如果没有pip，可以将C:\Python27;C:\Python27\Scripts两个路径添加到环境变量即可）</p>
<p>安装过程中可能会遇到一些依赖无法安装，需要手动下载安装包。到这个链接网址<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener external nofollow noreferrer">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>，搜索相应版本的安装包，下载，pip install <em>**</em>.whl即可</p>
</blockquote>
<ol>
<li>Mysql数据库连接设置<ol>
<li>本机装好数据库</li>
<li>将相关软件中mysqldb.py文件拷贝到安装路径C:\Python27\Lib\site-packages\pyspider\database\mysql\下,打开文件修改相关数据库连接参数：                               </li>
</ol>
</li>
</ol>
<p><img data-src="1532514125237.png" alt="1532514125237"></p>
<ol>
<li>Cmd切换到开发目录下输入pyspider启动，这个目录可以随意见一个，之后在页面写的脚本都会保存在这个目录下。</li>
</ol>
<h2 id="Anaconda框架"><a href="#Anaconda框架" class="headerlink" title="Anaconda框架"></a>Anaconda框架</h2><p>基本操作如上，但Anaconda<strong>支持多环境的切换</strong>（比如，py2和py3），更方便。</p>
<p>并且Anaconda会<strong>自动安装常用的库</strong>，对新手更友好。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>下面介绍一个demo</p>
<blockquote>
<p>先在mysql建好数据库表：</p>
</blockquote>
<p><img data-src="1532514150502.png" alt="1532514150502"></p>
<blockquote>
<p>打开浏览器输入<a href="http://localhost:5000/" target="_blank" rel="noopener external nofollow noreferrer">http://localhost:5000/</a>，单击create创建爬虫脚本(以爬取美国波音公司媒体网站<a href="http://boeing.mediaroom.com/为例" target="_blank" rel="noopener external nofollow noreferrer">http://boeing.mediaroom.com/为例</a>)</p>
</blockquote>
<p>输入：</p>
<blockquote>
<p><code>project name：boeing</code></p>
<p><code>url：http://boeing.mediaroom.com/</code></p>
</blockquote>
<p>创建之后将以下内容拷贝到右侧代码框中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2017-12-05 20:59:56</span></span><br><span class="line"><span class="comment"># Project: boeing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb <span class="keyword">import</span> SQL</span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser</span><br><span class="line">  </span><br><span class="line">reload(sys)  </span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片存放目录</span></span><br><span class="line">DIR_PATH = <span class="string">"./"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    headers= &#123;</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate, sdch"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'itag'</span>: <span class="string">'v1.1'</span>,</span><br><span class="line">        <span class="string">"headers"</span> : headers,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="number">100000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dir_path = DIR_PATH</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'http://boeing.mediaroom.com/news-releases-statements'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.archive_nav &gt; a'</span>).items():</span><br><span class="line">            year=each.text()</span><br><span class="line">            <span class="keyword">if</span>(year != <span class="string">"Search"</span>):</span><br><span class="line">                <span class="keyword">if</span>(year==<span class="string">"2016"</span> <span class="keyword">or</span> year==<span class="string">"2015"</span>):</span><br><span class="line">                    self.crawl(each.attr.href, callback=self.news_page)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">            time=each.find(<span class="string">'div'</span>).eq(<span class="number">0</span>).text()</span><br><span class="line">            datetime_struct = parser.parse(time)</span><br><span class="line">            time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            self.crawl(each.find(<span class="string">'div'</span>).find(<span class="string">'a'</span>).attr.href, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.news,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        <span class="keyword">for</span> each_page <span class="keyword">in</span> response.doc(<span class="string">'.table_footer &gt; b &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each_page.attr.href, callback=self.news_page2)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news_page2</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">            time=each.find(<span class="string">'div'</span>).eq(<span class="number">0</span>).text()</span><br><span class="line">            datetime_struct = parser.parse(time)</span><br><span class="line">            time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            self.crawl(each.find(<span class="string">'div'</span>).find(<span class="string">'a'</span>).attr.href, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.news,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        time=response.save[<span class="string">'time'</span>]</span><br><span class="line">        <span class="keyword">if</span> response.doc(<span class="string">'#assets_20295_130083-117_tab_link'</span>):</span><br><span class="line">            self.crawl(response.doc(<span class="string">'#assets_20295_130083-117_tab_link'</span>).attr.href,save=&#123;<span class="string">'time'</span>: time&#125;, callback=self.detail_page,validate_cert=<span class="literal">False</span>,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.crawl(response.url, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.detail_page,validate_cert=<span class="literal">False</span>,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        title=response.doc(<span class="string">'.wd_news_releases-detail &gt; h1'</span>).text()</span><br><span class="line">        time=response.save[<span class="string">'time'</span>]</span><br><span class="line">        content = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.news_body &gt; p'</span>).items():</span><br><span class="line">            content += each.text()</span><br><span class="line">        url = response.url</span><br><span class="line">        picture_url = <span class="string">''</span></span><br><span class="line">        picture_local_path = <span class="string">''</span></span><br><span class="line">        file_title = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'-'</span>,title)</span><br><span class="line">        imgDir = self.dir_path</span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(<span class="string">'.detail_image &gt; img'</span>).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            picture_url += imgUrl + <span class="string">';'</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:</span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(<span class="string">'.PRN_ImbeddedAssetReference &gt; p &gt; img'</span>).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            picture_url += imgUrl + <span class="string">';'</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:</span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">30000</span>)   </span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"title"</span>:title,</span><br><span class="line">            <span class="string">"introduction"</span>:<span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"time"</span>:time,</span><br><span class="line">            <span class="string">"content"</span>:content,</span><br><span class="line">            <span class="string">"keywords"</span>:<span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"boeing"</span>,</span><br><span class="line">            <span class="string">"source"</span>:<span class="string">"原创"</span>,</span><br><span class="line">            <span class="string">"url"</span>:url,</span><br><span class="line">            <span class="string">"picture_url"</span>:picture_url,</span><br><span class="line">            <span class="string">"picture_local_path"</span>:picture_local_path</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        content = response.content</span><br><span class="line">        file_name = response.save[<span class="string">"file_name"</span>]</span><br><span class="line">        imgDir = response.save[<span class="string">"imgDir"</span>]</span><br><span class="line">        file_path = imgDir + file_name</span><br><span class="line">        self.tool.save_img(content,imgDir,file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> <span class="keyword">not</span> result[<span class="string">'title'</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sql = SQL()</span><br><span class="line">        sql.insert(<span class="string">'boeing'</span>,**result)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#工具类    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,content,imgDir,path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgDir):                         </span><br><span class="line">            os.makedirs(imgDir)</span><br><span class="line">        f = open(path,<span class="string">"wb"</span> )</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_extension</span><span class="params">(self,url)</span>:</span>                            </span><br><span class="line">        extension = url.split(<span class="string">"."</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> extension </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取图片名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        name=url.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>
<ul>
<li>单击save</li>
<li>回到pyspider dashboard页面</li>
<li>修改状态到running，单击run。查询数据库是否有数据写入。</li>
</ul>
<p><img data-src="1532514183650.png" alt="1532514183650"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="python学习资料"><a href="#python学习资料" class="headerlink" title="python学习资料"></a>python学习资料</h2><p>初学者不建议直接安装python！请安装Anaconda！<br>Anaconda能省去很多装各种库的麻烦，而且还能非常方便地配置多环境（如Python2.7+Python3.6，2.7用来爬虫，3.6用来接轨新技术）。</p>
<ol>
<li><a href="http://blog.csdn.net/qiushi_1990/article/details/78041375" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/qiushi_1990/article/details/78041375</a><br> Python人工智能之图片识别，Python3一行代码实现图片文字识别</li>
<li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener external nofollow noreferrer">http://idea.lanyus.com/</a><br> Professional版Pycharm注册码获得，也可直接使用免费的社区版</li>
<li><a href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows" target="_blank" rel="noopener external nofollow noreferrer">https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows</a><br> PycharmIDE官网的引导视频（Pycharm更多用于项目开发吧，写个小程序的话还是推荐用sublime text或者原装的IDLE哦）</li>
<li><a href="https://www.zhihu.com/question/29238666" target="_blank" rel="noopener external nofollow noreferrer">https://www.zhihu.com/question/29238666</a><br> 如何写一个简单的手写识别算法？——知乎</li>
<li>推荐：[计算机][Python实战：四周实现爬虫系统][中文][SWF] 。（我没看多少）</li>
<li><a href="http://blog.csdn.net/u012162613/article/details/41929171" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/u012162613/article/details/41929171</a><br> 大数据竞赛平台——Kaggle 入门</li>
<li>不贴网址了。网上搜中国大学MOOC嵩天老师的Python相关课程，从基础到各个方向都有。B站也可以看哦。</li>
</ol>
<h2 id="pyspider学习资料"><a href="#pyspider学习资料" class="headerlink" title="pyspider学习资料"></a>pyspider学习资料</h2><p><a href="https://binux.blog/" target="_blank" rel="noopener external nofollow noreferrer">https://binux.blog/</a><br>​    pyspider作者（疑似作者？）的博客，有详细的指导。（叙述比较有框架）<br><a href="http://docs.pyspider.org/en/latest/tutorial/HTML-and-CSS-Selector/#index-page" target="_blank" rel="noopener external nofollow noreferrer">http://docs.pyspider.org/en/latest/tutorial/HTML-and-CSS-Selector/#index-page</a><br>​    pyspider的官方引导（内容跟上一条差不多）<br><a href="https://www.youtube.com/playlist?list=PLlOGeDt-ISLoiX7OyMHYT9t0DOUhL-pxi" target="_blank" rel="noopener external nofollow noreferrer">https://www.youtube.com/playlist?list=PLlOGeDt-ISLoiX7OyMHYT9t0DOUhL-pxi</a><br>​    标题：Python3網絡爬蟲實戰<br>​    非常棒的视频教程！有pyspider的使用指南视频，在教程的20、21集。有简单的一个爬虫框架的实现，强烈建议观看！（无须翻墙，清晰度有点感人。。）<br><a href="https://www.bilibili.com/video/av5354244?from=search&amp;seid=3687842734548943914" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/av5354244?from=search&amp;seid=3687842734548943914</a><br>​    标题：【Mysql】从删库到跑路（全20讲）<br>​    B站Mysql的基础讲解，建议不熟悉数据库的话，可以先看前面5、6节，喜欢可以接着学~<br><a href="http://demo.pyspider.org/" target="_blank" rel="noopener external nofollow noreferrer">http://demo.pyspider.org/</a><br>​    pyspider的各种示例程序demo，可以在线运行（不用启动pyspider？）<br><a href="http://www.pyspider.cn/jiaocheng/pyspider-pyquery-14.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.pyspider.cn/jiaocheng/pyspider-pyquery-14.html</a><br>​    pyspider中内容选择器常用方法汇总（各种函数的调用规则）<br><a href="http://www.pyspider.cn/index.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.pyspider.cn/index.html</a><br>​    pyspider中文官方网站<br><a href="http://blog.csdn.net/i_chaoren/article/details/62264414" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/i_chaoren/article/details/62264414</a><br><a href="http://blog.csdn.net/zaifendou/article/details/5746988" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/zaifendou/article/details/5746988</a><br><a href="https://www.cnblogs.com/darkterror/p/6474211.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/darkterror/p/6474211.html</a><br>​    正则表达式基础详解<br><a href="https://www.bilibili.com/video/av5862916?from=search&amp;seid=6989261257840462106" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/av5862916?from=search&amp;seid=6989261257840462106</a><br>​    html语言的一点背景知识，最好了解一点<br><a href="http://blog.csdn.net/FeiSan/article/details/1887677" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/FeiSan/article/details/1887677</a><br>​    SQLAlchemy下定义MySQL特有的字段类型<br><a href="http://blog.csdn.net/u012827296/article/details/51236614" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/u012827296/article/details/51236614</a><br>​    Handler运行机制</p>
<h2 id="pyspider快捷启动命令"><a href="#pyspider快捷启动命令" class="headerlink" title="pyspider快捷启动命令"></a>pyspider快捷启动命令</h2><p>！pyspider快捷启动命令_为了提高cmd运行速度，直接在txt中修改，然后Ctrl+A粘贴到cmd中执行_cd到目录_md创建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:</span><br><span class="line">md Crawl_data\demo</span><br><span class="line">cd Crawl_data\demo</span><br><span class="line">activate python2</span><br><span class="line">pyspider all</span><br></pre></td></tr></table></figure>
<h2 id="可能会用到的安装包"><a href="#可能会用到的安装包" class="headerlink" title="可能会用到的安装包"></a>可能会用到的安装包</h2><p>只提供明细，不提供下载。</p>
<p><img data-src="1532518853415.png" alt="1532518853415"></p>
<h2 id="迷之·附录-代码"><a href="#迷之·附录-代码" class="headerlink" title="迷之·附录(代码)"></a>迷之·附录(代码)</h2><p>代码集中车间233。</p>
<h3 id="代码：结构-model-for-crawl-demo加注释版-py"><a href="#代码：结构-model-for-crawl-demo加注释版-py" class="headerlink" title="代码：结构_model_for_crawl_demo加注释版.py"></a>代码：结构_model_for_crawl_demo加注释版.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取模板:加注释版</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2017-12-05 20:59:56</span></span><br><span class="line"><span class="comment"># Project: boeing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb <span class="keyword">import</span> SQL</span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser</span><br><span class="line">  </span><br><span class="line">reload(sys)  </span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片存放目录</span></span><br><span class="line">DIR_PATH = <span class="string">"./"</span>  <span class="comment"># pyspider默认目录？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    headers= &#123;</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate, sdch"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'itag'</span>: <span class="string">'v1.1'</span>,</span><br><span class="line">        <span class="string">"headers"</span> : headers,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="number">100000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dir_path = DIR_PATH</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span>				<span class="comment">#这里设置你要爬取的网页，先登录看看是否对应，否则容易出错</span></span><br><span class="line">        self.crawl(<span class="string">'http://boeing.mediaroom.com/news-releases-statements'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span>				<span class="comment">#设置索引页</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.archive_nav &gt; a'</span>).items():</span><br><span class="line">            year=each.text()</span><br><span class="line">            <span class="keyword">if</span>(year != <span class="string">"Search"</span>):</span><br><span class="line">                <span class="keyword">if</span>(year==<span class="string">"2016"</span> <span class="keyword">or</span> year==<span class="string">"2015"</span>):			<span class="comment">#这里设置爬取网页新闻的年份（按年份分类），最好把最新的年份都爬取下来【注意，不是所有的网站都有这个分类！】</span></span><br><span class="line">                    self.crawl(each.attr.href, callback=self.news_page)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#进入某一年份的index页面            </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">            time=each.find(<span class="string">'div'</span>).eq(<span class="number">0</span>).text()          <span class="comment"># find'div'是找到.item下的所有元素，然后eq(0)获取第0个（首个）元素的text()，即内容</span></span><br><span class="line">            datetime_struct = parser.parse(time)</span><br><span class="line">            time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)   <span class="comment"># 这里的功能是，将网页代表时间的字符串格式化为%Y-%m-%d（原网页是英文格式）</span></span><br><span class="line">            self.crawl(each.find(<span class="string">'div'</span>).find(<span class="string">'a'</span>).attr.href, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.news,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)    <span class="comment">#调取新闻页。注意，所有的time都是提前在index页获取的，因此需要传递给最后的处理函数</span></span><br><span class="line">        <span class="keyword">for</span> each_page <span class="keyword">in</span> response.doc(<span class="string">'.table_footer &gt; b &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each_page.attr.href, callback=self.news_page2)   <span class="comment">#调取其它新闻页</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#基于该年份，调取其它index页（一个年份可能对应多个index页面，一个index页面又对应多个新闻页）       </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news_page2</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">            time=each.find(<span class="string">'div'</span>).eq(<span class="number">0</span>).text()  <span class="comment">#同理，以下</span></span><br><span class="line">            datetime_struct = parser.parse(time)</span><br><span class="line">            time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            self.crawl(each.find(<span class="string">'div'</span>).find(<span class="string">'a'</span>).attr.href, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.news,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)    <span class="comment"># each.find('div').find('a').attr.href是获得新闻页的url</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#主方法，进入新闻页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">news</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        time=response.save[<span class="string">'time'</span>]  <span class="comment">#记录已经格式化的时间，继续往下传递</span></span><br><span class="line">        <span class="keyword">if</span> response.doc(<span class="string">'#assets_20295_130083-117_tab_link'</span>):   <span class="comment"># 这里的if else是用来判断新闻有无图片</span></span><br><span class="line">            self.crawl(response.doc(<span class="string">'#assets_20295_130083-117_tab_link'</span>).attr.href,save=&#123;<span class="string">'time'</span>: time&#125;, callback=self.detail_page,validate_cert=<span class="literal">False</span>,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.crawl(response.url, save=&#123;<span class="string">'time'</span>: time&#125;,callback=self.detail_page,validate_cert=<span class="literal">False</span>,connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        title=response.doc(<span class="string">'.wd_news_releases-detail &gt; h1'</span>).text()  <span class="comment">#通过正则表达式获取新闻题目</span></span><br><span class="line">        time=response.save[<span class="string">'time'</span>]  <span class="comment">#最终获取到时间</span></span><br><span class="line">        content = <span class="string">''</span>    <span class="comment">#初始化新闻内容为空，字符串</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.news_body &gt; p'</span>).items():  <span class="comment"># 对于每一个在.news_body &gt; p中的内容都添加到content中</span></span><br><span class="line">            content += each.text()</span><br><span class="line">        url = response.url      <span class="comment"># 保存网址为当前网址</span></span><br><span class="line">        picture_url = <span class="string">''</span>    <span class="comment">#与content同理</span></span><br><span class="line">        picture_local_path = <span class="string">''</span></span><br><span class="line">        file_title = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'-'</span>,title)    <span class="comment"># ？？？某个正则表达式？</span></span><br><span class="line">        imgDir = self.dir_path</span><br><span class="line"> <span class="comment">#处理图片的方法1：</span></span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(<span class="string">'.detail_image &gt; img'</span>).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            picture_url += imgUrl + <span class="string">';'</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:</span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)</span><br><span class="line">  <span class="comment">#处理图片的方法2：               </span></span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(<span class="string">'.PRN_ImbeddedAssetReference &gt; p &gt; img'</span>).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            picture_url += imgUrl + <span class="string">';'</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:</span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">30000</span>)   </span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"title"</span>:title,</span><br><span class="line">            <span class="string">"introduction"</span>:<span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"time"</span>:time,</span><br><span class="line">            <span class="string">"content"</span>:content,</span><br><span class="line">            <span class="string">"keywords"</span>:<span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"boeing"</span>,      <span class="comment">#这里根据你建的表格名修改</span></span><br><span class="line">            <span class="string">"source"</span>:<span class="string">"原创"</span>,</span><br><span class="line">            <span class="string">"url"</span>:url,</span><br><span class="line">            <span class="string">"picture_url"</span>:picture_url,</span><br><span class="line">            <span class="string">"picture_local_path"</span>:picture_local_path</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        content = response.content</span><br><span class="line">        file_name = response.save[<span class="string">"file_name"</span>]</span><br><span class="line">        imgDir = response.save[<span class="string">"imgDir"</span>]</span><br><span class="line">        file_path = imgDir + file_name</span><br><span class="line">        self.tool.save_img(content,imgDir,file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> <span class="keyword">not</span> result[<span class="string">'title'</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sql = SQL()</span><br><span class="line">        sql.insert(<span class="string">'boeing'</span>,**result)       <span class="comment">#这里也要对应修改哦</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#工具类    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,content,imgDir,path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgDir):                         </span><br><span class="line">            os.makedirs(imgDir)</span><br><span class="line">        f = open(path,<span class="string">"wb"</span> )        <span class="comment">#写入文件</span></span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_extension</span><span class="params">(self,url)</span>:</span>                            </span><br><span class="line">        extension = url.split(<span class="string">"."</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> extension </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取图片名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        name=url.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>
<h3 id="代码：功能for-compositesworld-复合材料世界-爬虫程序-详注"><a href="#代码：功能for-compositesworld-复合材料世界-爬虫程序-详注" class="headerlink" title="代码：功能for_compositesworld(复合材料世界)爬虫程序_详注"></a>代码：功能<em>for_compositesworld(复合材料世界)</em>爬虫程序_详注</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-03-18 18:13:33</span></span><br><span class="line"><span class="comment"># Project: compositesworld</span></span><br><span class="line"><span class="comment">#问题：</span></span><br><span class="line"><span class="comment">#1. 爬取introduction项的正则表达式不够准确，一部分项爬不下来      ---已解决（注意分析网站的html，而不是一味地依赖CSS选择器）</span></span><br><span class="line"><span class="comment">#2. 如何动态、高效地控制爬取的年份截止日期？比如，最早到2016.01.01</span></span><br><span class="line"><span class="comment">#3. 在单步调试，尝试调用保存图片函数时出现 Exception: HTTP 599:…… OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to d2n4wb9orp1vta.cloudfront.net:443  错误     ---已解决（似乎与网络连接状况有关，但正常运行时反而没什么问题。暂时忽略）</span></span><br><span class="line"><span class="comment">#4. python反反爬虫机制（代理IP。sleep延时：防止爬取过快导致封IP）      ---已解决。 使用ti.sleep(t)，t为参数，单位为秒。如:ti.time.sleep(3)，表示停顿3秒后继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *        <span class="comment">#这个库中定义了爬取的各种控制函数和方法</span></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#re就是regular expression，即正则表达式。正则表达式（通项公式）是用来简洁表达一组字符串的表达式。优势是简洁，一行胜千言。这个库主要用于字符串匹配。</span></span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb <span class="keyword">import</span> SQL</span><br><span class="line"><span class="keyword">import</span> sys      <span class="comment">#用于接下来修改编码格式</span></span><br><span class="line"><span class="keyword">import</span> os       <span class="comment">#OS库提供了使用各种操作系统功能的接口</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti       <span class="comment"># 用于延时控制</span></span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser       <span class="comment">#日期处理库，parser子库是根据字符串解析成datetime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编码转换</span></span><br><span class="line">reload(sys)     <span class="comment">#Python运行的时候首先加载了site.py，在site.py文件里有这么一段代码:</span></span><br><span class="line">                <span class="comment">#    if hasattr(sys, "setdefaultencoding"):</span></span><br><span class="line">                <span class="comment">#        del sys.setdefaultencoding</span></span><br><span class="line">                <span class="comment">#可以看出，在sys加载后,setdefaultencoding方法被删除了,所以我们要通过重新导入sys来设置系统编码</span></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)	<span class="comment">#设置默认编码，UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片存放目录</span></span><br><span class="line">DIR_PATH = <span class="string">"./"</span>      <span class="comment"># ./ 的意思是：当前目录（登录pyspider时）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    headers= &#123;</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate, sdch"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'itag'</span>: <span class="string">'v1.1'</span>,		<span class="comment">#修改这个tag号，可以重新启动爬取</span></span><br><span class="line">        <span class="string">"headers"</span> : headers,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="number">100000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dir_path = DIR_PATH</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)			# @every修饰器，表示每24小时会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span>				<span class="comment"># 这里设置你要爬取的网页URL（最好是列表的形式，按更新顺序排列），先登录看看是否对应，否则容易出错</span></span><br><span class="line">        self.crawl(<span class="string">'https://www.compositesworld.com/news/list'</span>,validate_cert=<span class="literal">False</span>, callback=self.index_page)	<span class="comment"># self.crawl 告诉 pyspider 抓取指定页面，然后使用 callback 函数对结果进行解析，并调用接下来的index_page</span></span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 通过 on_start 回调函数，作为爬取的入口点，当点击主面板上的 run 的时候，就是调用这个函数，启动抓取。</span></span><br><span class="line"><span class="comment"># self.crawl 告诉调度器，我们需要抓取 'https://www.compositesworld.com/news/list' 这个页面，然后使用 callback=self.index_page 这个回调函数进行解析。</span></span><br><span class="line"><span class="comment"># 所有 return 的内容默认会被捕获到 resultdb 中，可以直接在 WEBUI 上看到（如果结果）。</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)	#在这表示我们认为 10 天内页面有效，不会再次进行更新抓取</span></span><br><span class="line">    <span class="comment">#由此，注意，pyspider不会抓取同一个URL两次（永久丢弃），即使修改了代码，对于第一次运行该项目并修改并第二次运行该项目的初学者来说，这是非常常见的。</span></span><br><span class="line">    <span class="comment">#以上是引述。但是，在实际操作WebUI时，通过单步调试可以很方便地抓取同一个页面。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span>				<span class="comment">#设置索引页</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.headline &gt; a'</span>).items(): </span><br><span class="line">            self.crawl(each.attr.href, validate_cert=<span class="literal">False</span>,callback=self.detail_page)</span><br><span class="line">        next = response.doc(<span class="string">'a[aria-label="Next"]'</span>)</span><br><span class="line">        self.crawl(next.attr.href,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>,callback=self.index_page)</span><br><span class="line">        <span class="comment"># validate_cert=False 参数，用来解决SSL证书问题，对于以“https”开头的网站，必须添加</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 使用CSS正则表达式工具修改doc()中的路径，进行页面上的元素的采集</span></span><br><span class="line">        title = response.doc(<span class="string">'.content-headline'</span>).text()</span><br><span class="line">        introduction = response.doc(<span class="string">'.col-sm-12 &gt; h1'</span>).text()</span><br><span class="line">        time = response.doc(<span class="string">'.cell-vert-center &gt; div &gt; span'</span>).text()</span><br><span class="line">        time = time[<span class="number">10</span>:] <span class="comment">#我这里采用了截取字符段的形式，获得真正的时间字符子序列（不通用！！！）</span></span><br><span class="line">        datetime_struct = parser.parse(time)</span><br><span class="line">        time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)   <span class="comment"># 这里的功能是，将网页代表时间的字符串格式化为%Y-%m-%d（原网页是英文格式）</span></span><br><span class="line">        content = response.doc(<span class="string">'#short &gt; div &gt; div &gt; p'</span>).text()</span><br><span class="line">        url = response.url</span><br><span class="line">        picture_url = <span class="string">''</span>    <span class="comment">#与content同理</span></span><br><span class="line">        picture_local_path = <span class="string">''</span></span><br><span class="line">        file_title = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'-'</span>,title)</span><br><span class="line">        imgDir = self.dir_path</span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(<span class="string">'picture &gt; img'</span>).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            imgUrl = imgUrl[:<span class="number">-10</span>]  <span class="comment">#为了截掉后面多余的字段";width=560"，总共10个字符（不通用！！！）</span></span><br><span class="line">            picture_url += imgUrl + <span class="string">';'</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:</span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)   </span><br><span class="line">                <span class="comment"># 这里回调了save_img函数，在单步调试时可以明显看到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def detail_page(self, response)作为结果返回一个对象。</span></span><br><span class="line">    <span class="comment"># 结果将被resultdb默认捕获。</span></span><br><span class="line">    <span class="comment"># 可以通过覆盖on_result(self, result)自己管理结果的方法。        </span></span><br><span class="line">        <span class="keyword">return</span> &#123;	<span class="comment"># 与你建立的表结构对应。这是python中的字典结构，即“键-值对”</span></span><br><span class="line">            <span class="string">"title"</span>:title,</span><br><span class="line">            <span class="string">"introduction"</span>:introduction,</span><br><span class="line">            <span class="string">"time"</span>:time,</span><br><span class="line">            <span class="string">"content"</span>:content,</span><br><span class="line">            <span class="string">"keywords"</span>:<span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"compositesworld"</span>,      <span class="comment">#这里根据你建的表格名修改</span></span><br><span class="line">            <span class="string">"source"</span>:<span class="string">"原创"</span>,</span><br><span class="line">            <span class="string">"url"</span>:url,</span><br><span class="line">            <span class="string">"picture_url"</span>:picture_url,</span><br><span class="line">            <span class="string">"picture_local_path"</span>:picture_local_path</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,response)</span>:</span>    <span class="comment"># 可以看到，上面save中保存的内容其实通过response传了过来</span></span><br><span class="line">        content = response.content  <span class="comment"># resp.content返回的是bytes型也就是二进制的数据，resp.text返回的是Unicode型的数据。</span></span><br><span class="line">                                    <span class="comment"># 简而言之，如果你想取文本，可以通过r.text。    如果想取图片，文件，则可以通过r.content。</span></span><br><span class="line">        file_name = response.save[<span class="string">"file_name"</span>]</span><br><span class="line">        imgDir = response.save[<span class="string">"imgDir"</span>]</span><br><span class="line">        file_path = imgDir + file_name</span><br><span class="line">        self.tool.save_img(content,imgDir,file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据存储函数：on_result方法</span></span><br><span class="line">    <span class="comment"># 调试的时候建议将 on-result 整个移除，便于显示实时获取结果。最后再保存到数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span> 		</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> <span class="keyword">not</span> result[<span class="string">'title'</span>]:	<span class="comment"># 如果没到最后，继续返回数据</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sql = SQL()		<span class="comment"># 覆盖默认方法，使用mysqldb文件中定义的方法，连接数据库</span></span><br><span class="line">        sql.insert(<span class="string">'compositesworld'</span>,**result)	<span class="comment">#将结果插入到表格。同理，这里根据你建的表格名修改    </span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment">#工具类    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,content,imgDir,path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgDir): 	<span class="comment"># os.path.exists(name)判断是否存在文件或目录name</span></span><br><span class="line">            os.makedirs(imgDir)  <span class="comment"># os.makedirs() 方法用于递归创建目录</span></span><br><span class="line">        f = open(path,<span class="string">"wb"</span> )     <span class="comment"># wb 以只写方式打开</span></span><br><span class="line">        f.write(content)        <span class="comment"># 写入文件</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_extension</span><span class="params">(self,url)</span>:</span>                            </span><br><span class="line">        extension = url.split(<span class="string">"."</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> extension </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取图片名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        name=url.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>
<h3 id="代码：封装for-jeccomposites-JEC-伪宏控制-范式编程"><a href="#代码：封装for-jeccomposites-JEC-伪宏控制-范式编程" class="headerlink" title="代码：封装for_jeccomposites(JEC)伪宏控制__范式编程"></a>代码：封装<em>for_jeccomposites(JEC)</em>伪宏控制__范式编程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-03-19 22:26:12</span></span><br><span class="line"><span class="comment"># Project: jeccomposites</span></span><br><span class="line"><span class="comment">#问题：</span></span><br><span class="line"><span class="comment">#1. 爬取下来的content是一连串的字符串，没有考虑到换行的问题，可能需要添加'\n'？</span></span><br><span class="line"><span class="comment">#2. 爬取这个网站的content似乎有一段开头是单独放在title的class后面的，或许添加该段？</span></span><br><span class="line"><span class="comment">#3. 是否应该增加一个 tag 标签属性，因为很多网站只有tag但没有keywords，或者两者认为一致？   </span></span><br><span class="line"><span class="comment">#4. [Caution]图片存储功能出现异常错误。显示TypeError与'NoneType'和Unicode'有关   ----已解决（第一，os.makedirs的返回值不是路径。改正这个之后。第二，非常坑！一个意想不到的意外错误！！！！与空格、制表符对齐的区别有关，两者不能混用！！！）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#**********************************************************************************----------~~~~~~~~\</span></span><br><span class="line"><span class="comment">#伪宏控制__范式编程</span></span><br><span class="line"><span class="comment">#------（理论上）你只需要在这里[正确]填入所有信息，整个程序即可运行！【只适用于单一index的爬取。多重分类页面，或者需要对采集的数据做进一步规范化，则必须在后面相应地方改进】</span></span><br><span class="line">project_name = <span class="string">"jeccomposites"</span> 		<span class="comment">#你的项目 的名称</span></span><br><span class="line">website_url_initial = <span class="string">'http://www.jeccomposites.com/knowledge/international-composites-news'</span>  <span class="comment">#你爬取的初始网页(index页) 的地址</span></span><br><span class="line">detail_page_css = <span class="string">'.nodetitle &gt; a'</span>							<span class="comment">#新闻页面链接 	的CSS表达式</span></span><br><span class="line">next_page_css = <span class="string">'.pager-next &gt; a'</span>							<span class="comment">#下一页链接 	的CSS表达式</span></span><br><span class="line">title_css = <span class="string">'.content &gt; h1'</span>									<span class="comment">#新闻标题		的CSS表达式</span></span><br><span class="line">introduction_css = <span class="string">'.content-block-txt &gt; p'</span>					<span class="comment">#新闻简介		的CSS表达式</span></span><br><span class="line">time_css = <span class="string">'.content-block-txt &gt; div'</span>						<span class="comment">#发布时间		的CSS表达式</span></span><br><span class="line">content_css = <span class="string">'.block-system &gt; div &gt; div div &gt; div &gt; p'</span>		<span class="comment">#新闻内容		的CSS表达式</span></span><br><span class="line">img_css = <span class="string">'.content &gt; a &gt; img'</span>								<span class="comment">#新闻图片		的CSS表达式</span></span><br><span class="line">keywords_css = <span class="string">'null'</span>										<span class="comment">#关键词，一般页面中无，因此默认为空。#！【重要：如果其他的 *_css 在网页中也找不到对应项的话，可以填'null'，程序将自动返回空值】</span></span><br><span class="line">source_declaration = <span class="string">"原创"</span>									<span class="comment">#原创声明，一般不改动</span></span><br><span class="line"><span class="comment">#**********************************************************************************-----------~~~~~~~/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *        <span class="comment">#这个库中定义了爬取的各种控制函数和方法</span></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#re就是regular expression，即正则表达式。正则表达式（通项公式）是用来简洁表达一组字符串的表达式。优势是简洁，一行胜千言。这个库主要用于字符串匹配。</span></span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb <span class="keyword">import</span> SQL</span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb_new <span class="keyword">import</span> SQL <span class="keyword">as</span> SQL_new</span><br><span class="line"><span class="keyword">import</span> sys      <span class="comment">#用于接下来修改编码格式</span></span><br><span class="line"><span class="keyword">import</span> os       <span class="comment">#OS库提供了使用各种操作系统功能的接口</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti       <span class="comment"># 用于延时控制</span></span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser       <span class="comment">#日期处理库，parser子库是根据字符串解析成datetime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据项目名称，自动创建表</span></span><br><span class="line">sql_new = SQL_new()</span><br><span class="line">sql_new.create_table(project_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片存放目录【在当前目录自动创建项目子目录，分类各项目的爬取内容。可实现多项目的同时爬取，而内容分开】</span></span><br><span class="line">path_for_project = <span class="string">"./"</span>+project_name+<span class="string">"/"</span>     <span class="comment"># ./ 的意思是：当前目录（登录pyspider时）</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_for_project):</span><br><span class="line">    os.makedirs(path_for_project)</span><br><span class="line">    DIR_PATH = path_for_project</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    DIR_PATH = path_for_project</span><br><span class="line"><span class="comment">#注意哦，“data”文件夹是pyspider启动时自动生成的，其中的db文件是用来默认储存捕获的数据的。但是，我们已经实现了on_result方法把数据传给了Mysql，所以这data文件夹是不起作用的，因此可以忽略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编码转换</span></span><br><span class="line">reload(sys)     <span class="comment">#Python运行的时候首先加载了site.py，在site.py文件里有这么一段代码:</span></span><br><span class="line">                <span class="comment">#    if hasattr(sys, "setdefaultencoding"):</span></span><br><span class="line">                <span class="comment">#        del sys.setdefaultencoding</span></span><br><span class="line">                <span class="comment">#可以看出，在sys加载后,setdefaultencoding方法被删除了,所以我们要通过重新导入sys来设置系统编码</span></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)  <span class="comment">#设置默认编码，UTF-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    headers= &#123;</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate, sdch"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'itag'</span>: <span class="string">'v1.1'</span>,     <span class="comment">#修改这个tag号，可以重新启动爬取</span></span><br><span class="line">        <span class="string">"headers"</span> : headers,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="number">100000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dir_path = DIR_PATH</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)         # @every修饰器，表示每24小时会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span>             <span class="comment"># 这里设置你要爬取的网页URL（最好是列表的形式，按更新顺序排列），先登录看看是否对应，否则容易出错</span></span><br><span class="line">        self.crawl(website_url_initial,validate_cert=<span class="literal">False</span>, callback=self.index_page)    <span class="comment"># self.crawl 告诉 pyspider 抓取指定页面，然后使用 callback 函数对结果进行解析，并调用接下来的index_page</span></span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 通过 on_start 回调函数，作为爬取的入口点，当点击主面板上的 run 的时候，就是调用这个函数，启动抓取。</span></span><br><span class="line"><span class="comment"># self.crawl 告诉调度器，我们需要抓取 '某个url' 这个页面，然后使用 callback=self.index_page 这个回调函数进行解析。</span></span><br><span class="line"><span class="comment"># 所有 return 的内容默认会被捕获到 resultdb 中，可以直接在 WEBUI 上看到（如果结果）。</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)  #在这表示我们认为 10 天内页面有效，不会再次进行更新抓取</span></span><br><span class="line">    <span class="comment">#由此，注意，pyspider不会抓取同一个URL两次（永久丢弃），即使修改了代码，对于第一次运行该项目并修改并第二次运行该项目的初学者来说，这是非常常见的。</span></span><br><span class="line">    <span class="comment">#以上是引述。但是，在实际操作WebUI时，通过单步调试可以很方便地抓取同一个页面。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span>             <span class="comment">#设置索引页</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(detail_page_css).items(): </span><br><span class="line">            self.crawl(each.attr.href, validate_cert=<span class="literal">False</span>,callback=self.detail_page)</span><br><span class="line">        next = response.doc(next_page_css)</span><br><span class="line">        self.crawl(next.attr.href,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>,callback=self.index_page)</span><br><span class="line">        <span class="comment"># validate_cert=False 参数，用来解决SSL证书问题，对于以“https”开头的网站，必须添加</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 使用CSS正则表达式工具修改doc()中的路径，进行页面上的元素的采集</span></span><br><span class="line">        title = title_css</span><br><span class="line">        <span class="keyword">if</span> (title_css != <span class="string">'null'</span>):</span><br><span class="line">        	title = response.doc(title_css).text()</span><br><span class="line">        introduction = introduction_css</span><br><span class="line">        <span class="keyword">if</span> (introduction_css != <span class="string">'null'</span>):</span><br><span class="line">        	introduction = response.doc(introduction_css).text()</span><br><span class="line">        time = time_css</span><br><span class="line">        <span class="keyword">if</span> (time_css != <span class="string">'null'</span>):</span><br><span class="line">        	time = response.doc(time_css).text()</span><br><span class="line"><span class="comment">#        time = time[10:] #我这里采用了截取字符段的形式，获得真正的时间字符子序列（不通用！！！）</span></span><br><span class="line">        	datetime_struct = parser.parse(time)</span><br><span class="line">        	time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)   <span class="comment"># 这里的功能是，将网页代表时间的字符串格式化为%Y-%m-%d（原网页是英文格式）</span></span><br><span class="line">        content = content_css</span><br><span class="line">        <span class="keyword">if</span> (content_css != <span class="string">'null'</span>):</span><br><span class="line">        	content = response.doc(content_css).text()</span><br><span class="line">        keywords = keywords_css</span><br><span class="line">        <span class="keyword">if</span> (keywords_css != <span class="string">'null'</span>):</span><br><span class="line">        	keywords = response.doc(keywords_css).text()        	</span><br><span class="line">        url = response.url</span><br><span class="line">        picture_url = <span class="string">''</span></span><br><span class="line">        picture_local_path = <span class="string">''</span></span><br><span class="line">        file_title = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'-'</span>,title)</span><br><span class="line">        imgDir = self.dir_path</span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(img_css).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line"><span class="comment">#            imgUrl = imgUrl[:-10]  #为了截掉后面多余的字段";width=560"，总共10个字符（不通用！！！）</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl <span class="keyword">and</span> self.tool.get_name(imgUrl) != <span class="string">'logo'</span>:  <span class="comment">#这个网站每个网页都莫名其妙地爬两个logo图片下来，因此要过滤掉（不通用！！！）</span></span><br><span class="line">                picture_url += imgUrl + <span class="string">';'</span>  <span class="comment">#picture_url和picture_local_path都需要滞后于这个过滤操作</span></span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)   </span><br><span class="line">                <span class="comment"># 这里回调了save_img函数，在单步调试时可以明显看到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def detail_page(self, response)作为结果返回一个对象。</span></span><br><span class="line">    <span class="comment"># 结果将被resultdb默认捕获。</span></span><br><span class="line">    <span class="comment"># 可以通过覆盖on_result(self, result)自己管理结果的方法。        </span></span><br><span class="line">        <span class="keyword">return</span> &#123;    <span class="comment"># 与你建立的表结构对应。这是python中的字典结构，即“键-值对”</span></span><br><span class="line">            <span class="string">"title"</span>:title,</span><br><span class="line">            <span class="string">"introduction"</span>:introduction,</span><br><span class="line">            <span class="string">"time"</span>:time,</span><br><span class="line">            <span class="string">"content"</span>:content,</span><br><span class="line">            <span class="string">"keywords"</span>:keywords,</span><br><span class="line">            <span class="string">"name"</span>:project_name,      <span class="comment">#这里根据你建的表格名修改</span></span><br><span class="line">            <span class="string">"source"</span>:source_declaration,</span><br><span class="line">            <span class="string">"url"</span>:url,</span><br><span class="line">            <span class="string">"picture_url"</span>:<span class="string">'null'</span> <span class="keyword">if</span> picture_url == <span class="string">''</span> <span class="keyword">else</span> picture_url,</span><br><span class="line">            <span class="string">"picture_local_path"</span>:<span class="string">'null'</span> <span class="keyword">if</span> picture_local_path == <span class="string">''</span> <span class="keyword">else</span> picture_local_path</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,response)</span>:</span>    <span class="comment"># 可以看到，上面save中保存的内容其实通过response传了过来</span></span><br><span class="line">        content = response.content  <span class="comment"># resp.content返回的是bytes型也就是二进制的数据，resp.text返回的是Unicode型的数据。</span></span><br><span class="line">                                    <span class="comment"># 简而言之，如果你想取文本，可以通过r.text。    如果想取图片，文件，则可以通过r.content。</span></span><br><span class="line">        file_name = response.save[<span class="string">"file_name"</span>]</span><br><span class="line">        imgDir = response.save[<span class="string">"imgDir"</span>]</span><br><span class="line">        file_path = imgDir + file_name</span><br><span class="line">        self.tool.save_img(content,imgDir,file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据存储函数：on_result方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span>         </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> <span class="keyword">not</span> result[<span class="string">'title'</span>]:   <span class="comment"># 如果没到最后，继续返回数据</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sql = SQL()     <span class="comment"># 覆盖默认方法，使用mysqldb文件中定义的方法，连接数据库</span></span><br><span class="line">        sql.insert(project_name,**result)  <span class="comment">#将结果插入到表格。同理，这里根据你建的表格名修改    </span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment">#工具类    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,content,imgDir,path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgDir):  <span class="comment"># os.path.exists(name)判断是否存在文件或目录name</span></span><br><span class="line">            os.makedirs(imgDir)  <span class="comment"># os.makedirs() 方法用于递归创建目录</span></span><br><span class="line">        f = open(path,<span class="string">"wb"</span> )     <span class="comment"># wb 以只写方式打开</span></span><br><span class="line">        f.write(content)        <span class="comment"># 写入文件</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_extension</span><span class="params">(self,url)</span>:</span>                            </span><br><span class="line">        extension = url.split(<span class="string">"."</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> extension </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取图片名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        name=url.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>
<h3 id="代码：forcompositesworld-复合材料世界-基于JEC通用化代码模板-改进版"><a href="#代码：forcompositesworld-复合材料世界-基于JEC通用化代码模板-改进版" class="headerlink" title="代码：forcompositesworld(复合材料世界)基于JEC通用化代码模板_改进版"></a>代码：for<em>compositesworld(复合材料世界)</em>基于JEC通用化代码模板_改进版</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-03-19 22:26:12</span></span><br><span class="line"><span class="comment"># Project: Model</span></span><br><span class="line"><span class="comment">#问题：</span></span><br><span class="line"><span class="comment">#1. ValueError(u'String does not contain a date)。time的抓取规则仍待改善。对于特别难分离的日期，需要更先进的手段。  ---已解决，注意首先要选择合适、准确、无歧义的CSS表达式。再进行时间格式的处理！或者选取更合适的日期项，如在首页中选择。</span></span><br><span class="line"><span class="comment">#2. 仍然有少量OpenSSL connet SSL_ERROR_SYSCALL型的错误。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#**********************************************************************************----------~~~~~~~~\</span></span><br><span class="line"><span class="comment">#伪宏控制__范式编程</span></span><br><span class="line"><span class="comment">#------（理论上）你只需要在这里[正确]填入所有信息，整个程序即可运行！【只适用于单一index的爬取。多重分类页面，或者需要对采集的数据做进一步规范化，则必须在后面相应地方改进】</span></span><br><span class="line">project_name = <span class="string">"compositesworld"</span>        <span class="comment">#你的项目 的名称</span></span><br><span class="line">website_url_initial = <span class="string">'https://www.compositesworld.com/news/list'</span>  <span class="comment">#你爬取的初始网页(index页) 的地址</span></span><br><span class="line">detail_page_css = <span class="string">'.headline &gt; a'</span>                           <span class="comment">#新闻页面链接     的CSS表达式</span></span><br><span class="line">next_page_css = <span class="string">'a[aria-label="Next"]'</span>                          <span class="comment">#下一页链接  的CSS表达式</span></span><br><span class="line">title_css = <span class="string">'.content-headline'</span>                                 <span class="comment">#新闻标题       的CSS表达式</span></span><br><span class="line">introduction_css = <span class="string">'.col-sm-12 &gt; h1'</span>                    <span class="comment">#新闻简介       的CSS表达式</span></span><br><span class="line">time_css = <span class="string">'.clearfix span[property="dc:created"]'</span>                     <span class="comment">#发布时间       的CSS表达式</span></span><br><span class="line">content_css = <span class="string">'#short &gt; div &gt; div &gt; p'</span>      <span class="comment">#新闻内容       的CSS表达式</span></span><br><span class="line">img_css = <span class="string">'picture &gt; img'</span>                               <span class="comment">#新闻图片       的CSS表达式</span></span><br><span class="line">keywords_css = <span class="string">'null'</span>                                       <span class="comment">#关键词，一般页面中无，因此默认为空。#！【重要：如果其他的 *_css 在网页中也找不到对应项的话，可以填'null'，程序将自动返回空值】</span></span><br><span class="line">source_declaration = <span class="string">"原创"</span>                                   <span class="comment">#原创声明，一般不改动</span></span><br><span class="line"><span class="comment">#**********************************************************************************-----------~~~~~~~/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *        <span class="comment">#这个库中定义了爬取的各种控制函数和方法</span></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#re就是regular expression，即正则表达式。正则表达式（通项公式）是用来简洁表达一组字符串的表达式。优势是简洁，一行胜千言。这个库主要用于字符串匹配。</span></span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb <span class="keyword">import</span> SQL</span><br><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb_new <span class="keyword">import</span> SQL <span class="keyword">as</span> SQL_new</span><br><span class="line"><span class="keyword">import</span> sys      <span class="comment">#用于接下来修改编码格式</span></span><br><span class="line"><span class="keyword">import</span> os       <span class="comment">#OS库提供了使用各种操作系统功能的接口</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti       <span class="comment"># 用于延时控制</span></span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser       <span class="comment">#日期处理库，parser子库是根据字符串解析成datetime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据项目名称，自动创建表</span></span><br><span class="line">sql_new = SQL_new()</span><br><span class="line">sql_new.create_table(project_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片存放目录【在当前目录自动创建项目子目录，分类各项目的爬取内容。可实现多项目的同时爬取，而内容分开】</span></span><br><span class="line">path_for_project = <span class="string">"./"</span>+project_name+<span class="string">"/"</span>     <span class="comment"># ./ 的意思是：当前目录（登录pyspider时）</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_for_project):</span><br><span class="line">    os.makedirs(path_for_project)</span><br><span class="line">    DIR_PATH = path_for_project</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    DIR_PATH = path_for_project</span><br><span class="line"><span class="comment">#注意哦，“data”文件夹是pyspider启动时自动生成的，其中的db文件是用来默认储存捕获的数据的。但是，我们已经实现了on_result方法把数据传给了Mysql，所以这data文件夹是不起作用的，因此可以忽略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编码转换</span></span><br><span class="line">reload(sys)     <span class="comment">#Python运行的时候首先加载了site.py，在site.py文件里有这么一段代码:</span></span><br><span class="line">                <span class="comment">#    if hasattr(sys, "setdefaultencoding"):</span></span><br><span class="line">                <span class="comment">#        del sys.setdefaultencoding</span></span><br><span class="line">                <span class="comment">#可以看出，在sys加载后,setdefaultencoding方法被删除了,所以我们要通过重新导入sys来设置系统编码</span></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)  <span class="comment">#设置默认编码，UTF-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    headers= &#123;</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate, sdch"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'itag'</span>: <span class="string">'v1.1'</span>,     <span class="comment">#修改这个tag号，可以重新启动爬取</span></span><br><span class="line">        <span class="string">"headers"</span> : headers,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="number">100000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dir_path = DIR_PATH</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)         # @every修饰器，表示每24小时会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span>             <span class="comment"># 这里设置你要爬取的网页URL（最好是列表的形式，按更新顺序排列），先登录看看是否对应，否则容易出错</span></span><br><span class="line">        self.crawl(website_url_initial,validate_cert=<span class="literal">False</span>, callback=self.index_page)    <span class="comment"># self.crawl 告诉 pyspider 抓取指定页面，然后使用 callback 函数对结果进行解析，并调用接下来的index_page</span></span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 通过 on_start 回调函数，作为爬取的入口点，当点击主面板上的 run 的时候，就是调用这个函数，启动抓取。</span></span><br><span class="line"><span class="comment"># self.crawl 告诉调度器，我们需要抓取 '某个url' 这个页面，然后使用 callback=self.index_page 这个回调函数进行解析。</span></span><br><span class="line"><span class="comment"># 所有 return 的内容默认会被捕获到 resultdb 中，可以直接在 WEBUI 上看到（如果结果）。</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)  #在这表示我们认为 10 天内页面有效，不会再次进行更新抓取</span></span><br><span class="line">    <span class="comment">#由此，注意，pyspider不会抓取同一个URL两次（永久丢弃），即使修改了代码，对于第一次运行该项目并修改并第二次运行该项目的初学者来说，这是非常常见的。</span></span><br><span class="line">    <span class="comment">#以上是引述。但是，在实际操作WebUI时，通过单步调试可以很方便地抓取同一个页面。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span>             <span class="comment">#设置索引页</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(detail_page_css).items(): </span><br><span class="line">            self.crawl(each.attr.href, validate_cert=<span class="literal">False</span>,callback=self.detail_page)</span><br><span class="line">        next = response.doc(next_page_css)</span><br><span class="line">        self.crawl(next.attr.href,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>,callback=self.index_page)</span><br><span class="line">        <span class="comment"># validate_cert=False 参数，用来解决SSL证书问题，对于以“https”开头的网站，必须添加</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 使用CSS正则表达式工具修改doc()中的路径，进行页面上的元素的采集</span></span><br><span class="line">        title = title_css</span><br><span class="line">        <span class="keyword">if</span> (title_css != <span class="string">'null'</span>):</span><br><span class="line">            title = response.doc(title_css).text()</span><br><span class="line">        introduction = introduction_css</span><br><span class="line">        <span class="keyword">if</span> (introduction_css != <span class="string">'null'</span>):</span><br><span class="line">            introduction = response.doc(introduction_css).text()</span><br><span class="line">        time = time_css         <span class="comment">#以下都是在改日期判断</span></span><br><span class="line">        <span class="keyword">if</span> (time_css != <span class="string">'null'</span>):</span><br><span class="line">            time = response.doc(time_css).text()</span><br><span class="line">            time.strip()  <span class="comment">#先作去空格处理</span></span><br><span class="line">            time = time[<span class="number">10</span>:] <span class="comment">#我这里采用了截取字符段的形式，获得真正的时间字符子序列（不通用！！！）</span></span><br><span class="line">            datetime_struct = parser.parse(time)</span><br><span class="line">            time=datetime_struct.strftime(<span class="string">'%Y-%m-%d'</span>)   <span class="comment"># 这里的功能是，将网页代表时间的字符串格式化为%Y-%m-%d（原网页是英文格式）</span></span><br><span class="line">        content = content_css</span><br><span class="line">        <span class="keyword">if</span> (content_css != <span class="string">'null'</span>):</span><br><span class="line">            content = response.doc(content_css).text()</span><br><span class="line">        keywords = keywords_css</span><br><span class="line">        <span class="keyword">if</span> (keywords_css != <span class="string">'null'</span>):</span><br><span class="line">            keywords = response.doc(keywords_css).text()            </span><br><span class="line">        url = response.url</span><br><span class="line">        picture_url = <span class="string">''</span></span><br><span class="line">        picture_local_path = <span class="string">''</span></span><br><span class="line">        file_title = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'-'</span>,title)</span><br><span class="line">        imgDir = self.dir_path</span><br><span class="line">        <span class="keyword">for</span> imgElem <span class="keyword">in</span> response.doc(img_css).items():</span><br><span class="line">            imgUrl = imgElem.attr.src</span><br><span class="line">            imgUrl = imgUrl[:<span class="number">-10</span>]  <span class="comment">#为了截掉后面多余的字段";width=560"，总共10个字符（不通用！！！）</span></span><br><span class="line">            <span class="keyword">if</span> imgUrl:  </span><br><span class="line">                picture_url += imgUrl + <span class="string">';'</span>  <span class="comment">#picture_url和picture_local_path都需要滞后于这个过滤操作</span></span><br><span class="line">                <span class="comment">#获取图片文件后缀</span></span><br><span class="line">                extension = self.tool.get_extension(imgUrl)</span><br><span class="line">                name = self.tool.get_name(imgUrl)</span><br><span class="line">                <span class="comment">#拼接图片名</span></span><br><span class="line">                file_name = name + <span class="string">"."</span> + extension</span><br><span class="line">                picture_local_path += <span class="string">';'</span> + file_name</span><br><span class="line">                self.crawl(imgUrl,callback=self.save_img,save=&#123;<span class="string">"file_name"</span>:file_name, <span class="string">"imgDir"</span>:imgDir&#125;,validate_cert=<span class="literal">False</span>, connect_timeout = <span class="number">5000</span>, timeout = <span class="number">20000</span>)   </span><br><span class="line">                <span class="comment"># 这里回调了save_img函数，在单步调试时可以明显看到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def detail_page(self, response)作为结果返回一个对象。</span></span><br><span class="line">    <span class="comment"># 结果将被resultdb默认捕获。</span></span><br><span class="line">    <span class="comment"># 可以通过覆盖on_result(self, result)自己管理结果的方法。        </span></span><br><span class="line">        <span class="keyword">return</span> &#123;    <span class="comment"># 与你建立的表结构对应。这是python中的字典结构，即“键-值对”</span></span><br><span class="line">            <span class="string">"title"</span>:title,</span><br><span class="line">            <span class="string">"introduction"</span>:introduction,</span><br><span class="line">            <span class="string">"time"</span>:time,</span><br><span class="line">            <span class="string">"content"</span>:content,</span><br><span class="line">            <span class="string">"keywords"</span>:keywords,</span><br><span class="line">            <span class="string">"name"</span>:project_name,      <span class="comment">#这里根据你建的表格名修改</span></span><br><span class="line">            <span class="string">"source"</span>:source_declaration,</span><br><span class="line">            <span class="string">"url"</span>:url,</span><br><span class="line">            <span class="string">"picture_url"</span>:<span class="string">'null'</span> <span class="keyword">if</span> picture_url == <span class="string">''</span> <span class="keyword">else</span> picture_url,</span><br><span class="line">            <span class="string">"picture_local_path"</span>:<span class="string">'null'</span> <span class="keyword">if</span> picture_local_path == <span class="string">''</span> <span class="keyword">else</span> picture_local_path</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,response)</span>:</span>    <span class="comment"># 可以看到，上面save中保存的内容其实通过response传了过来</span></span><br><span class="line">        content = response.content  <span class="comment"># resp.content返回的是bytes型也就是二进制的数据，resp.text返回的是Unicode型的数据。</span></span><br><span class="line">                                    <span class="comment"># 简而言之，如果你想取文本，可以通过r.text。    如果想取图片，文件，则可以通过r.content。</span></span><br><span class="line">        file_name = response.save[<span class="string">"file_name"</span>]</span><br><span class="line">        imgDir = response.save[<span class="string">"imgDir"</span>]</span><br><span class="line">        file_path = imgDir + file_name</span><br><span class="line">        self.tool.save_img(content,imgDir,file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据存储函数：on_result方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span>         </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> <span class="keyword">not</span> result[<span class="string">'title'</span>]:   <span class="comment"># 如果没到最后，继续返回数据</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sql = SQL()     <span class="comment"># 覆盖默认方法，使用mysqldb文件中定义的方法，连接数据库</span></span><br><span class="line">        sql.insert(project_name,**result)  <span class="comment">#将结果插入到表格。同理，这里根据你建的表格名修改    </span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment">#工具类    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment">#保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self,content,imgDir,path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgDir):  <span class="comment"># os.path.exists(name)判断是否存在文件或目录name</span></span><br><span class="line">            os.makedirs(imgDir)  <span class="comment"># os.makedirs() 方法用于递归创建目录</span></span><br><span class="line">        f = open(path,<span class="string">"wb"</span> )     <span class="comment"># wb 以只写方式打开</span></span><br><span class="line">        f.write(content)        <span class="comment"># 写入文件</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_extension</span><span class="params">(self,url)</span>:</span>                            </span><br><span class="line">        extension = url.split(<span class="string">"."</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> extension </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取图片名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        name=url.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure>
<h3 id="代码：testpro通过调用MySQLnew实现自动创建列表-demo"><a href="#代码：testpro通过调用MySQLnew实现自动创建列表-demo" class="headerlink" title="代码：testpro通过调用MySQLnew实现自动创建列表_demo"></a>代码：test<em>pro</em>通过调用MySQLnew实现自动创建列表_demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspider.database.mysql.mysqldb_new <span class="keyword">import</span> SQL</span><br><span class="line"></span><br><span class="line">sql = SQL()		<span class="comment">#定义一个SQL对象</span></span><br><span class="line">sql.create_table(<span class="string">"test_for_auto_table_maker"</span>)	<span class="comment">#用这个对象的create_table方法创建表格，表名为"test_for_auto_table_maker"</span></span><br></pre></td></tr></table></figure>
<h3 id="代码：mysqldb-new（库）"><a href="#代码：mysqldb-new（库）" class="headerlink" title="代码：mysqldb_new（库）"></a>代码：mysqldb_new（库）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#【备注：使用该改进方法可能需要安装的库：sqlalchemy，mysql-connector。均可用pip install快速安装】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> six <span class="keyword">import</span> itervalues</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.databases <span class="keyword">import</span> mysql</span><br><span class="line"><span class="comment">#from sqlalchemy.ext.declarative import declarative_base</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用MySQLdb来建立一个名字是变量的表实在太困难了</span></span><br><span class="line"><span class="comment">#因此采用了另一个库：sqlalchemy</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#数据库初始化</span></span><br><span class="line">        <span class="comment">#数据库连接相关信息（全局化处理）【要实现自动创建表格，必须注意调节create_table中的连接参数信息】</span></span><br><span class="line">        hosts    = <span class="string">'localhost'</span></span><br><span class="line">        username = <span class="string">'root'</span></span><br><span class="line">        password = <span class="string">'233333'</span></span><br><span class="line">        database = <span class="string">'pyspider'</span></span><br><span class="line">        charsets = <span class="string">'utf8'</span></span><br><span class="line">        port_number = <span class="number">3307</span></span><br><span class="line">        self.connection = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = MySQLdb.connect(host = hosts,user = username,passwd = password,db = database,charset = charsets, port = port_number)</span><br><span class="line">            self.cursor = self.conn.cursor()</span><br><span class="line">            self.cursor.execute(<span class="string">"set names "</span>+charsets)</span><br><span class="line">            self.connection = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Cannot Connect To Mysql!/n"</span>,e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">escape</span><span class="params">(self,string)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s'</span> % string</span><br><span class="line">    <span class="comment">#插入数据到数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,tablename=None,**values)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.connection:</span><br><span class="line">            tablename = self.escape(tablename)</span><br><span class="line">            <span class="keyword">if</span> values:</span><br><span class="line">                _keys = <span class="string">","</span>.join(self.escape(k) <span class="keyword">for</span> k <span class="keyword">in</span> values)</span><br><span class="line">                _values = <span class="string">","</span>.join([<span class="string">'%s'</span>,]*len(values))</span><br><span class="line">                sql_query = <span class="string">"insert into %s (%s) values (%s)"</span> % (tablename,_keys,_values)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sql_query = <span class="string">"replace into %s default values"</span> % tablename</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> values:</span><br><span class="line">                    self.cursor.execute(sql_query,list(itervalues(values)))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.cursor.execute(sql_query)</span><br><span class="line">                self.conn.commit()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> Exception,e:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"An Error Occured: "</span>,e</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 用于建立表格，可能之后需要加强try-except机制</span></span><br><span class="line">    <span class="comment"># 【经测试，该方法不会覆盖掉已经创建过的表格】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">(self,project_name)</span>:</span></span><br><span class="line">        <span class="comment">#定义引擎</span></span><br><span class="line">        engine = create_engine(<span class="string">'mysql+mysqlconnector://root:fdzxks@localhost:3307/pyspider'</span>)        <span class="comment"># 这里的引擎与上面的连接参数要相应一致</span></span><br><span class="line">        <span class="comment">#绑定元信息</span></span><br><span class="line">        metadata = MetaData(engine)</span><br><span class="line">        <span class="comment">#创建表格，初始化数据库</span></span><br><span class="line">        user = Table(project_name, metadata,</span><br><span class="line">            Column(<span class="string">'title'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'introduction'</span>, mysql.MSLongText),</span><br><span class="line">            Column(<span class="string">'time'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'content'</span>, mysql.MSLongText),</span><br><span class="line">            Column(<span class="string">'keywords'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'name'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'source'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'url'</span>, VARCHAR(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'picture_url'</span>, mysql.MSLongText),</span><br><span class="line">            Column(<span class="string">'picture_local_path'</span>, mysql.MSLongText),</span><br><span class="line">                    )</span><br><span class="line">        <span class="comment">#http://blog.csdn.net/FeiSan/article/details/1887677。教程：SQLAlchemy下定义MySQL特有的字段类型。</span></span><br><span class="line">        <span class="comment">#创建数据表，如果数据表存在则忽视</span></span><br><span class="line">        metadata.create_all(engine)</span><br><span class="line">        <span class="comment">#获取数据库链接，以备后面使用</span></span><br><span class="line">        conn = engine.connect()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Pyspider</tag>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>北斗UMA专项</title>
    <url>/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/</url>
    <content><![CDATA[<p><a href="https://www.edu.confluxnetwork.org/" target="_blank" rel="noopener external nofollow noreferrer"><strong>北斗计划 - 天枢</strong></a>。A little bit of recordings during the UMA session.<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://confluxnetwork.org/" target="_blank" rel="noopener external nofollow noreferrer">Conflux</a></p>
<blockquote>
<p><a href="https://www.edu.confluxnetwork.org/%E8%AF%BE%E7%A8%8B" target="_blank" rel="noopener external nofollow noreferrer">Conflux课程视频</a></p>
<p><a href="https://forum.conflux.fun" target="_blank" rel="noopener external nofollow noreferrer">forum.conflux.fun</a> Conflux Forum，Homework &amp; Resources</p>
</blockquote>
<h1 id="Lecture-1-Introduction-Of-Blockchain"><a href="#Lecture-1-Introduction-Of-Blockchain" class="headerlink" title="Lecture 1 - Introduction Of Blockchain"></a>Lecture 1 - Introduction Of Blockchain</h1><blockquote>
<p>This part is the same as <a href="https://vel.life/%E5%8C%BA%E5%9D%97%E9%93%BE/" target="_blank" rel="noopener external nofollow noreferrer">https://vel.life/区块链</a>.</p>
</blockquote>
<h1 id="Lecture-2-Cryptoeconomics-加密经济学"><a href="#Lecture-2-Cryptoeconomics-加密经济学" class="headerlink" title="Lecture 2 - Cryptoeconomics 加密经济学"></a>Lecture 2 - Cryptoeconomics 加密经济学</h1><blockquote>
<p><em>winner takes all</em></p>
</blockquote>
<p>Blockchains and cryptocurrency will generate a new and better internet.</p>
<h2 id="Token-通证"><a href="#Token-通证" class="headerlink" title="Token 通证"></a>Token 通证</h2><blockquote>
<p>SoV: Store of Value; MoE: Media of Exchange.</p>
<p>NFTs: non-fungible tokens（非同质化通证），代表特定数字资产的特殊通证</p>
<p>DeFi: 一类携带投票权的token</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008155242161.png" class="" title="Types of Tokens">
<h3 id="Token-Design"><a href="#Token-Design" class="headerlink" title="Token Design"></a>Token Design</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008160811087.png" class="" title="Multi Disciplinary Approach">
<h3 id="3-D’s-of-Token-Design"><a href="#3-D’s-of-Token-Design" class="headerlink" title="3 D’s of Token Design"></a>3 D’s of Token Design</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008160954105.png" class="" width="3" title="D" alt="s of Token Design">
<h2 id="Conflux-Token-Economy-通证经济"><a href="#Conflux-Token-Economy-通证经济" class="headerlink" title="Conflux Token Economy 通证经济"></a>Conflux Token Economy 通证经济</h2><p>The cryptoeconomic goals for Conflux were to:<br>● Attract users to actively use the network for value add services, and global ventures.<br>● Remove any barriers to entry for those making meaningful contributions<br>● Support security, stability, and predictability of the network</p>
<h3 id="Key-problem"><a href="#Key-problem" class="headerlink" title="Key problem"></a>Key problem</h3><ul>
<li><strong>Inefficient On-Chain Storage</strong><br>● Ethereum users pay a one time fee at the time of including the code on chain, but the community bears the cost of keeping the contract in storage - much of the state-tree space on Ethereum is occupied by inactive smart contracts.</li>
<li><strong>Wasted Computation</strong><br>● BTC and ETH process blocks strictly one-by-one, creating a winner takes all characteristic for mining these chains, increasing the chance of forks.</li>
<li><strong>Low Throughput</strong><br>● Many PoW chains have a low TPS, and not suitable for payments.</li>
</ul>
<h3 id="Conflux-Token-CFX"><a href="#Conflux-Token-CFX" class="headerlink" title="Conflux Token (CFX)"></a>Conflux Token (CFX)</h3><p>Conflux’s unique native token is called CFX which is used for economic value transfers and payments for the cost of usage.</p>
<p>CFX was designed to serve as a:</p>
<ul>
<li>Medium of Exchange (<strong>MoE</strong>)</li>
<li>Store of Value (<strong>SoV</strong>)</li>
<li>A unit of account for blockchain based data</li>
<li>Miner Incentives (compensation for processing new blocks)</li>
</ul>
<p>CFX exists in two forms: <strong>Liquid</strong> and <strong>illiquid</strong>.</p>
<ul>
<li><strong>Liquid</strong>: they can be immediately transferred/used on Conflux<br>Network.</li>
<li><strong>Illiquid</strong>: Tokens are locked up (via staking) in three different forms:<br>1) Staked to earn the user interest<br>2) Bonded storage to purchase space on the network<br>3) Locked up to purchase votes in network governance</li>
</ul>
<h3 id="Staking-权益制"><a href="#Staking-权益制" class="headerlink" title="Staking 权益制"></a>Staking 权益制</h3><h4 id="Staking-for-Interest-利息"><a href="#Staking-for-Interest-利息" class="headerlink" title="Staking for Interest 利息"></a>Staking for Interest 利息</h4><p>Conflux Network distributes interest on all tokens at a rate of 4% per year.</p>
<h4 id="Staking-for-Storage-Space-存储"><a href="#Staking-for-Storage-Space-存储" class="headerlink" title="Staking for Storage Space 存储"></a>Staking for Storage Space 存储</h4><p>A user who wants to use Conflux Network for smart contract execution needs to place a pre-defined number of tokens into a bonded storage.</p>
<script type="math/tex; mode=display">
1\; \text{CFX} = 1\; \text{kb}</script><h4 id="Staking-for-Voting-Rights-投票权"><a href="#Staking-for-Voting-Rights-投票权" class="headerlink" title="Staking for Voting Rights 投票权"></a>Staking for Voting Rights 投票权</h4><p>Conflux Network’s ecosystem fund in the future will transform into a DAO where Conflux stakeholders vote on operations using voting rights.</p>
<p>To cast a vote, users must lock up their tokens, where the time locked up determines the number of votes. Voting rights awarded according to:</p>
<script type="math/tex; mode=display">
\text{Votes} = \text{Number of quarters} \times \text{number of tokens} \times 0.25</script><h3 id="Mining-Rewards-挖矿奖励"><a href="#Mining-Rewards-挖矿奖励" class="headerlink" title="Mining Rewards 挖矿奖励"></a>Mining Rewards 挖矿奖励</h3><p>Miners receive income from three sources:</p>
<ul>
<li><strong>Transaction User Fees</strong>: In the long term user fees will make the majority of miner income</li>
<li><strong>Block Rewards</strong>: In the short term, block rewards will make the majority of miner income.</li>
<li><strong>Interest Income</strong>: Interest on bonded storage tokens are given to miners.</li>
</ul>
<h3 id="Economy-System"><a href="#Economy-System" class="headerlink" title="Economy System"></a>Economy System</h3><blockquote>
<p>Adjust Miner revenue as function of adoption.</p>
</blockquote>
<p>Real application is not living in a vacuum, but a complex and random world. That means we have to introduce some random mechanisms into the model.</p>
<h1 id="Lecture-3-Fundamental-Concepts-amp-Tools"><a href="#Lecture-3-Fundamental-Concepts-amp-Tools" class="headerlink" title="Lecture 3 - Fundamental Concepts &amp; Tools"></a>Lecture 3 - Fundamental Concepts &amp; Tools</h1><blockquote>
<p><em>从用户的角度理解区块链。</em></p>
</blockquote>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li>Conflux Portal (wallet)  ▸ <a href="https://portal.conflux-chain.org" target="_blank" rel="noopener external nofollow noreferrer">portal.conflux-chain.org</a></li>
<li>Conflux Scan (block chain explorer)  ▸ <a href="https://confluxscan.io" target="_blank" rel="noopener external nofollow noreferrer">confluxscan.io</a></li>
<li>Conflux Studio (IDE)  ▸ <a href="https://github.com/ObsidianLabs/ConfluxStudio" target="_blank" rel="noopener external nofollow noreferrer">github.com/ObsidianLabs/ConfluxStudio</a></li>
<li>js-conflux-sdk (Node.js SDK)  ▸ <a href="https://npmjs.com/package/js-conflux-sdk" target="_blank" rel="noopener external nofollow noreferrer">npmjs.com/package/js-conflux-sdk</a></li>
<li>Discord  ▸ <a href="https://discord.com/invite/aCZkf2C" target="_blank" rel="noopener external nofollow noreferrer">discord.com/invite/aCZkf2C</a></li>
<li>Conflux Forum  ▸ <a href="https://forum.conflux.fun" target="_blank" rel="noopener external nofollow noreferrer">forum.conflux.fun</a></li>
</ul>
<h2 id="Accounts-amp-Transactions-账户和交易"><a href="#Accounts-amp-Transactions-账户和交易" class="headerlink" title="Accounts &amp; Transactions 账户和交易"></a>Accounts &amp; Transactions 账户和交易</h2><h3 id="Digital-signatures-数字签名"><a href="#Digital-signatures-数字签名" class="headerlink" title="Digital signatures 数字签名"></a>Digital signatures 数字签名</h3><p><strong>digital signatures</strong> are cryptographic tools and algorithms used to prove message authenticity and integrity</p>
<ul>
<li><strong><font color=blue>authenticity</font></strong>（真实性）: the sender is who they claim to be</li>
<li><strong><font color=blue>integrity</font></strong>（完整性）: the message has not been modified</li>
</ul>
<blockquote>
<p>大多数区块链系统使用椭圆曲线密码学，即<strong>椭圆曲线数字签名算法</strong>（<strong><font color=red>ECDSA</font></strong>）。【非对称加密】</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/ds_subpage_diagram2.svg" class="" title="https:&#x2F;&#x2F;www.docusign.com&#x2F;how-it-works&#x2F;electronic-signature&#x2F;digital-signature&#x2F;digital-signature-faq">
<h4 id="Wallets"><a href="#Wallets" class="headerlink" title="Wallets"></a>Wallets</h4><p>Your <strong><font color=red>identity</font></strong> is: your <strong><font color=red>private-public keypair</font></strong></p>
<blockquote>
<p>钱包就是一个存储 identity 的容器。</p>
</blockquote>
<h3 id="js-conflux-sdk"><a href="#js-conflux-sdk" class="headerlink" title="js-conflux-sdk"></a><code>js-conflux-sdk</code></h3><blockquote>
<p>read and run the full example</p>
<ul>
<li><a href="https://gist.github.com/Thegaram/0652c8e359f73b1772311c8ed34a32c0" target="_blank" rel="noopener external nofollow noreferrer">https://gist.github.com/Thegaram/0652c8e359f73b1772311c8ed34a32c0</a></li>
</ul>
<p>js-conflux-sdk documentation</p>
<ul>
<li><a href="https://www.npmjs.com/package/js-conflux-sdk/v/1.0.0-alpha.4" target="_blank" rel="noopener external nofollow noreferrer">https://www.npmjs.com/package/js-conflux-sdk/v/1.0.0-alpha.4</a></li>
</ul>
</blockquote>
<p>Using the upfront 3 lines to install <code>js-conflux-sdk@1.0.0-alpha.4</code>（注意版本）。</p>
<blockquote>
<p>Or if you have installed a WSL like me…</p>
<blockquote>
<p>Newer version might have different actions.</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir conflux-playground</span><br><span class="line">$ <span class="built_in">cd</span> conflux-playground</span><br><span class="line">$ npm install js-conflux-sdk@1.0.0-alpha.4</span><br><span class="line">$ node   <span class="comment"># enter coding mode</span></span><br></pre></td></tr></table></figure>
<h3 id="Key-amp-Address-Coding-practice"><a href="#Key-amp-Address-Coding-practice" class="headerlink" title="Key &amp; Address - Coding practice"></a>Key &amp; Address - Coding practice</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007193146928.png" class="" title="the process">
<blockquote>
<p>This process is nearly impossible to do it backwards.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import "js-conflux-sdk"</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'js-conflux-sdk/src/util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate a random private key</span></span><br><span class="line"><span class="keyword">const</span> privkey = util.sign.randomPrivateKey();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'private key:'</span>, util.format.hex(privkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">// derive public key from private key</span></span><br><span class="line"><span class="keyword">const</span> pubkey = util.sign.privateKeyToPublicKey(privkey);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'public key:'</span>, util.format.hex(pubkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">// derive address from public key</span></span><br><span class="line"><span class="keyword">const</span> address = util.sign.publicKeyToAddress(pubkey);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'address:'</span>, util.format.hex(address));</span><br></pre></td></tr></table></figure>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007193507875.png" class="" title="coding reproduction">
<h4 id="sign-a-message-using-our-private-key"><a href="#sign-a-message-using-our-private-key" class="headerlink" title="sign a message using our private key"></a>sign a message using our private key</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Message = <span class="built_in">require</span>(<span class="string">'js-conflux-sdk/src/message'</span>);</span><br><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> Message(<span class="string">"Hello! Sincerely, Vel"</span>);</span><br><span class="line">msg.sign(privkey);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'signed message:'</span>, msg)</span><br></pre></td></tr></table></figure>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007194413669.png" class="" title="coding reproduction">
<h4 id="check-message-authenticity"><a href="#check-message-authenticity" class="headerlink" title="check message authenticity"></a>check message authenticity</h4><blockquote>
<p>检查信息是否被修改。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const Message = require('js-conflux-sdk/src/message');</span></span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">let</span> recovered = Message.recover(msg.signature, msg.hash)</span><br><span class="line">assert.equal(recovered, util.format.hex(pubkey))</span><br></pre></td></tr></table></figure>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007195754366.png" class="" title="coding reproduction">
<h4 id="tamper-with-message"><a href="#tamper-with-message" class="headerlink" title="tamper with message"></a>tamper with message</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'message:'</span>, msg.message);</span><br><span class="line">msg.message = <span class="string">"Hello! Sincerely, ----- Hacker"</span>;</span><br><span class="line">recovered = Message.recover(msg.signature, msg.hash)</span><br><span class="line">assert.notEqual(recovered, util.format.hex(pubkey))</span><br></pre></td></tr></table></figure>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007195720862.png" class="" title="coding reproduction">
<h4 id="full-example"><a href="#full-example" class="headerlink" title="full example"></a>full example</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Account = <span class="built_in">require</span>(<span class="string">'js-conflux-sdk/src/account'</span>);</span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Conflux, Drip, Message, util &#125; = <span class="built_in">require</span>(<span class="string">'js-conflux-sdk'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ---- generate random private key ----</span></span><br><span class="line">    <span class="keyword">const</span> privkey = util.sign.randomPrivateKey();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'private key:'</span>, util.format.hex(privkey));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- derive public key ----</span></span><br><span class="line">    <span class="keyword">const</span> pubkey = util.sign.privateKeyToPublicKey(privkey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'public key:'</span>, util.format.hex(pubkey));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- derive address ----</span></span><br><span class="line">    <span class="keyword">const</span> address = util.sign.publicKeyToAddress(pubkey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'address:'</span>, util.format.hex(address));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- sign message ----</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="keyword">new</span> Message(<span class="string">'Hello! Sincerely, Peter'</span>);</span><br><span class="line">    msg.sign(privkey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'signed message:'</span>, msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- check signature ----</span></span><br><span class="line">    <span class="keyword">let</span> recovered = Message.recover(msg.signature, msg.hash)</span><br><span class="line">    assert.strictEqual(recovered, util.format.hex(pubkey))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- detect tampering using signature ----</span></span><br><span class="line">    msg.message = <span class="string">'Hello! Sincerely, ----- Hacker'</span>;</span><br><span class="line">    recovered = Message.recover(msg.signature, msg.hash)</span><br><span class="line">    assert.notStrictEqual(recovered, util.format.hex(pubkey))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- create and sign transaction ----</span></span><br><span class="line">    <span class="keyword">const</span> local_account = <span class="keyword">new</span> Account(&#123; <span class="attr">privateKey</span>: util.format.hex(privkey) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tx = local_account.signTransaction(&#123;</span><br><span class="line">        <span class="keyword">from</span>: util.format.hex(address),</span><br><span class="line">        to: util.format.hex(address),</span><br><span class="line">        value: Drip.fromCFX(<span class="number">10</span>).toDrip(),</span><br><span class="line">        nonce: <span class="string">'0x00'</span>,</span><br><span class="line">        gasPrice: <span class="string">'0x00'</span>,</span><br><span class="line">        gas: <span class="string">'0x00'</span>,</span><br><span class="line">        storageLimit: <span class="string">'0x00'</span>,</span><br><span class="line">        epochHeight: <span class="string">'0x00'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'transaction:'</span>, tx);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'transaction hash:'</span>, tx.hash);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- send transaction ----</span></span><br><span class="line">    <span class="keyword">const</span> conflux = <span class="keyword">new</span> Conflux(&#123; <span class="attr">url</span>: <span class="string">'http://mainnet-jsonrpc.conflux-chain.org:12537'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> import your Conflux Portal wallet</span></span><br><span class="line">    <span class="comment">// follow: Account Details, Export Private Key</span></span><br><span class="line">    <span class="comment">// make sure to add a '0x' prefix to your private key</span></span><br><span class="line">    <span class="comment">// make sure your account has sufficient balance</span></span><br><span class="line">    <span class="keyword">const</span> account = conflux.Account(&#123; <span class="attr">privateKey</span>: util.format.hex(privkey) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set recipient</span></span><br><span class="line">    <span class="keyword">const</span> to = <span class="string">'0x145834072064DcD9B931237B5aEe217c241e3644'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set value to send</span></span><br><span class="line">    <span class="keyword">const</span> value = Drip.fromCFX(<span class="number">10</span>).toDrip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> epochHeight = <span class="keyword">await</span> conflux.getEpochNumber();</span><br><span class="line">    <span class="keyword">const</span> estimate = <span class="keyword">await</span> conflux.estimateGasAndCollateral(&#123; to, value &#125;);</span><br><span class="line">    <span class="keyword">const</span> gasPrice = <span class="keyword">await</span> conflux.getGasPrice();</span><br><span class="line">    <span class="keyword">const</span> nonce = <span class="keyword">await</span> conflux.getNextNonce(account.address);</span><br><span class="line">    <span class="keyword">const</span> status = <span class="keyword">await</span> conflux.getStatus();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> txHash = <span class="keyword">await</span> account.sendTransaction(&#123;</span><br><span class="line">        to,</span><br><span class="line">        value,</span><br><span class="line">        nonce,</span><br><span class="line">        gasPrice,</span><br><span class="line">        gas: estimate.gasUsed,</span><br><span class="line">        storageLimit: estimate.storageCollateralized,</span><br><span class="line">        chainId: status.chainId,</span><br><span class="line">        data: <span class="literal">null</span>,</span><br><span class="line">        epochHeight,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'sending transaction, hash:'</span>, txHash);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait 10 seconds</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, <span class="number">10</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get transaction</span></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="keyword">await</span> conflux.getTransactionByHash(txHash);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'transaction:'</span>, transaction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait 10 seconds</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, <span class="number">10</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get receipt</span></span><br><span class="line">    <span class="keyword">const</span> receipt = <span class="keyword">await</span> conflux.getTransactionReceipt(txHash);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'receipt'</span>, receipt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h3 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007200959708.png" class="" title="Account">
<p>▸for each <strong>identity</strong>, there is a <strong>corresponding account</strong> maintained on the blockchain<br>▸the account <strong>captures a state at a given time</strong>: the current balance, the number of transactions sent, code, …<br>▸your <strong>address</strong> will not change (though you might have multiple addresses)<br>▸the <strong>account state</strong> associated to your address will change as you send and receive transactions</p>
<hr>
<p><strong><font color=blue>JSON-representation of a new account</font></strong>:</p>
<blockquote>
<p>see: <a href="https://developer.conflux-chain.org/docs/conflux-doc/docs/json_rpc/#cfx_getaccount" target="_blank" rel="noopener external nofollow noreferrer">https://developer.conflux-chain.org/docs/conflux-doc/docs/json_rpc/#cfx_getaccount</a></p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accumulatedInterestReturn"</span>: <span class="string">"0x0"</span>,</span><br><span class="line">    <span class="attr">"admin"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"balance"</span>: <span class="string">"0x0"</span>,</span><br><span class="line">    <span class="attr">"codeHash"</span>: <span class="string">"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82..."</span>,</span><br><span class="line">    <span class="attr">"collateralForStorage"</span>: <span class="string">"0x0"</span>,</span><br><span class="line">    <span class="attr">"nonce"</span>: <span class="string">"0x0"</span>,</span><br><span class="line">    <span class="attr">"stakingBalance"</span>: <span class="string">"0x0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>each account has a <strong><font color=red>balance</font></strong>(CFX余额) associated with it.</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007202822926.png" class="" title="balance denominations">
<p><strong><font color=red>nonce</font></strong>(交易数): number of accepted transactions from this account</p>
<blockquote>
<p>SIMPLE PAYMENT TRANSACTIONS:</p>
<ul>
<li>simply sending a number of <strong>coins</strong> (tokens) from one address to another</li>
<li>the sender <strong>signs</strong> the transaction using their private key</li>
<li>if you do not have my private key, you cannot send on my behalf</li>
</ul>
</blockquote>
<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><p><strong><font color=blue>JSON-representation of a transaction</font></strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"0x1dBDA5dD2e952914bC74a802510D0FA59F9d7636"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"0x145834072064DcD9B931237B5aEe217c241e3644"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: <span class="string">"0x3635c9adc5dea00000"</span>,</span><br><span class="line">    <span class="attr">"gas"</span>: <span class="string">"0x5208"</span>,</span><br><span class="line">    <span class="attr">"gasPrice"</span>: <span class="string">"0x174876e800"</span>,</span><br><span class="line">    <span class="attr">"nonce"</span>: <span class="string">"0x1"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="string">"0x"</span>,</span><br><span class="line">    <span class="attr">"v"</span>: <span class="string">"0x1"</span>,</span><br><span class="line">    <span class="attr">"r"</span>: <span class="string">"0x27e5cb110dd198b8fc963d4741ec0840400a6351d9e0c458eed..."</span>,</span><br><span class="line">    <span class="attr">"s"</span>: <span class="string">"0x2c486d8e26da3c867fbcf4ab242af1265a5036c5e23ea42c8ab..."</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><font color=red>from</font></strong> / <strong><font color=red>to</font></strong>: payment transactions specify a <strong>sender</strong> and a <strong>receiver</strong></p>
<p><strong><font color=red>value</font></strong>: you also need to specify <strong>how much you want to send</strong>（转账金额）</p>
<p><strong><font color=red>gas</font></strong> / <strong><font color=red>gasPrice</font></strong>: you might need to <strong>pay for transaction</strong>（交易费）</p>
<p><strong><font color=red>nonce</font></strong>: nonce is the number of the transaction（交易号）</p>
<p><strong><font color=red>data</font></strong>: data is used for <strong>smart contract calls</strong>（用于智能合约）</p>
<p><strong><font color=red>SIGNATURE{v, r, s}</font></strong>:  a transaction needs to be <strong>signed by the sender</strong>（签名）</p>
<p>transactions are identified by the transaction hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x53fe995edeec7d241791ff32635244e94ecfd722c9fe90f34ddf59082d814514</span><br></pre></td></tr></table></figure>
<blockquote>
<p>You can do queries like these:<br>▸ Check if transaction 0x53fe995 succeeded<br>▸ Find the sender address of transaction 0x53fe995<br>▸ Get the execution results of transaction 0x53fe995</p>
</blockquote>
<h2 id="Distributed-ledger-分布式账本"><a href="#Distributed-ledger-分布式账本" class="headerlink" title="Distributed ledger 分布式账本"></a>Distributed ledger 分布式账本</h2><h3 id="Block-区块"><a href="#Block-区块" class="headerlink" title="Block 区块"></a>Block 区块</h3><blockquote>
<p>a block is just a list of transactions (<strong>block body</strong>)<br>… plus some metadata (<strong>block header</strong>)</p>
</blockquote>
<p><strong><font color=blue>JSON-representation of a block</font></strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hash"</span>: <span class="string">"0xc8f5310402330767adb624f436fa579ca3a6e28bb33f09ec..."</span>,</span><br><span class="line">    <span class="attr">"miner"</span>: <span class="string">"0x1905c5723adf66f14f9a33d6d99263cb00c2992c"</span>,</span><br><span class="line">    <span class="attr">"nonce"</span>: <span class="string">"0x30176787e0290260"</span>,</span><br><span class="line">    <span class="attr">"parentHash"</span>: <span class="string">"0xb11d32edb8e8f09941000c898269f665d275342694..."</span>,</span><br><span class="line">    <span class="attr">"epochNumber"</span>: <span class="string">"0x4bad97"</span>,</span><br><span class="line">    <span class="attr">"refereeHashes"</span>: [ ... ],</span><br><span class="line">    <span class="attr">"transactions"</span>: [</span><br><span class="line">        <span class="string">"0x0b5b3d8f542a3c830ec57b83c07d1282241712478edab3ba8e1a05..."</span>,</span><br><span class="line">        <span class="string">"0x96b46d10999cda47c4fda1dab7e8e29ce68f5b9ae2d707fde008c7..."</span>,</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><font color=red>hash</font></strong>: just like txs, blocks are uniquely identified by their hashes</p>
<p><strong><font color=red>miner</font></strong> &amp; <strong><font color=red>nonce</font></strong>: some information about the creator of the block (see PoW)</p>
<p><strong><font color=red>parentHash</font></strong> / <strong><font color=red>epochNumber</font></strong> / <strong><font color=red>refereeHashes</font></strong>: information about the blocks position on our ledger</p>
<h3 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007210215805.png" class="" title="structure of the blockchain">
<h3 id="Tree-graph"><a href="#Tree-graph" class="headerlink" title="Tree-graph"></a>Tree-graph</h3><p>Conflux uses a Tree-Graph ledger instead of a single chain</p>
<blockquote>
<p>… this way, if two blocks are created simultaneously, the system can use both, thus increasing throughput and security</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007210512219.png" class="" title="structure of the tree-graph">
<h3 id="THE-LEDGER-OF-CONFLUX-—-FURTHER-READING"><a href="#THE-LEDGER-OF-CONFLUX-—-FURTHER-READING" class="headerlink" title="THE LEDGER OF CONFLUX — FURTHER READING"></a>THE LEDGER OF CONFLUX — FURTHER READING</h3><ul>
<li>Conflux 101 Webinar<ul>
<li><a href="https://youtube.com/playlist?list=PLoO0tXb18JZ8atJW5bU-GCiykL9yfc3xR" target="_blank" rel="noopener external nofollow noreferrer">youtube.com/playlist?list=PLoO0tXb18JZ8atJW5bU-GCiykL9yfc3xR</a></li>
</ul>
</li>
<li>whitepaper<ul>
<li><a href="https://usenix.org/conference/atc20/presentation/li-chenxing" target="_blank" rel="noopener external nofollow noreferrer">usenix.org/conference/atc20/presentation/li-chenxing</a></li>
</ul>
</li>
<li>technical presentation<ul>
<li><a href="https://confluxnetwork.org/static/Conflux_Technical_Presentation_20200309.pdf" target="_blank" rel="noopener external nofollow noreferrer">confluxnetwork.org/static/Conflux_Technical_Presentation_20200309.pdf</a></li>
</ul>
</li>
</ul>
<h2 id="Smart-contracts-智能合约"><a href="#Smart-contracts-智能合约" class="headerlink" title="Smart contracts 智能合约"></a>Smart contracts 智能合约</h2><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007210854052.png" class="" title="smart contract">
<p>imagine that your mailbox has <strong>a machine inside</strong> that decides what to do with the coins</p>
<p>moreover, you can also <strong>pass it notes with instructions, not just coins</strong></p>
<p>this machine can be unique to each box, built by its owner</p>
<hr>
<p><strong><font color=blue>JSON-representation of a smart contract transaction</font></strong>:</p>
<p>智能合约的两个特征：</p>
<ul>
<li><strong><font color=red>to</font></strong> starts with an <code>8</code>（normal contract starts with a  <code>1</code>）</li>
<li><strong><font color=red>data</font></strong> field is <strong>not empty</strong>（某种方法签名）</li>
</ul>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007211228922.png" class="" title="JSON-representation of a smart contract transaction">
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"0x1dBDA5dD2e952914bC74a802510D0FA59F9d7636"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"0x8b017126d2fede908a86b36b43969f17d25f3770"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: <span class="string">"0x3635c9adc5dea00000"</span>,</span><br><span class="line">    <span class="attr">"gas"</span>: <span class="string">"0x5208"</span>,</span><br><span class="line">    <span class="attr">"gasPrice"</span>: <span class="string">"0x174876e800"</span>,</span><br><span class="line">    <span class="attr">"nonce"</span>: <span class="string">"0x1"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="string">"0xa6f2ae3a"</span>,</span><br><span class="line">    <span class="attr">"v"</span>: <span class="string">"0x1"</span>,</span><br><span class="line">    <span class="attr">"r"</span>: <span class="string">"0x27e5cb110dd198b8fc963d4741ec0840400a6351d9e0c458eed..."</span>,</span><br><span class="line">    <span class="attr">"s"</span>: <span class="string">"0x2c486d8e26da3c867fbcf4ab242af1265a5036c5e23ea42c8ab..."</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="transaction-receipt-交易收据"><a href="#transaction-receipt-交易收据" class="headerlink" title="transaction receipt 交易收据"></a>transaction receipt 交易收据</h3><p><strong><font color=blue>JSON-representation of a receipt</font></strong>(收据):</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"0xb2988210c05a43ebd76575f5421ef84b120ebf80"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"0xb2988210c05a43ebd76575f5421ef84b120ebf80"</span>,</span><br><span class="line">    <span class="attr">"transactionHash"</span>: <span class="string">"0x53fe995edeec7d241791ff32635244e94ecfd7..."</span></span><br><span class="line">    <span class="string">"epochNumber"</span>: <span class="number">451990</span>,</span><br><span class="line">    <span class="attr">"blockHash"</span>: <span class="string">"0xbb1eea3c8a574dc19f7d8311a2096e23a39f12e649a..."</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"outcomeStatus"</span>: <span class="number">0</span>,   <span class="comment">// 0 means succeed</span></span><br><span class="line">    <span class="attr">"contractCreated"</span>: <span class="literal">null</span>,   <span class="comment">// created successfully</span></span><br><span class="line">    <span class="attr">"gasUsed"</span>: <span class="string">"0x5208"</span>,</span><br><span class="line">    <span class="attr">"logs"</span>: [],</span><br><span class="line">    <span class="attr">"logsBloom"</span>: <span class="string">"0x0000000000000000000000000000000000000000000..."</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><font color=red>from</font></strong> / <strong><font color=red>to</font></strong> / <strong><font color=red>transactionHash</font></strong>: transaction info</p>
<p><strong><font color=red>epochNumber</font></strong> / <strong><font color=red>blockHash</font></strong> / <strong><font color=red>index</font></strong>: location on the ledger（对某些应用程序有用）</p>
<p><strong><font color=red>outcomeStatus</font></strong> / <strong><font color=red>contractCreated</font></strong> / <strong><font color=red>gasUsed</font></strong> / <strong><font color=red>logs</font></strong> / <strong><font color=red>logsBloom</font></strong>: execution results</p>
<h2 id="Inspect-data-on-the-ledger"><a href="#Inspect-data-on-the-ledger" class="headerlink" title="Inspect data on the ledger"></a>Inspect data on the ledger</h2><h3 id="Conflux-Scan-Blockchain-Explorers"><a href="#Conflux-Scan-Blockchain-Explorers" class="headerlink" title="Conflux Scan(Blockchain Explorers)"></a>Conflux Scan(Blockchain Explorers)</h3><p>blockchain explorers are data aggregators that you can use to <strong>query accounts, transactions, blocks</strong>, etc.</p>
<p>for Conflux, the official blockchain explorer is called <strong>Conflux Scan</strong>（<a href="https://confluxscan.io" target="_blank" rel="noopener external nofollow noreferrer">confluxscan.io</a>）</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201007234130612.png" class="" title="Conflux Scan">
<h2 id="Set-up-wallet-amp-Send-transactions"><a href="#Set-up-wallet-amp-Send-transactions" class="headerlink" title="Set up wallet &amp; Send transactions"></a>Set up wallet &amp; Send transactions</h2><h3 id="wallet’s-usage"><a href="#wallet’s-usage" class="headerlink" title="wallet’s usage"></a>wallet’s usage</h3><p>a keypair represents an identity on the blockchain</p>
<ul>
<li><strong>public key / address</strong>: your public identity</li>
<li><strong>private key</strong>: your authorization to act on behalf of this identity</li>
</ul>
<p>if you know an account’s private key, you can sign transactions from that account</p>
<ul>
<li><strong>storing keys securely is challenging</strong> even for experts</li>
</ul>
<hr>
<ul>
<li><strong><font color=blue>store private keys, create and sign transactions</font></strong></li>
<li><strong><font color=blue>connect to a blockchain node</font></strong></li>
<li><strong><font color=blue>send transactions into the system</font></strong></li>
<li><strong><font color=blue>monitor transaction and account state</font></strong></li>
</ul>
<hr>
<h3 id="Conflux-Portal-Wallet"><a href="#Conflux-Portal-Wallet" class="headerlink" title="Conflux Portal(Wallet)"></a>Conflux Portal(Wallet)</h3><p>Conflux Portal（<a href="https://portal.conflux-chain.org" target="_blank" rel="noopener external nofollow noreferrer">portal.conflux-chain.org</a>） is the wallet we will use for this course</p>
<blockquote>
<p>it is a <strong>browser extension</strong>(浏览器扩展) available for all major browsers</p>
<p>it allows you to send simple transactions or even interact with smart contracts and dapps</p>
<p>Conflux Portal is based on <strong>MetaMask</strong> (Ethereum)</p>
</blockquote>
<h4 id="Create-a-wallet"><a href="#Create-a-wallet" class="headerlink" title="Create a wallet"></a>Create a wallet</h4><ul>
<li>first, we need to install the extension</li>
<li>during onboarding, we can choose whether we want to import and existing wallet or create a new one</li>
<li>the wallet will generate a private key and store it encrypted using a password you choose</li>
<li>instead of a hex string, you’ll see the private key as a mnemonic phrase — 12 English words</li>
</ul>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008002548277.png" class="" title="Created a wallet">
<p>我们可以通过“存入”（Deposit）按钮来获取一些没有任何价值的免费代币。</p>
<p>完成后，截取message的tx字段（交易哈希值），将可以在Conflux Scan上搜索到相应的交易：</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008002946068.png" class="" title="Conflux Scan搜索交易">
<p>执行一笔转账交易：</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008003136978.png" class="" title="执行一笔转账交易">
<h3 id="Wallet-Security-101"><a href="#Wallet-Security-101" class="headerlink" title="Wallet Security 101"></a>Wallet Security 101</h3><ul>
<li>remember: if you lose your private key (seed phrase), no one will be able to recover your funds</li>
<li>remember: if someone gains access to your private key, they can (and will) steal your funds</li>
<li>best to backup seed phrase on a piece of paper or using a password manager</li>
<li>for higher security, use a hardware wallet</li>
</ul>
<h3 id="How-to-acquire-tokens"><a href="#How-to-acquire-tokens" class="headerlink" title="How to acquire tokens?"></a>How to acquire tokens?</h3><p>▸ get free test CFX on testnet or Oceanus through faucet</p>
<p>▸ earn CFX through mining (<a href="https://mining.confluxnetwork.org" target="_blank" rel="noopener external nofollow noreferrer">mining.confluxnetwork.org</a>)</p>
<p>▸ earn FC through bounty (<a href="https://bounty.conflux-chain.org" target="_blank" rel="noopener external nofollow noreferrer">bounty.conflux-chain.org</a>)</p>
<p>▸ earn FC through grants (<a href="https://grants.confluxnetwork.org" target="_blank" rel="noopener external nofollow noreferrer">grants.confluxnetwork.org</a>)</p>
<p>▸ buy FC on <a href="https://moondex.io" target="_blank" rel="noopener external nofollow noreferrer">moondex.io</a> or other exchanges（if you have another digital currency like bitcoin）</p>
<blockquote>
<p>Interactive map of Conflux nodes (<a href="http://confluxmap.com/" target="_blank" rel="noopener external nofollow noreferrer">confluxmap.com 5</a>)</p>
</blockquote>
<h2 id="Interact-with-dapps-去中心化应用"><a href="#Interact-with-dapps-去中心化应用" class="headerlink" title="Interact with dapps(去中心化应用)"></a>Interact with dapps(去中心化应用)</h2><p>Demo：<a href="http://167.172.160.61" target="_blank" rel="noopener external nofollow noreferrer">http://167.172.160.61</a></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008004353768.png" class="" title="买一张ticket">
<p>查询相应的智能合约交易记录：</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008004514650.png" class="" title="transaction">
<h1 id="Homework-of-Lecture-3"><a href="#Homework-of-Lecture-3" class="headerlink" title="Homework of Lecture 3"></a>Homework of Lecture 3</h1><blockquote>
<p><a href="https://forum.conflux.fun/t/topic/2910" target="_blank" rel="noopener external nofollow noreferrer">Lecture 3 - Homework &amp; Resources</a></p>
<blockquote>
<p>Homework is done by a group.</p>
</blockquote>
</blockquote>
<h2 id="transaction-classification"><a href="#transaction-classification" class="headerlink" title="transaction classification"></a>transaction classification</h2><p>1)On which network is this transaction? <code>0xb97e091e42252571072ae9c605bda16c8f2568cb6a4ff8fd717d384123074b55</code></p>
<blockquote>
<p>Conflux now have a test network(<strong>Conflux Testnet</strong>) , and a pre-mainnet network(<strong>Conflux Oceanus</strong>).</p>
<p>But none of those networks have the requested transaction.</p>
</blockquote>
<h2 id="block-match-search"><a href="#block-match-search" class="headerlink" title="block match search"></a>block match search</h2><p>2)Find a block with 20 or more transactions and send us the block hash.</p>
<blockquote>
<p>0x618f924e1f6c7eab371551d8a5e407aeecd9a192bdd130204dc1ccc42566360f</p>
<blockquote>
<p>note: this block is from the <strong>Conflux Testnet</strong>,and contains <strong>280</strong> transactions.</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008022034530.png" class="" title="block">
<p>And there is a JS code to automatically find a block with 20 or more transactions:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Conflux &#125; = <span class="built_in">require</span>(<span class="string">'js-conflux-sdk'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// initalize a Conflux object</span></span><br><span class="line">  <span class="keyword">const</span> cfx = <span class="keyword">new</span> Conflux(&#123;</span><br><span class="line">    url: <span class="string">'http://mainnet-jsonrpc.conflux-chain.org:12537'</span>,</span><br><span class="line">    defaultGasPrice: <span class="number">100</span>,</span><br><span class="line">    defaultGas: <span class="number">1000000</span>,</span><br><span class="line">    logger: <span class="built_in">console</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> epochStart = <span class="number">7742635</span></span><br><span class="line">  <span class="keyword">let</span> answer = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = epochStart; i&gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">const</span> blockArray = <span class="keyword">await</span> cfx.getBlocksByEpochNumber(i)</span><br><span class="line">    <span class="keyword">for</span> (block <span class="keyword">in</span> blockArray) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> cfx.getBlockByHash(blockArray[block])</span><br><span class="line">        <span class="keyword">if</span> (result[<span class="string">'transactions'</span>].length &gt;=<span class="number">20</span> ) &#123;</span><br><span class="line">            answer = result[<span class="string">'hash'</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (answer) <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result is '</span> + answer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>By running it, we can find the results: <code>0x273d13668462ae7cbb14f25fea0eb8bdbac2dfcd4571a3c5139f08a864d160ba</code></p>
<blockquote>
<p>note: this block is from the <strong>Conflux Oceanus</strong>,and contains <strong>22</strong> transactions.</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008110908510.png" class="" title="0x273d13668462ae7cbb14f25fea0eb8bdbac2dfcd4571a3c5139f08a864d160ba">
<p>Here is the running test:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008114435446.png" class="" title="running test">
</blockquote>
<h2 id="failed-transaction"><a href="#failed-transaction" class="headerlink" title="failed transaction"></a>failed transaction</h2><p>3)Try to find a failed transaction. Did the sender retry?</p>
<blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008014307350.png" class="" title="failed transactions">
<blockquote>
<p><em>Failed First try:**</em>0x6151cf6ceb0d2156e6f35c258d94e27ebc299d149ee664544db343c8e5d29520**</p>
<p><em>Failed Second try:</em> <strong>0x7635749799dafce791bb952d7a83859c1c4faca8f6cb3d2652fabb073a992241</strong></p>
<p><em>Successful Third try:</em></p>
<p><strong>0x6151cf6ceb0d2156e6f35c258d94e27ebc299d149ee664544db343c8e5d29520</strong></p>
</blockquote>
<p>Doing smart contract actually also has failed several transactions…</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008013717131.png" class="" title="failed transaction">
</blockquote>
<h2 id="CFX-faucet-test"><a href="#CFX-faucet-test" class="headerlink" title="CFX faucet test"></a>CFX faucet test</h2><p>4)Create a wallet, get some CFX <strong>through the faucet</strong> and send us the corresponding transactions hash.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;message&quot;:&#123;&quot;tx&quot;:&quot;0x0163755fe87b34053d2f949ba757b23f3fdbff47ac73b3b0af3e8fb2cabba2d4&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Use “Deposit” button to get free CFX~~</p>
<p>0x0163755fe87b34053d2f949ba757b23f3fdbff47ac73b3b0af3e8fb2cabba2d4</p>
</blockquote>
<h2 id="buy-a-ticket"><a href="#buy-a-ticket" class="headerlink" title="buy a ticket"></a>buy a ticket</h2><p>5)Buy a ticket on 167.172.160.61 and send us the corresponding transaction hash.<br>5.1)What happens if you lower the gas limit before sending the transaction?<br>5.2)What happens if you try to buy a second ticket for the same address?</p>
<blockquote>
<p>5）0xbc6e65773ce248c40743c4cbad6472284f3b2a2ab9ef6b86e1a2734b049c0248</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008004632381.png" class="" title="buy a ticket">
<p>5.1）there is a minimal gas limit:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008004932339.png" class="" title="gas limit is at least 21000">
<p>When I lower the gas limit, I get a failed transaction: (<strong>Out of gas</strong>)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008005312172.png" class="" title="a failed transaction">
<p>5.2）When I try to buy a second ticket for the same address, I get a failed transaction: (<strong>Execution error</strong>, maybe the smart contract constraints that <strong>one address can only buy one ticket</strong>)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008005449147.png" class="" title="buy a second ticket">
<p>On the contrary, if I choose to buy a second ticket from another account(address):（first, need unauthorize the website, and reconnect to choose another account）</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008010009472.png" class="" title="buy a second ticket from another account">
</blockquote>
<h3 id="query-ticket-purchases"><a href="#query-ticket-purchases" class="headerlink" title="query ticket purchases"></a>query ticket purchases</h3><p>6)Try querying recent ticket purchases. Has there been any?</p>
<blockquote>
<p>Yes. Use the <code>Purchase</code> method: (And that <code>&quot;0x1e51d..</code> address is one of my account)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008010347232.png" class="" title="query recent ticket purchases">
</blockquote>
<h3 id="creator-of-the-Tickets-contract"><a href="#creator-of-the-Tickets-contract" class="headerlink" title="creator of the Tickets contract"></a>creator of the Tickets contract</h3><p>7)Who is the creator of the Tickets contract?</p>
<blockquote>
<p>First, use <code>owner</code> method to get an address:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008011005416.png" class="" title="owner">
<p>Then search for the address:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008011130430.png" class="" title="search for the address">
<p>This seems not what we want, so I track which account all the tokens are transferred into:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008011846655.png" class="" title="find an account">
<p>And…search, with two-step validation, I think I’ve found the creator of this contract:</p>
<ul>
<li>most definitely <code>0x1dbda5dd2e952914bc74a802510d0fa59f9d7636</code></li>
</ul>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201008012202607.png" class="" title="search the account">
<p>And I think <code>0x8B017126d2FEDe908a86B36b43969F17d25F3770</code> is the address of this contract. But I couldn’t be able to find any source code of the contract using Conflux Scan.</p>
</blockquote>
<h4 id="balance-of-this-account"><a href="#balance-of-this-account" class="headerlink" title="balance of this account"></a>balance of this account</h4><p>8)What is the balance of this account? How do you think this account acquired these tokens?</p>
<blockquote>
<p>The creator’s address <code>0x1dbda5dd2e952914bc74a802510d0fa59f9d7636</code>:</p>
<ul>
<li><p><strong>31682.677136697254853623 CFX</strong></p>
<p>▸ earn CFX through mining (<a href="https://mining.confluxnetwork.org" target="_blank" rel="noopener external nofollow noreferrer">mining.confluxnetwork.org</a>) mining is reasonable for this address</p>
<p>▸ earn FC through bounty (<a href="https://bounty.conflux-chain.org" target="_blank" rel="noopener external nofollow noreferrer">bounty.conflux-chain.org</a>) design a smart contract might get this</p>
</li>
</ul>
<p>The contract’s address <code>0x8b017126d2fede908a86b36b43969f17d25f3770</code>:</p>
<ul>
<li><p><strong>330 CFX</strong></p>
<p>▸people buy tickets from this address and send it 33 * 10 CFX (which means there are 33 tickets been sold)</p>
</li>
</ul>
</blockquote>
<h2 id="the-most-FC-tokens-address"><a href="#the-most-FC-tokens-address" class="headerlink" title="the most FC tokens address"></a>the most FC tokens address</h2><p>9)Which address holds the most FC tokens?</p>
<blockquote>
<ol>
<li>the conflux system address<ol>
<li>System is responsible for 1:1 exchange of FC/CFX transactions<ol>
<li>In this scenario, the contract creator’s address <code>0x144aa8f554d2ffbc81e0aa0f533f76f5220db09c</code> might have had the most FC tokens because this address is currently holding an enormous amount of CFX roughly about 999999996999988 CFX. That’s really something.</li>
</ol>
</li>
<li>System delivers FC tokens to all other users</li>
<li>So in theory it should hold the most FC tokens</li>
</ol>
</li>
<li><code>0x1878e9b8d2fec316a2e666485b927e92a3b4f43e</code><ol>
<li>This address holds 55999 FC tokens, and was involved in the first FC contract transaction</li>
<li>Considering the total amount of FC tokens is about 4484424 FC tokens, this could also have a great chance to be the address that holds the most FC tokens</li>
</ol>
</li>
</ol>
</blockquote>
<h1 id="Lecture-4-Introduction-to-Smart-Contracts"><a href="#Lecture-4-Introduction-to-Smart-Contracts" class="headerlink" title="Lecture 4 - Introduction to Smart Contracts"></a>Lecture 4 - Introduction to Smart Contracts</h1><h2 id="Decentralized-Applications-Architecture"><a href="#Decentralized-Applications-Architecture" class="headerlink" title="Decentralized Applications Architecture"></a>Decentralized Applications Architecture</h2><h3 id="Traditional-Web-Applications-Web-2-0"><a href="#Traditional-Web-Applications-Web-2-0" class="headerlink" title="Traditional Web Applications (Web 2.0)"></a>Traditional Web Applications (Web 2.0)</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201015193226448.png" class="" title="Web 2.0">
<p><strong>Web 2.0</strong> uses the C/S model.</p>
<ul>
<li>Enter domian, retrieve frontend through HTTP(S)</li>
<li>User interacts with the frontend which might send additional requests to the backend (dynamic content)</li>
<li>The backend could be a server cluster or a cloud, but the main logic remains the same</li>
</ul>
<h3 id="Decentalized-Applications-Web-3-0"><a href="#Decentalized-Applications-Web-3-0" class="headerlink" title="Decentalized Applications (Web 3.0)"></a>Decentalized Applications (Web 3.0)</h3><img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201015200907786.png" class="" title="Web 3.0">
<p><strong>Web 3.0</strong> uses the P2P model (partly):</p>
<ul>
<li>Get frontend from server</li>
<li>Frontend initiates transaction</li>
<li>User approves transaction</li>
<li>There might still be dynamic content</li>
<li>Backend can also query the blockchain</li>
</ul>
<hr>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201015212005851.png" class="" title="Web 2.0 vs. Web 3.0">
<p>IPFS（星际文件系统）：一个去中心化的文件存储系统。</p>
<h2 id="Conflux-Studio-Overview"><a href="#Conflux-Studio-Overview" class="headerlink" title="Conflux Studio Overview"></a>Conflux Studio Overview</h2><blockquote>
<p><strong>a 3rd-party IDE</strong> called Conflux Studio</p>
</blockquote>
<h3 id="Toolchain"><a href="#Toolchain" class="headerlink" title="Toolchain"></a>Toolchain</h3><p>we will use these tools<br>▸ Conflux Studio (v0.4.1) <a href="https://github.com/ObsidianLabs/ConfluxStudio/blob/master/README.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ObsidianLabs/ConfluxStudio/blob/master/README.md</a><br>▸ Docker (latest) <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener external nofollow noreferrer">https://www.docker.com/products/docker-desktop</a><br>▸ Solidity 7.1, solc (v0.7.1)<br>▸ Conflux Truffle (v.0.0.8)<br>▸ conflux-rust (v.0.6.3</p>
<h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><p>Docker的原理是在本地运行一个conflux节点，实际上整个网络都在本地，但只包含一个节点，所以非常适合本地开发。</p>
<p>下载课程的智能合约示例：<a href="https://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip</a></p>
<blockquote>
<p>在studio中打开上述项目，注意路径名不要有中文。</p>
</blockquote>
<h2 id="Writing-Smart-Contracts"><a href="#Writing-Smart-Contracts" class="headerlink" title="Writing Smart Contracts"></a>Writing Smart Contracts</h2><p>The code that is executed is called <strong><font color=red>EVM bytecode</font></strong>. We write contracts in higher-level languages, the most popular language used on Ethereum and Conflux is <strong><font color=red>Solidity</font></strong>.</p>
<blockquote>
<p>为智能合约专门设计的高级语言。</p>
<p><strong>EVM bytecode</strong>：Ethereum Virtual Machine bytcode 以太坊虚拟机字节码</p>
<p>CVM：Conflux Virtual Machine（和EVM基本一致，智能合约的编写是兼容的）</p>
</blockquote>
<p><code>example.sol</code> :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line">contract ContractName &#123;</span><br><span class="line">    uint256 number;</span><br><span class="line">    address owner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256) counts;  <span class="comment">// 字典</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">uint256 value</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    	counts[owner] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>abi.json</code> :</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"function"</span></span><br><span class="line">        <span class="string">"inputs"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"internalType"</span>: <span class="string">"uint256"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"val"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"uint256"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outputs"</span>: [],</span><br><span class="line">        <span class="attr">"stateMutability"</span>: <span class="string">"nonpayable"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Tockets-sol"><a href="#Tockets-sol" class="headerlink" title="Tockets.sol"></a>Tockets.sol</h2><p>讲了讲怎么使用。。</p>
<hr>
<p>introduction to dapps<br><a href="https://ethereum.org/en/developers/docs/dapps" target="_blank" rel="noopener external nofollow noreferrer">ethereum.org/en/developers/docs/dapps</a></p>
<p>built on Ethereum — dapp examples<br><a href="https://docs.ethhub.io/built-on-ethereum/built-on-ethereum" target="_blank" rel="noopener external nofollow noreferrer">docs.ethhub.io/built-on-ethereum/built-on-ethereum</a></p>
<p>official Solidity 7.1 documentation<br><a href="https://solidity.readthedocs.io/en/v0.7.1" target="_blank" rel="noopener external nofollow noreferrer">solidity.readthedocs.io/en/v0.7.1</a></p>
<p>learn X in Y minutes (where X=Solidity) warning! earlier Solidity version<br><a href="https://learnxinyminutes.com/docs/solidity" target="_blank" rel="noopener external nofollow noreferrer">learnxinyminutes.com/docs/solidity</a></p>
<p>Solidity by example warning! earlier Solidity version<br><a href="https://solidity-by-example.org/0.6" target="_blank" rel="noopener external nofollow noreferrer">solidity-by-example.org/0.6</a></p>
<p>CryptoZombies<br><a href="https://cryptozombies.io" target="_blank" rel="noopener external nofollow noreferrer">cryptozombies.io</a></p>
<hr>
<p>Conflux Studio overview<br><a href="https://github.com/ObsidianLabs/ConfluxStudio/blob/master/README.md" target="_blank" rel="noopener external nofollow noreferrer">github.com/ObsidianLabs/ConfluxStudio/blob/master/README.md</a></p>
<p>dapp tutorial<br><a href="https://github.com/ObsidianLabs/conflux-dapp-tutorial" target="_blank" rel="noopener external nofollow noreferrer">github.com/ObsidianLabs/conflux-dapp-tutorial</a></p>
<p>Conflux frontend example project<br><a href="https://github.com/ObsidianLabs/conflux-frontend-react" target="_blank" rel="noopener external nofollow noreferrer">github.com/ObsidianLabs/conflux-frontend-react</a></p>
<hr>
<p>Solidity Security: Comprehensive list of known attack vectors and common anti-patterns<br><a href="https://blog.sigmaprime.io/solidity-security.html" target="_blank" rel="noopener external nofollow noreferrer">blog.sigmaprime.io/solidity-security.html</a><br><a href="https://github.com/zxhubo/Knowledge-Base" target="_blank" rel="noopener external nofollow noreferrer">github.com/zxhubo/Knowledge-Base</a></p>
<p>the Ethernaut (by OpenZeppelin)<br><a href="https://ethernaut.openzeppelin.com" target="_blank" rel="noopener external nofollow noreferrer">ethernaut.openzeppelin.com</a></p>
<h1 id="Homework-of-Lecture-4"><a href="#Homework-of-Lecture-4" class="headerlink" title="Homework of Lecture 4"></a>Homework of Lecture 4</h1><blockquote>
<p><a href="https://forum.conflux.fun/t/topic/3390" target="_blank" rel="noopener external nofollow noreferrer">Lecture 4 - Homework &amp; Resources</a></p>
<blockquote>
<p>Homework is done by a group.</p>
</blockquote>
</blockquote>
<h2 id="Conflux-Studio"><a href="#Conflux-Studio" class="headerlink" title="Conflux Studio"></a>Conflux Studio</h2><p><strong>3.1 Basic usage of Conflux Studio</strong></p>
<p>Download and install Conflux Studio and all the components required.</p>
<ul>
<li>Docker: <a href="https://docs.docker.com/get-docker" target="_blank" rel="noopener external nofollow noreferrer">https://docs.docker.com/get-docker 12</a></li>
<li>Conflux Studio: <a href="https://github.com/ObsidianLabs/ConfluxStudio/releases/tag/v0.4.1" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ObsidianLabs/ConfluxStudio/releases/tag/v0.4.1 12</a></li>
<li>Conflux Truffle, conflux-rust, solc: Install through Conflux Studio</li>
</ul>
<blockquote>
<p>Done.</p>
</blockquote>
<p>Download the Tickets project from the lecture (<a href="https://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip</a>) and import it into Conflux Studio.</p>
<blockquote>
<p>Done.</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201015235330134.png" class="" title="the Tickets project">
</blockquote>
<p>Deploy an instance of the contract on Conflux Oceanus (hint: you can send CFX from your Conflux Portal account to your Conflux Studio account).</p>
<blockquote>
<p>get CFX from faucet: wallet.confluxscan.io/faucet/dev/ask?address={address}</p>
<blockquote>
<p>To <strong>make sure the deploying account has enough CFXs to pay transaction fees</strong>.</p>
<p>Or (send CFX from your Conflux Portal account to your Conflux Studio account)</p>
</blockquote>
<p>And Deploy~</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016000956618.png" class="" title="Deploy an instance of the contract">
</blockquote>
<p>Buy a ticket from another account. Validate the ticket with the owner. Withdraw the profits.</p>
<blockquote>
<p>First, find the contract we deployed, which leads us to the contract method’s panal:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016001705433.png" class="" title="contract method" alt="s panal">
<p>And we just buy, validate, and withdraw.</p>
</blockquote>
<p>Send us the address of the contract, the 4 transaction hashes (deploy, buy(), validate(), withdraw()), and screenshots of how you sent them from Conflux Studio.</p>
<blockquote>
<p><strong>deploy</strong>: <code>0x1c5d87cbc299df5f2d5f07d989e2df83ebca253838edb0836b86d24587b72878</code></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016001609824.png" class="" title="contract">
<p><strong>buy</strong>: <code>0xcfbdf3ae39291ea42c85142e18514d4d7329a88057fa8811f043a7869619bcb6</code></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016002315094.png" class="" title="buy">
<p><strong>validate</strong>: <code>0xe4e4dbbc708a7e5e5272e8323d124052297ed4dd6ae772da8b2bc9a416b0f2d7</code></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016002453805.png" class="" title="validate">
<p><strong>withdraw</strong>: <code>0x367034b42d8cce63f19cf585b3644587e084f8456fd3a562f223dfdd7341c3f9</code></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016002721904.png" class="" title="withdraw">
</blockquote>
<h2 id="Tickets-sol"><a href="#Tickets-sol" class="headerlink" title="Tickets.sol"></a>Tickets.sol</h2><p><strong>3.2 Customizing Tickets.sol</strong></p>
<p>Update Ticket.sol so that it becomes possible to <strong>set the number of tickets and the price per ticket</strong> <font color=red>when you deploy a contract</font>.</p>
<p>For instance, for event A, I want to sell 10 tickets of 100 CFX each. For event B, I want to sell 1000 tickets for 2 CFX each.</p>
<p>Test your solution on a local development network.</p>
<p>Send us the source code and a screenshot of deploying a contract with 33 tickets for 44 CFX each.</p>
<blockquote>
<p>Just set a few constructor’s parameters and all is OK.</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">constructor(uint256 tickets, uint256 price) &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    num_tickets = tickets;</span><br><span class="line">    price_drips = price * <span class="number">1e18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Then we get a panal with adjustable number of tickets and price for each.</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016120636955.png" class="" title="Deploy">
<blockquote>
<p>Send the transaction, and check:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016120734072.png" class="" title="check the parameters">
<h3 id="Buy-tickets"><a href="#Buy-tickets" class="headerlink" title="Buy tickets"></a>Buy tickets</h3><p><strong>+1. Buying multiple tickets from one address [OPTIONAL]</strong></p>
<p>Update Tickets.sol so that <strong>one user can buy multiple tickets</strong>. For instance, Bob might want to buy 2 tickets, one for himself and one for his girlfriend.</p>
<p>Test your solution on a local development network.</p>
<p>Send us the source code and some screenshots of buying 2 or more tickets from an address and then validating them.</p>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line">contract Tickets &#123;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line"></span><br><span class="line">    uint256 <span class="keyword">public</span> num_tickets = <span class="number">100</span>;</span><br><span class="line">    uint256 <span class="keyword">public</span> price_drips = <span class="number">10</span> * <span class="number">1e18</span>; <span class="comment">// 10 CFX</span></span><br><span class="line">    mapping (address =&gt; uint256) <span class="keyword">public</span> has_ticket;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">Validated</span><span class="params">(address visitor, uint256 tickets)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 tickets, uint256 price) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        num_tickets = tickets;</span><br><span class="line">        price_drips = price * <span class="number">1e18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buy ticket</span></span><br><span class="line">    <span class="function">function <span class="title">buy</span><span class="params">(uint256 tickets)</span> <span class="keyword">public</span> payable </span>&#123;</span><br><span class="line">        <span class="comment">// check tickets</span></span><br><span class="line">        require(num_tickets &gt; <span class="number">0</span> &amp;&amp; tickets &lt;= num_tickets &amp;&amp; tickets &gt; <span class="number">0</span>, <span class="string">"TICKETS: illegal operation"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if the buying price is correct</span></span><br><span class="line">        require(msg.value == tickets * price_drips, <span class="string">"TICKETS: incorrect amount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// successful buy</span></span><br><span class="line">        <span class="keyword">if</span>( has_ticket[msg.sender] != <span class="number">0</span> )</span><br><span class="line">            has_ticket[msg.sender] += tickets;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            has_ticket[msg.sender] = tickets;</span><br><span class="line">        num_tickets -= tickets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate ticket</span></span><br><span class="line">    <span class="function">function <span class="title">validate</span><span class="params">(address visitor)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">"TICKETS: unauthorized"</span>);</span><br><span class="line">        require(has_ticket[visitor] &gt; <span class="number">0</span>, <span class="string">"TICKETS: visitor has no ticket"</span>);</span><br><span class="line"></span><br><span class="line">        uint256 tickets = has_ticket[visitor];</span><br><span class="line">        has_ticket[visitor] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">emit <span class="title">Validated</span><span class="params">(visitor, tickets)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// withdraw profit</span></span><br><span class="line">    <span class="function">function <span class="title">withdraw</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">"TICKETS: unauthorized"</span>);</span><br><span class="line">        uint256 profit = address(<span class="keyword">this</span>).balance;</span><br><span class="line">        msg.sender.<span class="built_in">transfer</span>(profit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>We set tickets_num to <code>2333</code>, and price to <code>1</code> CFX. (And buy 5 tickets.)</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016122836503.png" class="" title="num_tickets">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016122857302.png" class="" title="price_drips">
<blockquote>
<p>buying 2 or more tickets from an address:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016122729183.png" class="" title="buy 5 tickets for Calvin">
<blockquote>
<p>validating them:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016123108333.png" class="" title="validate">
<h3 id="Time-of-the-event"><a href="#Time-of-the-event" class="headerlink" title="Time of the event"></a>Time of the event</h3><p>+<strong>1. Time of the event [OPTIONAL]</strong></p>
<p>Update Tickets.sol so that the organizer can set the time of the event.</p>
<p>Allow users to <strong>buy tickets up to 2 hours before the event</strong>. E.g. if the event is on 2020.12.01 19:00, you cannot buy tickets after 2020.12.01 17:00.</p>
<p>Allow the organizer to <strong>withdraw the profits 1 day after the event</strong>. E.g. if the event is on 2020.12.01 19:00, the organizer cannot withdraw the profits before 2020.12.02 19:00.</p>
<p><strong>Hints:</strong></p>
<ul>
<li><a href="https://solidity.readthedocs.io/en/v0.7.1/units-and-global-variables.html#block-and-transaction-properties" target="_blank" rel="noopener external nofollow noreferrer">https://solidity.readthedocs.io/en/v0.7.1/units-and-global-variables.html#block-and-transaction-properties 6</a></li>
<li><a href="https://solidity.readthedocs.io/en/v0.7.1/units-and-global-variables.html#time-units" target="_blank" rel="noopener external nofollow noreferrer">https://solidity.readthedocs.io/en/v0.7.1/units-and-global-variables.html#time-units 6</a></li>
</ul>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line">contract Tickets &#123;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line"></span><br><span class="line">    uint256 <span class="keyword">public</span> num_tickets = <span class="number">100</span>;</span><br><span class="line">    uint256 <span class="keyword">public</span> price_drips = <span class="number">10</span> * <span class="number">1e18</span>; <span class="comment">// 10 CFX</span></span><br><span class="line">    uint256 <span class="keyword">public</span> start;</span><br><span class="line">    mapping (address =&gt; uint256) <span class="keyword">public</span> has_ticket;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">Validated</span><span class="params">(address visitor, uint256 tickets)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 tickets, uint256 price, uint256 upcoming_days_of_the_event) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        num_tickets = tickets;</span><br><span class="line">        price_drips = price * <span class="number">1e18</span>;</span><br><span class="line">        start = upcoming_days_of_the_event * <span class="number">1</span> days + block.timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buy ticket</span></span><br><span class="line">    <span class="function">function <span class="title">buy</span><span class="params">(uint256 tickets)</span> <span class="keyword">public</span> payable </span>&#123;</span><br><span class="line">        <span class="comment">// check time</span></span><br><span class="line">        require(block.timestamp &lt;= start - <span class="number">2</span> hours, <span class="string">"TICKETS: can't but due to time reasons"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// check tickets</span></span><br><span class="line">        require(num_tickets &gt; <span class="number">0</span> &amp;&amp; tickets &lt;= num_tickets &amp;&amp; tickets &gt; <span class="number">0</span>, <span class="string">"TICKETS: illegal operation"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if the buying price is correct</span></span><br><span class="line">        require(msg.value == tickets * price_drips, <span class="string">"TICKETS: incorrect amount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// successful buy</span></span><br><span class="line">        <span class="keyword">if</span>( has_ticket[msg.sender] != <span class="number">0</span> )</span><br><span class="line">            has_ticket[msg.sender] += tickets;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            has_ticket[msg.sender] = tickets;</span><br><span class="line">        num_tickets -= tickets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate ticket</span></span><br><span class="line">    <span class="function">function <span class="title">validate</span><span class="params">(address visitor)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">"TICKETS: unauthorized"</span>);</span><br><span class="line">        require(has_ticket[visitor] &gt; <span class="number">0</span>, <span class="string">"TICKETS: visitor has no ticket"</span>);</span><br><span class="line"></span><br><span class="line">        uint256 tickets = has_ticket[visitor];</span><br><span class="line">        has_ticket[visitor] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">emit <span class="title">Validated</span><span class="params">(visitor, tickets)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// withdraw profit</span></span><br><span class="line">    <span class="function">function <span class="title">withdraw</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">"TICKETS: unauthorized"</span>);</span><br><span class="line"></span><br><span class="line">        require(block.timestamp &gt;= start + <span class="number">1</span> days, <span class="string">"TICKETS: can't withdraw due to time reasons"</span>);</span><br><span class="line"></span><br><span class="line">        uint256 profit = address(<span class="keyword">this</span>).balance;</span><br><span class="line">        msg.sender.<span class="built_in">transfer</span>(profit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Set the start time as 3 days later:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016133242321.png" class="" title="deploy">
<blockquote>
<p>Let’s buy some tickets and test if we can withdraw the money ahead of schdule:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016133717044.png" class="" title="withdraw test">
<blockquote>
<p>Now we can see:</p>
<blockquote>
<p>Transaction reverted</p>
<p><strong>data</strong> TICKETS: can’t withdraw due to time reasons</p>
</blockquote>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201016133747376.png" class="" title="failed">
<h1 id="Lecture-5-Introduction-to-Smart-Contracts-II"><a href="#Lecture-5-Introduction-to-Smart-Contracts-II" class="headerlink" title="Lecture 5 - Introduction to Smart Contracts II"></a>Lecture 5 - Introduction to Smart Contracts II</h1><blockquote>
<p><em>No slides, only demos.</em></p>
</blockquote>
<h2 id="minting-burning-logic"><a href="#minting-burning-logic" class="headerlink" title="minting / burning logic"></a>minting / burning logic</h2><p>minting即铸币，burning即销毁。这部分的逻辑控制代币的产生和消失。</p>
<p>minting ~ token issuance(发行):</p>
<ul>
<li>fixed-supply token</li>
<li>set of addresses to mint, e.g. stablecoin<ul>
<li>管理者有权超发货币</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0-or-later</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./IStandardCoin.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract CourseCoin is IStandardCoin &#123; <span class="comment">// inheritance / implementing an interface</span></span><br><span class="line">    <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="built_in">string</span> _symbol; <span class="comment">// ~ CFX</span></span><br><span class="line">    uint256 _totalSupply;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// keep track of account balances</span></span><br><span class="line">    mapping (address =&gt; uint256) _balances;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">Transfer</span><span class="params">(address from, address to, uint256 amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 totalSupply) &#123;</span><br><span class="line">        _name = <span class="string">"Conflux UMA Token"</span>;</span><br><span class="line">        _symbol = <span class="string">"UMA"</span>;</span><br><span class="line">        _totalSupply = totalSupply;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add all tokens to creator</span></span><br><span class="line">        _balances[msg.sender] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters</span></span><br><span class="line">    <span class="function">function <span class="title">name</span><span class="params">()</span> external view <span class="title">returns</span> <span class="params">(<span class="built_in">string</span> memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">symbol</span><span class="params">()</span> external view <span class="title">returns</span> <span class="params">(<span class="built_in">string</span> memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">balanceOf</span><span class="params">(address addr)</span> external view <span class="keyword">override</span> <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[addr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">totalSupply</span><span class="params">()</span> external view <span class="keyword">override</span> <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// transfer between accounts</span></span><br><span class="line">    <span class="function">function <span class="title">transfer</span><span class="params">(address receiver, uint256 amount)</span> external <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        require(_balances[msg.sender] &gt;= amount, <span class="string">"CourseCoin: Insufficient balance"</span>);</span><br><span class="line">        _balances[msg.sender] -= amount;</span><br><span class="line">        _balances[receiver] += amount;</span><br><span class="line">        <span class="function">emit <span class="title">Transfer</span><span class="params">(msg.sender, receiver, amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TimeLockedTransfer"><a href="#TimeLockedTransfer" class="headerlink" title="TimeLockedTransfer"></a>TimeLockedTransfer</h2><p>转账交易执行后，receiver只能在截至时间以后才能提取代币。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0-or-later</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./IStandardCoin.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract TimeLockedTransfer &#123;</span><br><span class="line">    address _sender;</span><br><span class="line">    address _receiver;</span><br><span class="line">    uint256 _unlockAfter; <span class="comment">// point in time</span></span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">CFXDeposit</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CFXWithdraw</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CoinDeposit</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CoinWithdraw</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(address sender, address receiver, uint256 lockTimeSec) &#123;</span><br><span class="line">        _sender = sender;</span><br><span class="line">        _receiver = receiver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// current time: `block.timestamp` (`now` in older versions)</span></span><br><span class="line">        _unlockAfter = block.timestamp + lockTimeSec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">balance</span><span class="params">()</span> external view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(<span class="keyword">this</span>).balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">depositCFX</span><span class="params">()</span> external payable </span>&#123;</span><br><span class="line">        require(msg.sender == _sender, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        uint256 amount = msg.value;</span><br><span class="line">        <span class="function">emit <span class="title">CFXDeposit</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">withdrawCFX</span><span class="params">()</span> external </span>&#123;</span><br><span class="line">        require(msg.sender == _receiver, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        require(block.timestamp &gt;= _unlockAfter, <span class="string">"TLT: Timelock still active"</span>);</span><br><span class="line">        uint256 amount = address(<span class="keyword">this</span>).balance;</span><br><span class="line">        msg.sender.<span class="built_in">transfer</span>(amount);</span><br><span class="line">        <span class="function">emit <span class="title">CFXWithdraw</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//function depositCoin(address coinContract) external payable &#123;</span></span><br><span class="line">    <span class="comment">//    require(msg.sender == _sender, "TLT: Unauthorized");</span></span><br><span class="line">    <span class="comment">//    </span></span><br><span class="line">    <span class="comment">//    IStandardCoin coin = IStandardCoin(coinContract);</span></span><br><span class="line">    <span class="comment">//    uint256 amount = msg.value;</span></span><br><span class="line">    <span class="comment">//    coin.transfer(address(this), amount);</span></span><br><span class="line">    <span class="comment">//    emit CoinDeposit(amount);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">withdrawCoin</span><span class="params">(address coinContract)</span> external </span>&#123;</span><br><span class="line">        <span class="comment">// Alice will deposit coins to this contract through the contract</span></span><br><span class="line">        <span class="comment">// Bob can withdraw after the deadline by passing the coin contract address</span></span><br><span class="line">        require(msg.sender == _receiver, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        require(block.timestamp &gt;= _unlockAfter, <span class="string">"TLT: Timelock still active"</span>);</span><br><span class="line"></span><br><span class="line">        IStandardCoin coin = IStandardCoin(coinContract);</span><br><span class="line">        uint256 amount = coin.balanceOf(address(<span class="keyword">this</span>));</span><br><span class="line">        coin.<span class="built_in">transfer</span>(_receiver, amount);</span><br><span class="line">        <span class="function">emit <span class="title">CoinWithdraw</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Homework-of-Lecture-5"><a href="#Homework-of-Lecture-5" class="headerlink" title="Homework of Lecture 5"></a>Homework of Lecture 5</h1><blockquote>
<p><a href="https://forum.conflux.fun/t/topic/3456" target="_blank" rel="noopener external nofollow noreferrer">Lecture 5 - Homework &amp; Resources</a></p>
<blockquote>
<p>Homework is done by a group.</p>
</blockquote>
</blockquote>
<h2 id="3-1-Understanding-the-lecture"><a href="#3-1-Understanding-the-lecture" class="headerlink" title="3.1 Understanding the lecture"></a>3.1 Understanding the lecture</h2><p>1.a) Describe some advantages of conforming to a token standard like ERC-20 or IStandardToken in a few sentences.</p>
<blockquote>
<p><i>Conforming to a token standard ensures <strong>interoperability</strong> between our token and other tokens in the token standard network. This makes buying and trading our tokens easier for end users as well as investors, increasing the appeal of our token.</i></p>
<p><i>We can also benefit from <strong>unified efforts at improving the security</strong> of our token standard. The more networks that share the same token standard, the more stakeholders concerned with the token security, the more research is done to improve the token standard security.</i></p>
</blockquote>
<p>1.b) Describe the purpose of the TimeLockedTransfer contract in a few sentences.</p>
<blockquote>
<p><i>The TimeLockedTransfer contract allows us to <strong>set a time for the contract execution</strong>. This means that even if all conditions are already fulfilled by a certain time, the contract will not, or cannot, be executed until the prescribed time arrives.It can be used for <strong>scheduled transfers</strong> or <strong>limiting contract accessibility</strong>.</i></p>
<p><i>If one can not withdraw his profit immediately, one might wanna make sure that his customers won’t come back asking for a refund, which allows the sender to <strong>cancel the transfer before the specified deadline</strong>.</i></p>
</blockquote>
<h2 id="3-2-Trying-the-lecture-code"><a href="#3-2-Trying-the-lecture-code" class="headerlink" title="3.2 Trying the lecture code"></a>3.2 Trying the lecture code</h2><p>Download the project (<a href="http://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-5.zip" target="_blank" rel="noopener external nofollow noreferrer">github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-5.zip 15</a>) and import it into Conflux Studio.</p>
<p>In this problem, you will have to deploy three smart contracts on your <strong>local development network</strong>.</p>
<p>First, deploy a <strong>fixed-supply</strong> standard coin with the name “CoinA”. Then, deploy a second instance with the name “CoinB”.</p>
<blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106231734404.png" class="" title="contracts">
<p>CoinA: 0x8ad093411fb99e82d35c6adfe494821e3d478a70</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106221649667.png" class="" title="CoinA">
<p>CoinB: 0x824eebd198b057a4638842247b0a788e8888ef49</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106223136829.png" class="" title="CoinB">
</blockquote>
<p>Next, deploy an instance of the TimeLockedTransfer contract. Set the unlock time to something greater than 5 minutes.</p>
<blockquote>
<p>TimeLockedTransfer: (time = 301 s &gt; 5 min)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106231645734.png" class="" title="TimeLockedTransfer">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234806332.png" class="" title="detail">
</blockquote>
<p>Send 17 CFX, 22 CoinA, and 12 CoinB to the transfer contract.</p>
<blockquote>
<p>Send 17 CFX:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106231922911.png" class="" title="Send 17 CFX">
<p>Send 22 CoinA: (Through contract “CoinA”)</p>
<blockquote>
<p>send it to the TimeLockedTransfer contract address.</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106233822291.png" class="" title="Send 22 CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234706086.png" class="" title="detail">
<p>Send 12 CoinB: (Through contract “CoinB”)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106233800792.png" class="" title="Send 12 CoinB">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234728598.png" class="" title="detail">
</blockquote>
<p>After the deadline, withdraw all these tokens from the transfer contract.</p>
<blockquote>
<p>withdraw CFX:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234113850.png" class="" title="withdraw CFX">
<blockquote>
<p>after:</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234137147.png" class="" title="change">
<p>withdraw CoinA:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234418328.png" class="" title="withdraw CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234505423.png" class="" title="coinContract">
<p>withdraw CoinB:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234544548.png" class="" title="withdraw CoinB">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234615735.png" class="" title="coinContract">
<blockquote>
<p>after:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201106234306249.png" class="" title="withdraw">
</blockquote>
</blockquote>
<p>Document the process using screenshots and a short description of each step.</p>
<h2 id="1-Transfer-Factory-OPTIONAL"><a href="#1-Transfer-Factory-OPTIONAL" class="headerlink" title="+1. Transfer Factory [OPTIONAL]"></a>+1. Transfer Factory [OPTIONAL]</h2><p>Look at the file TransferFactory.sol. Try to understand what it does and explain it using your own words.</p>
<p>Show us how to deploy and use this contract.</p>
<blockquote>
<p>It creates and maintains a list of “TimeLockedTransfer” contracts.</p>
<p>Each time the function “create” is called, a new “TimeLockedTransfer” contract is deployed.</p>
<p>Deploy: <code>0x833791606cc08d5e4f5fd9a2d6953faff6c0c494</code></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000207723.png" class="" title="deploy">
<p>Create: (3 times)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000248108.png" class="" title="create1">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000336701.png" class="" title="para1">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000714298.png" class="" title="create2">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000727118.png" class="" title="para2">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000610545.png" class="" title="create3">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107000640270.png" class="" title="para3">
<p>And we can see those 3 contract infos: (saved in the list called “transfers”)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107001116958.png" class="" title="infos">
<p>BUT these tranfers doesn’t work like I expected, and all the contract addresses are invalid.</p>
</blockquote>
<h2 id="1-Cancel-transfer-OPTIONAL"><a href="#1-Cancel-transfer-OPTIONAL" class="headerlink" title="+1. Cancel transfer [OPTIONAL]"></a>+1. Cancel transfer [OPTIONAL]</h2><p>Modify TimeLockedTransfer.sol in a way that allows the sender to cancel the transfer before the specified deadline.</p>
<p>Provide a way for the sender to re-aquire all their tokens from the transfer contract after cancelling it.</p>
<blockquote>
<p>Cancel test:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107014651439.png" class="" title="cancel">
<p>The main source code is as follows: (including several changes in other files not showing here)</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0-or-later</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./IStandardCoin.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract TimeLockedTransfer &#123;</span><br><span class="line">    address _sender;</span><br><span class="line">    address _receiver;</span><br><span class="line">    address [] <span class="keyword">public</span> contracts;</span><br><span class="line">    uint256 _unlockAfter; <span class="comment">// point in time</span></span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">CFXDeposit</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CFXWithdraw</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CoinDeposit</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">CoinWithdraw</span><span class="params">(uint256 amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">Cancel</span><span class="params">(uint256 number)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(address sender, address receiver, uint256 lockTimeSec) &#123;</span><br><span class="line">        _sender = sender;</span><br><span class="line">        _receiver = receiver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// current time: `block.timestamp` (`now` in older versions)</span></span><br><span class="line">        _unlockAfter = block.timestamp + lockTimeSec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">balance</span><span class="params">()</span> external view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(<span class="keyword">this</span>).balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">depositCFX</span><span class="params">()</span> external payable </span>&#123;</span><br><span class="line">        require(msg.sender == _sender, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        uint256 amount = msg.value;</span><br><span class="line">        <span class="function">emit <span class="title">CFXDeposit</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">withdrawCFX</span><span class="params">()</span> external </span>&#123;</span><br><span class="line">        require(msg.sender == _receiver, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        require(block.timestamp &gt;= _unlockAfter, <span class="string">"TLT: Timelock still active"</span>);</span><br><span class="line">        uint256 amount = address(<span class="keyword">this</span>).balance;</span><br><span class="line">        msg.sender.<span class="built_in">transfer</span>(amount);</span><br><span class="line">        <span class="function">emit <span class="title">CFXWithdraw</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">depositCoin</span><span class="params">(address coinContract)</span> external payable </span>&#123;</span><br><span class="line">        require(msg.sender == _sender, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        </span><br><span class="line">        contracts.push(coinContract);</span><br><span class="line"></span><br><span class="line">        IStandardCoin coin = IStandardCoin(coinContract);</span><br><span class="line">        uint256 amount = (uint256)(msg.value / <span class="number">1000000000000000000</span>);</span><br><span class="line">        coin.transfer2(msg.sender, address(<span class="keyword">this</span>), amount);</span><br><span class="line">        <span class="function">emit <span class="title">CoinDeposit</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">withdrawCoin</span><span class="params">(address coinContract)</span> external </span>&#123;</span><br><span class="line">        <span class="comment">// Alice will deposit coins to this contract through the contract</span></span><br><span class="line">        <span class="comment">// Bob can withdraw after the deadline by passing the coin contract address</span></span><br><span class="line">        require(msg.sender == _receiver, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        require(block.timestamp &gt;= _unlockAfter, <span class="string">"TLT: Timelock still active"</span>);</span><br><span class="line"></span><br><span class="line">        IStandardCoin coin = IStandardCoin(coinContract);</span><br><span class="line">        uint256 amount = coin.balanceOf(address(<span class="keyword">this</span>));</span><br><span class="line">        coin.<span class="built_in">transfer</span>(msg.sender, amount);</span><br><span class="line">        <span class="function">emit <span class="title">CoinWithdraw</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">cancel</span><span class="params">()</span> external</span>&#123;</span><br><span class="line">        require(msg.sender == _sender, <span class="string">"TLT: Unauthorized"</span>);</span><br><span class="line">        require(block.timestamp &lt; _unlockAfter, <span class="string">"TLT: Timelock is no longer active"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cancel CFX</span></span><br><span class="line">        uint256 amount = address(<span class="keyword">this</span>).balance;</span><br><span class="line">        msg.sender.<span class="built_in">transfer</span>(amount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cancel other coins</span></span><br><span class="line">        <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; contracts.length; i = i + <span class="number">1</span>)&#123;</span><br><span class="line">            address coinContract = contracts[i];</span><br><span class="line">            IStandardCoin coin = IStandardCoin(coinContract);</span><br><span class="line">            amount = coin.balanceOf(address(<span class="keyword">this</span>));</span><br><span class="line">            coin.<span class="built_in">transfer</span>(msg.sender, amount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">emit <span class="title">Cancel</span><span class="params">(amount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>A more step by step demo:</p>
<p>(1) Deploy it with 10 mins delay:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015032551.png" class="" title="deploy">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015144464.png" class="" title="contract">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015159377.png" class="" title="para">
<p>(2) check the CoinA(<code>2317</code>) and CoinB(<code>1234</code>):</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015306819.png" class="" title="CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015323150.png" class="" title="CoinB">
<p>(3) send CFX(<code>11</code>), CoinA(<code>12</code>), CoinB(<code>13</code>):</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015430139.png" class="" title="CFX">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015526840.png" class="" title="CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015510016.png" class="" title="CoinB">
<p>(4) Check CFX(<code>11</code>), the CoinA(<code>2317</code> - <code>12</code> = <code>2305</code>) and CoinB(<code>1234</code> - <code>13</code> = <code>1221</code>):</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015647940.png" class="" title="CFX">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015705803.png" class="" title="CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015720588.png" class="" title="CoinB">
<p>(5) <strong><font color=red>cancel</font></strong>:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107015925069.png" class="" title="cancel">
<p>CFX(<code>0</code>), CoinA(<code>2317</code>) and CoinB(<code>1234</code>) <strong>again</strong>:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107020002607.png" class="" title="CFX">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107020116644.png" class="" title="CoinA">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107020132737.png" class="" title="CoinB">
</blockquote>
<h1 id="Lecture-6-Gas-and-Gas-Sponsorship"><a href="#Lecture-6-Gas-and-Gas-Sponsorship" class="headerlink" title="Lecture 6 - Gas and Gas Sponsorship"></a>Lecture 6 - Gas and Gas Sponsorship</h1><h2 id="transaction-fee-交易费"><a href="#transaction-fee-交易费" class="headerlink" title="transaction fee 交易费"></a>transaction fee 交易费</h2><h3 id="Bitcoin-比特币"><a href="#Bitcoin-比特币" class="headerlink" title="Bitcoin 比特币"></a>Bitcoin 比特币</h3><p>比特币最大的创新在于系统机制的设计（incentive alignment）。</p>
<h4 id="Miner-Income-矿工收益"><a href="#Miner-Income-矿工收益" class="headerlink" title="Miner Income 矿工收益"></a>Miner Income 矿工收益</h4><p>miners make money by:</p>
<ul>
<li>processing transactions (<strong>transaction fee</strong>) </li>
<li>creating blocks (<strong>block reward</strong>)</li>
</ul>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107022334908.png" class="" title="example">
<blockquote>
<p>如上图，1 coin 作为transaction fee变成了矿工的收入。</p>
</blockquote>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201107022434198.png" class="" title="miner income">
<h4 id="Incentive-Alignment-激励措施"><a href="#Incentive-Alignment-激励措施" class="headerlink" title="Incentive Alignment 激励措施"></a>Incentive Alignment 激励措施</h4><p>一个预先定义好的协议：</p>
<ul>
<li><strong><font color=blue>反向激励</font></strong>：if you deviate from the rules, you will lose money</li>
<li><strong><font color=red>正向激励</font></strong>：instead of attacking the system, you can earn more moneyby actually participating (as a miner)<ul>
<li>理性的参与者，将会接受正向激励</li>
</ul>
</li>
</ul>
<blockquote>
<p>this is the reason a native currency is necessary forpermissionless(无条件的) blockchains like Bitcoin and Conflux</p>
</blockquote>
<h4 id="transaction-fee-as-an-auction-拍卖"><a href="#transaction-fee-as-an-auction-拍卖" class="headerlink" title="transaction fee as an auction 拍卖"></a>transaction fee as an auction 拍卖</h4><p>每个区块内只能储存有限笔交易，因此矿工倾向于将交易费出价更高的交易打包进区块里面。</p>
<p>愿意给出的交易费越高，你的交易将会更快地得到处理。</p>
<h4 id="Bitcoin机制中的漏洞"><a href="#Bitcoin机制中的漏洞" class="headerlink" title="Bitcoin机制中的漏洞"></a>Bitcoin机制中的漏洞</h4><p>自私采矿（selfish mining），这项技术可让矿工赚的钱超过他本应该拿到的合理回报，从而损害系统的公平性。</p>
<p>区块链依赖于信息的快速广泛传播，但是如果矿工手握某些高额交易费的交易信息，那么他可能倾向于把它留在自己手里，获取这笔更高的手续费。</p>
<p>比特币还会形成一定的集中化系统，因为挖矿奖励太稀有了，大家倾向于聚集到矿池中获得更稳定的回报。这在长期来看对比特币系统是一种不利因素。</p>
<h3 id="Ethereum-以太坊"><a href="#Ethereum-以太坊" class="headerlink" title="Ethereum 以太坊"></a>Ethereum 以太坊</h3><p>以太坊和比特币最大的不同在于，引入了<strong>智能合约</strong>。</p>
<p>但是，智能合约的调用消耗是<strong>非常不确定</strong>的：</p>
<ul>
<li>Execution cost: 运行时间可能达到上百万个循环</li>
<li>Storage cost: 可能最大需要额外的上百万的空间消耗</li>
</ul>
<h4 id="Halting-Problem-停机问题"><a href="#Halting-Problem-停机问题" class="headerlink" title="Halting Problem 停机问题"></a>Halting Problem 停机问题</h4><p><strong><font color=red>halting problem</font></strong>(<strong>停机问题</strong>): just by looking at the transaction, you cannot decide if it will ever finish running</p>
<ul>
<li><strong>limit the <font color=blue>language</font></strong> so that you cannot even write such code (Bitcoin)<ul>
<li>this works but might severely limit the types of applications you are able to express</li>
</ul>
</li>
<li>run for a <strong>fixed <font color=blue>duration</font></strong> then terminate (Hyperledger)<ul>
<li>this might harm determinism: code that timeouts on one machine might terminate on another, any they will be unable to reach consensus</li>
</ul>
</li>
<li>terminate after a <strong>certain number of <font color=blue>steps</font></strong> (a certain amount of computation) has been performed<ul>
<li>you pay for each computational unit so that miners get properly compensated</li>
</ul>
</li>
</ul>
<h4 id="Gas"><a href="#Gas" class="headerlink" title="Gas"></a><font color=deepskyblue>Gas</font></h4><blockquote>
<p>Ethereum: “<strong>pay-per-computational-step</strong>” model</p>
</blockquote>
<p>instead of pricing instructions directly in ETH (the price of which fluctuates), we use another metric: <strong><font color=red>GAS</font></strong></p>
<p>each <strong>EVM instruction</strong> has a predefined GAS cost that is independent of the value of ETH</p>
<p><strong>the gas cost of a transaction is the sum of the cost for each instruction executed</strong></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201109225608055.png" class="" title="INSTRUCTION GAS COSTS">
<blockquote>
<p>source: <a href="https://github.com/djrtwo/evm-opcode-gas-costs/blob/master/opcode-gas-costs_EIP-150_revision-1e18248_2017-04-12.csv" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/djrtwo/evm-opcode-gas-costs/blob/master/opcode-gas-costs_EIP-150_revision-1e18248_2017-04-12.csv</a></p>
</blockquote>
<h4 id="Gas-Limit"><a href="#Gas-Limit" class="headerlink" title="Gas Limit"></a><font color=aqua>Gas Limit</font></h4><p>when you send a transaction, you specify a <strong><font color=red>gas limit</font></strong>: <strong>the maximum amount of GAS you are willing to spend</strong></p>
<ul>
<li>if the execution reaches this limit before finishing, the transaction is reverted and you pay the corresponding fee</li>
<li>if the gas used by the execution is below the limit, the remaining gas is refunded to your account</li>
</ul>
<blockquote>
<p>this basically solves the halting problem: you can write infinite loops but you’ll have to pay for them</p>
</blockquote>
<h4 id="Gas-Price"><a href="#Gas-Price" class="headerlink" title="Gas Price"></a><font color=aqua>Gas Price</font></h4><p>when you send a transaction, you specify a <strong><font color=red>gas price</font></strong>: <strong>the amount of ETH you’re willing to pay per gas</strong></p>
<p>you are free to choose what gas price to set, similarly to Bitcoin where you can set the transaction fee freely</p>
<p>the miner is free to choose which transactions to include. it is likely to choose transactions with higher gas pric</p>
<blockquote>
<p>这里也会变成类似比特币的拍卖系统</p>
</blockquote>
<hr>
<p><strong>Example</strong>:</p>
<blockquote>
<p>Let’s say you can a transaction with</p>
<ul>
<li>gas limit: 50000</li>
<li>gas price: 0.00000008 Ether (80 Gwei)</li>
</ul>
<p>you will have to make an up-front(预付) payment of</p>
<ul>
<li>50000 x 0.00000008 = 0.004 ETH</li>
</ul>
<p>if execution uses 41172 gas, after refund you’ll effectively pay</p>
<ul>
<li>41172 x 0.00000008 = 0.00329376 ETH</li>
</ul>
</blockquote>
<h4 id="Example-Contract"><a href="#Example-Contract" class="headerlink" title="Example Contract"></a>Example Contract</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract Test &#123;</span><br><span class="line">    uint256 num_a = <span class="number">0</span>;</span><br><span class="line">    uint256 num_b = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">increment</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        num_a += <span class="number">1</span>;</span><br><span class="line">        num_b += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// incrementing is essentially equivalent to:</span></span><br><span class="line">        <span class="comment">// uint256 current_value = number;</span></span><br><span class="line">        <span class="comment">// uint256 new_value = current_value + 1;</span></span><br><span class="line">        <span class="comment">// number = new_value;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// solc compiles it like this:</span></span><br><span class="line">        <span class="comment">// SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP1</span></span><br><span class="line">        <span class="comment">// PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// we will simply treat it like this:</span></span><br><span class="line">        <span class="comment">// SLOAD ADD SSTORE SLOAD ADD SSTORE</span></span><br><span class="line">        <span class="comment">// gas cost: 2 x (3 + 200 + 5000) = 10406 GAS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>what happens if we provide a gas limit of <strong>5203 GAS</strong>? (不足的GAS)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract Test &#123;</span><br><span class="line">    uint256 num_a = <span class="number">0</span>;</span><br><span class="line">    uint256 num_b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">increment</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        num_a += <span class="number">1</span>; <span class="comment">// this succeeds</span></span><br><span class="line">        			<span class="comment">// &lt;- we run out of gas at this point</span></span><br><span class="line">        num_b += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// the whole transaction is reverted</span></span><br><span class="line">        <span class="comment">// neither num_a nor num_b is updated</span></span><br><span class="line">        <span class="comment">// the sender pays for the executed 5203 GAS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>what happens if we provide a gas limit of 12000 GAS? (足够的GAS)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract Test &#123;</span><br><span class="line">    uint256 num_a = <span class="number">0</span>;</span><br><span class="line">    uint256 num_b = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">increment</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        num_a += <span class="number">1</span>; <span class="comment">// this succeeds</span></span><br><span class="line">        num_b += <span class="number">1</span>; <span class="comment">// this also succeeds</span></span><br><span class="line">        			<span class="comment">// we finish the execution</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// the whole transaction succeeds</span></span><br><span class="line">        <span class="comment">// both num_a and num_b will be updated</span></span><br><span class="line">        <span class="comment">// the sender pays for the executed 10406 GAS, 1594 is refunded</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<p><strong>Why call it “GAS”</strong>? （<em>Why the gas analogy(类比)?</em>）</p>
<ul>
<li>gasoline is what really moves your car, just as it moves the execution of smart contracts</li>
<li>your car’s gas consumption is roughly static, while the price of gasoline changes</li>
<li>you could try stuffing dollar bills into the fuel tank of your car, but instead you buy gasoline using dollars, and use that to run it</li>
</ul>
<h3 id="Conflux"><a href="#Conflux" class="headerlink" title="Conflux"></a>Conflux</h3><p>Conflux inherited the same fee mechanism from Ethereum, with <strong>a few changes</strong>:</p>
<ul>
<li>limited gas refund</li>
<li>separate payment for execution and storage</li>
<li>gas can be sponsored（代付机制）</li>
</ul>
<h4 id="Limited-Gas-Refund-有限回偿"><a href="#Limited-Gas-Refund-有限回偿" class="headerlink" title="Limited Gas Refund 有限回偿"></a>Limited Gas Refund 有限回偿</h4><p>the cost of a contract call might change, depending on when you call it. consider the following example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract MaybeExpensive &#123;</span><br><span class="line">    uint256 num = <span class="number">0</span>;</span><br><span class="line">    <span class="function">event <span class="title">E</span><span class="params">(uint8 n)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">increment</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123; num += <span class="number">1</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">foo</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (uint8 ii = <span class="number">0</span>; ii &lt; <span class="number">1000</span>; ii++) &#123;</span><br><span class="line">                <span class="function">emit <span class="title">E</span><span class="params">(ii)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>triggering foo() might do almost nothing, or it might also emit 1000 events, depending on the current value of num</p>
</blockquote>
<ul>
<li>in Conflux, miners cannot know for sure the state on whichthe transaction is executed<ul>
<li>this makes it <strong>impossible to accurately estimate the profits of including certain transactions</strong></li>
</ul>
</li>
<li>to make this estimation easier, <strong><font color=red>at most 1/4 of the whole gas is refunded</font></strong><ul>
<li>e.g. if gas limit is 10000 and the transaction execution used 6000 gas, the account will still be charged for 7500</li>
</ul>
</li>
</ul>
<p>这是对矿工收益的权衡之举。</p>
<h4 id="Pay-Separately-for-Storage-存储抵押费"><a href="#Pay-Separately-for-Storage-存储抵押费" class="headerlink" title="Pay Separately for Storage 存储抵押费"></a>Pay Separately for Storage 存储抵押费</h4><p><strong>in Ethereum paying for storage is a one-time fee</strong> (gas for SSTORE), even though <strong><font color=blue>miners might have to store it forever</font></strong>.</p>
<p>consider this example: that 13 has to be stored on each machine maintaining the blockchain.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract Storage &#123;</span><br><span class="line">    mapping (address =&gt; uint256) data;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">    	data[msg.sender] = <span class="number">13</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in Conflux, you need to deposit CFX for storage entries.<br>this deposit is called <strong>storage collateral</strong>.</p>
<blockquote>
<p>miners earn interest on the collateralized storage</p>
</blockquote>
<p>if someone deletes or overwrites your entry, you get back your collateral</p>
<hr>
<hr>
<hr>
<p>so what you will pay is</p>
<center><strong>(<i><font color=blue>gas_used</font></i> x <i><font color=blue>gas_price</font></i>) + (<i><font color=green>1/16 CFX</font></i> x <i><font color=green>storage_collateralized</font></i>)</strong></center>

<p>… minus the refund of at most <strong><i><font color=red>1/4</font></i> x <i><font color=red>gas_used</font></i> x <i><font color=red>gas_price</font></i></strong></p>
<h2 id="transaction-sponsorship"><a href="#transaction-sponsorship" class="headerlink" title="transaction sponsorship"></a>transaction sponsorship</h2><h3 id="The-Problem-with-Gas"><a href="#The-Problem-with-Gas" class="headerlink" title="The Problem with Gas"></a>The Problem with Gas</h3><p>Ethereum dapps: high entry barrier</p>
<ul>
<li>get a wallet, acquire some ETH, …</li>
</ul>
<p>are people willing to pay for each transaction?</p>
<ul>
<li>web 2.0: you have to pay for your server’s uptime but you don’t directly push this onto your customers; you have other revenue streams</li>
</ul>
<h3 id="Sponsorship-Mechanism-in-Conflux"><a href="#Sponsorship-Mechanism-in-Conflux" class="headerlink" title="Sponsorship Mechanism in Conflux"></a>Sponsorship Mechanism in Conflux</h3><p>某个人可以选择为某个智能合约的所有交易代付手续费。从而降低人们参与智能合约的门槛。</p>
<blockquote>
<p>someone can choose to sponsor transactions to a smart contract, i.e. pay on the sender’s behalf</p>
</blockquote>
<p>example use case: <strong>MoonSwap</strong></p>
<ul>
<li><strong>UniSwap</strong>: if you swap ETH for USDT, fees are around $4.1 at the time of writing</li>
<li><strong>MoonSwap</strong>: would cost $0.4 at current price but in practice it’s $0 because the transaction is sponsored</li>
</ul>
<h3 id="代付白名单控制"><a href="#代付白名单控制" class="headerlink" title="代付白名单控制"></a>代付白名单控制</h3><p>there is a <strong>built-in contract</strong>(魔术合约，系统内置，由Conflux提供) called <strong>SponsorWhitelistControl</strong><br>address: <strong><code>0x0888000000000000000000000000000000000001</code></strong></p>
<p>sponsor calls <code>setSponsorForGas(…)</code> to <strong>become the sponsor of a smart contract</strong>. they will also send some CFX along that will be used to cover the gas costs.</p>
<p>contract calls <code>addPrivilege(…)</code> to “whitelist” accounts<br>(or use 0x0000000000000000000000000000000000000000 (含义：为所有人代付) )</p>
<hr>
<p>let’s say Alice deploys the following contract for her dapp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">contract MyCoolDapp &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        address addr = <span class="number">0x0888000000000000000000000000000000000001</span>;  <span class="comment">// 白名单合约地址</span></span><br><span class="line">        SponsorWhitelistControl swc = SponsorWhitelistControl(addr);</span><br><span class="line">        </span><br><span class="line">        address[] memory a = <span class="keyword">new</span> address[](<span class="number">1</span>);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">0x0000000000000000000000000000000000000000</span>;  <span class="comment">// 代付所有人</span></span><br><span class="line">        swc.add_privilege(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>when Bob calls <code>doSomething()</code> , he has to cover gas and storage</p>
</blockquote>
<p>at some point, Alice <strong>sends 10 CFX to the SWC contract</strong> through this call:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">swc.setSponsorForGas(</span><br><span class="line">    <span class="number">0x8caddbc9f0360b6b96e32fc0a37ffa275ee139f6</span>, <span class="comment">// contract</span></span><br><span class="line">    <span class="number">100000000000000000</span>, <span class="comment">// upper limit per transaction: 0.1 CFX</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>upper_bound is in Drip but transfer amount is in CFX</p>
</blockquote>
<p>she will most likely do this using the JavaScript SDK, or directly from Conflux Studio</p>
<p>this means that at least 100 transactions will be sponsored</p>
</blockquote>
<p>when Bob calls <code>doSomething()</code> again, he does not need to pay anymore</p>
<hr>
<h3 id="blockchain-applications-and-tools"><a href="#blockchain-applications-and-tools" class="headerlink" title="blockchain applications and tools"></a>blockchain applications and tools</h3><ul>
<li>通证 tokens (ERC-20货币通证, NFT非同质通证)<ul>
<li>stablecoin</li>
<li>tokenized art</li>
<li>tokenized real-world assets</li>
</ul>
</li>
<li>DeFi<ul>
<li>MoonDex 去中心化交易所</li>
<li>MoonSwap<ul>
<li>AMM（自动做市商）</li>
</ul>
</li>
</ul>
</li>
<li>ShuttleFlow 跨链映射协议<ul>
<li>a building block for DeFi applications</li>
<li>move tokens from other chains to Conflux</li>
<li>e.g. ETH -&gt; cETH, BTC -&gt; cBTC（资产的跨链转移）</li>
</ul>
</li>
<li>Oracles（预言机）<ul>
<li>allow your smart contract to interact with the world（安全地获取外界的信息）</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Resources-1"><a href="#Resources-1" class="headerlink" title="Resources"></a>Resources</h3><ul>
<li>ETH Gas Station<ul>
<li><a href="https://ethgasstation.info" target="_blank" rel="noopener external nofollow noreferrer">https://ethgasstation.info</a></li>
</ul>
</li>
<li>Bitcoin’s Underlying Incentives<ul>
<li><a href="https://queue.acm.org/detail.cfm?id=3168362" target="_blank" rel="noopener external nofollow noreferrer">https://queue.acm.org/detail.cfm?id=3168362</a></li>
</ul>
</li>
<li>Zohar et al. Redesigning bitcoin’s fee market. 2019.<ul>
<li><a href="https://arxiv.org/abs/1709.08881" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1709.08881</a></li>
</ul>
</li>
<li>Eyal, Sirer. Majority is not Enough: Bitcoin Mining is Vulnerable.<br>2013.<ul>
<li><a href="https://www.cs.cornell.edu/~ie53/publications/btcProcFC.pdf" target="_blank" rel="noopener external nofollow noreferrer">https://www.cs.cornell.edu/~ie53/publications/btcProcFC.pdf</a></li>
</ul>
</li>
<li>What is Ethereum Gas?<ul>
<li><a href="https://blockgeeks.com/guides/ethereum-gas" target="_blank" rel="noopener external nofollow noreferrer">https://blockgeeks.com/guides/ethereum-gas</a></li>
</ul>
</li>
<li>Staking &amp; Collateral For Storage On Conflux Network<ul>
<li><a href="https://medium.com/conflux-network/conflux-economic-model-staking-collateral-for-storage-on-conflux-network-cb4c8c150e3" target="_blank" rel="noopener external nofollow noreferrer">https://medium.com/conflux-network/conflux-economic-model-staking-collateral-for-storage-on-conflux-network-cb4c8c150e3</a></li>
</ul>
</li>
<li>Block Reward Components Under the Network’s Mining Incentive Model<ul>
<li><a href="https://medium.com/conflux-network/conflux-networks-economic-model-block-reward-components-under-the-network-s-mining-incentive-ceadd8f8408f" target="_blank" rel="noopener external nofollow noreferrer">https://medium.com/conflux-network/conflux-networks-economic-model-block-reward-components-under-the-network-s-mining-incentive-ceadd8f8408f</a></li>
</ul>
</li>
</ul>
<h1 id="Homework-of-Lecture-6"><a href="#Homework-of-Lecture-6" class="headerlink" title="Homework of Lecture 6"></a>Homework of Lecture 6</h1><blockquote>
<p><a href="https://forum.conflux.fun/t/topic/3741" target="_blank" rel="noopener external nofollow noreferrer">Lecture 6 - Homework &amp; Resources</a></p>
<blockquote>
<p>Homework is done by a group.</p>
</blockquote>
</blockquote>
<h2 id="1-Answer-the-following-questions-in-a-few-sentences-using-your-own-words"><a href="#1-Answer-the-following-questions-in-a-few-sentences-using-your-own-words" class="headerlink" title="1. Answer the following questions in a few sentences using your own words."></a>1. Answer the following questions in a few sentences using your own words.</h2><p>1.a) Why does Ethereum price EVM instructions in GAS instead of using ETH directly?</p>
<blockquote>
<p><em>GAS refers to the computational power required from miners to validate the transaction or smart contract. ETH is the currency used to compensate miners for the GAS required to do the computational work. GAS consumption values are relatively static, while the price of ETH is dynamic and changes overtime.</em> </p>
<p><em>Charging instructions in GAS thus makes it easier for miners to measure the <strong>cost-benefits of a computation</strong></em> <em>and planning their work.</em></p>
</blockquote>
<p>1.b) What is the goal of the gas sponsorship mechanism introduced in Conflux?</p>
<blockquote>
<p><em>Transactions costs on the blockchain are traditionally paid by the user, who benefits from the blockchain network feature.</em> </p>
<p><em>However, as with the case in any other economy, costs are always</em> <strong><em>pain points</em></strong> <em>and discourages adoption. Adoption is critical for building an ecosystem which value increases from network externalities, which precisely the case with most blockchain networks. In addition,</em> <strong><em>blockchain is not necessarily used to facilitate transactions</em></strong>, <em>so there is the possibility that users of the network do not have any deposited amount with which to pay the transaction fee.</em></p>
<p><em>The gas sponsorship mechanism therefore 1) removes a barrier to adoption of the network by new users and 2) increases the application scenarios / flexibility of the smart contract.</em></p>
</blockquote>
<p>1.c) What steps should a developer take so that users of their smart contract do not have to pay for gas?</p>
<blockquote>
<p><em>Implement the Gas Sponsorship Mechanism: allow anyone willing to pay to become a “Sponsor”, donating funds to any contract to pay for the transactions of other whitelisted users (usually new ones with 0 account balance).</em></p>
<p><em>Several parameters to include:</em></p>
<ol>
<li><em>Sponsor - records the account providing sponsorship funds for the smart contract</em></li>
<li><em>Sponsor balance - records the current balance of the sponsorship funds for the smart contract</em></li>
<li><em>Sponsor limit per transaction - sets an upper limit of funds for individual transactions</em></li>
<li><em>Whitelist - records, or limits, the accounts that can be sponsored/funded by the smart contract</em></li>
</ol>
</blockquote>
<h2 id="1-Gas-cost-of-token-transfers-OPTIONAL"><a href="#1-Gas-cost-of-token-transfers-OPTIONAL" class="headerlink" title="+1. Gas cost of token transfers [OPTIONAL]"></a>+1. Gas cost of token transfers [OPTIONAL]</h2><p>Download lecture-5’s CourseToken project (<a href="http://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-5.zip" target="_blank" rel="noopener external nofollow noreferrer">github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-5.zip 2</a>) or use your own version.</p>
<p>Send some tokens to a new address. How much were you charged for this transfer? Try to explain why.</p>
<p>How does the fee change if you send some more tokens to the same address again?</p>
<blockquote>
<p>Create a new “CourseCoin” contract:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110221640108.png" class="" title="create">
<p><strong>Send some tokens to a new address</strong>:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110223816308.png" class="" title="sending tests">
<ul>
<li><strong>How much were you charged for this transfer?</strong><ul>
<li>sent <code>10</code>, “gasUsed”: “<strong><font color=red>35819</font></strong>“ with gas limit “1000000”, and “gasPrice”: 100</li>
<li><del>Before Vel has CFX: <strong><code>34363.0111445711547907 CFX</code></strong></del><ul>
<li><del>SUDDENLY I realize that “Vel” is mining to gain more CFXs. So it won’t work this way.</del></li>
</ul>
</li>
<li>Created another new “CourseCoin” contract with “Calvin”<ul>
<li>Before Calvin has CFX: <strong><code>9997.756835937425</code> CFX</strong></li>
<li>After Calvin has CFX:    <strong><code>9997.69433593735</code> CFX</strong></li>
<li>So, total cost is: <strong><code>0.06250000007457857</code> CFX</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Try to explain why.</strong></p>
<p>We have the calculation form for this as follows:</p>
<blockquote>
<p><em>so what you will pay is</em></p>
<center><strong>(<i><font color=blue>gas_used</font></i> x <i><font color=blue>gas_price</font></i>) + (<i><font color=green>1/16 CFX</font></i> x <i><font color=green>storage_collateralized</font></i>)</strong></center>

<p><em>… minus the refund of at mos</em>t <strong><i><font color=red>1/4</font></i> x <i><font color=red>gas_used</font></i> x <i><font color=red>gas_price</font></i></strong></p>
</blockquote>
<ul>
<li><i><font color=blue>gas_used</font></i> x <i><font color=blue>gas_price</font></i> = <code>35819 * 100</code> = 3581900 Drips = 3.5819e-12 CFX (<strong>In theory</strong>)<ul>
<li>But according to the refund policy:<ul>
<li><i><font color=blue>gas_used</font></i> x <i><font color=blue>gas_price</font></i> = <code>3/4 * 1000000 * 100</code> = 75000000 Drips = 7.5e-11 CFX</li>
</ul>
</li>
</ul>
</li>
<li>so we can deduce that:<ul>
<li><i><font color=green>1/16 CFX</font></i> x <i><font color=green>storage_collateralized</font></i> =  <strong><code>0.06250000007457857</code> CFX</strong> - 7.5e-11 CFX $\approx$ 0.0625 CFX</li>
<li>which also implies: <i><font color=green>storage_collateralized</font></i>  $\approx$ 1</li>
</ul>
</li>
</ul>
<blockquote>
<p>But still, the numbers doesn’t exactly match which is still remaining mystery.</p>
</blockquote>
<p><strong>How does the fee change if you send some more tokens to the same address again?</strong></p>
<ul>
<li>sent <code>1234</code>, gasUsed”: “<strong><font color=red>35883</font></strong>“</li>
<li>Calvin now has CFX:   <strong><code>9997.694335937275</code> CFX</strong></li>
<li>total cost is: <strong><code>0.000000000075</code> CFX</strong></li>
<li>It becomes <strong>significantly low</strong>. I think it’s because the first transaction include data storage initialization which is expensive (<strong><i><font color=green>1/16 CFX</font></i> x <i><font color=green>storage_collateralized</font></i></strong>).</li>
</ul>
</blockquote>
<h2 id="1-Sponsored-ticket-sale-OPTIONAL"><a href="#1-Sponsored-ticket-sale-OPTIONAL" class="headerlink" title="+1. Sponsored ticket sale [OPTIONAL]"></a>+1. Sponsored ticket sale [OPTIONAL]</h2><p>Download lecture-4’s Tickets project (<a href="http://github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip" target="_blank" rel="noopener external nofollow noreferrer">github.com/Thegaram/cfx-uma-resources/raw/master/cfx-lecture-4-tickets.zip</a>) or use your own version.</p>
<p>Change the contract so that people buying tickets through it <strong>do not have to pay any transaction fee</strong>.</p>
<blockquote>
<p>First, trying to find <code>SponsorWhitelistControl.sol</code>.</p>
<blockquote>
<p>The <code>import &quot;github.com/Conflux-Chain/conflux-rust/blob/master/internal_contract/contracts/SponsorWhitelistControl.sol&quot;;</code> doesn’t seem working now. Bad news.</p>
</blockquote>
<p>But going the website and copying the code is avaliable. And the version is changed. Function Callings are also different.</p>
<p>So I reimplement the <code>SponsorWhitelistControl.sol</code> to fit the demand.</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110233817335.png" class="" title="reimplement">
<p>Now we deploy the ticket contract, and there are few changes in the code:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110233941247.png" class="" title="changes">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110234019028.png" class="" title="deploy">
<blockquote>
<p>The ticket is priced as 15 CFX for each.</p>
</blockquote>
<p>“Leon” has 10000 CFX at first:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110234106465.png" class="" title="Leon balance">
<p>Leon buys 1 ticket:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110234242002.png" class="" title="Leon balance">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110234301936.png" class="" title="buy">
<p>Let’s say Jessica wants to sponsor the contract:</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201110234445503.png" class="" title="Jessica">
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111001414466.png" class="" title="sponsor">
<p>running into a serious trouble…</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111001212392.png" class="" title="failed">
<p>All the sponsor transactions are timeout and reverted, even the ones I directly send from the <code>0x0888000000000000000000000000000000000001</code> panel.</p>
<p>After some parameter adjustments, it worked.</p>
<p><strong>Calvin sponsored 101 CFX to the contract.</strong></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111181900247.png" class="" title="Calvin">
<p>Now we can try to buy some more tickets without any charges:</p>
<p>Leon has: <strong>9974.81249999985 CFX</strong></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111182622153.png" class="" title="Leon balance">
<p>Leon buys 2 tickets: (Each ticket is 5 CFX)</p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111182715084.png" class="" title="buy">
<p>Leon has: 9974.81249999985 CFX - 10 CFX =  <strong>9964.81249999985 CFX</strong></p>
<img data-src="/%E5%8C%97%E6%96%97UMA%E4%B8%93%E9%A1%B9/image-20201111182857195.png" class="" title="Leon balance">
<p>Indeed there is no transaction fee for Leon! We made it!</p>
</blockquote>
<h1 id="Lecture-7-DeFi-Reconstruction-and-Innovation-of-Finance"><a href="#Lecture-7-DeFi-Reconstruction-and-Innovation-of-Finance" class="headerlink" title="Lecture 7 - DeFi, Reconstruction and Innovation of Finance"></a>Lecture 7 - DeFi, Reconstruction and Innovation of Finance</h1><h1 id="Lecture-8-Blockchain-Story"><a href="#Lecture-8-Blockchain-Story" class="headerlink" title="Lecture 8 - Blockchain Story"></a>Lecture 8 - Blockchain Story</h1><h1 id="Final-Project"><a href="#Final-Project" class="headerlink" title="Final Project"></a>Final Project</h1><blockquote>
<p><a href="https://github.com/stellarkey/uma_bbnc_project" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/stellarkey/uma_bbnc_project</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>Conflux</tag>
      </tags>
  </entry>
  <entry>
    <title>912真题解析</title>
    <url>/912/</url>
    <content><![CDATA[<p>一个简单的912真题解析。<a id="more"></a></p>
<blockquote>
<p>本文亦发布在<a href="https://github.com/stellarkey/912_project" target="_blank" rel="noopener external nofollow noreferrer">912_project</a>中：<a href="https://github.com/stellarkey/912_project/blob/master/5%20%E7%9C%9F%E9%A2%98%E8%A7%A3%E6%9E%90/README.md" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>。</p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xuanxuanblingbling.github.io/life/study/2018/12/29/" target="_blank" rel="noopener external nofollow noreferrer">关于清华计算机专业基础综合（912）的复习</a></p>
<p><a href="https://blog.csdn.net/chr1991/article/details/64971113" target="_blank" rel="noopener external nofollow noreferrer">2017年清华大学计算机科学与技术系考研小结</a></p>
<p><a href="https://www.nowcoder.com/kaoyan/retest/1001" target="_blank" rel="noopener external nofollow noreferrer">T大在线编程题汇总</a></p>
<blockquote>
<p><em>本文推荐采用 <a href="https://typora.io/" target="_blank" rel="noopener external nofollow noreferrer">Typora</a> 进行编写 / 阅读。</em></p>
</blockquote>
<h1 id="考点整理"><a href="#考点整理" class="headerlink" title="考点整理"></a>考点整理</h1><blockquote>
<p><del>此处容易<strong><font color=red>过拟合</font></strong>。</del></p>
<p>小题1颗★，大题3颗★。</p>
</blockquote>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th style="text-align:left">2020</th>
<th style="text-align:left">2019</th>
<th style="text-align:left">2018</th>
<th style="text-align:left">2017</th>
<th>2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>BBST（红黑/AVL/Splay/B树）</td>
<td style="text-align:left">★★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★★★</td>
<td style="text-align:left">★★</td>
<td>★★</td>
</tr>
<tr>
<td>散列表</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td>★★★</td>
</tr>
<tr>
<td>BST遍历/PFS</td>
<td style="text-align:left">★★★★x2</td>
<td style="text-align:left">★★★★★★</td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★★★★</td>
<td>★★★×3</td>
</tr>
<tr>
<td>排序（冒/插/选/基/归/锦/败、CBA）</td>
<td style="text-align:left">★★★★</td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★★★</td>
<td>★★</td>
</tr>
<tr>
<td>串匹配（KMP/BM）</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>复杂度</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>编码树（Huffman/PFC）</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>RPN</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>减治</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★</td>
<td style="text-align:left"></td>
<td>★★★</td>
</tr>
<tr>
<td>Catalan</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td></td>
</tr>
<tr>
<td>堆（完全、左式堆）</td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left">★</td>
<td style="text-align:left">★★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>栈（调用栈、栈混洗）</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
<tr>
<td>Dijkstra算法</td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
<tr>
<td>跳转表</td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>二分、Fib查找</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★★★★★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>最小生成树（Prim）</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★★★</td>
</tr>
<tr>
<td>非法表达式</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">★</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td>逻辑地址</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td>★</td>
</tr>
</tbody>
</table>
</div>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>uCore代码</td>
<td>★★★</td>
<td style="text-align:center">★★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>虚/实地址(转换/扩展)</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>进程控制/系统调用</td>
<td>★★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>管程</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>belady</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>x86硬件</td>
<td>★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>信号量</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>死锁</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>线程</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>文件系统</td>
<td>★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>调度算法</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>僵尸/孤儿进程</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>中断</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
<tr>
<td>哲学家就餐</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>硬/软链接</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>stride算法</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>x86特权级</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>优先级反置</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>伙伴系统</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>自旋锁</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>动态分区算法</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAID</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<h2 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>流水线相关计算</td>
<td>★★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>流水线冲突</td>
<td>★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>浮点数表示</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache缺失/映射</td>
<td>★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAID</td>
<td>★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>补码表示</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>CPU指标(CPI/主频)</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>Cache相关计算</td>
<td>★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>指令的概念</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>异常处理/中断</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>虚拟内存</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>C语言</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>总线</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>显存带宽计算</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>RAM</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>冯诺依曼架构</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>时序/组合逻辑</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>海明码检错/纠错</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><div class="table-container">
<table>
<thead>
<tr>
<th>考点</th>
<th>2020</th>
<th style="text-align:center">2019</th>
<th style="text-align:center">2018</th>
<th style="text-align:center">2017</th>
<th style="text-align:center">2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP(拥塞/握手/报文等)</td>
<td>★★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>路由器计算</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
<td style="text-align:center">★★★</td>
</tr>
<tr>
<td>信道利用率</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>ARQ(停等/后退/选择)</td>
<td>★</td>
<td style="text-align:center">★</td>
<td style="text-align:center">★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>HTTP</td>
<td></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>网桥转发</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>ARP</td>
<td>★★★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>物理层设备</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>调制/解调</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>水平分裂</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>蜂窝</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>最小帧长</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>以太网</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>分组转发</td>
<td></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>OSI&amp;TCP/IP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>奈奎斯特定理</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>数据链路层概念</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>DNS</td>
<td>★</td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>SMTP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>SNMP</td>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">★</td>
</tr>
</tbody>
</table>
</div>
<h1 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h1><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><blockquote>
<p>关于2020的题目。。（<del>王道出了相关的题解</del>。</p>
</blockquote>
<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h4><h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>判断：$n^{logloglogn}=O(\lfloor logn\rfloor!)$</p>
<blockquote>
<p>令$t=logn$，则</p>
<script type="math/tex; mode=display">
\begin{split}
n^{logloglogn}=\left[{\color{red}{ {(2^t)}^{loglogt} } } \gg2^t\right] \,\,\,&{\color{blue}{ ?} }\,\,\,\,\,
\,\,\,\,\,\,\,O({\color{red}{ t!} })=O(\lfloor t\rfloor!)=O(\lfloor logn\rfloor!)\\
指数置换：{(2^{loglogt})}^{t}={(logt)}^t \,\,\,&{\color{blue}{ ?} }\,\,\,\,\,\,t!\\
取对数：\,\,\,\,\,\,\,tloglogt \,\,\,\,\,&{\color{blue}{?} }\,\,\,\,\,\,log(t!)=(0+log2+...+logt)\\
放缩：\,\,\,\,\,\,\,tloglogt \,\,\,\,\,&{\color{blue}{\ll} }\,\,\,0.5tlogt（凸函数放小为线性然后求和）\\
\Longrightarrow\,\,\,\,\,\,\,tloglogt\,\,\,\,\,&{\color{blue}{\ll} }\,\,\,  0.5tlogt<log(t!)\\
\Longrightarrow\,\,\,\,\,\,\,tloglogt\,\,\,\,\,&{\color{blue}{=} }\,\,\,  O(log(t!))
\end{split}</script><p><del>QAQ</del>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
<blockquote>
<p>如果没有阶乘号的话，有：$\forall \epsilon&gt;0, logn=O(n^{\epsilon})$。（细枝末节不影响复杂度）参见<em>习题解答-1-9</em>。</p>
<p>又有：$log1+log2+…+logn=log(n!)=\Theta(nlogn)\Longleftrightarrow n!=\Theta(n^n)$，参见<em>课件P52-对数级数</em>。</p>
<ul>
<li>由此可得到更简洁的证明方法：</li>
</ul>
<script type="math/tex; mode=display">
\begin{split}
n^{logloglogn}=\left[{\color{red}{ {(2^t)}^{loglogt} } } \gg2^t\right] \,\,\,&{\color{blue}{ ?} }\,\,\,\,\,
\,\,\,\,\,\,\,O({\color{red}{ t!} })=O(\lfloor t\rfloor!)=O(\lfloor logn\rfloor!)\\
指数置换：{(2^{loglogt})}^{t}={(logt)}^t \,\,\,&{\color{blue}{ ?} }\,\,\,\,\,\,t!\\
{(logt)}^t=O(t^t)&=O(t!)
\end{split}</script><p><strong>原题</strong>：参见<em>具体数学-P410-热身题-9.2-b</em>（推荐练习一波）</p>
<ul>
<li>哪个函数增长得快：$n^{\ln\ln\ln n}还是(\ln n)!$？<ul>
<li>原题解析：$n^{\ln\ln\ln n}\ll (\ln n)!\ll n^{\ln\ln n}$.（<del>就只有这么一点orz</del>）</li>
</ul>
</li>
</ul>
<p>练习：<a href="https://blog.csdn.net/yangtzhou/article/details/89164355" target="_blank" rel="noopener external nofollow noreferrer">算法导论 — 思考题3-3 根据渐近增长率排序</a></p>
<img data-src="/912/1574335436516-1577347213373.png" class="" width="1574335436516">
<blockquote>
<p> 在下面的表格中，表格上层的函数比下层的函数增长要快，表格同一行中的函数互为ΘΘ关系。 </p>
 <img data-src="/912/20190409214503401-1577347213373.png" class="" width="123">
</blockquote>
</blockquote>
</blockquote>
<h5 id="Huffman编码"><a href="#Huffman编码" class="headerlink" title="Huffman编码"></a>Huffman编码</h5><p>判断：交换哈夫曼树的不同深度的节点，编码长度必然改变</p>
<blockquote>
<p>特殊：考虑一个<strong>所有节点的频率相同</strong>的情况，那么任意交换节点编码长度不变。</p>
<p>因此问题转化为：<strong><em>不同深度的节点是否频率一定不同？</em></strong></p>
<p>构造反例：（3个频率相同的节点）</p>
<img data-src="/912/1551612046084-1577347213373.png" class="" width="1551612046084">
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h5 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h5><p>判断：即使不使⽤改进的 next 表，kmp 依然可以达到线性的时间复杂度</p>
<blockquote>
<p>此为书上原话，P315页11.3.8节”继续改进“-第一段：<em>尽管以上KMP算法已可保证线性的运行时间，但在某些情况仍有进一步改进的余地。</em>11.3.7节则给出了线性复杂度的性能分析。</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="Splay树"><a href="#Splay树" class="headerlink" title="Splay树"></a>Splay树</h5><p>判断：对于不符合局部性原理的访问，splay 的分摊复杂度不是 $O(logn)$</p>
<blockquote>
<p>对于规模为任意n的（<strong>逐层</strong>）伸展树，只要按关键码单调的次序，周期性地反复进行查找，则无论总的访问次数m&gt;&gt;n有多大，就分摊意义而言，每次访问都将需要o(n)时间。</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。（双层为<strong><font color=blue>假</font></strong>）</p>
<blockquote>
<p>参见<em>教材-8.1.2最坏情况-P204</em>（注意这个是逐层伸展才这样，<strong>双层</strong>策略（含羞草）则可以保证 $O(logn)$）</p>
<p>这里的局部性原理是指：刚被访问的数据（附近），极有可能很快被<strong>再次</strong>访问。</p>
</blockquote>
</blockquote>
<h5 id="二叉树重构"><a href="#二叉树重构" class="headerlink" title="二叉树重构"></a>二叉树重构</h5><p>判断：对于⼆叉树，通过先序遍历和后序遍历不能确定其层次遍历</p>
<blockquote>
<p>首先考虑问题：<code>先序+后序</code>是否唯一确定二叉树？（并不能）</p>
<ul>
<li>问题的证明可参考：<a href="https://www.xuetangx.com/courses/course-v1:TsinghuaX+30240184+sp/courseware/16d8402a24fd4429a8a7cc1c8401cb1f/b3fdcad4c3a84a8a861003eaa8b5965c/" target="_blank" rel="noopener external nofollow noreferrer"><em>MOOC-二叉树-重构-3</em></a><ul>
<li>(先序|后序|层次)+中序</li>
<li><strong>(先序+后序)&amp;&amp;真二叉树</strong></li>
</ul>
</li>
</ul>
<p>对于真二叉树，先序+后序对应唯一二叉树，显然成立。</p>
<p>对于非真二叉树：</p>
<ul>
<li>给定确定的先序和后序序列，需要考虑两个序列同时固定时，二叉树能发生怎么样的变化。</li>
<li>只有孩子为1个的节点才可能发生变化。（单个孩子先序和后序遍历的结果一致）<ul>
<li>左孩子$\longrightarrow$<strong><font color=purple>右孩子</font></strong></li>
<li><strong><font color=purple>左孩子</font></strong>$\longleftarrow$右孩子</li>
</ul>
</li>
<li>因为<strong>变化在同一层且不发生位置交换</strong>，所以层次遍历也不变</li>
</ul>
<img data-src="/912/1551627410744-1577347213373.png" class="" width="1551627410744">
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。先序+后序<strong>能确定</strong>层次遍历。</p>
<p><strong>解法2</strong>：（递归生成法）</p>
<ul>
<li>任意给定先序序列和后序序列（<code>V[root], L[left], R[right]</code>）</li>
<li>先序：<code>VL****R****</code>；后序：<code>****L****RV</code><ul>
<li>有两个孩子？<ul>
<li>局部等价于真二叉树</li>
<li>确定层次遍历<code>VLR********</code></li>
<li>递归<code>L****</code>和<code>R****</code></li>
</ul>
</li>
<li>只有一个孩子？<ul>
<li>退化为<code>VL****</code>和<code>****LV</code>（特判一下两个序列的第2个和倒数2个元素是否相同）</li>
<li>确定层次遍历<code>VL****</code></li>
<li>递归<code>L****</code></li>
</ul>
</li>
</ul>
</li>
<li>因为可以递归生成唯一的层次遍历，显然就确定了层次遍历序列</li>
</ul>
<blockquote>
<p><a href="https://blog.csdn.net/GYQJN/article/details/52709912" target="_blank" rel="noopener external nofollow noreferrer">先序遍历和后序遍历为什么不能唯一地确定一棵树？</a></p>
</blockquote>
</blockquote>
<h5 id="Catalan数"><a href="#Catalan数" class="headerlink" title="Catalan数"></a>Catalan数</h5><p>判断：对于叶节点为 2019 的真⼆叉树，其数量<strong>⼩于</strong> 2018 对括号所组成的合法表⽰式数量</p>
<blockquote>
<p>叶节点为 2019 的真⼆叉树的个数 = $C_{2018}$。（等效于2018个内部节点）</p>
<p>2018 对括号所组成的合法表⽰式数量 =  $C_{2018}$。两者相等。</p>
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。</p>
<blockquote>
<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=9&amp;ved=2ahUKEwjWqJiesubgAhXwwosBHSnACLEQFjAIegQIBhAB&amp;url=http%3A%2F%2Flanqi.org%2Finterests%2F10939%2F&amp;usg=AOvVaw0FIR5VllhrOlM-_DNiqnfz" target="_blank" rel="noopener external nofollow noreferrer"><strong>卡特兰数— 计数的映射方法的伟大胜利</strong>| Math173</a></p>
<p><a href="https://blog.csdn.net/ffmpeg4976/article/details/42340379" target="_blank" rel="noopener external nofollow noreferrer">【卡特兰数】有N对括号，输出所有合法的组合</a></p>
<p><a href="https://www.cnblogs.com/wuyuegb2312/p/3016878.html" target="_blank" rel="noopener external nofollow noreferrer">从《编程之美》买票找零问题说起，娓娓道来卡特兰数——兼爬坑指南</a></p>
</blockquote>
</blockquote>
<h5 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h5><p>判断：对于叶节点数量为 2018 的⼆叉树，层次遍历队列容量必然⼩于 2018</p>
<blockquote>
<p>层次遍历队列的容量应该不小于最大的某一层的元素数。</p>
<p>2018的叶节点的二叉树，一层的元素数最大可以<strong>等于</strong>2018。（不能大于）</p>
<img data-src="/912/1551625281642-1577347213373.png" class="" width="1551625281642">
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。</p>
<blockquote>
<p>相似题目：<em>习题解答-5-18</em></p>
<ul>
<li>设二叉树共含n个节点，则辅助队列的容量应该不低于n/2。</li>
</ul>
<p>层次遍历的每一步都对应着一个二叉树（原二叉树的子二叉树）。<br>给定二叉树，所有的[层次遍历子二叉树]中叶子节点的最大值就是队列最小容量。</p>
<p><strong>任何遍历过程都对应着树的一种生长模式</strong>。</p>
</blockquote>
<p>注：本题在2014年期中试卷3-2上出现，稍微不同。</p>
<img data-src="/912/1567349236370-1577347213373.png" class="" width="1567349236370">
<blockquote>
<p>1007，2。（见习题5-19）</p>
</blockquote>
</blockquote>
<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>判断：插⼊排序每次插⼊数据，即使不增加循环节，也不⾄减少</p>
<blockquote>
<p>问的是循环节的个数。</p>
<ul>
<li>对于任意一个有序前缀，插入排序后循环节数目不变。（显然）</li>
<li><font color=red><code>总循环节数</code> = <code>元素归位数</code> + <code>非归位循环节数</code></font>。</li>
</ul>
<p>构造反例：<code>6 5 4 3 2 1</code>（逆序列）</p>
<ul>
<li>初始有3个循环节</li>
</ul>
<img data-src="/912/1552136122748-1577347213373.png" class="" width="1552136122748">
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。</p>
<blockquote>
<p>相似题目：<em>习题解答-3-14</em>（<strong>选择排序</strong>循环节）</p>
<img data-src="/912/1552136806707-1577347213373.png" class="" width="1552136806707">
</blockquote>
</blockquote>
<h5 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h5><p>判断：交换两个逆序对，必然会减少总逆序对数</p>
<blockquote>
<p>认为题意是<code>交换构成逆序对的两个元素</code>。</p>
<p>首先给出引理：</p>
<ul>
<li>左端点降低，或右端点升高，逆序对总数一定不增。（这是显然的）</li>
</ul>
<p>交换逆序对的过程可以等价转化为：（逆序对区间外的逆序是不受影响的，因此可以只分析内部区间）</p>
<img data-src="/912/1551802587240-1577347213373.png" class="" width="1551802587240">
<p>又注意到，在上述过程（两个<code>不增变换</code>）完成后，端点不再构成逆序对。</p>
<ul>
<li>因为不增，所以只要出现了下降，就一定会保持。</li>
</ul>
<p>因此，交换逆序对后，总逆序对数至少减少1个。</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h5><p>判断：如果基数排序底层采⽤不稳定的算法，那么得到的结果可能是不正确的</p>
<blockquote>
<p>因为排序是按位<strong><code>多步</code>排序</strong>，必须保证下一次的排序不影响上一次的排序结果。</p>
<p>如果底层不稳定，那么很可能导致之前排序的结果丢失。（每次只关注某一位）</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
<blockquote>
<p>参考：<em>算法导论-8-3-基数排序</em></p>
</blockquote>
</blockquote>
<h5 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h5><p>判断：函数的调⽤栈中如果有相同的函数，则他们必然紧邻</p>
<blockquote>
<p>考虑循环调用：（显然不必紧邻）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> b();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">b</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> a();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; a();&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Q.E.D，命题为<strong><font color=blue>假</font></strong>。</p>
<blockquote>
<p>参考：<em>教材-4.2.1-函数调用栈</em></p>
</blockquote>
</blockquote>
<h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><p>判断：如果插⼊的关键码独⽴均匀分布，堆的插⼊操作平均O(1)</p>
<blockquote>
<p>认为题目问的是完全二叉堆。</p>
<p>由于完全二叉堆插入采用上滤操作，并且每一层的节点数是指数型的，因此若完全随机地插入，则只期望上升1层。</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
<blockquote>
<p>参考：<em>习题解答-10-6</em></p>
</blockquote>
</blockquote>
<h4 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h4><h5 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h5><p>逆波兰表达式的优点？既然中缀转换为逆波兰就需要可以计算出表达式值，那<strong>逆波兰意义何在</strong>？</p>
<blockquote>
<p>RPN的运算符优先级表述能力强，计算效率高。</p>
<p>意义如下：（因为转换表达式只需一次，而求值可能多次）</p>
<img data-src="/912/1561884731840-1577347213373.png" class="" width="1561884731840">
<p>参考：<em>教材-4.3.4-逆波兰表达式-P97</em></p>
</blockquote>
<h5 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h5><p>DFS 中何时标记前向边？何时标记后向边？</p>
<blockquote>
<p>前向边：从祖先指向后代。</p>
<p>后向边：从后代指向祖先。</p>
<blockquote>
<p>RT所示。</p>
</blockquote>
<img data-src="/912/1561882924278-1577347213374.png" class="" width="1561882924278">
</blockquote>
<h5 id="败者树"><a href="#败者树" class="headerlink" title="败者树"></a>败者树</h5><p>相⽐锦标赛排序，败者树的优势是？</p>
<blockquote>
<p>重赛过程中不必在左右子树之间来回访问内存，时间效率高。</p>

<p>参考：<em>PPT-P1181</em></p>
</blockquote>
<h5 id="BBST"><a href="#BBST" class="headerlink" title="BBST"></a>BBST</h5><p>试举出红⿊树优于 AVL 树的场景，红⿊树相⽐ AVL 树的优势</p>
<blockquote>
<p>AVL树需要维护平衡因子，而红黑树仅需要对节点重染色。</p>
<p>在删除操作中，AVL树需要$O(logn)$次旋转，而红黑树的重染色分摊复杂度仅O(1)，并且拓扑结构的重构也只需O(1)。红黑树在持久性、历史版本的维护上具有优势。</p>
<blockquote>
<p>参考：<em>教材-8.3-红黑树-P227</em>，<em>PPT-P824、P861</em></p>
</blockquote>
</blockquote>
<h5 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h5><p>相⽐开散列，闭散列的优势，试举例说明两点。</p>
<blockquote>
<p>单独开辟一块<strong>连续</strong>空间，可充分利用系统缓存，提升访存效率。（局部性）</p>
<p>结构<strong>简单</strong>，算法易于实现，不易出错。</p>
<blockquote>
<p>参考：<em>PPT-P1034</em>，<em>教材-9.3.6-闭散列策略-P268</em></p>
</blockquote>
</blockquote>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>相⽐选择排序，插⼊排序的优势，试举例说明两点。</p>
<blockquote>
<p>RT。就地、在线、输入敏感。</p>
<img data-src="/912/1577348253154.png" class="" width="1577348253154">
<blockquote>
<p>参考：<em>PPT-P275</em></p>
</blockquote>
</blockquote>
<h5 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><p>对于稠密图，迪杰斯特拉应该使⽤多叉堆替换⼆叉堆，为什么？多叉堆分叉数 m 怎么确定？</p>
<blockquote>
<p>RT。</p>
<img data-src="/912/1577348275830.png" class="" width="1577348275830">
<blockquote>
<p>参考：<em>PPT-P1185、P1187</em></p>
</blockquote>
</blockquote>
<h5 id="KMP算法-1"><a href="#KMP算法-1" class="headerlink" title="KMP算法"></a>KMP算法</h5><p>在何种情形下,KMP 优于蛮⼒算法，为什么？</p>
<blockquote>
<p>单次匹配概率越大（字符集越小）的场合，KMP的优势越明显；否则与蛮力算法的性能相差无几。</p>
<p>参考：<em>PPT-P1262</em></p>
</blockquote>
<h4 id="算法大题（二分法）"><a href="#算法大题（二分法）" class="headerlink" title="算法大题（二分法）"></a>算法大题（二分法）</h4><p>返回后序遍历的第 K 个节点，时间复杂度不超过树 x 的深度，$Ο(depth(𝑥))$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">//当前节点和孩⼦总数</span></span><br><span class="line">    BinNode *lchild,*rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BinNode *<span class="title">rank</span><span class="params">(BinNode* t, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//有效代码⾏数不超过 12 ⾏</span></span><br><span class="line">    <span class="comment">//不要尝试模拟后序遍历，时间复杂度会超时。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>⼀，给出具体算法实现。</p>
<blockquote>
<p>快速选取算法（默认k是有效值）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BinNode *<span class="title">rank</span><span class="params">(BinNode* t, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;<span class="built_in">size</span> == k) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>) num = t-&gt;lchild-&gt;<span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">if</span>(num &lt; k)</span><br><span class="line">        <span class="keyword">return</span> rank(t-&gt;rchild, k - num);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> rank(t-&gt;lchild, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>尾递归改写</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BinNode *<span class="title">rank</span><span class="params">(BinNode* t, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t-&gt;<span class="built_in">size</span> != k)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;lchild != <span class="literal">NULL</span>) num = t-&gt;lchild-&gt;<span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; k)&#123;</span><br><span class="line">            k -= num;</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>⼆，解释你的算法。</p>
<blockquote>
<p>参考快速选取算法。<em>教材12.2-选取与中位数</em></p>
</blockquote>
<p>三，分析时间复杂度和空间复杂度。</p>
<blockquote>
<p>不变性：算法每步必定下降一层，递归深度不超过$Ο(depth(𝑥))$。</p>
<p>时间复杂度：$Ο(depth(𝑥))$。</p>
<p>空间复杂度：$Ο(depth(𝑥))$。（调用栈大小，迭代版则可以达到O(1)就地）</p>
<blockquote>
<p>迭代改写参考<em>习题解答-12-6</em> <del>（滑稽</del></p>
</blockquote>
</blockquote>
<h3 id="操作系统-1"><a href="#操作系统-1" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h4><h5 id="stride调度算法"><a href="#stride调度算法" class="headerlink" title="stride调度算法"></a>stride调度算法</h5><p>stride调度算法中，进程分配时间和其优先级成反⽐，优先级越低进程上CPU运⾏的时间就会更长，⽤⼋位⽆符号数来表⽰进程A的运⾏时间有可能会溢出，但是当步长s [1] 127时，只要做⼩⼩的技巧就仍可以正确判断时间，然后又引⼊进程B，a为A的stride，b为B的stride，当sign(a-b) [2] 时说明A正在运⾏，此时a+s [3] 256；当sign(a+s-b) [4] 0时，轮到B运⾏。</p>
<blockquote>
<p>对于8位无符号数：MAX=256。</p>
<p>[1]：<code>&lt;=</code>。最大步进S&lt;=有符号最大值=127。</p>
<ul>
<li>由于要保证<code>sign(a+s-b)</code>的结果正确，其实就是保证<code>a+s-b</code>作为有符号数不会溢出，即<code>a+s-b&lt;=127</code>。又由于<code>sign(a+s-b)</code>只可能出现在A被调度之后，即意味着<code>a&lt;=b</code>，故<code>a+s-b&lt;=s+0=s&lt;=127</code>。</li>
</ul>
<p>[2]：<code>&lt;=0</code> 。<code>sign(a-b)&lt;=0</code> 等价于 <code>a-b&lt;0</code> 等价于 <code>a&lt;b</code> 等价于 <code>A优先</code>。【等号不太确定】</p>
<p>[3]：<code>&lt;</code>， A正在运⾏时，A的stride还没有溢出。</p>
<p>[4]：<code>&gt;</code>。A经过执行后的理论stride=a+s大于理论b的stride=b，则转为调度B。</p>
<ul>
<li>注意a+s-b的结果整体在计算过程中当作有符号数。比如，<code>sign(254+2-255)=sign(1)&gt;0</code>。</li>
</ul>
<blockquote>
<p>源自ucore lab6。实验指导书P287-提问2。</p>
<p>【最大步进】<a href="https://blog.csdn.net/jasonyuchen/article/details/77099324" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/jasonyuchen/article/details/77099324</a></p>
<blockquote>
<img data-src="/912/1571326819988-1577347213374.png" class="" width="1571326819988">
<p><strong><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=357" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=357</a></strong></p>
<blockquote>
<p>无符号整数ab作为两个stride<br><strong>假设开始的时候a=b，之后b先增加。如果b没有溢出的话，此时a-b&lt;0，之后应该轮到a增加</strong>，此时是成功的。 如果b溢出了话<br>首先看到schedule/default_sched.c中有一句 #define BIG_STRIDE <strong>0x7FFFFFFF</strong><br>因为stride每次的增量都是 BIG_STRIDE / priority，所以stride每次最大的增量不会超过BIG_STRIDE<br>那么因为b溢出了，所以b在溢出之前，ab相等，且无符号大于0x7FFFFFFF<br>             在b溢出之后，a仍然保持原来大于0x7FFFFFFF，b小于0x7FFFFFFF<br>             且a-b无符号大于0x7FFFFFFF（因为b的步进值小于0x7FFFFFFF），也就是有符号小于0，仍然是成功的   <strong>所以问题的关键就在于#define BIG_STRIDE 0x7FFFFFFF这个值必须是有符号整数的最大值，这个是保证stride不会出错的原因</strong><br>举个例子，把BIG_STRIDE增大，BIG_STRIDE=0xE0000000<br>那么初始令a=b=0xE0000000，b先前进0xE0000000，b变为0xC0000000，此时就有a-b&gt;0，stride算法就错了</p>
<blockquote>
<p><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=357#" target="_blank" rel="noopener external nofollow noreferrer">Yong XIANG</a><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=357#" target="_blank" rel="noopener external nofollow noreferrer">4 years ago</a>这是一个优秀的回答。相关内容可能在期末考试中出现。</p>
</blockquote>
<img data-src="/912/1571385800036-1577347213374.png" class="" width="1571385800036">
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h5 id="x86特权级"><a href="#x86特权级" class="headerlink" title="x86特权级"></a>x86特权级</h5><p>CPL&lt;=DPL[门]和CPL&gt;=DPL[段]， [5] 表⽰请求时可以和门特权级相同， [6] 表⽰请求时应低于段的特权级。</p>
<blockquote>
<p>[5]：CPL&lt;=DPL[门]，[6]：CPL&gt;=DPL[段]。PPT上有。<del>猜也能猜出来</del>。</p>
</blockquote>
<h5 id="僵尸-孤儿进程"><a href="#僵尸-孤儿进程" class="headerlink" title="僵尸/孤儿进程"></a>僵尸/孤儿进程</h5><p>⽗进程先退出，还未退出的⼦进程被称为 [7] 。⼦进程退出时，其⽗进程还没wait，此时⼦进程被称为 [8] 。</p>
<blockquote>
<p>孤儿进程，僵尸进程。</p>
<img data-src="/912/123-1577347213374.png" class="" width="123">
<img data-src="/912/1567020792909-1577347213374.png" class="" width="1567020792909">
<blockquote>
<p> <a href="https://www.cnblogs.com/Anker/p/3271773.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/Anker/p/3271773.html</a></p>
<p> <a href="https://blog.csdn.net/Y1013768371/article/details/88928031" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/Y1013768371/article/details/88928031</a> </p>
<p> 似乎没有在课上提到。</p>
<blockquote>
<p>在MOOC-16.2 调度算法支撑框架 中有提到。<code>proc.c:init_main</code>负责所有孤儿子进程的回收。</p>
</blockquote>
<p> 在课后练习中提到<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1030" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1030</a>。</p>
<blockquote>
<p> 1（不用回答）理解 孤儿进程和僵死进程的含义<br> <a href="http://www.cnblogs.com/xiehongfeng100/p/4619913.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.cnblogs.com/xiehongfeng100/p/4619913.html</a><br> <a href="http://www.cnblogs.com/Anker/p/3271773.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.cnblogs.com/Anker/p/3271773.html</a><br> <a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=753" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=753</a> </p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><p>代码填空：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Semaphore &#123;</span><br><span class="line">    int sem;</span><br><span class="line">    WaitQueue q;</span><br><span class="line">&#125;</span><br><span class="line">Semaphore::P() &#123;</span><br><span class="line">    [9] ;</span><br><span class="line">    if ( [10] ) &#123;</span><br><span class="line">        Add this thread t to q;</span><br><span class="line">        block(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Semaphore::V() &#123;</span><br><span class="line">    [11] ;</span><br><span class="line">    if ( [12] ) &#123;</span><br><span class="line">        Remove a thread t from q;</span><br><span class="line">        wakeup(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>P是请求资源，[9]=<code>sem--</code>；若剪完sem有<code>sem&lt;0</code>，说明一开始信号量=0（无资源），从而阻塞，因此[10]=<code>sem&lt;0</code>。</p>
<p>V是释放资源，[11]=<code>sem++</code>；如果有进程在等待，则必有<code>sem&lt;0</code>，并且此时归还了1个信号量，因此[12]=<code>sem&lt;=0</code>。</p>
</blockquote>
<h5 id="x86硬件-CR3"><a href="#x86硬件-CR3" class="headerlink" title="x86硬件-CR3"></a>x86硬件-CR3</h5><p>(5) x86-32CPU的硬件组成，CR3寄存器⽤于存储页⽬录表起始 [13] 。</p>
<blockquote>
<p><strong>物理</strong>地址。（来自<em>piazza-04/07/19讨论</em>）</p>
<blockquote>
<p>在保护模式下<strong>CPU可以看到的地址都是虚拟地址</strong>，<strong>经过MMU后才会有物理地址</strong>。定位二级页表的事由MMU做。所以CPU不能直接使用物理地址来访问内存，而必须使用虚拟地址来访问。CPU要修改页表项内容时，也是通过虚拟地址来访问的。</p>
<p>在x86-32 CPU上，物理地址可能不是32位的。如，在使用物理地址扩展（PAE）时，物理地址会是36位，使用4KB页面大小的物理页号也就变成24位，于是一个页表项就占了8字节。</p>
<p><strong>CR3属于MMU</strong>的页表管理部分，由于实现地址转换必须要有物理地址定位页目录。所以CR3是物理地址。CR3寄存器中保存的是页目录的起始物理地址，CPU只在地址转换中使用它的内容。</p>
<blockquote>
<p>注：<font color=red><strong>近几年的考试题目一些是来源于同学们的提问和piazza上的讨论</strong></font>。（向勇老师）</p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="硬链接-软链接"><a href="#硬链接-软链接" class="headerlink" title="硬链接/软链接"></a>硬链接/软链接</h5><p>A是计数为1的⽂件，创建A的硬链接B，再创建A的软连接C，再创建B的硬链D，B计数 [14] , D计数 [15] 。</p>
<blockquote>
<p>3，3。</p>
<img data-src="/912/1571378192096-1577347213374.png" class="" width="1571378192096">
<blockquote>
<p>注意C文件存储A的地址，如果删除A，则C文件的链接失效。</p>
</blockquote>
</blockquote>
<h4 id="判断题-1"><a href="#判断题-1" class="headerlink" title="判断题"></a>判断题</h4><h5 id="x86-页表细节"><a href="#x86-页表细节" class="headerlink" title="x86 页表细节"></a>x86 页表细节</h5><p>x86开启了⼆级页表，则⼀级页表可以不在内存中。</p>
<blockquote>
<p><strong><font color=blue>假</font></strong>。一级页表应该在内存中。（一般来说）</p>
</blockquote>
<h5 id="ucore-时钟中断"><a href="#ucore-时钟中断" class="headerlink" title="ucore 时钟中断"></a>ucore 时钟中断</h5><p>ucore时钟中断为10ms，故不能完成 10ms以下的定时。</p>
<blockquote>
<p><strong><font color=red>真</font></strong>。定时需要依靠时钟中断。【存疑】</p>
<p>注：时钟中断是不可屏蔽中断。</p>
</blockquote>
<h5 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h5><p>中断向量表中存放着中断门的优先级。</p>
<blockquote>
<p><strong><font color=blue>假</font></strong>。对于中断向量表，实模式下没有特权级的说法，实模式的中断向量表的每一项只有段基址+偏移地址。【存疑】</p>
<blockquote>
<p>保护模式下的中断向量表又称为中断描述符表，每一项中保存有DPL（即优先级）。</p>
<p>原题大概是“中断门的<strong>特权</strong>级”？</p>
<blockquote>
<p>经指认，原题为<strong>权限</strong>。</p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="死锁-不安全"><a href="#死锁-不安全" class="headerlink" title="死锁/不安全"></a>死锁/不安全</h5><p>不安全状态就是死锁状态。</p>
<blockquote>
<p><strong><font color=blue>假</font></strong>。MOOC上讲过。死锁是不安全的真子集。</p>
</blockquote>
<h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p>只有⼀个main函数的程序不能有多个线程</p>
<blockquote>
<p><strong><font color=blue>假</font></strong>。 进程是指一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程。线程是进程的一部分，描述指令流执行状态。  所有的进程都是有≥1个的线程 。</p>
<blockquote>
<p><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1189" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1189</a></p>
<img data-src="/912/1571405364198-1577347213374.png" class="" width="1571405364198">
<p><del>还是要看piazza</del>，orz。</p>
</blockquote>
</blockquote>
<h4 id="uCore大题（线程切换）"><a href="#uCore大题（线程切换）" class="headerlink" title="uCore大题（线程切换）"></a>uCore大题（线程切换）</h4><p>ucore进程切换相关源码 尝试说明页表切换代码的位置、堆栈切换代码的位置、switch_to函数中读取2个函数参数的代码部分并注释。（这部分代码我猜应该全部位于kernel/process文件夹下，至少包括proc.h，proc.c和switch.S）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">text</span></span><br><span class="line">.globl switch_to</span><br><span class="line">switch_to: # switch_to(from, to)</span><br><span class="line">    # save from's registers</span><br><span class="line">    movl <span class="number">4</span>(%esp), %eax	 <span class="meta"># eax points to from(考卷上故意把这一个注释删了)</span></span><br><span class="line">    popl <span class="number">0</span>(%eax) 		<span class="meta"># save eip !popl</span></span><br><span class="line">    movl %esp, <span class="number">4</span>(%eax)</span><br><span class="line">    movl %ebx, <span class="number">8</span>(%eax)</span><br><span class="line">    movl %ecx, <span class="number">12</span>(%eax)</span><br><span class="line">    movl %edx, <span class="number">16</span>(%eax)</span><br><span class="line">    movl %esi, <span class="number">20</span>(%eax)</span><br><span class="line">     movl %edi, <span class="number">24</span>(%eax)</span><br><span class="line">    movl %ebp, <span class="number">28</span>(%eax)</span><br><span class="line">    # restore to's registers</span><br><span class="line">    movl <span class="number">4</span>(%esp), %eax 	<span class="meta"># not 8(%esp): popped return addressalready</span></span><br><span class="line">    					<span class="meta"># eax now points to to：(考卷上故意把这一个注释也删了)</span></span><br><span class="line">    movl <span class="number">28</span>(%eax), %ebp</span><br><span class="line">    movl <span class="number">24</span>(%eax), %edi</span><br><span class="line">    movl <span class="number">20</span>(%eax), %esi</span><br><span class="line">    movl <span class="number">16</span>(%eax), %edx</span><br><span class="line">    movl <span class="number">12</span>(%eax), %ecx</span><br><span class="line">    movl <span class="number">8</span>(%eax), %ebx</span><br><span class="line">    movl <span class="number">4</span>(%eax), %esp</span><br><span class="line">    pushl <span class="number">0</span>(%eax)		 <span class="meta"># push eip</span></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc_run</span><span class="params">(struct proc_struct *proc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (proc != current) &#123;</span><br><span class="line">        <span class="keyword">bool</span> intr_flag;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">proc_struct</span> *<span class="title">prev</span> = <span class="title">current</span>, *<span class="title">next</span> = <span class="title">proc</span>;</span></span><br><span class="line">        local_intr_save(intr_flag);</span><br><span class="line">        &#123;</span><br><span class="line">            current = proc;</span><br><span class="line">            load_esp0(next-&gt;kstack + KSTACKSIZE);</span><br><span class="line">            lcr3(next-&gt;cr3);</span><br><span class="line">            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));</span><br><span class="line">        &#125;</span><br><span class="line">        local_intr_restore(intr_flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<img data-src="/912/1571336105453-1577347213374.png" class="" width="1571336105453">
<p><strong>页表切换</strong>：</p>
<ul>
<li><code>lcr3(next-&gt;cr3);</code>：设置CR3为next内核线程的页目录基址。</li>
</ul>
<p><strong>堆栈切换</strong>：</p>
<ul>
<li><code>load_esp0(next-&gt;kstack + KSTACKSIZE);</code>：将esp0内核栈顶指针指向next内核线程的栈顶。</li>
</ul>
<p><strong>switch_to</strong>：（汇编代码在kernel/process/switch.S的switch_to中）</p>
<ul>
<li>函数原型：<code>void switch_to(struct context *from, struct context *to);</code>即获得from和to两个指针的代码。</li>
<li>根据piazza上的相关分析可知<ul>
<li>调用函数时候，<code>switch_to(from, to)</code>翻译成了<code>pushl to</code>, <code>pushl from</code>, <code>call switch_to</code></li>
<li>第1个<code>movl 4(%esp), %eax</code>：将栈中from的context指针赋给%eax</li>
<li>第2个<code>movl 4(%esp), %eax</code>：将栈中to的context指针赋给%eax（此时已经popl了一次栈顶）</li>
</ul>
</li>
</ul>
<img data-src="/912/1571334066372-1577347213374.png" class="" width="1571334066372">
<blockquote>
<p>该部分的答案在MOOC第13讲-13.4实际操作-1分50秒左右提到。</p>
<p>该部分的详细内容位于实验书的P224（lab4-内核线程-调度并执行内核线程initproc）。</p>
<img data-src="/912/1571335551072-1577347213374.png" class="" width="1571335551072">
<p>switch.S: <a href="https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/switch.S" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/switch.S</a> </p>
<p>进程上下文及相关定义：  <a href="https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/proc.h" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/proc.h</a> </p>
<p>void proc_run(struct proc_struct *proc) 函数：209行 <a href="https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/proc.c" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucorebook_code/blob/18da356a2f3ef90680aca9cc50ef328d1e84585e/code/kern/process/proc.c</a> </p>
</blockquote>
</blockquote>
<h4 id="地址转换大题"><a href="#地址转换大题" class="headerlink" title="地址转换大题"></a>地址转换大题</h4><p>虚拟页式存储的计算机系统，分别在进程A和B中描述逻辑地址0x64和0x14地址转换过程，要求描述并给出计算过程，给出对应一级页表项，二级页表项和访存单元的物理地址和对应的存储内容</p>
<blockquote>
<p>这样咋做啊。。</p>
<blockquote>
<img data-src="/912/1571337120793-1577347213374.png" class="" width="1571337120793">
</blockquote>
</blockquote>
<h3 id="组成原理"><a href="#组成原理" class="headerlink" title="组成原理"></a>组成原理</h3><h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><h5 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h5><p>(1)下列哪⼀项没有容错能⼒<br>A. RAID0 B. RAID1 C. RAID5 D. RAID6</p>
<blockquote>
<p>A。OS里面讲过。RAID0只是增加了访问带宽，自然没有容错能力。</p>
</blockquote>
<h5 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h5><p>(2)下列关于静态存储器和动态存储器的描述正确的是<br>A.静态存储器使⽤触发器，需要定期刷新<br>B.静态存储器使⽤电容，不需要定期刷新<br>C.动态存储器使⽤触发器，不需要定期刷新<br>D.动态存储器使⽤电容，需要定期刷新</p>
<blockquote>
<p>D。常识。</p>
</blockquote>
<h5 id="虚存"><a href="#虚存" class="headerlink" title="虚存"></a>虚存</h5><p>(3)下列哪个是对的<br>A．虚拟内存空间⽐实际的地址空间⼤<br>B．虚拟内存空间⽐实际的地址空间⼩<br>C．虚拟内存空间连续存放，实际内存⼀定连续存放<br>D．虚拟内存空间不连续存放，实际内存有可能连续存放</p>
<blockquote>
<p>D。注意是实际的<strong>地址</strong>空间。虚拟内存空间应该等于实际的地址空间。而虚拟存储只是在物理的非连续内存分配（段、页机制）的基础上增加调换功能。</p>
</blockquote>
<h5 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h5><p>(4)下⾯总线说法哪个正确（）<br>A.并⾏总线速度⼤于串⾏<br>B.异步总线速度⼤于同步<br>C.单总线速度⼤于双总线<br>D.以上说法均错误</p>
<blockquote>
<p>A。同步总线的特点有高速，单总线的特点是慢。见PPT。</p>
<p><strong>可能是D</strong>？之前408考试不是说还跟频率有关吗？并行不支持太高频。</p>
</blockquote>
<h5 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h5><p>(5)MIPS 五级流⽔中，有哪个数据冲突（）<br>A.RAR B.RAWC.WARD.WAW</p>
<blockquote>
<p>B。写后读RAW。（可以记成一个单词：raw）</p>
</blockquote>
<h4 id="判断题-2"><a href="#判断题-2" class="headerlink" title="判断题"></a>判断题</h4><h5 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h5><p>(1) C语⾔中，int x&gt;0 ,则x*x&gt;0</p>
<blockquote>
<p>错。可能溢出。</p>
</blockquote>
<h5 id="CPU指标"><a href="#CPU指标" class="headerlink" title="CPU指标"></a>CPU指标</h5><p>(2) CPI越少的机器执⾏同⼀个程序的时间越短</p>
<blockquote>
<p>错。</p>
<script type="math/tex; mode=display">
CPU执行时间=\frac{CPI*指令条数}{主频}</script></blockquote>
<h5 id="磁盘-1"><a href="#磁盘-1" class="headerlink" title="磁盘"></a>磁盘</h5><p>(3) 对机械磁盘，读取顺序存储的⽂件⽐随机存储的⽂件快</p>
<blockquote>
<p>对。涉及到寻道延迟（机械运动），故顺序读取比较高效。</p>
</blockquote>
<h5 id="冯诺依曼"><a href="#冯诺依曼" class="headerlink" title="冯诺依曼"></a>冯诺依曼</h5><p>(4) 冯诺依曼是数据和指令混合存储的</p>
<blockquote>
<p>对。显然。</p>
</blockquote>
<h5 id="流水线-1"><a href="#流水线-1" class="headerlink" title="流水线"></a>流水线</h5><p>(5) MIPS五级流⽔线设计中，使⽤充分设置功能单元的⽅法可以改善结构冲突</p>
<blockquote>
<p>对。结构冲突的起因是资源争用，充分设置资源的方式可以改善结构冲突。</p>
<blockquote>
<p>功能单元：如，存储器、ALU、寄存器堆等。（软硬件接口-P184）</p>
</blockquote>
</blockquote>
<h4 id="填空题-1"><a href="#填空题-1" class="headerlink" title="填空题"></a>填空题</h4><h5 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h5><p>(1) +1234的补码为[      ] (⽤⼗六进制，⼩端表⽰)</p>
<blockquote>
<p>正数的补码=原码。按除基取余法，有<code>+1234</code>=<code>0100 1101 0010</code>=<code>0x 04 D2</code>【大端】=<code>0x D2 04</code>【小端】。</p>
<blockquote>
<p>可以在 <em>Windows-计算器-程序员</em> 中验证结果。</p>
</blockquote>
</blockquote>
<h5 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h5><p>(2) 27.625的IEEE754为[      ] (⼗六进制)</p>
<blockquote>
<p>除基取余法+乘基取整法，有27.625=27+5/8=<code>11011.101</code>=<code>1.1011101 * 2^4</code>。</p>
<ul>
<li>符号位：正数，<code>0</code></li>
<li>阶码：移127位（+127），<code>4</code>+<code>127</code>=<code>100</code>+<code>01111111</code>=<code>10000011</code></li>
<li>尾数：<code>1011101……</code>（23位）</li>
</ul>
<p>故IEEE754表示为：<code>0 10000011 1011101……</code>=<code>0100 0001 1101 1101……</code>=<code>0x41DD0000</code>。</p>
<blockquote>
<p>此类型题需要<strong>反复练习</strong>。</p>
<p>浮点数转换验证工具：<a href="http://www.styb.cn/cms/ieee_754.php" target="_blank" rel="noopener external nofollow noreferrer">http://www.styb.cn/cms/ieee_754.php</a></p>
<p><a href="http://www.binaryconvert.com/result_float.html?decimal=27.625" target="_blank" rel="noopener external nofollow noreferrer">http://www.binaryconvert.com/result_float.html?decimal=27.625</a></p>
</blockquote>
</blockquote>
<h5 id="数据冲突"><a href="#数据冲突" class="headerlink" title="数据冲突"></a>数据冲突</h5><p>(3) MIPS五级流水线中，解决数据冲突的方法，给出3个.[     ] [     ] [     ]</p>
<blockquote>
<p>暂停流水线，数据旁路，编译器调度。</p>
</blockquote>
<h5 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h5><p>(4) 缓存缺失的类型包括，写3个（）</p>
<blockquote>
<p>必然缺失，容量缺失，冲突缺失，无效缺失。</p>
</blockquote>
<h4 id="流水线大题"><a href="#流水线大题" class="headerlink" title="流水线大题"></a>流水线大题</h4><p>MIPS 处理器pc输入延迟2ns，寄存器堆输出延迟2ns，内存延迟 10ns，ALU 延迟 6ns，寄存器堆输入延迟1ns，流⽔线寄存器以及多周期锁存器输出延迟为 2ns，要有计算过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addu rs rt rd</span><br><span class="line">subu rs rt rd</span><br><span class="line">ori rs rt imm</span><br><span class="line">lw rs rt imm</span><br><span class="line">sw rs rt imm</span><br><span class="line">beq rs rt imm</span><br><span class="line">j target</span><br></pre></td></tr></table></figure>
<p>1.按照单周期设计，指令内存与数据内存分开，计算指令延迟？<br>2.按照多周期设计，指令内存和数据内存在同⼀个内存模块，最长和最短的指令延迟分别是指哪条指令，分别计算对应的延迟，以及所需时钟周期数<br>3.按照五级流水线设计，指令内存和数据内存不在同⼀个内存模块，处理器能达到的最大主频是多少？</p>
<blockquote>
<p>（1）</p>
<img data-src="/912/1571522970638.png" class="" title="单周期">
<ul>
<li>本题没有考虑多选器（mux）的延迟。</li>
<li>常规而言，<strong>PC</strong>==pc输入延迟=2ns；<strong>IM</strong>=内存延迟=10ns；<strong>ID</strong>=读寄存器=寄存器堆输出延迟=2ns；<strong>EXE</strong>=ALU延迟=6ns；<strong>MEM</strong>=写数据内存=内存延迟=10ns；<strong>WB</strong>=写寄存器=寄存器堆输入延迟=1ns。指令延迟如下：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>IM</th>
<th>ID</th>
<th>EXE</th>
<th>MEM</th>
<th>WB</th>
<th>PC</th>
<th>延迟</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>addu rs rt rd</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td></td>
<td>1</td>
<td>2</td>
<td>21</td>
</tr>
<tr>
<td><code>subu rs rt rd</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td></td>
<td>1</td>
<td>2</td>
<td>21</td>
</tr>
<tr>
<td><code>ori rs rt imm</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td></td>
<td>1</td>
<td>2</td>
<td>21</td>
</tr>
<tr>
<td><code>lw rs rt imm</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td>10</td>
<td>1</td>
<td>2</td>
<td>31</td>
</tr>
<tr>
<td><code>sw rs rt imm</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td>10</td>
<td></td>
<td>2</td>
<td>30</td>
</tr>
<tr>
<td><code>beq rs rt imm</code></td>
<td>10</td>
<td>2</td>
<td>6</td>
<td></td>
<td></td>
<td>2</td>
<td>20</td>
</tr>
<tr>
<td><code>j target</code></td>
<td>10</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td>12</td>
</tr>
</tbody>
</table>
</div>
<p>单周期的指令延迟由最大延迟（LW指令）确定，故延迟为31ns。</p>
<blockquote>
<p>对于单周期，<strong><font color=red><code>J</code>型指令</font></strong>在IF阶段PC需要完成读指令、PC+4（Adder，忽略），它在ID译码阶段只需完成PC高4位和target&lt;&lt;2的拼接工作（<strong>组合逻辑</strong>，时间<strong>可忽略</strong>），然后写回PC。</p>
<p>单周期指令延迟计算如下图所示：（PPT-P429）</p>
<img data-src="/912/1571510380319.png" class="" title="单周期指令延迟计算">
<p>注：在《深入理解计算机系统》上，单周期数据通路（SEQ）的PC在最后更新，多周期数据通路（SEQ+）从时钟周期结束时移到了开始时，因而更适合实现流水线。而在清华《计组PPT》上的多周期数据通路的设计比较容易产生结构冲突（每个周期指令和数据并行，且只有一个存储器），因而采用单周期数据通路的PC计算前移来实现流水线（实际上跟《深》的策略差不多）。</p>
</blockquote>
<p>（2）多周期，每段放入锁存器。第2问在考试时其实只需要计算<code>lw</code>和<code>j</code>的延迟。按照数据通路计算。</p>
<img data-src="/912/1571522700023.png" class="">
<img data-src="/912/1571586972076.png" class="">
<ul>
<li>取指（IF）：J型指令，Branch指令，ALU指令，LW指令，SW指令<ul>
<li>读指令内存10ns；ALU计算新PC+写回PC=6+2=8ns【并行】</li>
<li>锁存器=2ns</li>
<li>总时间=max(10,6)+2=12ns</li>
</ul>
</li>
<li>译码（ID）：J型指令，Branch指令，ALU指令，LW指令，SW指令<ul>
<li>【J型指令在此结束，需要再次写回PC=2ns】</li>
<li>读寄存器=2ns；【Branch指令还需要ALU计算PC+IMM=6ns，并行】</li>
<li>锁存器=2ns</li>
<li>总计=4ns</li>
</ul>
</li>
<li>执行（EXE）：Branch指令，ALU指令，LW指令，SW指令<ul>
<li>ALU运算=6ns【Branch指令在此结束，如果满足条件还要写PC=2ns】</li>
<li>锁存器=2ns</li>
<li>总计=8ns</li>
</ul>
</li>
<li>访存（MEM）：LW指令，SW指令<ul>
<li>读/写数据内存=10ns【SW指令在此结束】</li>
<li>锁存器=2ns</li>
<li>总计=12ns</li>
</ul>
</li>
<li>写回（WB）：ALU指令，LW指令<ul>
<li>写寄存器=1ns【在此结束，无需锁存器】</li>
<li>总计=1ns</li>
</ul>
</li>
</ul>
<p>故，得到</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>IF</th>
<th>ID</th>
<th>EXE</th>
<th>MEM</th>
<th>WB</th>
<th>指令延迟</th>
<th>时钟周期数</th>
<th>指令延迟(第二种)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>addu</code></td>
<td>10+2</td>
<td>2+2</td>
<td>6+2</td>
<td></td>
<td>1</td>
<td>25</td>
<td>4</td>
<td>48</td>
</tr>
<tr>
<td><code>subu</code></td>
<td>10+2</td>
<td>2+2</td>
<td>6+2</td>
<td></td>
<td>1</td>
<td>25</td>
<td>4</td>
<td>48</td>
</tr>
<tr>
<td><code>ori</code></td>
<td>10+2</td>
<td>2+2</td>
<td>6+2</td>
<td></td>
<td>1</td>
<td>25</td>
<td>4</td>
<td>48</td>
</tr>
<tr>
<td><strong><code>lw</code></strong></td>
<td>10+2</td>
<td>2+2</td>
<td>6+2</td>
<td>10+2</td>
<td>1</td>
<td>37</td>
<td>5</td>
<td>60</td>
</tr>
<tr>
<td><code>sw</code></td>
<td>10+2</td>
<td>2+2</td>
<td>6+2</td>
<td>10</td>
<td></td>
<td>34</td>
<td>4</td>
<td>48</td>
</tr>
<tr>
<td><code>beq</code></td>
<td>10+2</td>
<td>6+2</td>
<td>6(+2)</td>
<td></td>
<td></td>
<td>20(+2)</td>
<td>3</td>
<td>36</td>
</tr>
<tr>
<td><strong><code>j</code></strong></td>
<td>10+2</td>
<td>0+2</td>
<td></td>
<td></td>
<td></td>
<td>14</td>
<td>2</td>
<td>24</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<blockquote>
<p>PS. 听人反馈此处我的多周期设计的计算方式似乎存在问题。</p>
</blockquote>
<p>此题有两种理解，一种是按上述方法统计所有步骤时间之和，即统计有效操作时延（这种可能更符合出题原意）；另一种是取最大段时延IF作为时钟周期，然后乘以时钟周期数，得到每条指令的延迟（这种更实际）。计算结果如最后一列<code>指令延迟(第二种)</code>所示。</p>
</blockquote>
<p>（3）</p>
<img data-src="/912/1571523278036-1577347213374.png" class="" width="1571523278036">
<p>五级流水线，取每段流水的最长延迟为时钟周期=PC+IM=流水寄存+MEM=12ns。</p>
<script type="math/tex; mode=display">
理论最大主频=\cfrac{1}{12\times 10^{-9}}\approx 83.3MHz</script><blockquote>
<p>若指令内存和数据内存在同⼀个内存模块，则IF和访存指令（lw/sw）的MEM阶段可能发生结构冲突。只能暂停流水线。故，每遇到一次访存指令，对应暂停一个周期的流水线。（但不改变理论最高主频）</p>
</blockquote>
<hr>
<blockquote>
<p><strong><font color=red>PPT对应章节的课（单周期/多周期/流水）必须完全学懂才有可能做对此题</font></strong>。</p>
<p>【存疑】</p>
<ul>
<li>如果考虑pc的输入延迟，pc的输出延迟为何不考虑？<ul>
<li>很可能是回忆版的不准确。pc的延迟在本质上与锁存器的延迟一致（不必区分输入和输出）。</li>
</ul>
</li>
</ul>
<p>更新题面：（寄存器堆输出位3ns，pc只考虑输出延迟，五级流水线中指令内存和数据内存在同⼀个内存模块。其它并无本质差异）</p>
<img data-src="/912/1574695963887-1577347213374.png" class="" title="橙子手写版">
</blockquote>
</blockquote>
<h3 id="计算机网络-1"><a href="#计算机网络-1" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h4><h5 id="电话网、TCP"><a href="#电话网、TCP" class="headerlink" title="电话网、TCP"></a>电话网、TCP</h5><p>电话⽹络和TCP⽹络的性质的⽐较（电话⽹应该是建⽴电路）</p>
<blockquote>
<blockquote>
<p>电话网，可靠连接，IP电话分别是电路交换，分组交换，报文路径是否固定【选项是以上的组合】 </p>
</blockquote>
<p>电话网采用电路交换，提供有连接可靠服务。</p>
<p>IP电话使用TCP虚电路（分组交换），提供有连接可靠服务；虚电路有临时和永久之分，但在传输过程中路径固定。</p>
</blockquote>
<h5 id="蜂窝"><a href="#蜂窝" class="headerlink" title="蜂窝"></a>蜂窝</h5><p>蜂窝移动⽹络六边形，频率840HZ，则每个点可⽤最⼤频率</p>
<blockquote>
<p>本题题意模糊。按照相邻不干扰的原则，可得最大必须分成3组：840/3=280Hz。</p>
<blockquote>
<p><a href="http://www.guob.org/course/MC_Chap31.pdf" target="_blank" rel="noopener external nofollow noreferrer">蜂窝移动网络的课件</a></p>
<img data-src="/912/1567264764118.png" class="">
<p>图中可以看出：不同的模型，相同频段的站点距离不同。（最低N可以等于3，此时同频道干扰最大，频率复用率最高）</p>
<p><a href="https://www.maixj.net/ict/fengwoxiaoquhuafen-pinlvfuyong-7456" target="_blank" rel="noopener external nofollow noreferrer">移动通信的蜂窝小区划分和频率复用</a></p>
<p>本题在期末复习题PPT中出现。</p>
<img data-src="/912/1571218066106.png" class="">
</blockquote>
</blockquote>
<h5 id="最小帧长"><a href="#最小帧长" class="headerlink" title="最小帧长"></a>最小帧长</h5><p>以太网中最短帧长1000bit，两点相距100m,数据在光纤中的传播速率为2*10^8m/s,问最大发送速率<br>A.1Gb/s B.2Gb/s C.100Mb/s 4.200Mb/s</p>
<blockquote>
<p>A。以太网采用CSMA/CD。对于CSMA/CD，我们有防止碰撞的最小帧长公式</p>
<script type="math/tex; mode=display">
\cfrac{帧长}{数据率} \geq RTT=\cfrac{2\times100\,m}{2\times10^8m/s}=1\times10^{-6}s</script><p>即</p>
<script type="math/tex; mode=display">
数据率 \leq \cfrac{帧长}{RTT} = \cfrac{帧长}{1\times10^{-6}s}</script><p>对所有以太网帧成立。因此有</p>
<script type="math/tex; mode=display">
最大数据率 \leq \cfrac{最小帧长}{RTT}=\cfrac{1000\,bit}{1\times10^{-6}s}=1Gb/s</script></blockquote>
<h5 id="分组转发"><a href="#分组转发" class="headerlink" title="分组转发"></a>分组转发</h5><p>由两端链路构成，给出包大小，数字带宽，传输速率，计算延迟【1.5s 1.6s 2.1s 3.1s】 （两个转发加两个传播）</p>
<blockquote>
<p>大概如下图？</p>
<img data-src="/912/1571393785998.png" class="" title="分组转发">
<script type="math/tex; mode=display">
发送时延=\cfrac{包大小}{数据率}，传播时延=\cfrac{距离}{传输速率}</script></blockquote>
<h5 id="停等协议"><a href="#停等协议" class="headerlink" title="停等协议"></a>停等协议</h5><p>停等协议通信线路利用率最低的是（ ）<br>A. 源和目的之间距离很近，速度快<br>B. 源和目的之间距离很近，速度慢<br>C. 源和目的之间距离很远，速度快<br>D. 源和目的之间距离很近，速度慢</p>
<blockquote>
<p>C。距离越远总耗时越长，速度越快有效数据传输时间越短，从而$利用率=\cfrac{有效时间}{总时间}$越低。</p>
</blockquote>
<h5 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h5><p>TCP中，拥塞窗口大小W（窗口为m时发⽣拥塞），最大发送段长MSS，给RTT，发送⽅有⾜够多的数据要发，求算出平均速率近似是多少</p>
<blockquote>
<img data-src="/912/1571396369250.png" class="" title="拥塞窗口">
<p>如上图，则</p>
<script type="math/tex; mode=display">
平均速率=\left[ \cfrac{W/2-1+W/2*0.75*W}{log(W/2)+W/2}\right]\times \cfrac{MSS}{RTT}\approx \cfrac{W/2*0.75*W}{W/2}\times \cfrac{MSS}{RTT}=0.75W\times \cfrac{MSS}{RTT}</script><p>可以看出，<strong>当W足够大时，慢启动阶段的传输量在总传输量中的份额可以忽略不计</strong>。因此，有无慢启动和快恢复机制不影响结论。</p>
<blockquote>
<p> 本体是典例中的原题：</p>
 <img data-src="/912/1571394735865.png" class="">
 <img data-src="/912/1571394824723.png" class="">
 <img data-src="/912/1571394839120.png" class="">
</blockquote>
</blockquote>
<h4 id="URL大题"><a href="#URL大题" class="headerlink" title="URL大题"></a>URL大题</h4><p>(1) 解释以下URL各部分的意义 <code>http://info.tsinghua.edu.cn:80/index.jsp</code></p>
<blockquote>
<p><code>http</code>：协议</p>
<p><code>info.tsinghua.edu.cn</code>：主机的DNS域名</p>
<p><code>80</code>：主机的HTTP端口号</p>
<p><code>index.jsp</code>：路径名</p>
<blockquote>
<p>本题的原型在《计算机网络》黑书的P502。</p>
</blockquote>
</blockquote>
<p>(2) 如域名info.tsinghua. edu.cn对应的ip为166.111.4.98，解释为何会发⽣如下现象：</p>
<ul>
<li><p>①访问<code>http://info.tsinghua.edu.cn/index.jsp</code> 正常，⽽访问<code>http://166.111.4.98/index.jsp</code> 异常</p>
</li>
<li><p>②访问<code>http://166.111.4.98/index.jsp</code> 正常，⽽访问<code>http://info.tsinghua. edu.cn/index.jsp</code> 异常</p>
</li>
</ul>
<blockquote>
<p>①：IP地址被多个站点共享；站点禁止IP直接访问</p>
<p>②：DNS服务器异常</p>
<blockquote>
<p><a href="https://blog.csdn.net/wwwdc1012/article/details/51745912" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/wwwdc1012/article/details/51745912</a></p>
<p><a href="https://blog.csdn.net/weixin_30919919/article/details/96226716" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/weixin_30919919/article/details/96226716</a></p>
<p><a href="https://blog.csdn.net/Luoyeshs/article/details/83212655" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/Luoyeshs/article/details/83212655</a></p>
<p><a href="https://blog.csdn.net/gui951753/article/details/83070180" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/gui951753/article/details/83070180</a></p>
<p>本题在历年期末考试（如2018）中多次出现。</p>
<img data-src="/912/1571218282429.png" class="">
</blockquote>
</blockquote>
<h4 id="路由器大题"><a href="#路由器大题" class="headerlink" title="路由器大题"></a>路由器大题</h4><img data-src="/912/1567015558240.png" class="">
<p>(1) 如图，⽹络1有100台主机，⽹络2有50台，⽹络3有20台，请将166.111.4.0/24划分给⽹络并写出路由器接口ip<br>(2) 简述AB通信时与AC通信时使⽤ARP协议的具体情况（ ARP在同一局域网间的主机通信操作是做什么，在不同局域网间的主机通信操作是做什么？ ）<br>(3) 当A发送报⽂给C时写出各个段上报⽂的源IP，⽬的IP，源MAC，⽬的MAC（⽤MAC-A,IP-A,MAC-e0等表⽰）</p>
<blockquote>
<p>（1）166.111.4.0/24剩下8位主机号=256台主机。（必须分配2^n台）</p>
<ul>
<li>网络1：166.111.4.<code>0 0000000</code>/25=166.111.4.0/25（128台）<ul>
<li>e0：166.111.4.1/25</li>
</ul>
</li>
<li>网络2：166.111.4.<code>10 000000</code>/26=166.111.4.128/26（64台）<ul>
<li>e3：166.111.4.129/26</li>
</ul>
</li>
<li>网络3：166.111.4.<code>110 00000</code>/27=166.111.128.192/27（32台）<ul>
<li>e6：166.111.128.193/27</li>
</ul>
</li>
<li>网络4：166.111.4.<code>111000 00</code>/30=166.111.4.224/30（4台）<ul>
<li>e1：166.111.4.225/30</li>
<li>e2：166.111.4.226/30</li>
</ul>
</li>
<li>网络5：166.111.4.<code>111001 00</code>/30=166.111.4.228/30（4台）<ul>
<li>e4：166.111.4.229/30</li>
<li>e5：166.111.4.230/30</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：全0和全1两个主机号一般不参与IP地址分配。</p>
<p><strong>记忆<font color=red>常见的掩码数</font></strong>：<strong>128=<code>10000000</code>，192=<code>11000000</code>，224=<code>11100000</code>，240=<code>11110000</code></strong>。</p>
</blockquote>
<p>（2）ARP协议完成IP地址到MAC地址的映射。</p>
<ul>
<li>AB通信：处于同一网段，A首先检查ARP高速缓存，若未命中则广播ARP请求分组，B向A单播响应分组，从而A找到主机B的MAC地址，双方实现数据通信。</li>
<li>AC通信：处于不同网段，A首先检查ARP高速缓存，类似地，若未命中则用ARP找到R1的e0端口的MAC地址，R1的e1端口再用ARP找到R2的e2端口的MAC地址，R2的e3端口再用ARP找到C的MAC地址，将消息最终转发给C。C到A同理。</li>
</ul>
<p>（3）源IP和⽬的IP不变。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>网段</th>
<th>源IP</th>
<th>⽬的IP</th>
<th>源MAC</th>
<th>⽬的MAC</th>
</tr>
</thead>
<tbody>
<tr>
<td>网络1</td>
<td>IP-A</td>
<td>IP-C</td>
<td>MAC-A</td>
<td>MAC-e0</td>
</tr>
<tr>
<td>网络4</td>
<td>IP-A</td>
<td>IP-C</td>
<td>MAC-e1</td>
<td>MAC-e2</td>
</tr>
<tr>
<td>网络2</td>
<td>IP-A</td>
<td>IP-C</td>
<td>MAC-e3</td>
<td>MAC-C</td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="判断题（2’-10-20’）"><a href="#判断题（2’-10-20’）" class="headerlink" title="判断题（2’*10=20’）"></a>判断题（2’*10=20’）</h4><h5 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h5><p>判断：T(n)=a&gt;0，无论常数 a 多大，时间复杂度为 T(N)=T(n/2)+O(1)的解总是 $O(logn)$</p>
<blockquote>
<p>我怀疑原题是T(0)=a。</p>
<p>Q.E.D，命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="CBA算法"><a href="#CBA算法" class="headerlink" title="CBA算法"></a>CBA算法</h5><p>判断：基于 CBA 的算法对所有大小为 n 的数组时间复杂度是$Ω(nlogn)$</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
<blockquote>
<p>参考：<em>PPT-P119-比较树</em></p>
</blockquote>
</blockquote>
<h5 id="基数排序-1"><a href="#基数排序-1" class="headerlink" title="基数排序"></a>基数排序</h5><p>判断：基数排序的底层排序算法一定是稳定的</p>
<blockquote>
<p>19年判断题。如果不稳定，基数排序本身就不正确了。命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="堆-1"><a href="#堆-1" class="headerlink" title="堆"></a>堆</h5><p>判断：输入随机的情况下完全二叉堆的插入平均时间是常数</p>
<blockquote>
<p>19年判断题。命题为<strong><font color=red>真</font></strong>。最坏$O(logn)$。</p>
</blockquote>
<h5 id="Splay树-1"><a href="#Splay树-1" class="headerlink" title="Splay树"></a>Splay树</h5><p>判断：伸展树插入操作的分摊时间复杂度 $O(logn)$</p>
<blockquote>
<p>splay的插入操作需要借助search接口。而serach接口的分摊复杂度（双层伸展）是 $O(logn)$。</p>
<p>命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="散列表-1"><a href="#散列表-1" class="headerlink" title="散列表"></a>散列表</h5><p>判断：对长度为 m=4k+3 素数的散列表双平方探测一定能访问其全部元素</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
<blockquote>
<p>参考：<em>PPT-P1052-费马双平方定理</em>，<em>习题解答-9-17</em></p>
</blockquote>
</blockquote>
<h5 id="KMP算法-2"><a href="#KMP算法-2" class="headerlink" title="KMP算法"></a>KMP算法</h5><p>判断：没改进的 next 算法时间复杂度也是 $O(n)$</p>
<blockquote>
<p>19年判断题。命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="Fib查找"><a href="#Fib查找" class="headerlink" title="Fib查找"></a>Fib查找</h5><p>判断：Fib 查找时以前后黄金分割点作为轴点的常系数相同</p>
<blockquote>
<p>显然是不同的。因为左右的查找代价不同。</p>
<p>命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h5 id="PFC编码"><a href="#PFC编码" class="headerlink" title="PFC编码"></a>PFC编码</h5><p>判断：PFC(最优前缀编码)互换不同深度节点位置一定会破坏其性质</p>
<blockquote>
<p>题目有问题，PFC（prefix-free code）是<strong>前缀无歧义</strong>编码。此时，交换节点不影响性质（一定<strong>不</strong>会破坏其性质）。</p>
<p>修改题目翻译后，命题为<strong><font color=blue>假</font></strong>。</p>
<blockquote>
<p>即使Huffman也不一定会破坏。比如，3个等权叶节点。</p>
</blockquote>
</blockquote>
<h5 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h5><p>判断：任何情况下折半查找都比顺序查找快</p>
<blockquote>
<p>假设命中元素位于首位置。</p>
<p>命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h4 id="选择题（3’-8-24’）"><a href="#选择题（3’-8-24’）" class="headerlink" title="选择题（3’*8=24’）"></a>选择题（3’*8=24’）</h4><h5 id="就地算法"><a href="#就地算法" class="headerlink" title="就地算法"></a>就地算法</h5><p>就地算法的空间复杂度是（）</p>
<p>A.O(1) B.O(n) C.忘了不重要 D.忘了不重要</p>
<blockquote>
<p>O(1)</p>
</blockquote>
<h5 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h5><p>对于逆波兰式 <code>0!1+23!4+^*56!7*8!?/-9+</code>的值等于 2017，则？处的运算符为</p>
<p>A.加号 B.减号 C.乘号 D.除号 E.乘方 F.阶乘</p>
<blockquote>
<p>后缀表达式即逆波兰表达式。</p>
<p>计算一遍即可。<del>计算量太大辣</del></p>
<ul>
<li><code>1 1 +  23!4+^*56!7*8!?/-9+</code></li>
<li><code>2 2 3 !  4+^*56!7*8!?/-9+</code></li>
<li><code>2 2 6 4 +  ^*56!7*8!?/-9+</code></li>
<li><code>2 2 10 ^  *56!7*8!?/-9+</code></li>
<li><code>2 2 10 ^  *56!7*8!?/-9+</code></li>
<li><code>2 1024 *  56!7*8!?/-9+</code></li>
<li><code>2048 5 6 !  7*8!?/-9+</code></li>
<li><code>2048 5 6! 7 *  8!?/-9+</code></li>
<li><code>2048 5 7! 8 !  ?/-9+</code></li>
<li><code>2048 5 7! 8! ?  /-9+</code> = 2017</li>
<li><code>2048 5 7! 8! ?  /-</code> = 2008</li>
<li><code>5 7! 8! ?  /</code> = 40</li>
<li><code>7! 8! ?</code> = 1/8</li>
<li><code>?</code>=<code>/</code></li>
</ul>
</blockquote>
<h5 id="BM算法"><a href="#BM算法" class="headerlink" title="BM算法"></a>BM算法</h5><p>对于长度为 m 的串进行串匹配时好后缀数组中 gs[0]=1 的概率为</p>
<img data-src="/912/1567519159374-1577347213374.png" class="" width="1567519159374">
<blockquote>
<p>B。</p>
<p>设串为</p>
<script type="math/tex; mode=display">
A_1A_2A_3...A_m</script><p>由gs[0]=1（只需要向左移1位），可推出，</p>
<script type="math/tex; mode=display">
A_1=A_2,A_2=A_3,……,A_{m-1}=A_m</script><p>即，串中<strong>所有字符全等</strong></p>
<script type="math/tex; mode=display">
A_1A_2A_3...A_m=XXXX……XX</script><p>设字符集大小为T，则串中所有字符全等出现的概率为</p>
<script type="math/tex; mode=display">
T*\left(\frac{1}{T}\right)^m=\left(\frac{1}{T}\right)^{m-1}=\frac{1}{T^{m-1}}</script><p>似乎回忆题中漏掉了字符集大小的条件。可以猜测此处T=2。故选B。</p>
</blockquote>
<h5 id="非法表达式"><a href="#非法表达式" class="headerlink" title="非法表达式"></a>非法表达式</h5><p>一个非法表达式，问强行求解的值是多少</p>
<blockquote>
<p>我猜是非法表达式指的是用evaluate求解时非法的中缀表达式。</p>
<p>2014期中有一道类似题：（选B，见<em>习题 4-12</em>）</p>
<img data-src="/912/1567528209788-1577347213374.png" class="" width="1567528209788">
</blockquote>
<h5 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h5><p>7 阶 B-树<strong>根节点常驻内存</strong>，则对规模为 2017 的 B-树最多需要几次访问？</p>
<blockquote>
<p>4次。7阶B树 = (4,7)-B树。（B树叶节点深度相同）</p>
<p>B树高度范围公式：</p>
<script type="math/tex; mode=display">
log_m(N+1)\leq h \leq log_{\lceil m/2\rceil}\lfloor(N+1)/2\rfloor+1</script><p>代入m=7，N=2017，有</p>
<script type="math/tex; mode=display">
3<log_7(2018)\leq h \leq log_41009+1<log_41024+1=6</script><p>故B树高度最大为5（即6层）。故最多需要4次访问。</p>
<blockquote>
<p>根节点无需访存，外部节点不计入访问。</p>
</blockquote>
</blockquote>
<h5 id="散列表-2"><a href="#散列表-2" class="headerlink" title="散列表"></a>散列表</h5><p>散列长为 2017，采用单平方探测，已经存入 1000 个元素，问此时最多有（？）个<strong>懒惰删除</strong>的桶单元。</p>
<ul>
<li>A.8 B.9 C.？ D.？</li>
</ul>
<blockquote>
<p> B。2017是素数。可访问元素数=1009。因此最多有<strong>9个</strong>懒惰删除的桶单元。</p>
</blockquote>
<h5 id="左式堆"><a href="#左式堆" class="headerlink" title="左式堆"></a>左式堆</h5><p>左式堆最右侧链长度为 k，则左式堆<strong>含有</strong>个元素。</p>
<ul>
<li>A.最少 2^k B.最少 2^k-1 C.最多 <strong> D.最多 </strong></li>
</ul>
<blockquote>
<p>B。最少$2^k-1$个内部节点。</p>
<blockquote>
<p>参考：<em>PPT-P1196</em></p>
</blockquote>
</blockquote>
<h5 id="AVL"><a href="#AVL" class="headerlink" title="AVL"></a>AVL</h5><p>对于同一个长度为 n 的序列分别按照递增和递减的顺序构造 AVL 树，那么“存在正整数k，使 $n=2^k-1$ ”是“两次构造的堆相同”的（ ）<br>A.充分不必要条件 B. 必要不充分条件 C. 充分必要条件 D. 既不充分也不必要条件</p>
<blockquote>
<p>C。充分必要条件。</p>
<p>首先，有结论：最终形成的两颗 AVL 树在结构上必然互为镜像。（注意到序列中没有相同元素）</p>
<ul>
<li>记递增、递减插入形成的两颗树分别为A，B</li>
<li>A树在每一个节点都满足BST的性质，左小右大</li>
<li>此时我们可以定义一个新的关系：<ul>
<li>若a<b，则在新的关系下a>b（恰好相反）</li>
<li>此时A序列在新关系的意义下，等价于按照递减的顺序构造的 AVL 树 的镜像</li>
</ul>
</li>
<li>由于插入顺序一定时，序列形成唯一对应的AVL树，因此A树的镜像必然等价于B树。</li>
</ul>
<p>若A与B相同，则A与A的镜像相同，即A对称。</p>
<p>又因为AVL在顺序插入的过程中，只在满树时对称，则A必然是$n=2^k-1$的满树。</p>
<blockquote>
<p>见：<em>习题集 P155-7-20</em>。</p>
</blockquote>
</blockquote>
<h4 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h4><h5 id="单峰向量（好像是-16’）"><a href="#单峰向量（好像是-16’）" class="headerlink" title="单峰向量（好像是 16’）"></a>单峰向量（好像是 16’）</h5><p>已知 A[0,n ), A[0~k)严格单调递增，A[k~n)严格单调递减，设计一个 O(logn)算法找出 k</p>
<p>1)伪代码描述算法<br>2)说明算法正确性<br>3)证明最坏情况下时间复杂度也是 O(logn)</p>
<blockquote>
<p>二分即可，每次比较左右两侧。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/av4984559" target="_blank" rel="noopener external nofollow noreferrer">UESTCACM 每周算法讲堂 花式找极值</a></p>
<blockquote>
<ul>
<li>三等分法：区间内三等分，2个轴点比较大小，收缩一边的端点到较小的轴点处。递归。</li>
</ul>
</blockquote>
<p>差分法：O(n)差分完以后，O(logn)二分。当然性能就差了，不满足题意要求。</p>
</blockquote>
</blockquote>
<h5 id="最大和区间（好像是-10’）"><a href="#最大和区间（好像是-10’）" class="headerlink" title="最大和区间（好像是 10’）"></a>最大和区间（好像是 10’）</h5><p>给定一个整数序列，求出连续子序列和的最大值<br>1)说明算法思路<br>2)伪代码描述算法<br>3)说明时间复杂度和空间复杂度<br>题注(大致意思)：蛮力算法就不要用啦，是 O(n^3),只有设计出 O(n)算法才有可能满分，O(n^2)酌情给分。</p>
<blockquote>
<p>RT。</p>
<img data-src="/912/1561891249167.png" class="">
</blockquote>
<h3 id="操作系统-2"><a href="#操作系统-2" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="填空（0-5‘-10-5’）"><a href="#填空（0-5‘-10-5’）" class="headerlink" title="填空（0.5‘*10=5’）"></a>填空（0.5‘*10=5’）</h4><h5 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h5><p>父进程退出后，没结束的子进程变成 （   ）。</p>
<blockquote>
<p>子进程执行 exit()，若未检测到父进程执行 wait()，则子进程进入__状态。当某子进程调用 exit()时唤醒父进程，将 exit()返回值作为父进程中 wait()的返回值</p>
<p>孤儿进程。与2019类似。</p>
</blockquote>
<h5 id="高响应比调度算法"><a href="#高响应比调度算法" class="headerlink" title="高响应比调度算法"></a>高响应比调度算法</h5><p>高响应比调度算法的分母是程序的（   ），分子是（   ）。</p>
<blockquote>
<p>等待时间，执行时间。</p>
</blockquote>
<h5 id="优先级反置"><a href="#优先级反置" class="headerlink" title="优先级反置"></a>优先级反置</h5><p>优先级反置指的是（   ）抢占了（   ）的资源，（   ）时低优先级进程能动态改变优先级</p>
<blockquote>
<p>低优先级进程，高优先级进程，使用优先级继承/优先级天花板协议。</p>
</blockquote>
<h5 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h5><p>（   ）支持暂时放弃互斥资源访问权，等待信号</p>
<blockquote>
<p>管程。正在管程中的线程可以临时放弃管程的互斥访问，等待事件出现时恢复。</p>
</blockquote>
<h5 id="管程-临界区"><a href="#管程-临界区" class="headerlink" title="管程/临界区"></a>管程/临界区</h5><p>（   ）提供了一个执行环境，其中线程只能同时执行一个 balabala</p>
<blockquote>
<p>管程？锁机制？<strong>临界区</strong>？</p>
</blockquote>
<h4 id="判断（0-5‘-10-5’）"><a href="#判断（0-5‘-10-5’）" class="headerlink" title="判断（0.5‘*10=5’）"></a>判断（0.5‘*10=5’）</h4><h5 id="进程终止（wait-系统调用）"><a href="#进程终止（wait-系统调用）" class="headerlink" title="进程终止（wait()系统调用）"></a>进程终止（wait()系统调用）</h5><p>当某子进程调用 exit()时唤醒父进程，将 exit()返回值作为父进程中 wait()的返回值</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。PPT-P516。</p>
</blockquote>
<h5 id="管程-1"><a href="#管程-1" class="headerlink" title="管程"></a>管程</h5><p>管程就是一个黑箱子，程序员往里面扔函数，同一时间只有一个函数在执行</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。基本没毛病。</p>
</blockquote>
<h5 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h5><p>Buddy算法中，释放一个空间后可以根据起始长度和大小与相邻空闲空间合并</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。不一定，只能与空闲的buddy合并。</p>
</blockquote>
<h5 id="进程状态切换"><a href="#进程状态切换" class="headerlink" title="进程状态切换"></a>进程状态切换</h5><p>如果用户强制使用任务管理器kill一个进程，那么即使它处于就绪状态/阻塞状态，操作系统也要把它变成运行状态</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。按照进程状态图，所有的进程都必须从运行态进入退出态。kill只是向进程发送一个信号，终止工作由被终止进程自己完成。</p>
</blockquote>
<h5 id="copy-on-write机制"><a href="#copy-on-write机制" class="headerlink" title="copy on write机制"></a>copy on write机制</h5><p>操作系统采用copy on write机制时，fork()函数会复制进程的页目录表</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。不会。copy on write机制下，它们共享页表，只有当对某页发生写操作时，才引发Page Fault单独复制并分配该页给操作进程。</p>
</blockquote>
<h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p>使用自旋锁不能保证进程按先来后到的顺序使用 cpu 资源</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。<strong>自旋锁具有随机性</strong>。自旋锁需要占用CPU随时随地去查，有可能临界区的使用者退出时它刚改完，下一个进入者是谁去查那它就能进去，如果说运气不好（正好是这个资源变成有效）老是被人抢先查过，就没法按照等待的顺序进行。</p>
</blockquote>
<h5 id="管程-信号量"><a href="#管程-信号量" class="headerlink" title="管程/信号量"></a>管程/信号量</h5><p>管程和信号量在功能上等价</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h5 id="管程-2"><a href="#管程-2" class="headerlink" title="管程"></a>管程</h5><p>管程将资源抽象成条件变量，通过变量值的增减来控制进程的访问</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h4 id="belady大题（6’）"><a href="#belady大题（6’）" class="headerlink" title="belady大题（6’）"></a>belady大题（6’）</h4><p>LRU、BEST（OPT）、CLOCK、FIFO页面置换算法是否能产生belady异常，若可以举出例子，不可以给出证明</p>
<blockquote>
<p><del>wdm，还要举例子，还要证明？？？</del>。</p>
<p><strong><em>产生belady的算法</em></strong>：FIFO，CLOCK，改进CLOCK，不恢复计数的LFU。</p>
<ul>
<li><strong>FIFO</strong>反例：（<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1014" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1014</a>）</li>
<li><p>序列：<code>123412512345</code>，物理页面数为4时缺页次数（10）比物理页面数为3时缺页次数多（9）</p>
</li>
<li><p><strong>CLOCK</strong>反例：（<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=214" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=214</a>）</p>
</li>
<li>因<u>如果所有页的访问位都为1时，clock算法将退化为FIFO</u>，可以同样构造序列：<code>123412512345</code>。当物理页帧为3时，缺页次数为9次，当物理页帧为4时，缺页次数为10次。</li>
</ul>
 
<ul>
<li><p>不恢复计数的LFU反例：（<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1031" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1031</a>）</p>
<ul>
<li>考虑访存顺序：0 0 1 1 1 2 2 0 0 2 2 3 1 3 1 3 1 3 1 3 1 3 1 … 最后的序列是3号页和1号页的循环。<br>当物理页帧数为2时，之后的3和1循环段不会出现任何缺页<br> 当物理页帧数为3时，之后的3和1循环段总是缺页</li>
</ul>
</li>
</ul>
<blockquote>
<p>……在国防科大的操作系统教材上有栈式置换算法不会出现belady现象的证明。<br>只要不是栈式置换算法，就一定会有belady现象。<font color=red><strong>构造实例的方法</strong></font>是，</p>
<ul>
<li><strong>对于指定的置换算法，在把所有已分配的页面用上后，访问一个新页，就会出现缺页；然后就可以构造一个序列，每次都访问刚被置换的页面</strong>。这个序列就应该是belady现象的实例。（<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=762" target="_blank" rel="noopener external nofollow noreferrer">From Here</a>）</li>
</ul>
</blockquote>
<p><strong><em>不产生belady算法</em></strong>：OPT，LRU，恢复计数的LFU。</p>
<ul>
<li><strong>OPT</strong>证明：<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1296" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1296</a><ul>
<li>不存在，n个物理页面，包含1个最近访问的页面，未来一段时间t1将访问的不同页面的集合S1构成了剩下n-1个页，t1为访问第n个不同页面的时间 若有n+1个物理页面，访问第n+1个不同页面的时间t2显然大于t1，剩下的n个页的集合S2也应包含S1</li>
</ul>
</li>
<li><strong>LRU</strong>证明：<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=205" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=205</a><ul>
<li>不存在，对于LRU算法，如果内存页的集合为最近引用的页，那么对于帧的增加，这n页仍然是最近引用的页，所以也仍然在内存中，所以对于帧数为n的内存页集合是对于帧数为n+1的内存页集合的子集 </li>
</ul>
</li>
<li>恢复计数的LFU证明：<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1297" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1297</a></li>
</ul>
<blockquote>
<p>对不产生belady的<strong><font color=red>统一的证明思路</font></strong>：</p>
<ul>
<li><strong>假设n个物理页，记内存中的页面集合为S，若物理页增加1，则内存中的页面集合为S‘，只需证明$S \subset S’$。</strong>（<a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1014" target="_blank" rel="noopener external nofollow noreferrer">From Here</a>）<ul>
<li>对于OPT，S是最近的n个<strong>之后要访问的页面</strong>，S’是最近的n+1个之后要访问的页面，显然$S \subset S’$</li>
<li>对于LRU，S是最近的n个<strong>之前已访问的页面</strong>，S’是最近的n+1个之前已访问的页面，显然$S \subset S’$</li>
</ul>
</li>
<li>因为$S \subset S’$，所以S中命中的页，在S‘中也一定命中。因而缺页率必不增。</li>
</ul>
<p>本题的原题出自：<strong><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1014" target="_blank" rel="noopener external nofollow noreferrer">https://piazza.com/class/i5j09fnsl7k5x0?cid=1014</a></strong></p>
<blockquote>
<img data-src="/912/1574263130562-1577347213374.png" class="" width="1574263130562">
</blockquote>
</blockquote>
</blockquote>
<h4 id="uCore大题（6’）"><a href="#uCore大题（6’）" class="headerlink" title="uCore大题（6’）"></a>uCore大题（6’）</h4><img data-src="/912/1567523276326-1577347213374.png" class="" width="1567523276326">
<img data-src="/912/1567523281241-1577347213374.png" class="" width="1567523281241">
<img data-src="/912/1567523285363-1577347213374.png" class="" width="1567523285363">
<img data-src="/912/1567523289150-1577347213374.png" class="" width="1567523289150">
<p>le2page(*page,page_link)语句都需要展开那些宏定义？说明这个语句的含义。(还有一段ucore代码是buddy（伙伴）算法的页面分配函数，好像跟这道题关系不大，就不贴了<del>主要是没找到</del>。)</p>
<p>一道 Ucore 代码的题。然后列了整整三张 ucore 代码，其中一张是列表 list 的定义和add 操作，另两页是题目要用的。问最后一页的一句代码调用了几个宏命令，是什么意思</p>
<blockquote>
<p><code>le2page(*page,page_link)</code>需要展开3个宏定义：<code>le2page</code>，<code>to_struct</code>，<code>offsetof</code>。该语句根据链表节点的指针和宿主数据结构的类型寻找其宿主数据结构的头指针。</p>
<ul>
<li><code>le2page</code>：list entry to page，是一个寻找Page类型数据结构的头指针的宏。调用<code>to_struct</code>宏。<ul>
<li><code>#define le2page(le, member) to_struct((le), struct Page, member)</code></li>
</ul>
</li>
<li><code>to_struct</code>：根据链表节点地址和成员在类型中的偏移量确定宿主数据结构头指针。调用<code>offsetof</code>宏。<ul>
<li><code>#define to_struct(ptr, type, member) ((type *)((char *)(ptr) - offsetof(type, member)))</code></li>
</ul>
</li>
<li><code>offsetof</code>：计算成员在类型中的偏移量。<ul>
<li><code>#define offsetof(type, member) ((size_t)(&amp;((type *)0)-&gt;member))</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>主要考察的是lab0的双向循环链表。</p>
<p>参考：<em>PPT-P108</em></p>
</blockquote>
</blockquote>
<h4 id="哲学家就餐（4’）"><a href="#哲学家就餐（4’）" class="headerlink" title="哲学家就餐（4’）"></a>哲学家就餐（4’）</h4><img data-src="/912/1574349514505.png" class="">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mutex = <span class="number">1</span> <span class="comment">//信号量，初值为 1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    think();</span><br><span class="line">    P(mutex);</span><br><span class="line">    P(左边的叉子);</span><br><span class="line">    P(右边的叉子);</span><br><span class="line">    eat();</span><br><span class="line">    V(左边的叉子);</span><br><span class="line">    V(右边的叉子);</span><br><span class="line">    V(mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>该算法是否会导致死锁，为什么？</li>
<li>该算法是否允许两名哲学家同时用餐，为什么？若可以请举例</li>
</ol>
<blockquote>
<p><del>两版回忆，一个贴的方案1，一个贴的方案2</del>。。。晕。</p>
<p>方案1（自由进餐）：</p>
<ul>
<li>会导致死锁。</li>
</ul>
<img data-src="/912/1574349382405.png" class="">
<p>方案2（互斥信号量）：</p>
<ul>
<li>不会导致死锁，但每次只允许1人进餐</li>
</ul>
<img data-src="/912/1574349402773.png" class="">
<p>还有个这里没提到的方案3（分奇偶）:</p>
<ul>
<li>没有死锁，可有多人同时进餐</li>
</ul>
<img data-src="/912/1574349420605.png" class="">
<blockquote>
<p>参考：<em>PPT-P829~P841</em></p>
</blockquote>
</blockquote>
<h4 id="内存管理（4’）"><a href="#内存管理（4’）" class="headerlink" title="内存管理（4’）"></a>内存管理（4’）</h4><p>Intel X86-32 CPU 使用分页管理，每页 4KB，逻辑地址格式如图所示，这种 CPU最多支持 4GB 内存。为了使系统能够使用 64GB 内存，使用物理内存扩展技术，使物理地址长度变为 64 位，页面大小仍为 4KB。试设计逻辑地址格式，使其可以在支持物理内存扩展技术的 X86-32 CPU 上运行。</p>
<img data-src="/912/1567526730310-1577347213374.png" class="" width="1567526730310">
<blockquote>
<p>原物理内存4GB，每页4KB，可分为1M个物理页=20位。加上12个控制位，得到页表项大小32位。</p>
<p>新物理内存64GB，每页4KB，可分为16M个物理页=24位。加上12个控制位，得到页表项大小<strong>36位</strong>。为满足对齐要求，向上扩展取为64位=8B。则每个页可含512个页表项。</p>
<p>可知页面offset=12位（不变），二级页表offset=9位，一级页表offset=9位。</p>
<p>此时需要额外设计offset=2位的页目录指针表。故逻辑地址新格式为32位=<code>2 + 9 + 9 + 12</code>。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E6%89%A9%E5%B1%95" target="_blank" rel="noopener external nofollow noreferrer">https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E6%89%A9%E5%B1%95</a></p>
<blockquote>
<p>x86的处理器增加了额外的地址线以选择那些增加了的内存，所以实体内存的大小从32位增加到了36位。最大的实体内存由4GB增加到了64GB。 </p>
<p>32位的<a href="https://zh.wikipedia.org/wiki/虚拟地址" target="_blank" rel="noopener external nofollow noreferrer">虚拟地址</a>（<a href="https://zh.wikipedia.org/w/index.php?title=线性地址&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener external nofollow noreferrer">线性地址</a>）则没有变，所以一般的应用软件可以继续使用地址为32位的指令；如果用<a href="https://zh.wikipedia.org/wiki/平面内存模式" target="_blank" rel="noopener external nofollow noreferrer">平面内存模式</a>的话，这些软件的地址空间也被限制为4GB。操作系统用<a href="https://zh.wikipedia.org/wiki/页表" target="_blank" rel="noopener external nofollow noreferrer">页表</a>将这4GB的地址空间映射到大小为64GB的实体内存，而这个映射对各个<a href="https://zh.wikipedia.org/wiki/进程" target="_blank" rel="noopener external nofollow noreferrer">进程</a>一般是不一样的。这样一来，即使不能为单单一个程序所用，那些增加了的物理内存仍然可以发挥作用。 </p>
</blockquote>
<p><a href="https://blog.csdn.net/crazyingbird/article/details/7175559" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/crazyingbird/article/details/7175559</a></p>
<blockquote>
<p> Intel通过在处理器上把管脚数从32增加到36，以提高处理器的寻址能力，使其达到2^36=64GB，为此，需引入一种新的分页机制。 </p>
<p> 64GB的RAM被分为2^24个页框，页表项的物理地址字段从20位扩展到24位，每个页表项必须包含12个标志位（固定）和24个物理地址位（36-12），共36位，因此，每个页表项须从32位扩展到64位（36位&gt;32位，考虑到对齐，因此应将页表项扩大一倍到64位）。</p>
</blockquote>
<p><a href="https://piazza.com/class/i5j09fnsl7k5x0?cid=1198" target="_blank" rel="noopener external nofollow noreferrer">物理地址扩展PAE和地址空间相关的几个问题</a></p>
<blockquote>
<p>通常我们在讨论CPU时所说的8位、16位、32位和64位CPU是指数据总线的宽度；而地址总线宽度并不一定与数据总线宽度一致。如8位CPU的地址总线一定是大于8位的，否则的说，就只有256字节的内存地址空间了；目前所有的64位CPU的地址总线也一定是小于64位的，如48位地址总线就可以支持64TB的内存地址空间，这在目前技术条件下，还是不必要的。</p>
<p>在32位CPU上，数据总线和地址总线在一段时间内都是一样的，所有大家会觉得所有CPU都是一样的。实际情况与直觉是不一样的。PAE就是intel在32位CPU使用的一种扩展内存地址空间的技术，它使用36位地址总线，最多可支持64GB内存。这种扩展会导致物理页号的长度和页表格式的一系列变化。详细描述见下面链接。</p>
<p><a href="https://en.wikipedia.org/wiki/Physical_Address_Extension" target="_blank" rel="noopener external nofollow noreferrer">https://en.wikipedia.org/wiki/Physical_Address_Extension</a></p>
<p>由于使用PAE后物理页号的长度增加了，CPU可以寻址的物理页面数变增加了，从而物理地址空间变大了。</p>
<ul>
<li>注：32位支持2^32个物理页，64位支持2^64个物理页，因而物理页号的长度增加。</li>
</ul>
<p>在Intel的32位CPU上，<strong>物理地址空间可以大于4GB，但进程的虚拟地址空间还只能是4GB</strong>。原因是，<strong>即使使用了PAE，虚拟地址还是32位的</strong>。 </p>
<ul>
<li>注：因此需要采用36根CPU地址线，才能够使用64GB虚拟空间。</li>
</ul>
</blockquote>
<img data-src="/912/1571402156270-1577347213374.png" class="" width="1571402156270">
</blockquote>
</blockquote>
<h3 id="组成原理-1"><a href="#组成原理-1" class="headerlink" title="组成原理"></a>组成原理</h3><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><h5 id="主频"><a href="#主频" class="headerlink" title="主频"></a>主频</h5><p>CPU 的主频越高，指令执行的越快。</p>
<blockquote>
<p>错。执行时间=（指令条数<strong>*CPI</strong>）/主频。</p>
</blockquote>
<h5 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h5><p>raid6坏两个磁盘也可以工作</p>
<blockquote>
<p>对。RIAD6是二维校验，有两个冗余磁盘。</p>
</blockquote>
<h5 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h5><p>c语言若int x,y 若x&gt;y，则-x&lt;-y</p>
<blockquote>
<p>错。反例：int的范围是[-M, M-1]。令y=-M，则-y=M=-M(溢出)，故y总是最小值。</p>
</blockquote>
<h5 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h5><p>内存逻辑地址连续的，物理地址不一定连续。</p>
<blockquote>
<p>对。</p>
</blockquote>
<h4 id="填空"><a href="#填空" class="headerlink" title="填空"></a>填空</h4><h5 id="补码-1"><a href="#补码-1" class="headerlink" title="补码"></a>补码</h5><p>1)-2017的32位补码表示（ ）(16进制或2进制)。</p>
<blockquote>
<p>-2017的补码 = 2017的反码 + 1。</p>
<p>由除基取余法，</p>
<ul>
<li>2017=<code>0..0 11111100001</code></li>
<li>2017[反]=<code>1..1 00000011110</code></li>
<li>-2017=<code>1..1 00000011111</code>=<code>0xFFFFF81F</code></li>
</ul>
</blockquote>
<h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><p>2)-2017.0 使用 IEEE 标准表示为单精度浮点数为（ ）（使用 16 进制获二进制表示）</p>
<blockquote>
<p>由上一题，有2017=<code>11111100001</code>=<code>1.1111100001 *2^10</code></p>
<ul>
<li>符号位：<code>1</code></li>
<li>阶码：<code>1010</code>+<code>01111111</code>=<code>10001001</code></li>
<li>尾数：<code>1111100001 0..0</code></li>
</ul>
<p>IEEE754表示为：<code>1 10001001 1111100001 0..0</code>=<code>1100 0100 1111 1100 0010 0..0</code>=<code>0xC4FC2000</code></p>
<blockquote>
<p><strong><font color=red>牢记6个模式串</font></strong>：<strong><font color=blue>A</font>(10=1010) <font color=blue>B</font>(11=1011) <font color=blue>C</font>(12=1100) <font color=blue>D</font>(13=1101) <font color=blue>E</font>(14=1110) <font color=blue>F</font>(15=1111)</strong>。</p>
<p>浮点数转换验证工具：<a href="http://www.styb.cn/cms/ieee_754.php" target="_blank" rel="noopener external nofollow noreferrer">http://www.styb.cn/cms/ieee_754.php</a></p>
</blockquote>
</blockquote>
<h5 id="Cache映射方式"><a href="#Cache映射方式" class="headerlink" title="Cache映射方式"></a>Cache映射方式</h5><p>3)Cache 和主存的映射方式：（ ），（ ），（ ）。</p>
<blockquote>
<p>全相联映射，直接映射，组相联映射。</p>
</blockquote>
<h5 id="时序-组合逻辑"><a href="#时序-组合逻辑" class="headerlink" title="时序/组合逻辑"></a>时序/组合逻辑</h5><p>4)处理机（ ）逻辑电路进行算术运算，（ ）逻辑电路用于数据暂存，（ ）逻辑电路用于分支选择。</p>
<blockquote>
<p>组合，时序，组合。只有时序逻辑具有功能。</p>
</blockquote>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><h5 id="流水线-2"><a href="#流水线-2" class="headerlink" title="流水线"></a>流水线</h5><p>1)以下关于五段流水线的处理机说法错误的是 </p>
<p>A.多个处理器不会发生结构冲突 </p>
<p>B.每个周期执行一个功能</p>
<p>C.可以采用微程序或者硬连线设计</p>
<p>D.不同的指令执行时间相同</p>
<blockquote>
<p>A。A显然。B、D是PPT原话。C说的是CPU控制器的组成，也算对吧。</p>
</blockquote>
<h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p>2)以下说法正确的是</p>
<p>A.缓存越大程序执行速度越快</p>
<p>B.TLB也是一种缓存数据和指令的缓存器</p>
<p>C.</p>
<p>D.</p>
<blockquote>
<p>A。TLB缓存的是虚实地址的映射关系。</p>
</blockquote>
<h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><p>3)以下哪个不是响应异常的处理</p>
<p>A.保存pc  B.保存通用寄存器 C.保存异常原因  D.恢复pc</p>
<blockquote>
<p>B。不需要保存通用寄存器。</p>
</blockquote>
<h5 id="数据冲突-1"><a href="#数据冲突-1" class="headerlink" title="数据冲突"></a>数据冲突</h5><p>4)以下哪种不可以解决数据冲突</p>
<p>A.暂停流水线 B.分支预测 C.调整指令顺序 D.数据旁路</p>
<blockquote>
<p>B。B是控制冲突的解决方法。</p>
</blockquote>
<h4 id="流水线大题-1"><a href="#流水线大题-1" class="headerlink" title="流水线大题"></a>流水线大题</h4><p>五段流水线，每段10ns，每个寄存器5ns，以下一段程序(4句)，问执行时间是多少</p>
<p>lw <em>*</em></p>
<p>sub <em>*</em></p>
<p>and <em>*</em></p>
<p>or <em>*</em></p>
<blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>IF</th>
<th>ID</th>
<th>EXE</th>
<th>MEM</th>
<th>WB</th>
<th>指令延迟</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lw</code></td>
<td>10+5</td>
<td>10+5</td>
<td>10+5</td>
<td>10+5</td>
<td>10</td>
<td>70</td>
</tr>
<tr>
<td><code>sub</code></td>
<td>10+5</td>
<td>10+5</td>
<td>10+5</td>
<td></td>
<td>10</td>
<td>55</td>
</tr>
<tr>
<td><code>and</code></td>
<td>10+5</td>
<td>10+5</td>
<td>10+5</td>
<td></td>
<td>10</td>
<td>55</td>
</tr>
<tr>
<td><code>or</code></td>
<td>10+5</td>
<td>10+5</td>
<td>10+5</td>
<td></td>
<td>10</td>
<td>55</td>
</tr>
<tr>
<td><strong>总执行时间</strong></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong><font color=red>235 ns</font></strong></td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<h3 id="计算机网络-2"><a href="#计算机网络-2" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="选择-1"><a href="#选择-1" class="headerlink" title="选择"></a>选择</h4><h5 id="OSI和TCP-IP"><a href="#OSI和TCP-IP" class="headerlink" title="OSI和TCP/IP"></a>OSI和TCP/IP</h5><p>1)TCP/IP与OSI </p>
<p>A.</p>
<p>B.OSI从上到下依次是应用层，会话层，表示层，网际层，网络层，数据链路层，物理层</p>
<p>C.TCP/IP从上到下依次是应用层，网络层，数据链路层，物理层</p>
<p>D.TCP/IP适用场合比OSI更广</p>
<blockquote>
<p>D。B没有网际层，C缺失传输层。</p>
</blockquote>
<h5 id="奈奎斯特定理"><a href="#奈奎斯特定理" class="headerlink" title="奈奎斯特定理"></a>奈奎斯特定理</h5><p>2)奈奎斯特定理适用于以下哪些场合 </p>
<p>Ⅰ光纤 Ⅱ.同轴电缆 Ⅲ.红外线</p>
<p>A.Ⅰ和Ⅱ     B.Ⅱ和Ⅲ     C.Ⅰ和Ⅲ     D.Ⅰ、Ⅱ、Ⅲ</p>
<blockquote>
<p>D。此题为迷惑题，奈奎斯特定理适用于任何信道（即使是理想信道）。我觉得此题的含义准确来说应该是哪些场合受到奈奎斯特定理的约束。毕竟Ⅰ、Ⅱ、Ⅲ都不是理想信道。但准确来说，此题更像是香农定理。</p>
<p>网上可以查到另一道题：</p>
<blockquote>
<p>奈奎斯特定理适用于光纤吗?还是只适用于铜线?</p>
<p>答:都<strong>适用</strong>,因为<strong>奈奎斯特定理适用于</strong>所有介质</p>
</blockquote>
</blockquote>
<h5 id="GBN协议"><a href="#GBN协议" class="headerlink" title="GBN协议"></a>GBN协议</h5><p>3)两地相距3000公里(传播速度6us/公里) 最大帧64字节，采用GBN协议，带宽为1.536Mbps，则若要最大限度发挥网络带宽，至少需要多少比特的序号</p>
<p>A.4  B.5  C.6  D.7</p>
<blockquote>
<p>D。</p>
<ul>
<li>传输时间=64·8/(1.536·10^6)=0.33ms</li>
<li>RTT=2·3000·6/1000=36ms</li>
<li>总时间=传输时间+RTT=36.33ms</li>
</ul>
<p>要完全发挥，则<del>药不能停</del>，有：N&gt;=总时间/传输时间=36.33/0.33=110；S=logN&gt;=log110=6.78，故取7位。</p>
<blockquote>
<p>典例原题：</p>
<img data-src="/912/1571218617721-1577347213374.png" class="" width="1571218617721">
</blockquote>
</blockquote>
<h5 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h5><p>数据链路层使用的单位是<br>A.比特 B.报文 C.帧 D.分组</p>
<blockquote>
<p>C。显然。</p>
</blockquote>
<h5 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h5><p>选择重传协议，序号为0-13，发送窗口为7，当数据发送不产生冲突（为了使传输不出错），接收窗口最大值为多少</p>
<p>A.4  B.5  C.7  D.8</p>
<blockquote>
<p>C。接+收&lt;=序号数。</p>
</blockquote>
<h5 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h5><p>dns相关问题</p>
<p>A.天猫双12购物，不同地方两个人访问淘宝得到的ip一定相同</p>
<p>B. </p>
<p>C.存储ip是五元组</p>
<p>D.数据库集中存储</p>
<blockquote>
<p>C。A不一定。D可能是分布式数据库。</p>
<blockquote>
<p><a href="https://blog.csdn.net/sunansheng/article/details/49853137" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/sunansheng/article/details/49853137</a></p>
<img data-src="/912/1571243012481-1577347213374.png" class="" width="1571243012481">
</blockquote>
</blockquote>
<h4 id="透明网桥（4’）"><a href="#透明网桥（4’）" class="headerlink" title="透明网桥（4’）"></a>透明网桥（4’）</h4><p>一道透明网桥的大题，两个网桥三段子网，建立转发表，要求填表。</p>
<blockquote>
<p>网桥题，填转发表，和<strong>王道</strong>上的一道原题几乎一样。</p>
<blockquote>
<p>大概是：<em>计算机网络-3.8.4</em> 的综合题。</p>

</blockquote>
</blockquote>
<h4 id="路由器-TCP大题（10’）"><a href="#路由器-TCP大题（10’）" class="headerlink" title="路由器+TCP大题（10’）"></a>路由器+TCP大题（10’）</h4><p>一道路由器大题，两个路由器，三段网络的最大（<u>数据部分</u>）帧长度分别为1024,512,912，报头长度分别为14,12,12。两个路由器 R1、R2，R1 的 e0 端口链接着局域网 LAN1，R2 的 e0 端口连接着局域网 LAN2，R1 的 e1 端口连接着 R2 的 e1 端口。主机 A 在 LAN1 内，主机 B在 LAN2 内。如图：</p>
<img data-src="/912/1574276785965-1577347213375.png" class="" width="1574276785965">
<p>1）现在有 IP 地址 161.111.1.0/24 分给这些网，包括 R1 和 R2 的两个端口，问该如何分配，才能使 LAN1 和 LAN2 所获得的 IP 地址数量之和最多，写出 LAN1、LAN2 的 IP 地址范围，R1、R2 的端口地址以及它们的子网掩码。（4’）</p>
<p>2）若 A 要发送一个数据段 900B，TCP 头部 20B 的报文，在网络层加了一个 20B长的 IP 分组头部，Identification 的值为 X，问这个 IP 分组在 A~R1，R1~R2，R2~B 上传输时，求分组的 Total length、Identification、DF、MF、Fragment Offset 的值各是多少？（4’）</p>
<p>3）若从 A 到 B 所需往返传输时间为 RTT，现在 A 要向 B 传输 7 个 TCP 报文，那么从开始建立连接到 A 收到最后一个确认帧结束共经历了多少 RTT？</p>
<blockquote>
<p>（1）LAN1和LAN2最多利用约3/4的IP地址。</p>
<ul>
<li>LAN1：161.111.1.<code>0 0000000</code>/25 = 161.111.1.0/25<ul>
<li>地址范围：161.111.1.0/25~161.111.1.127/25</li>
<li>R1-e0端口地址：161.111.1.1/25；子网掩码：255.255.255.128</li>
</ul>
</li>
<li>LAN2：161.111.1.<code>10 000000</code>/26 = 161.111.1.128/26<ul>
<li>地址范围：161.111.1.128/26~161.111.1.191/26</li>
<li>R2-e0端口地址：161.111.1.129/26；子网掩码：255.255.255.192</li>
</ul>
</li>
<li>R1-R2：161.111.1.<code>11 000000</code>/26 = 161.111.1.192/26<ul>
<li>R1-e1端口地址：161.111.1.193/26；子网掩码：255.255.255.192</li>
<li>R2-e1端口地址：161.111.1.194/26；子网掩码：255.255.255.192</li>
</ul>
</li>
</ul>
<p>（2）<strong>Total length</strong>：总长度，首部+数据，单位是1B。<strong>Identification</strong>：标识，同一数据报的分片使用同一标识。<strong>DF</strong>（Don’t Fragment）：DF=1禁止分片，DF=0允许分片。<strong>MF</strong>（More Fragment）：MF=1后面还有分片，MF=0代表最后一片/没有分片。<strong>Fragment Offset</strong>：片偏移，分片后某片在原分组中的相对位置，单位是8B。</p>
<p>A~R1：（不分片）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Total length</th>
<th>Identification</th>
<th>DF</th>
<th>MF</th>
<th>Fragment Offset</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始数据报</td>
<td>920+20</td>
<td>X</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>数据报片1</td>
<td>920+14</td>
<td>X</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>R1~R2：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Total length</th>
<th>Identification</th>
<th>DF</th>
<th>MF</th>
<th>Fragment Offset</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始数据报</td>
<td>920+14</td>
<td>X</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>数据报片1</td>
<td>512+12</td>
<td>X</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>数据报片2</td>
<td>408+12</td>
<td>X</td>
<td>0</td>
<td>0</td>
<td>64</td>
</tr>
</tbody>
</table>
</div>
<p>R2~B：（不分片）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Total length</th>
<th>Identification</th>
<th>DF</th>
<th>MF</th>
<th>Fragment Offset</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据报片1</td>
<td>512+12</td>
<td>X</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>数据报片2</td>
<td>408+12</td>
<td>X</td>
<td>0</td>
<td>0</td>
<td>64</td>
</tr>
</tbody>
</table>
</div>
<p>（3）</p>
<ul>
<li>建立TCP连接：3次握手，1RTT（第3次可携带数据）</li>
<li>传输7个TCP报文：3RTT（按慢开始算法计算，分3个RTT分别发送1、2、4个报文）</li>
<li>释放TCP连接：4次握手，2RTT</li>
</ul>
<p>共计1+3+2=6RTT。</p>
</blockquote>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="判断题-3"><a href="#判断题-3" class="headerlink" title="判断题"></a>判断题</h4><h5 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h5><p>判断：若 f(n)=时间复杂度 O(g(n)),也不一定有 f(n)=O(g(n-1)).</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h5 id="散列表-3"><a href="#散列表-3" class="headerlink" title="散列表"></a>散列表</h5><p>判断：若散列表使用不超过其长度的素数，则存储关键不能保证其分布均匀。</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。假设这里的策略是除余算法。</p>
<p>设散列表长度为N，素数为Q&lt;N，则所有的关键码都必然落在散列表的$[0,Q)$区域内。存在一个永远散列不到的区域，显然分布不均。</p>
<blockquote>
<p>参考：<em>教材-9.3.3-散列函数-除余法-P262</em></p>
</blockquote>
</blockquote>
<h5 id="KMP算法-3"><a href="#KMP算法-3" class="headerlink" title="KMP算法"></a>KMP算法</h5><p>判断：在字符集各字符出现概率相同时，kmp 算法时间渐进程度接近蛮力算法。</p>
<blockquote>
<p>字符集越大KMP越接近蛮力算法（或者匹配概率越小）。跟各字符的概率没有关系吧？</p>
<p>命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h5 id="Huffman编码-1"><a href="#Huffman编码-1" class="headerlink" title="Huffman编码"></a>Huffman编码</h5><p>判断：哈夫曼树距离深度更小的节点的权值可能小于深度更大的节点的权值。</p>
<blockquote>
<p>不可能。但可能相等。</p>
<p>命题为<strong><font color=blue>假</font></strong>。</p>
</blockquote>
<h4 id="选择题-2"><a href="#选择题-2" class="headerlink" title="选择题"></a>选择题</h4><h5 id="Catalan数-1"><a href="#Catalan数-1" class="headerlink" title="Catalan数"></a>Catalan数</h5><p>五个互异节点构造的二叉树有多少种？</p>
<blockquote>
<p>$Catalan(5)=\cfrac{(2\times5)!}{5!\times (5+1)!}=42$。</p>
<blockquote>
<p>参考：<em>教材-7.3-平衡二叉树</em>，<em>习题解答-7-2</em></p>
</blockquote>
</blockquote>
<h5 id="逆序数（插入排序）"><a href="#逆序数（插入排序）" class="headerlink" title="逆序数（插入排序）"></a>逆序数（插入排序）</h5><p>对序列（64，63，…，2，1）进行直接插入排序比较次数最接近于（）<br>A.2800 B.2600 C.2400 D.2200 E.2000</p>
<blockquote>
<p>E。<strong>全逆序数</strong>=64*63/2=2016。</p>
</blockquote>
<h5 id="AVL-1"><a href="#AVL-1" class="headerlink" title="AVL"></a>AVL</h5><p>将关键字 1，2，3…，2016 插入初始为空的平衡二叉树中，假设只有一个根节点的二叉树高度为 0，那么最终二叉树的高度是多少？</p>
<blockquote>
<p>10。我猜是跟2018年一样的AVL树。那么，根据之前的结论，显然在插入1023个节点以后，形成高度为9的满树。此时再插入剩下的节点=993，高度再+1。</p>
<blockquote>
<p>参考：习题7-20。</p>
<p>在各次考试中，AVL、B树、红黑树等的<strong>单调插入</strong>均有所涉及。加以重视。</p>
</blockquote>
</blockquote>
<h5 id="B树-1"><a href="#B树-1" class="headerlink" title="B树"></a>B树</h5><p>搜索 7 阶 B 树的第 2016 个关键字，假设 B 树根节点在内存中，则共需启动几次 I/O.</p>
<blockquote>
<p>3至4次。我觉得原题应该跟18年的B树差不多。</p>
<p>B树高度范围公式：</p>
<script type="math/tex; mode=display">
log_m(N+1)\leq h \leq log_{\lceil m/2\rceil}\lfloor(N+1)/2\rfloor+1</script><p>代入m=7，N=2016，有</p>
<script type="math/tex; mode=display">
3<log_7(2017)\leq h \leq log_41008+1<log_41024+1=6</script><p>故B树高度范围为[4,5]。故需要3到4次I/O。</p>
</blockquote>
<h5 id="RPN-1"><a href="#RPN-1" class="headerlink" title="RPN"></a>RPN</h5><p>有如下逆波兰式结果为 2016，问?中的运算符号是多少（）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 0 ！ * 2 2 * 6 + ^ 18 8 ? 9 &#x2F; *</span><br></pre></td></tr></table></figure>
<ul>
<li><code>A.+ B.* C.^ D. ! E./</code></li>
</ul>
<blockquote>
<ul>
<li><code>2 0 ！ * 2 2 * 6 + ^ 18 8 ? 9 / *</code></li>
<li><code>2 0 ！</code>    <code>* 2 2 * 6 + ^ 18 8 ? 9 / *</code></li>
<li><code>2 1 *</code>    <code>2 2 * 6 + ^ 18 8 ? 9 / *</code></li>
<li><code>2 2 2 *</code>    <code>6 + ^ 18 8 ? 9 / *</code></li>
<li><code>2 2 2 *</code>    <code>6 + ^ 18 8 ? 9 / *</code></li>
<li><code>2 4 6 +</code>    <code>^ 18 8 ? 9 / *</code></li>
<li><code>2 10 ^</code>    <code>18 8 ? 9 / *</code></li>
<li><code>1024 18 8 ?</code>    <code>9 / *</code> = <code>2016</code></li>
<li><code>1024 (18 ? 8) 9 /</code>    <code>*</code> = <code>2016</code></li>
<li><code>1024 * ((18 ? 8) / 9)</code> = <code>2016</code></li>
</ul>
<p>此题有问题。暂时作废。或尝试修复。</p>
</blockquote>
<h4 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h4><h5 id="BFS寻找最小环路"><a href="#BFS寻找最小环路" class="headerlink" title="BFS寻找最小环路"></a>BFS寻找最小环路</h5><p>请利用图的广度优先遍历找出图中的<strong>最小环</strong>，若不存在环则输出+oo,要求时间复杂度为 O(n*e)，空间复杂度为 O(n)，最小环即环中边数最少的环。<br>（1）请描述你的算法思想。<br>（2）请用伪代码写出算法。<br>（3）说明你的算法的时间复杂度和空间复杂度。</p>
<blockquote>
<p><del>关注<strong>backward</strong>边。环的长度等于BFS节点的深度相减。</del></p>
<p>打脸了，想简单了。</p>
<p>看到O(n*e)，立马就会做了。直接跑n遍bfs。（若需要记录环，则额外空间复杂度$O(n)$）</p>
<p>每一次CROSS都<code>if(CROSS) Ring = min(Ring, a.depth + b.depth + 1)</code>。每轮就能计算出经过根节点的所有环的最小环。把每一个节点依次当作根节点BFS即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">least_ring</span><span class="params">()</span></span>&#123;<span class="comment">//只考虑记录最小环的大小</span></span><br><span class="line"><span class="keyword">for</span> 所有的节点:</span><br><span class="line">  bfs(节点)；</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(节点)</span></span>&#123;</span><br><span class="line">利用队列执行算法</span><br><span class="line">若遇到CROSS边(a,b):</span><br><span class="line">  ans = <span class="built_in">min</span>(ans, a.depth + b.depth + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<img data-src="/912/1574325400958-1577347213375.png" class="" width="1574325400958">
<p><a href="https://blog.csdn.net/watermuch/article/details/9402995" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/watermuch/article/details/9402995</a></p>
</blockquote>
</blockquote>
<h5 id="归并排序（改进）"><a href="#归并排序（改进）" class="headerlink" title="归并排序（改进）"></a>归并排序（改进）</h5><p>如图所示。假设已有两个有序的子序列。</p>
<img data-src="/912/1574448819304.png" class="">
<p>改进的归并策略为：</p>
<ul>
<li>将两个子序列分别进行分割为四个子序列，使得两个序列在割点处的值相等。（似乎也可能是确定割点为1/2或1/3处）</li>
<li>直接拼接中间的两个序列（即交换它们的位置），从而得到3个有序子序列。</li>
<li>对这3个子序列，先归并1、2，用得到的结果再归并3，从而完成整个策略。</li>
</ul>
<p>1）填空 merge<br>2）对 ABCDE 处的注释补充<br>3）rotate（）<br>4）说明这种算法的优缺点</p>
<blockquote>
<p>回顾张奥live的题面。</p>
<p>4）表面来看新算法每轮需要归并3次，效率似乎下降。</p>
<ul>
<li><p>对于原始的归并排序，比较次数总是在$O(n/2)\to O(n)$之间。</p>
</li>
<li><p>对于新的归并策略。</p>
<ul>
<li>寻找值相等的割点处</li>
<li>记分成的4个子序列长度分别为：A|B|C|D，拼接为A|CB|D。则新的算法在排序上的比较次数为$O(min(A,C)+min(B,D))\to O(n)$之间。</li>
<li>其中，我们有（不妨假设$A&lt;C$，反之同理）</li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">
\begin{align}
min(A,C)+min(B,D)&=min(A,C)+min(\cfrac{n}{2}-A,\cfrac{n}{2}-C) \\
&=A+\cfrac{n}{2}-C \\
&=\cfrac{n}{2}-(C-A) \\
\end{align}</script><ul>
<li>$|C-A|$在<code>[0, n/2]</code>中取值，其值越大，新的归并策略的比较次数越少</li>
<li>综上，可知新的归并策略的比较次数在$O(1)\to O(n)$之间。其最好情况优于原始算法。但子序列的分割需要一定量的预处理（怀疑为$O(logn)$），因此在最坏情况下的比较次数会有所上升。</li>
</ul>
<blockquote>
<p>参考：<a href="https://www.zhihu.com/lives/895615716198330368" target="_blank" rel="noopener external nofollow noreferrer">张奥-Live</a></p>
<p>注：此题的预处理可能是，先根据左边序列直接确定割点为1/2或1/3处，获得一个该点高度；然后在右序列中二分查找。但是如此考虑时，最好情况的比较次数将是$O(Cn)（C\leq 1/4）$，只获得常数倍优化。并且，该算法还引入了额外的交换次数（拼接B、C互换位置），可采用$O(2(B+C))=O(n+2(C-A))$的双指针算法完成。</p>
</blockquote>
</blockquote>
<h5 id="后序遍历（迭代版）"><a href="#后序遍历（迭代版）" class="headerlink" title="后序遍历（迭代版）"></a>后序遍历（迭代版）</h5><p>若二叉树的数据结构如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binarytree</span>｛</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span> *<span class="title">parent</span>；</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span> *<span class="title">lc</span>；</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span> *<span class="title">tc</span>；</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span>* <span class="title">first</span>();</span></span><br><span class="line">｝</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">realbinarytree</span>｛</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span> <span class="title">p</span>；</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">binarytree</span>* <span class="title">next</span>();</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>（1）若 first()函数是取二叉树后序遍历节点的第一个节点，请写出 first（）函数代码。<br>（2）若 next（）函数是取该节点的后序遍历的后继，请写出 next（）函数代码。<br>（3）在调用 first（）函数和 next（）函数对二叉树进行后序遍历时，证明遍历时间复杂度为$O(n)$。</p>
<blockquote>
<p>（1）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">binarytree *<span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="keyword">this</span>-&gt;lc || <span class="keyword">this</span>-&gt;rc)</span><br><span class="line">     <span class="keyword">this</span> = <span class="keyword">this</span>-&gt;lc ? <span class="keyword">this</span>-&gt;lc : <span class="keyword">this</span>-&gt;rc;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（2）如果是左兄弟，就找到右兄弟的first()；否则就返回父亲。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">binarytree *<span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>-&gt;parent) <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// just in case</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="keyword">this</span>-&gt;parent-&gt;lc &amp;&amp; !<span class="keyword">this</span>-&gt;parent-&gt;rc)&#123; <span class="comment">// is left sibling</span></span><br><span class="line">     <span class="keyword">this</span> = <span class="keyword">this</span>-&gt;parent-&gt;rc;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>-&gt;first();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span> = <span class="keyword">this</span>-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（3）对于任意一个节点，遍历过程中最多被涉及3次，第1次进入左子树，第2次从左子树进入右子树，第3次从右子树退出。因而整个遍历的消耗$=O(3n)=O(n)$。</p>
<blockquote>
<p>栈方法：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/die-dai-jie-fa-shi-jian-fu-za-du-onkong-jian-fu-za/" target="_blank" rel="noopener external nofollow noreferrer">Leetcode 145. 二叉树的后序遍历  迭代解法，时间复杂度 O(n)，空间复杂度 O(n)</a></p>
</blockquote>
</blockquote>
<h3 id="操作系统-3"><a href="#操作系统-3" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a><font color=red>多选题</font></h4><h5 id="系统调用-exec"><a href="#系统调用-exec" class="headerlink" title="系统调用 exec()"></a>系统调用 exec()</h5><p>（1）exec（）系统调用会改变以下哪些参数（）<br>A.进程 ID B.父进程 ID C.文件打开指针 D.？</p>
<blockquote>
<p>C。exec()系统调用允许进程加载一个完全不同的程序。exec()调用后进程ID（以及PID）不变，但代码、堆栈、堆、数据都完全被重写。（<strong>相同的进程，不同的程序</strong>）</p>
</blockquote>
<h5 id="中断（硬件工作）"><a href="#中断（硬件工作）" class="headerlink" title="中断（硬件工作）"></a>中断（硬件工作）</h5><p>（2）以下由（x86）硬件完成的是( )<br>A.获取中断源 B.形成中断入口地址 C。Eax 寄存器保存 D.？</p>
<blockquote>
<p>A、B。EFLAGES、CS、EIP、ErrorCode由硬件负责保存，通用寄存器由OS负责保存（<code>switch_to</code>）。 </p>
<blockquote>
<p>参考： <em>实验书-P125</em></p>
<p>注：获取中断源是指CPU根据中断向量查询到对应的中断描述符，从而确认造成中断的原因。但是MIPS只有一个中断处理程序 （ 这个地址是0x80000180 ），在里面用代码去访问CAUSE寄存器，看看造成中断的原因是啥再执行相应的逻辑（这一步就是获取中断源 ） ，因而是软件完成的。 x86是根据IDTR加上相应的偏移去取中断描述符表里面的项，然后找到对应中断描述符项里面的地址，然后跳过去，之后才是中断处理程序。</p>
<p>参考： <a href="https://www.bilibili.com/video/av71302902?p=49" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/av71302902?p=49</a></p>
<img data-src="/912/1574435028815.png" class="">
</blockquote>
</blockquote>
<h5 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区"></a>动态分区</h5><p>4）以下算法（）会产生很多不必要的小碎片的分区<br>a）最佳匹配<br>b）首次适应<br>c）最坏匹配<br>能够有效避免产生小碎片的算法是（）<br>a）最佳匹配<br>b）首次适应<br>c）最坏匹配</p>
<blockquote>
<p>A，C。最佳匹配产生小碎片。最坏匹配避免产生小碎片。</p>
</blockquote>
<h5 id="管程-线程"><a href="#管程-线程" class="headerlink" title="管程/线程"></a>管程/线程</h5><p>5）关于线程和管程错误的是（）</p>
<blockquote>
<p>王道上有类似辨析题。</p>
</blockquote>
<h5 id="belady"><a href="#belady" class="headerlink" title="belady"></a>belady</h5><p>7）以下会发生 belady 异常的是（）<br>a）FIFO 算法<br>b）LRU 算法<br>c）CLOCK 算法<br>d）LFU 算法<br>e)改进 CLOCK 算法</p>
<blockquote>
<p>acde。</p>
<p>产生belady的算法：FIFO，CLOCK，改进CLOCK，不恢复计数的LFU。</p>
<p>不产生belady算法：OPT，LRU，恢复计数的LFU。</p>
<blockquote>
<p>LFU是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰一定时期内被访问次数最少的页。这里需要注意，对于<strong>恢复计数</strong>，当某页被换出后，其访问次数会被记录下来为n，当此页被再次访问，并被换入时，此页的访问次数为n+1。在这种定义下的LFU是没有Belady异常的。</p>
<p>若LFU没有特指，则认为LFU不恢复计数，因为PPT/讲课中使用的不恢复计数的LFU。</p>
</blockquote>
</blockquote>
<h5 id="RAID-1"><a href="#RAID-1" class="headerlink" title="RAID"></a>RAID</h5><p>8）以下哪种磁盘阵列存取速度快（）<br>A.RAID0<br>B.RAID1<br>C.RAID4<br>D.RAID5</p>
<blockquote>
<p>A。RAI0是条带化（并行访问）。RAID1读速仅为2倍，写时不变。RAID4和RAID5的读速度与RAID0接近，但由于带有校验，写速度都比RAID0慢。</p>
</blockquote>
<h4 id="uCore大题"><a href="#uCore大题" class="headerlink" title="uCore大题"></a>uCore大题</h4><p>1）很多代码 balabala，求 intr<br>2）flag，turn balabala 填一行代码</p>
<blockquote>
<p>搁置。</p>
<p>此题可能是考察信号量/管程。<code>intr_flag</code>是当前的标记寄存器。</p>
<ul>
<li>CLI：在<code>local_intr_save(intr_flag);</code>中调用</li>
<li>STI：在<code>local_intr_restore(intr_flag);</code>中调用</li>
</ul>
</blockquote>
<h4 id="虚拟存储"><a href="#虚拟存储" class="headerlink" title="虚拟存储"></a>虚拟存储</h4><p>一台计算机虚拟空间 8KB，物理空间 4KB，二级页表，页表项 2B,页目录项 1B，页表大小32B，求进程页面大小有多少 b</p>
<blockquote>
<p>虚拟地址长度=log_2(8K<em>8)=<em>*16</em></em> bit=A+B+C=页目录偏移+页表偏移+offset。</p>
<ul>
<li>页目录偏移位数=log_2(32B/2B)= 4 bit</li>
<li>页表偏移位数=log_2(32B/1B)=5 bit</li>
<li>offset位=16-4-5=7 bit</li>
</ul>
<p>$\Longrightarrow$进程页面大小=2^7  bit</p>
</blockquote>
<h3 id="组成原理-2"><a href="#组成原理-2" class="headerlink" title="组成原理"></a>组成原理</h3><h4 id="填空题-2"><a href="#填空题-2" class="headerlink" title="填空题"></a>填空题</h4><h5 id="指令概念"><a href="#指令概念" class="headerlink" title="指令概念"></a>指令概念</h5><p>1）指令由指令操作码和（  ）组成</p>
<blockquote>
<p>操作数。</p>
</blockquote>
<h5 id="海明码检错-纠错"><a href="#海明码检错-纠错" class="headerlink" title="海明码检错/纠错"></a>海明码检错/纠错</h5><p>2）若海明码 <strong>P1P2</strong> D1 <strong>P3</strong> D2 D3 <strong>P4</strong> 为<strong>01</strong> 0 <strong>1</strong> 1 0 <strong>0</strong>，则该海明码有（）位错误（0 位，<br>一位，二位），正确的 D1D2D3 为（）。</p>
<blockquote>
<p>译码，有</p>
<ul>
<li>S1=(P1 D1 D2)=(0 0 1)=1</li>
<li>S2=(P2 D1 D3)=(1 0 0)=1</li>
<li>S3=(P3 D2 D3)=(1 1 0)=0</li>
<li>S4=(P1 P2 D1 P3 D2 D3 P4)=(0 1 0 1 1 0 0)=1</li>
</ul>
<p>由S4=1得，有1位错，出错位为S1、S2的交集=(D1)。故正确的D1D2D3为<strong>1</strong>10。</p>
<blockquote>
<p> S4=0，必有两位错。（海明码<strong>检2位错，纠1位错</strong>）</p>
</blockquote>
<img data-src="/912/1574267790384.png" class="" title="海明码">
<img data-src="/912/1574268089299.png" class="">
<img data-src="/912/1574268146867.png" class="">
</blockquote>
<h5 id="总线-1"><a href="#总线-1" class="headerlink" title="总线"></a>总线</h5><p>3）DMA 使用总线的方式为（）和（）。</p>
<blockquote>
<p>独占总线，周期窃取。</p>
</blockquote>
<h4 id="选择题-3"><a href="#选择题-3" class="headerlink" title="选择题"></a>选择题</h4><h5 id="浮点数-1"><a href="#浮点数-1" class="headerlink" title="浮点数"></a>浮点数</h5><p>IEEE 规格化单精度浮点数能表示的最小正数是（）</p>
<blockquote>
<ul>
<li>最小规格化正数：<code>0 00000001 0...00</code>=$2^{-126}$。</li>
<li>最小非规格正数：<code>0 00000000 0...01</code>=$2^{-23}$。</li>
</ul>
<p>综上，最小正数为$2^{-126} \approx 2\times10^{-38}$。</p>
</blockquote>
<h5 id="指令的概念"><a href="#指令的概念" class="headerlink" title="指令的概念"></a>指令的概念</h5><p>（）是计算机运行的最小单位<br>a）？     b）微指令    c）指令    d）？</p>
<blockquote>
<p>C。PPT293页原话，<code>指令是计算机运行的最小功能单元</code>。</p>
</blockquote>
<h4 id="流水线冲突概念题"><a href="#流水线冲突概念题" class="headerlink" title="流水线冲突概念题"></a>流水线冲突概念题</h4><p>指令流水线可能发生的冲突分类，以及原因</p>
<blockquote>
<p>结构冲突。因为资源冲突而无法使用某种指令集合。</p>
<p>数据冲突。流水线中的指令序列的操作数读写顺序发生改变。</p>
<p>控制冲突。程序执行转移类指令而引起的冲突。</p>
</blockquote>
<h4 id="Cache计算大题"><a href="#Cache计算大题" class="headerlink" title="Cache计算大题"></a>Cache计算大题</h4><p>30 位虚拟地址，28 位物理地址，一级页表，页大小 16KB，访问 5ns；Cache 采用直接映射，大小64KB，块大小 4B，访问 5ns；主存访问 40ns。<br>1）虚拟页表脏(dirt)位 1 位，有效位 1 位，问页表大小<br>2）cache 标记位，索引位，块内地址各多少位<br>3）一次 cache 命中访问时间，cache 失效访问时间，命中率为 90%平均访问时间<br>4）系统进程切换时以下操作是否需要，原因<br>  a）清除 cache 有效位<br>  b）将已经调入页表清空<br>5）注意到页表访问和 cache 访问时间相同，可否通过修改 cache 映射方式，使 cache 和页表一同访问，可以的话做出相应设计，并计算 cache90%命中率的时候的平均访问时间。</p>
<blockquote>
<p>1）脏(dirt)位=修改位。</p>
<ul>
<li>每页大小16KB，所以<strong>虚拟页数</strong>为 $虚存/页=2^{30}B/16KB=2^{30-14}=2^{16}$页。</li>
<li>物理页面和虚拟页面大小相等，所以<strong>物理页号位数</strong>为$28-14=14$位。</li>
<li>页表项位数：脏位+有效位+物理页号位数=1+1+14=16位。故每个<strong>页表项大小</strong>取为16位。</li>
<li>因而每个进程的<strong>页表大小</strong>为$2^{16}\times 16b=128KB$。</li>
</ul>
<blockquote>
<p>参考下题：（<em>计算机组成课后答案-袁春风-第4章-存储系统-23</em>）</p>
<img data-src="/912/1574360547016-1577347213375.png" class="" width="1574360547016">
</blockquote>
<p>2）主存：256MB（28位物理地址）；Cache：64KB；块大小：4B。</p>
<script type="math/tex; mode=display">
\begin{align}
标记位+索引位&=log_2\cfrac{主存}{块大小}=log_2\cfrac{256MB}{4B}=log_22^{26}=26位\\
索引位&=log_2\cfrac{Cache}{块大小}=log_2\cfrac{64KB}{4B}==log_22^{14}=14位 \\
标记位&=(标记位+索引位)-索引位=26-14=12位\\
块内地址&=log_2\cfrac{块大小}{字节}=log_2\cfrac{4B}{1B}=2位
\end{align}</script><blockquote>
<p>参考下题：（<em>计算机组成课后答案-袁春风-第4章-存储系统-10</em>）</p>
<img data-src="/912/1574361468972-1577347213375.png" class="" width="1574361468972">
</blockquote>
<p>3）存储结构：页表(5ns) $\longrightarrow$  Cache(5ns) $\longrightarrow$ 主存(40ns)</p>
<img data-src="/912/1574363444796.png" class="">
<ul>
<li>一次cache命中访问时间：= 页表(5ns) + Cache(5ns) =10ns</li>
<li>cache失效访问时间：= 页表(5ns) + Cache(5ns) + 主存(40ns) =50ns</li>
<li>命中率为90%平均访问时间：= 90%命中 + 10%失效= 14ns</li>
</ul>
<p>4）系统进程切换时以下操作是否需要：</p>
<p>a）清除 cache 有效位：不需要，cache在物理上对应</p>
<p>b）将已经调入页表清空：需要，每一个进程都有自己的页表（地址映射关系）</p>
<p>5）Cache改为与虚拟地址进行映射来缓存数据，使之可以直接使用虚拟地址访问。Cache设计如下：</p>
<script type="math/tex; mode=display">
\begin{align}
标记位+索引位&=log_2\cfrac{\color{red}{虚存} }{块大小}=log_2\cfrac{\color{red}{1GB} }{4B}=log_22^{\color{red}{28} }={\color{red}{28} }位\\
索引位&=log_2\cfrac{Cache}{块大小}=log_2\cfrac{64KB}{4B}==log_22^{14}=14位 \\
标记位&=(标记位+索引位)-索引位={\color{red}{28} }-14={\color{red}{14} }位
\end{align}</script><ul>
<li>改进后一次cache命中访问时间：= Cache|页表(5ns) =5ns</li>
<li>改进后cache失效访问时间：= Cache|页表(5ns) + 主存(40ns) =45ns</li>
<li>cache90%命中率的时候的平均访问时间：= 90%命中 + 10%失效= 9ns</li>
</ul>
<blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/31875174" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/31875174</a></p>
<p><a href="http://www.ecs.csun.edu/~cputnam/Comp546/Putnam/Cache%20Memory.pdf" target="_blank" rel="noopener external nofollow noreferrer">http://www.ecs.csun.edu/~cputnam/Comp546/Putnam/Cache%20Memory.pdf</a></p>
<img data-src="/912/1574365877470.png" class="">
<p>注：这种情况下，系统进程切换就需要清除cache有效位了。</p>
</blockquote>
</blockquote>
<h3 id="计算机网络-3"><a href="#计算机网络-3" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="选择题-4"><a href="#选择题-4" class="headerlink" title="选择题"></a>选择题</h4><h5 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h5><p>（1）以下关于 SNMP 协议说法错误的是（）<br>A.SNMP 协议具有性能管理，故障管理，配置管理，记账管理和安全管理<br>B.SNMP 采用 TCP 协议进行管理<br>C.?<br>D..?</p>
<blockquote>
<p>B。 SNMP作为TCP/IP协议一部分，SNMP消息被封装为<strong>UDP</strong>(user datagram protocol)并在IP协议中封装和传输， </p>
<blockquote>
<p>参考：<a href="https://www.jianshu.com/p/6a9e83aa41c0" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/6a9e83aa41c0</a></p>
</blockquote>
</blockquote>
<h4 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h4><p>4.太空站的 128kbps，发送 512 字节，端到端的传输延迟 300ms，确认帧长度忽略不计，接收窗口足够大，问发送窗口分别为 1，15，27 时，吞吐量为多少？若要使信道利用率达到最大，则帧序号至少为多少位？</p>
<blockquote>
<p>RTT=2*300ms=0.6s。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>发送窗口</th>
<th>1</th>
<th>15</th>
<th>27(溢出)</th>
</tr>
</thead>
<tbody>
<tr>
<td>吞吐量</td>
<td>512B*1/RTT=6.8kb/s</td>
<td>512B*15/RTT=102.4kb/s</td>
<td>128kb/s</td>
</tr>
</tbody>
</table>
</div>
<p>同时，要使信道利用率达到最大（100%），有</p>
<script type="math/tex; mode=display">
发送时间=\cfrac{发送字节\times 帧序号数}{发送速率}=\cfrac{512B\times x}{128\,kb/s}=\cfrac{x}{32}s\geq 0.6s=RTT</script><p>故帧序号位数$\geq log_219.2&gt;4$，至少为5位。</p>
</blockquote>
<h4 id="路由器大题（路由算法）"><a href="#路由器大题（路由算法）" class="headerlink" title="*路由器大题（路由算法）"></a>*路由器大题（路由算法）</h4><p>5.已知有如下网络，边的权值表示花费。</p>
<blockquote>
<p>给一个网络的表填写距离向量表和路径表，ip 地址为 200.1.5.0/24 四个局域网分别有 78，38，14，9 个主机，划分子网，每个路由器的端口，网络地址范围。</p>
</blockquote>
<img data-src="/912/1574415365312-1577347213375.png" class="" width="1574415365312">
<p>（1）若采用距离向量算法和水平分裂算法，写出 D 节点收到的信息，表格如下。</p>
<img data-src="/912/1567517167861-1577347213375.png" class="" width="1567517167861">
<p>（2）使用 RIP 算法写出 D 收敛后的转发表，表格格式如下。</p>
<img data-src="/912/1567517179430-1577347213375.png" class="" width="1567517179430">
<p>（3）若采用链路状态协议，写出 D 收到的链路状态，若表格中源和和目的等价，即 AB 和 BA 等价，表格格式如下。</p>
<img data-src="/912/1567517192621.png" class="">
<p>（4）若局域网 1 到 4 分别有 78，38，14，4 台主机，请将网路 202.1.5.0/24 分配给图中局域网和路由器间网段，写出划分后的网络，以及路由器端口 IP 地址及掩码。</p>
<blockquote>
<p>（1）D 节点收到的信息：【为避免歧义，此处不妨认为各路由已经收敛，下面是常规的转发】</p>
<ul>
<li><p>B不发。</p>
</li>
<li><p>C发送的距离表：</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>源节点</th>
<th>目的节点</th>
<th>花费</th>
</tr>
</thead>
<tbody>
<tr>
<td>C</td>
<td>A</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>关于水平分裂技术：<a href="http://www.023wg.com/lypz/96.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.023wg.com/lypz/96.html</a>。 </p>
<blockquote>
<p>水平分割（Split Horizon）的原理是，RIP从某个接口<strong><font color=red>学到</font></strong>的路由（学到的意思是，最优值是从这个端口发来的信息来更新获得的），<strong>不会从该接口再发回</strong>给邻居路由器。这样不但减少了带宽消耗，还可以防止路由环路。 </p>
</blockquote>
<p><em>PPT-P533</em>关于水平分裂算法的描述： <strong><font color=red>到X的距离不向真正通向X的邻居节点报告</font></strong>，使得坏消息也传得慢。</p>
<p>水平分裂技术在这里的主要作用应该是处理图中的路由器环路。发送的两个距离表中，不包含BC之间的距离信息。（B的网络是通过D到C的网络的，D是C的邻居，B不把这个信息发给D【<strong>到X的距离，不向X的邻居发</strong>】）</p>
<p><a href="https://www.cnblogs.com/hnrainll/archive/2011/10/18/2216575.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/hnrainll/archive/2011/10/18/2216575.html</a></p>
<blockquote>
<p>“普通的水平分割”是:如果一条路由信息是从X端口学习到的,那么从该端口发出的路由更新报文中将不再包含该条路由信息.</p>
<p>“带毒化逆转的水平分割”是:如果一条路由信息是从X端口学习到的,那么从该端口发出的路由更新报文中将继续包含该条路由信息,而且将这条信息的metric置为16.</p>
<blockquote>
<p>水平分裂其实已经隐含了毒性分割（不发=距离无穷大），设为16只不过是显式的表达出来而已，从而加快收敛。</p>
</blockquote>
</blockquote>
</blockquote>
<p>（2）D 收敛后的路由表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目的节点</th>
<th>下一跳</th>
<th>花费</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>C</td>
<td>5</td>
</tr>
<tr>
<td>B</td>
<td>B</td>
<td>2</td>
</tr>
<tr>
<td>C</td>
<td>C</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>（3）D 收到的链路状态：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>源节点</th>
<th>目的节点</th>
<th>花费</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
<td>8</td>
</tr>
<tr>
<td>A</td>
<td>C</td>
<td>4</td>
</tr>
<tr>
<td>B</td>
<td>D</td>
<td>2</td>
</tr>
<tr>
<td>C</td>
<td>D</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>链路状态协议记录的全局的拓扑结构，或许<strong>只是记录图中所有的边（直连）</strong>？</p>
<img data-src="/912/1575728006889-1577347213375.png" class="" width="1575728006889">
</blockquote>
<p>（4）网络规划如下：（200.1.5.0/24总共网络地址个数为256）</p>
<ul>
<li>LAN1：200.1.5.<code>0 0000000</code>/25 = 200.1.5.0/25（128-2&gt;78台）<ul>
<li>路由器A-e0端口：200.1.5.1/25</li>
</ul>
</li>
<li>LAN2：200.1.5.<code>10 000000</code>/26 = 200.1.5.128/26（64-2&gt;38台）<ul>
<li>路由器B-e0端口：200.1.5.129/26</li>
</ul>
</li>
<li>LAN3：200.1.5.<code>1100 0000</code>/28 = 200.1.5.192/28（16-2=14台）<ul>
<li>路由器C-e0端口：200.1.5.193/28</li>
</ul>
</li>
<li>LAN4：200.1.5.<code>1101 0000</code>/28 = 200.1.5.208/28（16-2&gt;9台）<ul>
<li>路由器D-e0端口：200.1.5.209/28</li>
</ul>
</li>
<li>A-B网段：200.1.5.<code>11100 000</code>/29 = 200.1.5.224/29（8-2&gt;2台）<ul>
<li>路由器A-e1端口：200.1.5.225/29</li>
<li>路由器B-e1端口：200.1.5.226/29</li>
</ul>
</li>
<li>A-C网段：200.1.5.<code>11101 000</code>/29 = 200.1.5.232/29（8-2&gt;2台）<ul>
<li>路由器B-e2端口：200.1.5.233/29</li>
<li>路由器C-e2端口：200.1.5.234/29</li>
</ul>
</li>
<li>B-D网段：200.1.5.<code>11110 000</code>/29 = 200.1.5.240/29（8-2&gt;2台）<ul>
<li>路由器C-e2端口：200.1.5.241/29</li>
<li>路由器D-e2端口：200.1.5.242/29</li>
</ul>
</li>
<li>C-D网段：200.1.5.<code>11111 000</code>/29 = 200.1.5.248/29（8-2&gt;2台）<ul>
<li>路由器D-e1端口：200.1.5.249/29</li>
<li>路由器A-e1端口：200.1.5.250/29</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="判断题-4"><a href="#判断题-4" class="headerlink" title="判断题"></a>判断题</h4><h5 id="地址运算"><a href="#地址运算" class="headerlink" title="地址运算"></a>地址运算</h5><p>判断：指针 p 指向某一个逻辑地址，那么 p++就是访问下一个逻辑地址。</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。p++访问下一个<strong>物理</strong>地址。</p>
</blockquote>
<h5 id="插入排序-1"><a href="#插入排序-1" class="headerlink" title="插入排序"></a>插入排序</h5><p>折半插入算法在寻找插入的位置时，采用的是二分查找，因此整个折半插入算法的时间复杂度为O(n*logn).</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。比较操作使用二分查找，不改善整体复杂度（比较+移动）。移动操作的复杂度仍然O(n)。</p>
</blockquote>
<h5 id="起泡排序"><a href="#起泡排序" class="headerlink" title="起泡排序"></a>起泡排序</h5><p>在进行起泡排序时，有可能出现某些元素在排序过程中一直远离它的最终位置。</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
<img data-src="/912/1574249187570.png" class="">
<blockquote>
<p>参考：<em>习题集1-3-b</em>。</p>
</blockquote>
</blockquote>
<h5 id="Dijkstra算法-1"><a href="#Dijkstra算法-1" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><p>权值都为正整数的图能否用Dijkstra（迪佳斯特拉）算法构造出最短路径？</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。单源最短路。</p>
</blockquote>
<h4 id="选择题-5"><a href="#选择题-5" class="headerlink" title="选择题"></a>选择题</h4><h5 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h5><p>二叉搜索树中最大的节点<br>A 仅有左孩子，没有右孩子<br>B 仅有右孩子，没有左孩子<br>C 既有左孩子，又有右孩子<br>D 没有左孩子，也没有右孩子</p>
<blockquote>
<p>此题有问题。只能确定没有右孩子。</p>
</blockquote>
<h5 id="条件栈混洗"><a href="#条件栈混洗" class="headerlink" title="条件栈混洗"></a>条件栈混洗</h5><p>一组输入MAMAMIA入栈，要求出栈顺序也为MAMAMIA。共有几种方案?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A.4     B.5    C.6    D.7</span><br></pre></td></tr></table></figure>
<blockquote>
<img data-src="/912/1577259182111-1577347213375.png" class="" width="1577259182111">
</blockquote>
<h5 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h5><p>在 AVL 树中，（）可能会发生两次旋转调整？<br>A 添加、删除节点操作<br>B 仅删除节点操作<br>C 仅添加节点操作<br>D 添加、删除节点都不</p>
<blockquote>
<p>A。教材上AVL树一节，双旋。</p>
</blockquote>
<h4 id="算法题-2"><a href="#算法题-2" class="headerlink" title="算法题"></a>算法题</h4><h5 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h5><p>给出中序序列{D B A E C F}和层次序列{A B C D E F}能否唯一确定一颗二叉树？能给出步骤，不能的话请构造其中一棵</p>
<blockquote>
<p>能。</p>
<p>对于任意一个</p>
<ul>
<li>中序：####…<strong>M</strong>####…</li>
<li>层次：<strong>M</strong>########……</li>
</ul>
<p>根据层次遍历可确定根节点在中序中的位置，则中序遍历分为左右两个子序列，从而可以递归地确定。</p>
<ul>
<li>中序：##…<strong>L</strong>##…  M  ##…<strong>R</strong>##…</li>
<li>层次：M  <strong>LR</strong>######……</li>
</ul>
<p>就本题而言，</p>
<ul>
<li>D B   <strong><font color=red>A</font></strong>   E C F；<strong><font color=red>A</font></strong>   B C D E F</li>
<li>D <strong><font color=blue>B</font></strong>   <strong><font color=red>A</font></strong>   E <strong><font color=blue>C</font></strong> F；<strong><font color=red>A</font></strong>   <strong><font color=blue>B</font></strong> <strong><font color=blue>C</font></strong> D E F</li>
</ul>
</blockquote>
<h5 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h5><p>程序应该是 prim 算法，问是否能够构成最小生成树，如果能就证明，不能举出例子驳斥V 表示图的点集，U 表示已经确定路径的点集，初始时 U 为空，F 为已经确定的路径，初始也为空。先任意取一点 u 放入 U，然后在 V-U 中遍历 u 的邻接点，选权值最小的边 e 和点 v 放入 F和 U 中，具体算法就请翻书吧</p>
<blockquote>
<p>翻书复习。Prim算法可以依托PFS实现，只需将顶点的优先级更新器，更换成Prim对应的策略（当前新加入点所有连接的UNDISCOVERD点的优先级，依照对应的边权取min进行更新）即可。</p>
</blockquote>
<h5 id="散列表-4"><a href="#散列表-4" class="headerlink" title="散列表"></a>散列表</h5><p>散列表长为 13，采用双散列函数解决冲突：<code>H(key) = key % 13</code>，<code>H’(key) = ( 7 * key % 10 ) + 1</code>。<br>输入顺序为：12，23，45，57，20，03，78，31，15，36。<br>【回忆版题面已按习题解析对应题面修正，实际考试中可能有所简化】<br>1) 构造散列表<br>2) 求等概率下搜索成功的平均查找长度</p>
<blockquote>
<p>1）构造方法如下：</p>
<img data-src="/912/1574376350251.png" class="">
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">构造</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th><font color=blue>SSL</font></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>12</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>12</strong></td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>23</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>23</strong></td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>45</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>45</strong></td>
<td></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>57</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>57</strong></td>
<td>45</td>
<td></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>20</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>57</td>
<td>45</td>
<td><strong>20</strong></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>03</code></td>
<td></td>
<td></td>
<td></td>
<td><strong>03</strong></td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>78</code></td>
<td><strong>78</strong></td>
<td></td>
<td></td>
<td>03</td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><font color=red><code>31</code></font></td>
<td><font color=red>78</font></td>
<td></td>
<td></td>
<td>03</td>
<td></td>
<td><font color=red><strong>57</strong></font></td>
<td>45</td>
<td>20</td>
<td><strong>31</strong></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>3</td>
</tr>
<tr>
<td style="text-align:center"><code>15</code></td>
<td>78</td>
<td></td>
<td><strong>15</strong></td>
<td>03</td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td>31</td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><font color=red><code>36</code></font></td>
<td><font color=red>78</font></td>
<td></td>
<td>15</td>
<td><font color=red>03</font></td>
<td></td>
<td>57</td>
<td><font color=red>45</font></td>
<td>20</td>
<td>31</td>
<td><strong>36</strong></td>
<td><font color=red><strong>23</strong></font></td>
<td></td>
<td>12</td>
<td>5</td>
</tr>
</tbody>
</table>
</div>
<p>2）记成功查找长度为SSL(Succeeded Search Length)，失败查找长度为FSL(Failed Search Length)。计算如上表最后两列所示。</p>
<ul>
<li>查找成功的平均查找长度ASL = <code>(1+1+1+1+1+1+1+3+1+5) / 10</code> = 16/10</li>
</ul>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/longlovefilm/article/details/78009782" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/longlovefilm/article/details/78009782</a></p>
</blockquote>
<p>本题应该是《数据结构习题解析(第2版)-殷人坤》上的原题。原题中还考察了<strong>线性探查法</strong>。其解法如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">构造</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th><font color=blue>SSL</font></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>12</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>12</strong></td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>23</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>23</strong></td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>45</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>45</strong></td>
<td></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>57</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><strong>57</strong></td>
<td>45</td>
<td></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>20</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>57</td>
<td>45</td>
<td><strong>20</strong></td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>03</code></td>
<td></td>
<td></td>
<td></td>
<td><strong>03</strong></td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><code>78</code></td>
<td><strong>78</strong></td>
<td></td>
<td></td>
<td>03</td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><font color=red><code>31</code></font></td>
<td>78</td>
<td></td>
<td></td>
<td>03</td>
<td></td>
<td><font color=red><strong>57</strong></font></td>
<td><font color=red>45</font></td>
<td><font color=red>20</font></td>
<td><strong>31</strong></td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>4</td>
</tr>
<tr>
<td style="text-align:center"><code>15</code></td>
<td>78</td>
<td></td>
<td><strong>15</strong></td>
<td>03</td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td>31</td>
<td></td>
<td>23</td>
<td></td>
<td>12</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center"><font color=red><code>36</code></font></td>
<td>78</td>
<td></td>
<td>15</td>
<td>03</td>
<td></td>
<td>57</td>
<td>45</td>
<td>20</td>
<td>31</td>
<td></td>
<td><font color=red><strong>23</strong></font></td>
<td><strong>36</strong></td>
<td>12</td>
<td>2</td>
</tr>
<tr>
<td style="text-align:center"><font color=blue><strong>FSL</strong></font></td>
<td>2</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>3</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>查找成功的平均查找长度ASL = <code>(1+1+1+1+1+1+1+4+1+2) / 10</code> = 14/10</li>
<li>查找失败的平均查找长度ASL = <code>(2+1+3+2+1+5+4+3+2+1+5+4+3) / 13</code> = 36/13</li>
</ul>
<blockquote>
<p>参考：<em>《数据结构习题解析(第2版)-殷人坤》-P127-习题6-9</em></p>
</blockquote>
</blockquote>
<h5 id="RPN重建表达式树"><a href="#RPN重建表达式树" class="headerlink" title="RPN重建表达式树"></a>RPN重建表达式树</h5><p>设计一个算法，把一个中序遍历 ABCD-*+EF??(后面三个符号忘记了不过不重要)构造成如下图所示的二叉树</p>
<img data-src="/912/1561894735192-1577347213375.png" class="" width="1561894735192">
<p>a) 描述算法思想<br>b) 伪代码实现</p>
<blockquote>
<p>给的也不是中序遍历啊。。明明是RPN。。</p>
<p>就按照RPN求值的方法类似地搞一搞，遇到运算时就合并二叉树，从而建树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;tree&gt; Num; <span class="comment">// 森林栈</span></span><br><span class="line"><span class="function">tree <span class="title">rebuild</span><span class="params">(<span class="built_in">string</span> input)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">     <span class="keyword">char</span> tmp = input[i];</span><br><span class="line">     <span class="keyword">if</span>(tmp is 代数)&#123;</span><br><span class="line">         <span class="function">tree <span class="title">NewTree</span><span class="params">(tmp)</span></span>;  <span class="comment">// 用tmp初始化一棵新树</span></span><br><span class="line">         Num.push(NewTree); <span class="comment">// 加入栈</span></span><br><span class="line">     &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">         tree a = Num.pop(), b = Num.pop(); <span class="comment">// 弹出操作数</span></span><br><span class="line">         Num.push(caculate(a, b, tmp)); <span class="comment">// 计算结果并加入栈</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> Num.top();  <span class="comment">// 最后剩下1颗树即为所求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="子数组"><a href="#子数组" class="headerlink" title="子数组"></a>子数组</h5><p>求一个数组A中<strong>连续相同</strong>数字的和<strong>等于s</strong>的最长子数组长度，例如A={1,1,2,1,1,1,2,1}，s=3，<br>则所求子数组长度为 3，要求算法时间复杂度不超过 O(n)，空间复杂度不超过 O(1)<br>a) 描述算法思想<br>b) 伪代码实现<br>c) 计算程序的算法复杂度。</p>
<blockquote>
<p>比较简单。遇到新数字<code>count</code>重置，否则累加，若等于<code>s</code>了，则更新答案为<code>s/count</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seek_s</span><span class="params">(<span class="keyword">int</span> s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">0</span>, num = A[<span class="number">0</span>], count = A[<span class="number">0</span>], ans = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span>(++k&lt;A.<span class="built_in">size</span>())&#123;</span><br><span class="line">     <span class="keyword">if</span>(A[k] != num)&#123;</span><br><span class="line">         count = num = A[k];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         count += A[k];</span><br><span class="line">         <span class="keyword">if</span>(count == s) ans = <span class="built_in">max</span>(ans, s/count);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>算法复杂度：$O(n)$。</p>
</blockquote>
<h5 id="二叉树遍历-1"><a href="#二叉树遍历-1" class="headerlink" title="*二叉树遍历"></a>*二叉树遍历</h5><p>给了一个算法，问访问节点的顺序，树的样子是一颗深度为 4 的二叉树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Typedef <span class="class"><span class="keyword">struct</span> <span class="title">binNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binNode</span> *<span class="title">rc</span>,*<span class="title">lc</span>;</span><span class="comment">//左子树右子树</span></span><br><span class="line">&#125; binNode;</span><br><span class="line"></span><br><span class="line">twist(node x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x-&gt;rc)&#123;</span><br><span class="line">        twist(x-&gt;lc-&gt;rc);</span><br><span class="line">        <span class="built_in">putchar</span>(x-&gt;data);</span><br><span class="line">        twist(忘了);</span><br><span class="line">        <span class="built_in">putchar</span>(忘了);</span><br><span class="line">    &#125;</span><br><span class="line">    Else&#123;</span><br><span class="line">        Twist(忘了);</span><br><span class="line">        Putchar(忘了);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>？？？</p>
<blockquote>
<p> 类似：<a href="https://stackoverflow.com/questions/6976938/balanced-binary-tree-visit-with-a-twist" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/6976938/balanced-binary-tree-visit-with-a-twist</a></p>
</blockquote>
</blockquote>
<h3 id="操作系统-4"><a href="#操作系统-4" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="判断题-5"><a href="#判断题-5" class="headerlink" title="判断题"></a>判断题</h4><h5 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h5><p>1)8 位 cpu 不能进行线程切换</p>
<blockquote>
<p>命题为<strong><font color=blue>假</font></strong>。跟位数没关系。</p>
</blockquote>
<h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>3)死锁必要条件：互斥访问，占有并等待，非剥夺，循环等待</p>
<blockquote>
<p>命题为<strong><font color=red>真</font></strong>。</p>
</blockquote>
<h4 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h4><h5 id="程序-进程"><a href="#程序-进程" class="headerlink" title="程序/进程"></a>程序/进程</h5><p>1) 程序和进程的区别<br>A 程序啥啥啥<br>B 进程啥啥啥<br>C 进程是动态啥啥啥<br>D 程序是动态啥啥啥</p>
<blockquote>
<p>大概率选C。</p>
</blockquote>
<h5 id="Cache-1"><a href="#Cache-1" class="headerlink" title="*Cache"></a>*Cache</h5><p>2) 忘了就记得选项 C 有些数据 cache 并不能存放 D 多核处理器共享一个高速缓存</p>
<blockquote>
<p>D选项错，高速缓存分级，有共享部分也有互斥部分。</p>
<img data-src="/912/1574348419369.png" class="">
</blockquote>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>3 一个文件系统采用索引结点方式存储文件，一个索引结点包括两个直接文件指针，一个一级间接文件指针表（糟糕，忘记是索引表还是指针表了）一个存储块为 8KB，一个指针 4B，问理论上这个文件系统能存放的最大文件是多大？用 TB+GB+MB+KB+B 表示</p>
<blockquote>
<p>能存放的最大文件大小 = 能寻址到的最大的存储空间 = 数据块数量 * 数据块大小。</p>
<p>索引节点含：2个直接块，1个一级指针。</p>
<ul>
<li>2个直接块：<code>2 * 8KB</code> = 16KB</li>
<li>1个一级指针：<code>8KB / 4B</code> = 2K个直接块<ul>
<li>2K个直接块：<code>2K * 8KB</code> = 16MB</li>
</ul>
</li>
<li>总计：16MB+16KB</li>
</ul>
<p>文件系统参考408相关真题，比如：<em>408-2018年真题-46</em>。</p>
</blockquote>
<h3 id="组成原理-3"><a href="#组成原理-3" class="headerlink" title="组成原理"></a>组成原理</h3><h4 id="流水线大题-2"><a href="#流水线大题-2" class="headerlink" title="流水线大题"></a>流水线大题</h4><p>3 任何指令的执行部件可以抽象为一个逻辑组件和寄存器的结构，逻辑组件的延迟为 150ps，<br>寄存器为 10ps，示意图如下</p>
<img data-src="/912/1567517343380-1577347213375.png" class="" width="1567517343380">
<p>逻辑部件又可以抽象为下图几个部件的组成：</p>
<img data-src="/912/1567517355783-1577347213375.png" class="" width="1567517355783">
<ul>
<li>1） 要形成一个 4 级流水，应该将三个寄存器安插在那些位置？问该四级流水的延迟和最大吞吐率</li>
<li>2） 为达到最大的吞吐率应该设计成几级流水？寄存器应该安插在哪些位置？问该流水的延迟和最大吞吐率</li>
</ul>
<blockquote>
<p>因为40+B+35+D+15+25=150，所以B+D=35ps，不妨设B=20ps，C=15ps。</p>
<p>1）应该使得流水线尽量均衡。</p>
<p>三个寄存器分别插在A、B，D之后，获得：<code>40 20 50 40</code>（A|B|CD|EF）。因而时钟周期为<code>60</code>ps，最大吞吐量为16.7GIPS，延迟为<code>4*60</code>=240ps。</p>
<p>2）若增加流水级，时钟周期下降，则表明存在更优解；否则，只会增加指令延迟，成为无效改进。因而最优流水级取决于最大的部件延迟。可以看到，A的延迟最高，成为性能瓶颈。以A为准，可划分为五级流水（A|B|C|DE<strong>|</strong>F或A|B|C|D<strong>|</strong>EF）。时钟周期为<code>50</code>ps，最大吞吐量为20GIPS，延迟为<code>5*50</code>=250ps。</p>
<blockquote>
<p>参考：<em>《深入理解计算机》-练习题-4.28</em>，与此题类似。</p>
</blockquote>
</blockquote>
<p>如果将上面的部件形成五级流水，分为取指（F），分析（D），执行（E），访存（M），写回（W）五个阶段，每个阶段占一个时钟周期，%edx, %edy %edz %edv 为寄存器</p>
<img data-src="/912/1567517405978-1577347213375.png" class="" width="1567517405978">
<ul>
<li>3） 以下三个指令按指令流水进行，为了获得最大吞吐率应进行哪些操作？三条指令一共用了多少个时钟周期？（每条指令所需要的上一条结果的数据都要等到上一条运算的结果才能进行）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV  100, %edx</span><br><span class="line">MOV  200, %edy</span><br><span class="line">ADD %edx, %edy(具体最后一条实在想不起来)</span><br></pre></td></tr></table></figure>
<ul>
<li>4） 以下四个指令按指令流水进行，为了获得最大吞吐率应进行哪些操作？四条指令一共用了多少个时钟周期？（每条指令所需要的上一条结果的数据都要等到上一条运算的结果才能进行）<br>（程序都想不起来了囧，就记得前两条是把数字移入寄存器，第三条的执行需要前两条数据，最后一条需要第三条的数据）</li>
</ul>
<blockquote>
<p>3）目测数据冲突，为获取最大吞吐量（流水尽量不停）采用旁路技术，时钟周期数=3+5-1=7。</p>
<p>4）根据题目描述，存在3次数据冲突。采用旁路技术解决之（第二条和第三条指令存在load-use冲突，必须暂停流水线1个周期）。故四条指令共用(4+5-1)+1=9个时钟周期。</p>
</blockquote>
<h3 id="计算机网络-4"><a href="#计算机网络-4" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="选择题-6"><a href="#选择题-6" class="headerlink" title="选择题"></a>选择题</h4><h5 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h5><p>1) SMTP 协议正确的是<br>A 服务器不能给客户发送邮件（记不清了）<br>B 客户不能接收服务器数据<br>C 一个 TCP 通道不能发送多封邮件<br>D 服务器之间不能互相传送邮件</p>
<blockquote>
<p>A。SMTP只能发给服务器。B错，客户可以采用POP3接收服务器数据。C错，显然是可以的。D显然错。</p>
</blockquote>
<h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>用户用http请求访问一个网页，网页一共有一个短文本和5个jpg图，问用户从请求连接到能看到整个网页为止共经过（）个RTT？</p>
<p>A8 B7 C6 D5</p>
<blockquote>
<p>B。忽略发送时延。HTML基本文件包含短文本，即总共6个报文。</p>
<p>对于非持续连接：</p>
<ul>
<li>2次握手。1个RTT</li>
<li>第3次握手，捎带HTML请求；返回文件。1个RTT</li>
<li>总计：(1+1)*6=12 RTT 不符合题目要求，舍去</li>
</ul>
<p>对于持续连接：</p>
<ul>
<li>2次握手。1个RTT</li>
<li>第3次握手，捎带HTML请求；返回文件。1个RTT</li>
<li>持续请求发送。5个RTT</li>
<li>总计：1+1+5=7 RTT</li>
</ul>
<p>对于持续连接（流水线）：</p>
<ul>
<li>2次握手。1个RTT</li>
<li>第3次握手，捎带HTML请求；流水线发送所有请求。0.5个RTT</li>
<li>收到所有文件。0.5个RTT</li>
<li>总计：1+0.5+0.5=2 RTT 不符合题目要求，舍去</li>
</ul>
</blockquote>
<h4 id="TCP拥塞控制大题"><a href="#TCP拥塞控制大题" class="headerlink" title="TCP拥塞控制大题"></a>TCP拥塞控制大题</h4><p>关于拥塞避免的，A向B发送数据，阈值为16KB，MSS=1KB</p>
<ul>
<li>1 A一直向B发送数据，未遇到超时情况，当A收到了ACK为8KB的报文后，拥塞窗口的大小为多少？</li>
<li>2 A一直向B发送数据，未遇到超时情况，当A收到了ACK为31KB的报文后，拥塞窗口的大小为多少？</li>
<li>3 当遇到超时后，（好像是又经过了多少RTT记不太清了）新阈值和此时窗口大小为多少</li>
</ul>
<blockquote>
<p>不妨认为这里使用慢开始和拥塞避免策略。（MSS=最大报文段长度）</p>
<p>“ACK为8KB”指的是发送的第8个MSS的ACK帧。（但序号一般是从0开始计算的，即对应序号为7）</p>
<p>1）不超时，ACK=8KB&lt;15KB，处于慢开始阶段，拥塞窗口的大小=9KB。</p>
<blockquote>
<p>慢开始阶段，窗口初始值=1KB。窗口的大小=初始值+发送帧数=1+8=9KB（<strong>动态增加</strong>）。</p>
</blockquote>
<p>2）不超时，ACK=31KB，31-15=16KB，处于首次拥塞避免阶段，拥塞窗口的大小=17KB。</p>
<blockquote>
<p> 当传输进行到<strong>拥塞避免</strong>的时候，应该是<strong>当前拥塞窗口的所有发送数据都收到确认后，拥塞窗口才加一</strong>，题里说阈值是16KB，则当收到ACK为15KB的（第15个）报文后，拥塞窗口到达15KB，达到阈值，进入拥塞避免阶段，之后拥塞窗口的数据全部发送，<strong>要等到ACK为31KB的时候，拥塞窗口才能加一，成为17KB</strong>，而此时的ACK达到了31KB，所以拥塞窗口是16+1=17KB。 （From：<a href="https://github.com/stellarkey/912_project/issues/4" target="_blank" rel="noopener external nofollow noreferrer">Here</a>，已改动）</p>
</blockquote>
<p>3）超时，不妨设设此时拥塞窗口为40KB</p>
<ul>
<li>由拥塞避免，1RTT后，阈值为20KB（腰斩）</li>
<li>由慢开始，窗口恢复为1MSS=1KB。</li>
</ul>
<blockquote>
<p>原题见：<em>典例-传输层</em>。</p>
<img data-src="/912/1576509601649.png" class="">
<img data-src="/912/1576509641810.png" class="">
</blockquote>
</blockquote>
<h4 id="路由器大题-1"><a href="#路由器大题-1" class="headerlink" title="*路由器大题"></a>*路由器大题</h4><p>一个网络路由 A 可以兼容 IPv4 和 IPv6，题目也给出了 A 的路由表，网络示意图如下：</p>
<img data-src="/912/1567517710066-1577347213375.png" class="" width="1567517710066">
<p>1）路由 B 发 RIP 协议给 A，问 A 会把那个消息发送给 B，在发送的那条后面打√（A 有三个接口，每个接口都给出了 ip 地址，但我想不起来了）</p>
<img data-src="/912/1567517735369-1577347213375.png" class="" width="1567517735369">
<p>2）路由 B 和 A 交换了路由表，问 B 路由表新增的条项是啥，填入下表</p>
<img data-src="/912/1567517751470-1577347213375.png" class="" width="1567517751470">
<p>路由 B 具有 NAT 功能，宿舍管理员因此给宿舍电脑分配了一批 ip 地址，（都是 10.9 打头的，具体想不起来），如果客户机要访问 dns 服务器，B 就会从 ip 转换池里挑出一个 ip 地址与该客户机的 IP 地址进行映射，比如将 ip 池中的 224.1.1.7（想不起来我自己编的）分配给客户机，那么其他网络就通过 224.1.1.7 访问该客户机，而不是客户机自己的 ip 地址。A 的转换方式也是如此。</p>
<p>3）填写下表中 ip 数据报的源地址和目的地址，C 代表客户机，F 代表 DNS 服务器，B 代表路由 B</p>
<img data-src="/912/1567517791792-1577347213375.png" class="" width="1567517791792">
<p>4） 路由 B 要经过 A 来访问 IPv6 网络，问 A 中 B 的映射表项内容，只需给出一个可能项即可</p>
<img data-src="/912/1567517811955-1577347213375.png" class="" width="1567517811955">
<blockquote>
<p>1）此题应该是考察水平分裂算法。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目的IP地址</th>
<th>发出端口</th>
<th>路径跳数</th>
<th>发送？</th>
</tr>
</thead>
<tbody>
<tr>
<td>接口1发出的地址</td>
<td>1</td>
<td>5</td>
<td>发送</td>
</tr>
<tr>
<td>接口3发出的地址</td>
<td>3</td>
<td>1</td>
<td>发送</td>
</tr>
<tr>
<td>Router B的地址</td>
<td>2</td>
<td>1</td>
<td>不发送（水平分裂）</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注：接口1的路径跳数应该是1吧。</p>
<p>注：如果是IPv6地址应该也不合法？</p>
</blockquote>
<p>2）跳数+1，发出端口改为B接收信息的端口。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目的IP地址</th>
<th>发出端口</th>
<th>路径跳数</th>
</tr>
</thead>
<tbody>
<tr>
<td>1问中的A表的某1个？</td>
<td>1（B的）</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注：可能需要填写经过A路由器的IPv6到IPv4的地址转换后的IPv4地址。</p>
</blockquote>
<p>3）C 代表客户机，F 代表 DNS 服务器，B 代表路由 B。注意到路由B具有 地址转换 功能。B存储IPv4的地址池。但是B是NAT，任何局域网外的通信都不采用宿舍网的内网地址。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>传送线路</th>
<th>源IP地址</th>
<th>目的IP地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>$C\longrightarrow B$</td>
<td>192.168.X.X（客户机内网IP）</td>
<td>192.168.Y.Y（B接口2）</td>
</tr>
<tr>
<td>$B\longrightarrow F$</td>
<td>214.1.Z.Z（B接口1）</td>
<td>DNS服务器地址</td>
</tr>
<tr>
<td>$F\longrightarrow B$</td>
<td>DNS服务器地址</td>
<td>214.1.Z.Z（B接口1）</td>
</tr>
<tr>
<td>$B\longrightarrow C$</td>
<td>192.168.Y.Y（B接口2）</td>
<td>192.168.X.X（客户机内网IP）</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注：注意到此题或许是客户机<strong>DNS解析</strong>的过程。那么表应该填写为如下：</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>传送线路</th>
<th>源IP地址</th>
<th>目的IP地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>$C\longrightarrow B$</td>
<td>192.168.X.X（客户机内网IP）</td>
<td>DNS服务器地址</td>
</tr>
<tr>
<td>$B\longrightarrow F$</td>
<td>10.9.Z.Z（B分配IP）</td>
<td>DNS服务器地址</td>
</tr>
<tr>
<td>$F\longrightarrow B$</td>
<td>DNS服务器地址</td>
<td>10.9.Z.Z（B分配IP）</td>
</tr>
<tr>
<td>$B\longrightarrow C$</td>
<td>DNS服务器地址</td>
<td>192.168.X.X（客户机内网IP）</td>
</tr>
</tbody>
</table>
</div>
<p>4）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>IPv4地址</th>
<th>IPv6地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>214.1.?.?（B的端口1的IPv4地址）</td>
<td>从A地址池中分配</td>
</tr>
</tbody>
</table>
</div>
</blockquote>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>912</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统暑期项目</title>
    <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>操作系统暑期项目。<a id="more"></a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/rcore-os/rCore/wiki/os-tutorial-summer-of-code" target="_blank" rel="noopener external nofollow noreferrer"><strong>OS Tutorial Summer of Code 2020</strong></a> 详情页面</p>
<p><a href="https://github.com/rcore-os" target="_blank" rel="noopener external nofollow noreferrer">rCore OS - github项目组</a></p>
<p><a href="https://github.com/rcore-os/rCore-Tutorial/issues/18" target="_blank" rel="noopener external nofollow noreferrer">OS Tutorial Summer of Code 2020 每日学习实践过程记录</a></p>
<blockquote>
<p>我的Daily Schedule：<a href="https://github.com/stellarkey/os_summer_project" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/stellarkey/os_summer_project</a></p>
</blockquote>
<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p><em>“与编译器斗智斗勇……”</em></p>
<blockquote>
<p><a href="https://doc.rust-lang.org/std/index.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/std/index.html</a>  Rust官方文档</p>
<p><a href="https://doc.rust-lang.org/rust-by-example/" target="_blank" rel="noopener external nofollow noreferrer"><strong>Rust by Example</strong></a>，<a href="https://rustwiki.org/zh-CN/rust-by-example" target="_blank" rel="noopener external nofollow noreferrer">中文版</a></p>
<p><a href="https://kaisery.github.io/trpl-zh-cn/" target="_blank" rel="noopener external nofollow noreferrer">Rust 程序设计语言</a></p>
<p><a href="https://doc.rust-lang.org/reference/introduction.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/reference/introduction.html</a> 语义教程</p>
<p><a href="https://doc.rust-lang.org/1.4.0/book/README.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/1.4.0/book/README.html</a> 抽象功能教程</p>
<p><a href="https://www.twle.cn/c/yufei/rust/rust-basic-index.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Rust 基础教程</strong></a></p>
<p><a href="https://wiki.jikexueyuan.com/project/rust-primer/" target="_blank" rel="noopener external nofollow noreferrer">Rust Primer 中文教程</a></p>
<p><a href="https://item.jd.com/12479415.html" target="_blank" rel="noopener external nofollow noreferrer">RUST编程之道</a>，<a href="https://ruststudy.github.io/tao_of_rust_docs/tao_of_rust/" target="_blank" rel="noopener external nofollow noreferrer">《Rust编程之道》随书源码</a></p>
<p><a href="https://www.bilibili.com/video/BV1xJ411B79h?from=search&amp;seid=11418904650629340673" target="_blank" rel="noopener external nofollow noreferrer">Rust编程视频教程（基础）—令狐壹冲</a>，<a href="https://www.bilibili.com/video/BV1FJ411Y71o?from=search&amp;seid=11418904650629340673" target="_blank" rel="noopener external nofollow noreferrer">Rust编程视频教程（进阶）—令狐壹冲</a></p>
<p><a href="https://tourofrust.com/" target="_blank" rel="noopener external nofollow noreferrer"><strong><font color=red>Tour of Rust</font></strong></a> <strong>制作太精美辣</strong></p>
<p><a href="https://github.com/rust-lang/rustlings" target="_blank" rel="noopener external nofollow noreferrer">Small exercises to get you used to reading and writing Rust code!</a></p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>rust的通用设计哲学：<strong>内存安全</strong>、<strong>零成本抽象</strong>、<strong>实用性</strong>。</p>
<p>rust采纳了多种语言（C++/Python/Haskell/Ruby…）的特性。</p>
<p>rust语言是一种高效、<strong><font color=red>安全</font></strong>的自动化内存管理的语言。因此非常适合用来编写操作系统。</p>
<blockquote>
<p>早期操作系统是用汇编语言编写，后来采用C语言，再后来混合编程……</p>
</blockquote>
<p><strong>系统编程语言</strong>：用于构建控制底层计算机硬件的软件系统，并提供由用于构建应用程序和服务的更高级应用程序编程语言使用的软件平台。开发操作系统的系统编程语言很多；还离不开汇编语言。</p>
<blockquote>
<p>比如：MIT用Go语言开发了Biscuit OS。Stanford用Rust语言开发了tock OS。</p>
</blockquote>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote>
<p><a href="https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html" target="_blank" rel="noopener external nofollow noreferrer">https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html</a></p>
<p>其他安装方法：<a href="https://prev.rust-lang.org/zh-CN/other-installers.html#standalone（如：**独立安装程序**）" target="_blank" rel="noopener external nofollow noreferrer">https://prev.rust-lang.org/zh-CN/other-installers.html#standalone（如：**独立安装程序**）</a></p>
</blockquote>
<p>在<a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener external nofollow noreferrer"><strong>Here</strong></a>进行Windows安装程序下载。感觉网络十分不稳定。因为是cmd终端集成式安装，如果要开启代理需要在终端内另外自行开启。</p>
<blockquote>
<p>利用热点安装完毕。</p>
<p>linux下安装：<a href="https://www.linuxidc.com/Linux/2019-01/156211.htm" target="_blank" rel="noopener external nofollow noreferrer">https://www.linuxidc.com/Linux/2019-01/156211.htm</a></p>
<blockquote>
<p><code>curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></p>
<p>之后如果要编写操作系统相关内容，那么linux环境可能是比较必要的。</p>
<p>最后暂时选择了在windows下构建环境。</p>
</blockquote>
<p>在运行前设置命令行中的科学上网代理：<a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/pre-lab/env.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/pre-lab/env.html</a></p>
<blockquote>
<p>linux:（注意端口与实践软件对应）</p>
<blockquote>
<p><code># e.g. Shadowsocks 代理
export https_proxy=http://127.0.0.1:1080
export http_proxy=http://127.0.0.1:1080
export ftp_proxy=http://127.0.0.1:1080</code></p>
</blockquote>
</blockquote>
</blockquote>
<p>更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rustup update</span><br></pre></td></tr></table></figure>
<p>卸载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rustup self uninstall</span><br></pre></td></tr></table></figure>
<p>检查：（版本检查，检测是否安装成功）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rustc --version</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://forge.rust-lang.org/infra/other-installation-methods.html" target="_blank" rel="noopener external nofollow noreferrer">rust的版本</a>分为stable、beta、<strong>nightly</strong>。（从左到右稳定性下降，前沿性加强）</p>
<blockquote>
<p><a href="https://www.bookstack.cn/read/rust-edition-guide-cn/src-rust-2018-rustup-for-managing-rust-versions.md" target="_blank" rel="noopener external nofollow noreferrer">Rustup：Rust 版本管理器</a></p>
<p><a href="https://www.bilibili.com/video/BV1a7411p7aw" target="_blank" rel="noopener external nofollow noreferrer">C++之父趣谈：与其他新兴语言相比，比如Rust、Swift和Go语言，C++语言有哪些不足和优势？</a></p>
</blockquote>
</blockquote>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><blockquote>
<p><a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener external nofollow noreferrer">Docker 教程</a></p>
</blockquote>
<p>先不用Docker了。感觉不是很理想。</p>
<p>先用VMWare吧。</p>
<h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><blockquote>
<p><a href="https://learnku.com/rust/wikis/29021" target="_blank" rel="noopener external nofollow noreferrer">https://learnku.com/rust/wikis/29021</a></p>
</blockquote>
<p>使用VSCode即可。主要是具有rust语法高亮、补全等功能。</p>
<blockquote>
<p>如果碰到<strong>RLS</strong>，则指Rust Language Server，是官方提供的一个标准化的编辑器增强工具。VSCode中集成了这个开源项目，但理论上RLS可以和任何编辑器或IDE配合使用，只要实现它们之间的通信协议即可。</p>
</blockquote>
<h3 id="关于C-生成工具"><a href="#关于C-生成工具" class="headerlink" title="关于C++生成工具"></a>关于C++生成工具</h3><blockquote>
<p><a href="https://blog.csdn.net/coolsoloist/java/article/details/106425656" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/coolsoloist/java/article/details/106425656</a></p>
</blockquote>
<p>注意对于windows需要额外安装：</p>
<blockquote>
<p>Visual Studio 2019 生成工具Visual Studio 2019 build tools或者微软Visual Studio。下载build tools之后，在Visual studio installer中只选择“C++生成工具”，然后只选择”MSVC v142 - VS2019 C++  x64/x86 生成工具”。安装上去大约需要1.8G硬盘空间。</p>
</blockquote>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><blockquote>
<p><a href="https://kaisery.github.io/trpl-zh-cn/ch01-02-hello-world.html" target="_blank" rel="noopener external nofollow noreferrer">https://kaisery.github.io/trpl-zh-cn/ch01-02-hello-world.html</a></p>
</blockquote>
<p>可以利用VSCode内的终端实现调试。</p>
<h3 id="Hello-Cargo"><a href="#Hello-Cargo" class="headerlink" title="Hello Cargo"></a><font color=red>Hello Cargo</font></h3><blockquote>
<p><a href="https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html" target="_blank" rel="noopener external nofollow noreferrer">https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html</a></p>
</blockquote>
<p>cargo管理项目确实方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cargo new hello_cargo         # 新建项目</span><br><span class="line">$ cd .\hello_cargo              # 进入项目</span><br><span class="line">$ cargo build                   # 构建（编译、链接等……）</span><br><span class="line">$ .\target\debug\hello_cargo    # 运行</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">$ cargo clean                   # 清除</span><br><span class="line">$ cargo run                     # 同时编译和运行</span><br><span class="line">$ cargo check                   # 编译检查（不产生可执行文件，速度较快）</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">$ cargo build --release         # 这会在 target&#x2F;release 而不是 target&#x2F;debug 下生成可执行文件</span><br></pre></td></tr></table></figure>
<blockquote>
<p>统一在<code>src</code>文件夹中存储代码。<code>Cargo.toml</code>文件保存开发者信息。</p>
</blockquote>
<p>运行其他基于cargo的开源项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone someurl.com&#x2F;someproject</span><br><span class="line">$ cd someproject</span><br><span class="line">$ cargo build</span><br></pre></td></tr></table></figure>
<h2 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h2><blockquote>
<p>From <a href="https://www.bilibili.com/video/BV1ti4y1b7xy" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/BV1ti4y1b7xy</a>, Yuzhuo Jing</p>
</blockquote>
<h3 id="Rustc"><a href="#Rustc" class="headerlink" title="Rustc"></a>Rustc</h3><p>Rustc：友好的编译检查。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032415888.png" class="" title="image-20200713032415888">
<h3 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h3><h4 id="Cargo-doc"><a href="#Cargo-doc" class="headerlink" title="Cargo doc"></a>Cargo doc</h4><p>在代码中的<code>///</code>三斜杠注释（支持Markdown语法），会自动形成文档。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">$ cargo doc</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032548556.png" class="" title="image-20200713032548556">
<h4 id="Cargo-doctest"><a href="#Cargo-doctest" class="headerlink" title="Cargo doctest"></a>Cargo doctest</h4><p>在注释中提供测例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cargo test</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032638199.png" class="" title="image-20200713032638199">
<h4 id="Cargo-bench"><a href="#Cargo-bench" class="headerlink" title="Cargo bench"></a>Cargo bench</h4><p>性能测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cargo bench</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032744369.png" class="" title="image-20200713032744369">
<h3 id="Clippy"><a href="#Clippy" class="headerlink" title="Clippy"></a>Clippy</h3><p>Clippy：提供更多代码优化信息。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032330519.png" class="" title="image-20200713032330519">
<h3 id="Rustfmt"><a href="#Rustfmt" class="headerlink" title="Rustfmt"></a>Rustfmt</h3><p>format格式化。一键修改代码风格（可自定义）。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033034583.png" class="" title="image-20200713033034583">
<h3 id="Rustup"><a href="#Rustup" class="headerlink" title="Rustup"></a>Rustup</h3><p>工具链管理工具。类似于python的anaconda环境管理工具。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713032935359.png" class="" title="image-20200713032935359">
<h3 id="Empowering-Ecosystem"><a href="#Empowering-Ecosystem" class="headerlink" title="Empowering Ecosystem"></a>Empowering Ecosystem</h3><h4 id="crate-io"><a href="#crate-io" class="headerlink" title="crate.io"></a>crate.io</h4><p>类似python的pip。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033239513.png" class="" title="image-20200713033239513">
<h4 id="Serde"><a href="#Serde" class="headerlink" title="Serde"></a>Serde</h4><p>序列化和反序列化工具。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033322881.png" class="" title="image-20200713033322881">
<h4 id="Structopt"><a href="#Structopt" class="headerlink" title="Structopt"></a>Structopt</h4><p>结构体模板参数初始化。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033401558.png" class="" title="image-20200713033401558">
<h3 id="Rayon"><a href="#Rayon" class="headerlink" title="Rayon"></a>Rayon</h3><p>提高性能（自动多核并发）。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033713283.png" class="" title="image-20200713033713283">
<h3 id="Rocket"><a href="#Rocket" class="headerlink" title="Rocket"></a>Rocket</h3><p>网络编程，安全检查。如下图，要求对path进行检查，防止越界。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713033932847.png" class="" title="image-20200713033932847">
<h2 id="基本语法纪要"><a href="#基本语法纪要" class="headerlink" title="基本语法纪要"></a>基本语法纪要</h2><blockquote>
<p><a href="https://emacsist.github.io/2020/06/19/rust权威指南学习笔记" target="_blank" rel="noopener external nofollow noreferrer">https://emacsist.github.io/2020/06/19/rust权威指南学习笔记</a></p>
</blockquote>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>rust的基本元素的昵称相对都比较简洁。</p>
<blockquote>
<ul>
<li>signed integers: <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code> and <code>isize</code> (pointer size)</li>
<li>unsigned integers: <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code> and <code>usize</code> (pointer size)</li>
<li>floating point: <code>f32</code>, <code>f64</code></li>
<li><code>char</code> Unicode scalar values like <code>&#39;a&#39;</code>, <code>&#39;α&#39;</code> and <code>&#39;∞&#39;</code> (4 bytes each)</li>
<li><code>bool</code> either <code>true</code> or <code>false</code></li>
<li>and the unit type <code>()</code>, whose only possible value is an empty tuple: <code>()</code></li>
</ul>
</blockquote>
<p>比如：（变量必须先声明，这跟python不同）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">bool</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>跟python的显式指定类型比较像。如果不指定类型，则会自动推断，选择默认类型。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote>
<p><a href="https://www.twle.cn/c/yufei/rust/rust-basic-string.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.twle.cn/c/yufei/rust/rust-basic-string.html</a></p>
</blockquote>
<p>Rust 语言提供了两种字符串</p>
<ul>
<li>字符串字面量 <code>&amp;str</code>。它是 Rust 核心内置的数据类型。</li>
<li>字符串对象 <code>String</code>。它不是 Rust 核心的一部分，只是 Rust 标准库中的一个 <strong>公开 <code>pub</code></strong> 结构体。</li>
</ul>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>rust的序列单位跟python也类似。</p>
<blockquote>
<ul>
<li>arrays like <code>[1, 2, 3]</code></li>
<li>tuples like <code>(1, true)</code></li>
</ul>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fixed-size array (type signature is superfluous)</span></span><br><span class="line"><span class="keyword">let</span> xs: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// All elements can be initialized to the same value</span></span><br><span class="line"><span class="keyword">let</span> ys: [<span class="built_in">i32</span>; <span class="number">500</span>] = [<span class="number">0</span>; <span class="number">500</span>];</span><br></pre></td></tr></table></figure>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代器是专门针对集群型对象使用的，可以自动地对集群中的每个对象产生作用。</p>
<blockquote>
<p>一个迭代器是惰性的，即不使用无消耗。</p>
</blockquote>
<p>迭代器的创建：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v1 = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> v1_iter = v1.iter();        <span class="comment">// 创建</span></span><br></pre></td></tr></table></figure>
<p>迭代器的遍历方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> v1_iter &#123;            <span class="comment">// 遍历</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Got: &#123;&#125;"</span>, val);</span><br><span class="line">&#125;</span><br><span class="line">v1_iter.next();                 <span class="comment">// 单步迭代</span></span><br></pre></td></tr></table></figure>
<h5 id="迭代器适配器"><a href="#迭代器适配器" class="headerlink" title="迭代器适配器"></a>迭代器适配器</h5><p>迭代器可以结合<strong>迭代器适配器</strong>（<em>iterator adaptors</em>）将当前迭代器变为不同类型的迭代器。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v1: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    v1.iter().map(|x| x + <span class="number">1</span>);           <span class="comment">// map()修改了迭代器的功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="消费适配器"><a href="#消费适配器" class="headerlink" title="消费适配器"></a>消费适配器</h5><p>迭代器可以使用一系列<strong>消费适配器</strong>（<em>consuming adaptors</em>）来获取一个集群上的计算结果。</p>
<blockquote>
<p><strong>一次性消费</strong>：在消费后迭代器失效，其所有权被转移给消费适配器。</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">iterator_sum</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> v1_iter = v1.iter();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> total: <span class="built_in">i32</span> = v1_iter.sum();     <span class="comment">// sum()为求和消费</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(total, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v1: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> v2: <span class="built_in">Vec</span>&lt;_&gt; = v1.iter().map(|x| x + <span class="number">1</span>).collect();</span><br><span class="line">    								   <span class="comment">// collect()消费，并产生一个vector</span></span><br><span class="line">    <span class="built_in">assert_eq!</span>(v2, <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>提供struct和enum。</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><blockquote>
<p><a href="https://www.twle.cn/c/yufei/rust/rust-basic-enums.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.twle.cn/c/yufei/rust/rust-basic-enums.html</a></p>
<p>注意：枚举是<strong><font color=red>多选一</font></strong>的！</p>
</blockquote>
<p>Rust 语言核心和标准库内置了很多枚举，其中有一个枚举我们会经常和它打交道，那就是 <code>Option</code> 枚举。</p>
<p><code>Option</code> 枚举代表了那种 <strong>可有可无</strong> 的选项。它有两个枚举值 <code>None</code> 和 <code>Some(T)</code>。</p>
<ul>
<li><code>None</code> 表示可有可无中的 <strong>无</strong>。</li>
<li><code>Some(T)</code> 表示可有可无中的 <strong>有</strong>，既然有，那么就一定有值，也就是一定有数据类型，那个 T 就表示有值时的值数据类型。</li>
</ul>
<blockquote>
<p>取出Some值：<code>unwrap()</code>：<a href="https://www.jianshu.com/p/0fe7435dd40a" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/0fe7435dd40a</a></p>
</blockquote>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>rust使用一对<code>{}</code>来创建（词法）作用域。在作用域内可以进行局部函数式的操作。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> c = &#123;</span><br><span class="line">            a = a + b;</span><br><span class="line">            a = b              <span class="comment">// 注意赋值语句的返回值为单位值`()`</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a = b);   <span class="comment">// 注意这里的 a = b不是赋值，而是输出转移，a本身的值不变</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ()</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用域的返回值为最后一个不加分号的语句或者单位值。</p>
</blockquote>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在有了作用域以后，可以讨论闭包。闭包相当于匿名函数，或者类似结构体函数。它们都通过对象来实现函数的功能。闭包是函数式编程语言常常会用到的。</p>
<p>闭包的语法如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> closure = |para| &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"this is a closure..."</span>);</span><br><span class="line">    para</span><br><span class="line">&#125;;</span><br><span class="line">closure(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p><code>|...|</code>为闭包参数表，紧跟一个作用域（相当于函数体），整体声明与变量声明格式一致。</p>
<p>闭关的语法还有进一步的略写：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span>  <span class="title">add_one_v1</span>   </span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123; x + <span class="number">1</span> &#125;         # 一个【函数】定义</span><br><span class="line"><span class="keyword">let</span> add_one_v2 = |x: <span class="built_in">u32</span>| -&gt; <span class="built_in">u32</span> &#123; x + <span class="number">1</span> &#125;;        # 一个完整标注的闭包定义</span><br><span class="line"><span class="keyword">let</span> add_one_v3 = |x|             &#123; x + <span class="number">1</span> &#125;;        # 省略了类型注解</span><br><span class="line"><span class="keyword">let</span> add_one_v4 = |x|               x + <span class="number">1</span>  ;        # 去掉了可选的大括号</span><br></pre></td></tr></table></figure>
<p>闭包可以捕获环境（意味着可以使用同一作用域内的变量），而函数不能。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> equal_to_x = |z| z == x;  <span class="comment">// 捕获 x 变量</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">assert!</span>(equal_to_x(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><blockquote>
<p><a href="https://rustwiki.org/zh-CN/rust-by-example/macros.html" target="_blank" rel="noopener external nofollow noreferrer">https://rustwiki.org/zh-CN/rust-by-example/macros.html</a></p>
</blockquote>
<p>宏的语法：（可以发现宏、函数和闭包的调用是很相似的）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个简单的宏，名为 `say_hello`。</span></span><br><span class="line">macro_rules! say_hello &#123;</span><br><span class="line">    <span class="comment">// `()` 表示此宏不接受任何参数。</span></span><br><span class="line">    () =&gt; (</span><br><span class="line">        <span class="comment">// 此宏将会展开成这个代码块里面的内容。</span></span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"Hello!"</span>);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    <span class="comment">// 这个调用将会展开成 `println("Hello");`!</span></span><br><span class="line">    say_hello!()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么宏是有用的？</p>
<ol>
<li><strong>不写重复代码</strong>（DRY，Don’t repeat yourself.）。很多时候你需要在一些地方针对不同 的类型实现类似的功能，这时常常可以使用宏来避免重复代码。</li>
<li><strong>领域专用语言</strong>（DSL，domain-specific language）。宏允许你为特定的目的创造特定的语法。</li>
<li><strong>可变接口</strong>（variadic interface）。有时你需要能够接受不定数目参数的接口，比如 <code>println!</code>，根据格式化字符串的不同，它需要接受任意多的参数。</li>
</ol>
<blockquote>
<p>增加了自由抽象的能力。</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span>     b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, a = b);    <span class="comment">// 宏中的语法可能与rust本身具有不一致性，比如"="赋值号</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, a    );    <span class="comment">// 你会发现 a = 1</span></span><br></pre></td></tr></table></figure>
<h2 id="rustlings（练习项目）"><a href="#rustlings（练习项目）" class="headerlink" title="rustlings（练习项目）"></a>rustlings（练习项目）</h2><blockquote>
<p>项目地址：<a href="https://github.com/rust-lang/rustlings" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rust-lang/rustlings</a></p>
<p>项目解析：<a href="https://github.com/rizaudo/rustlings-answers" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rizaudo/rustlings-answers</a></p>
</blockquote>
<p>需要完成这个项目中的exercise。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rustlings watch              # 实时观察exercise代码（默认按初学者顺序）</span><br><span class="line">$ rustlings verify             # 观察一次并结束</span><br><span class="line">$ rustlings run myExercise1    # 指定检查</span><br><span class="line">$ rustlings hint myExercise1   # 获得提示</span><br></pre></td></tr></table></figure>
<h3 id="练习记录"><a href="#练习记录" class="headerlink" title="练习记录"></a>练习记录</h3><p>首次rustling的界面记录如下：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712044042209.png" class="" title="image-20200712044042209">
<p>可以比较清晰地发现代码对应的位置以及出错原因。</p>
<p>改正错误后界面变为：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712044259109.png" class="" title="image-20200712044259109">
<p>非常人性化的设计，只需在VSCode中实时修改代码，便可以实现练习的目的。删掉<code>// I AM NOT DONE</code>语句就可以进入下一个练习。</p>
<h4 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h4><p>Variable4还是比较容易忘记的知识点。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712045139337.png" class="" title="image-20200712045139337">
<h4 id="常数声明"><a href="#常数声明" class="headerlink" title="常数声明"></a>常数声明</h4><blockquote>
<p>You declare constants using the <code>const</code> keyword instead of the <code>let</code> keyword, and <strong>the type of the value <em>must</em> be annotated</strong>.</p>
</blockquote>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712045445963.png" class="" title="image-20200712045445963">
<h4 id="Slice截取"><a href="#Slice截取" class="headerlink" title="Slice截取"></a>Slice截取</h4><blockquote>
<p><a href="https://doc.rust-lang.org/book/ch04-03-slices.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/book/ch04-03-slices.html</a></p>
</blockquote>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712055351211.png" class="" title="image-20200712055351211">
<h4 id="元组下标引用"><a href="#元组下标引用" class="headerlink" title="元组下标引用"></a>元组下标引用</h4><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712055552673.png" class="" title="image-20200712055552673">
<h4 id="模块内宏引用"><a href="#模块内宏引用" class="headerlink" title="模块内宏引用"></a>模块内宏引用</h4><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712075506209.png" class="" title="image-20200712075506209">
<h4 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h4><p>变量的修改必须有初始化。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712202341271.png" class="" title="image-20200712202341271">
<h4 id="浮点比较"><a href="#浮点比较" class="headerlink" title="浮点比较"></a>浮点比较</h4><p>浮点数不能使用<code>==</code>，rust对此做了智能的编译提示。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712221240785.png" class="" title="image-20200712221240785">
<h4 id="枚举实现链表"><a href="#枚举实现链表" class="headerlink" title="枚举实现链表"></a>枚举实现链表</h4><blockquote>
<p><a href="https://doc.rust-lang.org/book/ch15-01-box.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/book/ch15-01-box.html</a></p>
</blockquote>
<p>Box是指针类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">List</span></span> &#123;</span><br><span class="line">    Cons(<span class="built_in">i32</span>, <span class="built_in">Box</span>&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200712235250068.png" class="" title="image-20200712235250068">
<hr>
<blockquote>
<p>Complete :)</p>
</blockquote>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200714004728341.png" class="" title="image-20200714004728341">
<h2 id="Rust编程练习"><a href="#Rust编程练习" class="headerlink" title="Rust编程练习"></a>Rust编程练习</h2><blockquote>
<p><a href="https://leetcode-cn.com/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/</a></p>
</blockquote>
<p>选取Leetcode相关题目。</p>
<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/two-sum/</a></p>
</blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>
<h4 id="Rust-1"><a href="#Rust-1" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">two_sum</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, target: <span class="built_in">i32</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..nums.len() &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..nums.len() &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">vec!</span>[i <span class="keyword">as</span> <span class="built_in">i32</span>, j <span class="keyword">as</span> <span class="built_in">i32</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现这个系列的题目有些rust写起来很难。。先做些简单题水一水。。</p>
<h3 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/hamming-distance/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/hamming-distance/</a></p>
</blockquote>
<p>两个整数之间的<a href="https://baike.baidu.com/item/汉明距离" target="_blank" rel="noopener external nofollow noreferrer">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>
<h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x: int, y: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> bin(x ^ y).count(<span class="string">"1"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Rust-2"><a href="#Rust-2" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">hamming_distance</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">"&#123;:b&#125;"</span>, x^y)</span><br><span class="line">            .chars()</span><br><span class="line">            .filter(|x| x== &amp;<span class="string">'1'</span>)</span><br><span class="line">            .count() <span class="keyword">as</span> <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/single-number/submissions/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/single-number/submissions/</a></p>
</blockquote>
<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            nums[i] ^= nums[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> nums[len(nums)- <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="Rust-3"><a href="#Rust-3" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">single_number</span></span>(<span class="keyword">mut</span> nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..nums.len()&#123;</span><br><span class="line">            nums[i] ^= nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[nums.len() - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/majority-element" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/majority-element</a></p>
</blockquote>
<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int majorityElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int count = <span class="number">0</span>, ret = <span class="number">-1</span>, n = nums.size();</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                count ++; ret = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                count += nums[i] == ret ? 1 : -1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Rust-4"><a href="#Rust-4" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">majority_element</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;<span class="keyword">let</span> <span class="keyword">mut</span> ret: <span class="built_in">i32</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> n = nums.len();</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n&#123;</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                ret = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> nums[i] == ret&#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    count -= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表**"></a>合并两个有序链表**</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>
</blockquote>
<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<h4 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> l1 == <span class="literal">None</span> <span class="keyword">or</span> l2 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1 != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> l1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> l2</span><br><span class="line"></span><br><span class="line">        ret = ListNode()</span><br><span class="line">        rel_ret = ret</span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt; l2.val):</span><br><span class="line">            ret.val = l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret.val = l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">and</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            ret.next = ListNode()</span><br><span class="line">            ret = ret.next</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val):</span><br><span class="line">                ret.val = l1.val</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret.val = l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span>:</span><br><span class="line">            ret.next = ListNode()</span><br><span class="line">            ret = ret.next</span><br><span class="line">            ret.val = l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            ret.next = ListNode()</span><br><span class="line">            ret = ret.next</span><br><span class="line">            ret.val = l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        <span class="keyword">return</span> rel_ret</span><br></pre></td></tr></table></figure>
<h4 id="Rust-5"><a href="#Rust-5" class="headerlink" title="Rust"></a>Rust</h4><p>rust的链表真复杂。慢慢感觉到rust为了安全性在编程上造就的巨大门槛，这无疑是牺牲。</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/rust-fei-di-gui-zui-jian-dan-cao-zuo-mo-shi-pi-pei/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/rust-fei-di-gui-zui-jian-dan-cao-zuo-mo-shi-pi-pei/</a></p>
<p>参考这个写法，模式匹配大法好。</p>
<p><code>as_mut()</code>：<a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut</a></p>
<blockquote>
<p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>
</blockquote>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">merge_two_lists</span></span>(<span class="keyword">mut</span> l1: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;ListNode&gt;&gt;, <span class="keyword">mut</span> l2: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;ListNode&gt;&gt;) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret = <span class="literal">Some</span>(<span class="built_in">Box</span>::new(ListNode::new(<span class="number">0</span>)));</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> p = &amp;<span class="keyword">mut</span> ret;</span><br><span class="line">        <span class="keyword">loop</span>&#123;</span><br><span class="line">            <span class="keyword">match</span> (l1.as_mut(), l2.as_mut())&#123;</span><br><span class="line">                (<span class="literal">None</span>, <span class="literal">None</span>) =&gt; &#123;<span class="keyword">break</span>;&#125;,</span><br><span class="line">                (<span class="literal">Some</span>(a), <span class="literal">None</span>) =&gt; &#123;</span><br><span class="line">                    p.as_mut().unwrap().next = l1.take();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                (<span class="literal">None</span>, <span class="literal">Some</span>(b)) =&gt; &#123;</span><br><span class="line">                    p.as_mut().unwrap().next = l2.take();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                (<span class="literal">Some</span>(a), <span class="literal">Some</span>(b)) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> a.val &lt; b.val&#123;</span><br><span class="line">                        <span class="keyword">let</span> next = a.next.take();</span><br><span class="line">                        p.as_mut().unwrap().next = l1.take();</span><br><span class="line">                        l1 = next;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">let</span> next = b.next.take();</span><br><span class="line">                        p.as_mut().unwrap().next = l2.take();</span><br><span class="line">                        l2 = next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = &amp;<span class="keyword">mut</span> p.as_mut().unwrap().next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.unwrap().next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/move-zeroes" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/move-zeroes</a></p>
</blockquote>
<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:</p>
<p>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p>
<p>说明:</p>
<blockquote>
<p>必须在原数组上操作，不能拷贝额外的数组。<br>尽量减少操作次数。</p>
</blockquote>
<h4 id="Python-4"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[l] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[r] == <span class="number">0</span>:</span><br><span class="line">                    nums[r] = nums[l]</span><br><span class="line">                    nums[l] = <span class="number">0</span></span><br><span class="line">                    l += <span class="number">1</span>; r += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> nums[r] != <span class="number">0</span>:</span><br><span class="line">                        r += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                    r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="Rust-6"><a href="#Rust-6" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">move_zeroes</span></span>(nums: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> (<span class="keyword">mut</span> l, <span class="keyword">mut</span> r): (<span class="built_in">usize</span>, <span class="built_in">usize</span>) = (<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> l &lt; nums.len()&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[l] != <span class="number">0</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> nums[r] == <span class="number">0</span>&#123;</span><br><span class="line">                    nums[r] = nums[l];</span><br><span class="line">                    nums[l] = <span class="number">0</span>;</span><br><span class="line">                    l += <span class="number">1</span>; r += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> nums[r] != <span class="number">0</span> &#123; r += <span class="number">1</span>;&#125;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    l += <span class="number">1</span>;</span><br><span class="line">                    r += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="找到所有数组中消失的数字"><a href="#找到所有数组中消失的数字" class="headerlink" title="找到所有数组中消失的数字"></a><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener external nofollow noreferrer">找到所有数组中消失的数字</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/</a></p>
</blockquote>
<p>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>
<p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p>
<p>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>
<p>示例:</p>
<p>输入:<br>[4,3,2,7,8,2,3,1]</p>
<p>输出:<br>[5,6]</p>
<h4 id="Python-5"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[abs(nums[i]) - <span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                nums[abs(nums[i]) - <span class="number">1</span>] *= <span class="number">-1</span></span><br><span class="line">        print(nums)</span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                ret.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h4 id="Rust-7"><a href="#Rust-7" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">find_disappeared_numbers</span></span>(<span class="keyword">mut</span> nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..nums.len()&#123;</span><br><span class="line">            <span class="keyword">let</span> index = nums[i].abs() <span class="keyword">as</span> <span class="built_in">usize</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[index] &gt; <span class="number">0</span>&#123;</span><br><span class="line">                nums[index] *= -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, nums);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret = <span class="built_in">Vec</span>::&lt;<span class="built_in">i32</span>&gt;::new();</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..nums.len()&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>&#123;</span><br><span class="line">                ret.push((i + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态和"><a href="#动态和" class="headerlink" title="动态和"></a>动态和</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/running-sum-of-1d-array</a></p>
</blockquote>
<p>给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</p>
<p>请返回 nums 的动态和。</p>
<h4 id="Python-6"><a href="#Python-6" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runningSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="Rust-8"><a href="#Rust-8" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">running_sum</span></span>(<span class="keyword">mut</span> nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..nums.len()&#123;</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        nums</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>又水了一道题~</p>
</blockquote>
<h3 id="好数对的数目"><a href="#好数对的数目" class="headerlink" title="好数对的数目"></a>好数对的数目</h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/number-of-good-pairs" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/number-of-good-pairs</a></p>
</blockquote>
<p>给你一个整数数组 nums 。</p>
<p>如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i &lt; j ，就可以认为这是一组 好数对 。</p>
<p>返回好数对的数目。</p>
<h4 id="Python-7"><a href="#Python-7" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIdenticalPairs</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] == nums[j]:</span><br><span class="line">                    ret += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h4 id="Rust-9"><a href="#Rust-9" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">num_identical_pairs</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..nums.len()&#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> (i+<span class="number">1</span>)..nums.len()&#123;</span><br><span class="line">                <span class="keyword">if</span> nums[i] == nums[j]&#123;</span><br><span class="line">                    ret += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重新排列数组"><a href="#重新排列数组" class="headerlink" title="重新排列数组"></a><a href="https://leetcode-cn.com/problems/shuffle-the-array/" target="_blank" rel="noopener external nofollow noreferrer">重新排列数组</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/shuffle-the-array" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/shuffle-the-array</a></p>
</blockquote>
<p>给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,…,xn,y1,y2,…,yn] 的格式排列。</p>
<p>请你将数组按 [x1,y1,x2,y2,…,xn,yn] 格式重新排列，返回重排后的数组。</p>
<p>示例 1：</p>
<p>输入：nums = [2,5,1,3,4,7], n = 3<br>输出：[2,3,5,4,1,7]<br>解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]<br>示例 2：</p>
<p>输入：nums = [1,2,3,4,4,3,2,1], n = 4<br>输出：[1,4,2,3,3,2,4,1]<br>示例 3：</p>
<p>输入：nums = [1,1,2,2], n = 2<br>输出：[1,2,1,2]</p>
<h4 id="Python-8"><a href="#Python-8" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self, nums: List[int], n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ret = [];</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">            ret.append(nums[i]);</span><br><span class="line">            ret.append(nums[(n + i)]);</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h4 id="Rust-10"><a href="#Rust-10" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">shuffle</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, n: <span class="built_in">i32</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::&lt;<span class="built_in">i32</span>&gt;::new();</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n&#123;</span><br><span class="line">            ret.push(nums[i <span class="keyword">as</span> <span class="built_in">usize</span>]);</span><br><span class="line">            ret.push(nums[(n + i) <span class="keyword">as</span> <span class="built_in">usize</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener external nofollow noreferrer">回文数</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/palindrome-number/</a></p>
</blockquote>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<h4 id="Python-9"><a href="#Python-9" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        s = str(x);</span><br><span class="line">        i, n = <span class="number">0</span>, len(s) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n - i):</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[n - i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h4 id="Rust-11"><a href="#Rust-11" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">is_palindrome</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s1 = x.to_string();</span><br><span class="line">        <span class="keyword">let</span> s2 = x.to_string().chars().rev().collect::&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">        <span class="keyword">let</span> ret:<span class="built_in">bool</span> = (s1 == s2);</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener external nofollow noreferrer">整数反转</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/reverse-integer/</a></p>
</blockquote>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<h4 id="Python-10"><a href="#Python-10" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            ret =  -int(str(-int(x))[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret =  int(str(int(x))[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span> ret &lt; -pow(<span class="number">2</span>,<span class="number">31</span>) <span class="keyword">or</span> ret &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h4 id="Rust-12"><a href="#Rust-12" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">reverse</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> x = x <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>&#123;</span><br><span class="line">            ret =  - (-x).to_string()</span><br><span class="line">                        .chars()</span><br><span class="line">                        .rev()</span><br><span class="line">                        .collect::&lt;<span class="built_in">String</span>&gt;()</span><br><span class="line">                        .parse::&lt;<span class="built_in">i64</span>&gt;()</span><br><span class="line">                        .unwrap();</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ret);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            ret =       x.to_string()</span><br><span class="line">                        .chars()</span><br><span class="line">                        .rev()</span><br><span class="line">                        .collect::&lt;<span class="built_in">String</span>&gt;()</span><br><span class="line">                        .parse::&lt;<span class="built_in">i64</span>&gt;()</span><br><span class="line">                        .unwrap();</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret <span class="keyword">as</span> <span class="built_in">i64</span>) &lt; -<span class="number">2i64</span>.pow(<span class="number">31</span>) || (ret <span class="keyword">as</span> <span class="built_in">i64</span>) &gt; (<span class="number">2i64</span>.pow(<span class="number">31</span>) - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0i32</span></span><br><span class="line">        &#125;</span><br><span class="line">        ret <span class="keyword">as</span> <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener external nofollow noreferrer">最大子序和</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/maximum-subarray/</a></p>
</blockquote>
<p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<h4 id="Python-11"><a href="#Python-11" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        best, current = nums[<span class="number">0</span>], nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> current &lt; <span class="number">0</span>:</span><br><span class="line">                current = <span class="number">0</span></span><br><span class="line">            current += nums[i]</span><br><span class="line">            <span class="keyword">if</span> current &gt; best:</span><br><span class="line">                best = current</span><br><span class="line">        <span class="keyword">return</span> best</span><br></pre></td></tr></table></figure>
<h4 id="Rust-13"><a href="#Rust-13" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">max_sub_array</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best: <span class="built_in">i32</span>    = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> current: <span class="built_in">i32</span> = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..nums.len()&#123;</span><br><span class="line">            <span class="keyword">if</span> current &lt; <span class="number">0</span>&#123;</span><br><span class="line">                current = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current += nums[i];</span><br><span class="line">            <span class="keyword">if</span> current &gt; best&#123;</span><br><span class="line">                best = current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        best</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener external nofollow noreferrer">爬楼梯</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/climbing-stairs/</a></p>
</blockquote>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<p>示例 1：</p>
<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶<br>示例 2：</li>
</ol>
<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<h4 id="Python-12"><a href="#Python-12" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        f = [<span class="number">1</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure>
<h4 id="Rust-14"><a href="#Rust-14" class="headerlink" title="Rust"></a>Rust</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">climb_stairs</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> f = <span class="built_in">vec!</span>[<span class="number">1</span> <span class="keyword">as</span> <span class="built_in">i32</span>; (n + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..(n+<span class="number">1</span>)&#123;</span><br><span class="line">            f[(i) <span class="keyword">as</span> <span class="built_in">usize</span>] = f[(i - <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>] + f[(i - <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        f[n <span class="keyword">as</span> <span class="built_in">usize</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener external nofollow noreferrer">杨辉三角</a></h3><blockquote>
<p><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/pascals-triangle/</a></p>
</blockquote>
<p>给定一个非负整数 <em>numRows，</em>生成杨辉三角的前 <em>numRows</em> 行。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/PascalTriangleAnimated2.gif" class="" title="img">
<p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p>
<h4 id="Rust-15"><a href="#Rust-15" class="headerlink" title="Rust"></a>Rust</h4><p>用组合数的思路做了做，发现想多了。。。TLE！</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">generate</span></span>(num_rows: <span class="built_in">i32</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret: <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt; = <span class="built_in">Vec</span>::&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt;::new();</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">func</span></span>(n: <span class="built_in">i32</span>, m: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> m == <span class="number">0</span> || m == n&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            func(n -<span class="number">1</span>, m) + func(n - <span class="number">1</span>, m - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num_rows&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> t : <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::&lt;<span class="built_in">i32</span>&gt;::new();</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..=i&#123;</span><br><span class="line">                t.push(func(i <span class="keyword">as</span> <span class="built_in">i32</span>, j <span class="keyword">as</span> <span class="built_in">i32</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            ret.push(t);</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来用杨辉三角生成的方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">generate</span></span>(num_rows: <span class="built_in">i32</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret: <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt; = <span class="built_in">Vec</span>::&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt;::new();</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num_rows&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> t : <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span> <span class="keyword">as</span> <span class="built_in">i32</span> ; (i + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">            ret.push(t);</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num_rows&#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..i&#123;</span><br><span class="line">                ret[i <span class="keyword">as</span> <span class="built_in">usize</span>][j <span class="keyword">as</span> <span class="built_in">usize</span>] = ret[(i-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>][(j-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>] + ret[(i-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">usize</span>][j <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Python-13"><a href="#Python-13" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, numRows):</span><br><span class="line">            ret.append([<span class="number">1</span>] * (i + <span class="number">1</span>))</span><br><span class="line">        print(ret)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, numRows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i):</span><br><span class="line">                ret[i][j] = ret[i - <span class="number">1</span>][j - <span class="number">1</span>] + ret[i - <span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h2 id="OS实习第一次交流会"><a href="#OS实习第一次交流会" class="headerlink" title="OS实习第一次交流会"></a>OS实习第一次交流会</h2><p>陈向群老师：不忘初心啊！自我管理。完善学习方法。踏实，做好记录，善于总结。</p>
<p>向勇老师：提供了本课程的调查问卷数据分析。去鹏城实验室的概率波动较大，但线上全程参与是完全可行的。<strong>只要自己有收获就行了</strong>。</p>
<p>李睿老师：鹏城实验室负责老师。两位助教目前正在实地配置环境。5位分享同学。</p>
<blockquote>
<p>方澳阳：之前没有了解过。有一定计组基础。开始整天赶进度学习。后面改为每日6小时学习。语法改错，编译器比较智能。然后开始RISC-V的相关学习。<strong>语法、理论、实践<font color=red>交替进行</font></strong>。</p>
<p>林可：刚刚入坑。C语言和汇编有一定经验。多线程有基础。看过一些OS资料。每天投入6-7个小时。按自己的节奏来学习。不要着急。</p>
<p>蒋周齐（洛佳）：rust社区资深人士。rust有特殊的难度，需要花时间克服。rust运行时小，性能好。有rust嵌入式方向的经验。做操作系统方面经验有限。以前翻译过《<a href="https://github.com/rustcc/writing-an-os-in-rust" target="_blank" rel="noopener external nofollow noreferrer">用rust写操作系统</a>》。rust语言一直在迭代。<strong>rust的宏十分强大灵活</strong>。这几天主要在看OS的代码。<strong>写OS特别需要调试代码的技巧</strong>。</p>
<p>卢弘毅：准备了一个经验分享pdf。Lab的准备内容（rust、RISC-V、OS、github）。lab教程代码一定要敲一遍。多多在github上提issue和PR。<strong>单元测试</strong>。警惕自动化，rust有相当多特性，但有时会在debug时带来很多困扰。</p>
<p>车春池：rust语言集中看了几天后，开始交替学习。RISV-V某文档第十章<strong>特权架构</strong>（<a href="https://riscv.org/specifications/privileged-isa/" target="_blank" rel="noopener external nofollow noreferrer">Manual</a>）。LAB1没有实现中断描述符。在rcore中实现了IDT的数据结构。<strong>在实践中理解rust语言</strong>。</p>
</blockquote>
<p>张汉东老师：rust语言分享。一定要有整体的把握。<strong>rust语言集众家之长</strong>（基于类型系统的集成）。解决未来互联网的<strong>安全</strong>问题（类型安全）。C++性能高，但类型不安全（<a href="https://www.zhihu.com/question/35532790" target="_blank" rel="noopener external nofollow noreferrer">如何理解编程语言的类型安全性？</a>）。<strong>Safe rust</strong>相比于Safe C的安全性更显然、易差错（不会出现未定义行为）。trait是类型行为的抽象。字符串的设计（为什么这么多种字符串）也是为了保证类型安全，比如<code>&amp;str</code>胖指针。合类型（enum）与集类型（struct）。【讲的比较细节，没跟上】</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1ti4y1b7xy" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/BV1ti4y1b7xy</a></p>
</blockquote>
<p>王润基：第二阶段zCore的助教。18年开始探索rust写OS。一定要<strong>边做边学</strong>。勇敢地面对Unsafe。生命周期比较头疼，不要死磕。rust不鼓励全局变量。</p>
<p>吴一凡：rust现代化、易用。边做实验边学习，重点学习系统是如何搭起来的，一开始不用纠结具体实现。多总结，在不同场景下的应用等等。</p>
<p>最后总结了一下第二阶段的相关安排。</p>
<h1 id="RISC-V"><a href="#RISC-V" class="headerlink" title="RISC-V"></a><a href="https://riscv.org/" target="_blank" rel="noopener external nofollow noreferrer">RISC-V</a></h1><p><em>“保持简洁，保持功能单一”</em></p>
<blockquote>
<p><a href="https://content.riscv.org/wp-content/uploads/2018/05/riscv-privileged-BCN.v7-2.pdf" target="_blank" rel="noopener external nofollow noreferrer">PPT for RIS-V特权指令级架构</a>（<a href="./riscv-privileged-BCN.v7-2.pdf">Here</a>）</p>
<p><a href="http://crva.io/documents/RISC-V-Reader-Chinese-v2p1.pdf" target="_blank" rel="noopener external nofollow noreferrer">RISC-V手册：一本开源指令集的指南</a> 重点是第10章</p>
<p><a href="https://riscv.org/specifications/privileged-isa/" target="_blank" rel="noopener external nofollow noreferrer">RISC-V特权指令级规范</a> 重点是与OS相关的特权硬件访问的内容</p>
<p><a href="https://item.jd.com/12887758.html" target="_blank" rel="noopener external nofollow noreferrer">计算机组成与设计：RISC-V 教材</a></p>
<p><a href="http://www.icourse163.org/course/ZJU-1452997167" target="_blank" rel="noopener external nofollow noreferrer">计算机组成与设计：RISC-V 浙大在线课程</a></p>
<p><a href="http://www-inst.eecs.berkeley.edu/~cs61c/sp18/" target="_blank" rel="noopener external nofollow noreferrer">Berkeley CS61C: Great Ideas in Computer Architecture (Machine Structures)</a></p>
</blockquote>
<p>注意：RISC-V的<code>V</code>是5的意思。读作：<code>risk-five</code>。（<strong>第五代精简指令集</strong>）</p>
<p><strong>开放性</strong>、<strong>先进性</strong>（可能有话语权）。</p>
<h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><a href="https://www.cnblogs.com/loves6036/p/12364986.html" target="_blank" rel="noopener external nofollow noreferrer">RISC-V学习总结之历史与现状</a></p>
<p><a href="https://www.zhihu.com/question/28368960" target="_blank" rel="noopener external nofollow noreferrer">如何看待开源指令集RISC-V ?</a></p>
<p><a href="https://www.zhihu.com/question/325968121" target="_blank" rel="noopener external nofollow noreferrer">ARM、MIPS、RISC-V三种架构本质上有何区别？</a></p>
<blockquote>
<p>商业和生态的区别更多，<strong>技术上差异不大</strong>。</p>
<p>ARM低功耗，手机上用的多；Intel历史遗留包袱较多。RISC设计更现代，符合操作系统的需求。</p>
</blockquote>
</blockquote>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718125305806.png" class="" title="image-20200718125305806">
<p>RISC发明者是美国加州大学伯克利分校教师David Patterson。</p>
<p>2010年左右开始立项RISC-V，到2015年开始技术和商业上的尝试：</p>
<ul>
<li>技术方向：成立<strong>RISC-V基金会</strong>，维护指令集架构的完整性和非碎片化。</li>
<li>商业方向：成立<strong>SiFive公司</strong>，推动RISC-V的商业化。</li>
</ul>
<h3 id="Chisel-硬件架构语言"><a href="#Chisel-硬件架构语言" class="headerlink" title="Chisel 硬件架构语言"></a>Chisel 硬件架构语言</h3><blockquote>
<p><a href="https://www.chisel-lang.org/index.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.chisel-lang.org/index.html</a></p>
<blockquote>
<p><a href="https://www.chisel-lang.org" target="_blank" rel="noopener external nofollow noreferrer"><strong>Chisel</strong></a> is a hardware design language that facilitates <strong>advanced circuit generation and design reuse for both ASIC and FPGA digital logic designs</strong>. Chisel adds hardware construction primitives to the <a href="https://www.scala-lang.org" target="_blank" rel="noopener external nofollow noreferrer">Scala</a> programming language, providing designers with the power of a modern  programming language to write complex, parameterizable circuit  generators that produce synthesizable Verilog. This generator methodology enables the creation of re-usable components  and libraries, such as the FIFO queue and arbiters in the <a href="https://www.chisel-lang.org/api/latest/#chisel3.util.package" target="_blank" rel="noopener external nofollow noreferrer">Chisel Standard Library</a>, raising the level of abstraction in design while retaining fine-grained control.</p>
</blockquote>
</blockquote>
<p>Chisel语言(Constructing Hardware in a Scala Embedded Language，硬件构建语言)。</p>
<p>数字电路设计一般使用<a href="https://hdlbits.01xz.net/wiki/Step_one" target="_blank" rel="noopener external nofollow noreferrer">verilog</a>（HDL）语言进行开发。</p>
<p>Chisel语言则对上述设计过程进行了一个的优化，用来解决传统硬件设计反馈太慢的问题。</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>RISC-V具有32个寄存器x0~x31，其中通用寄存器x1~x31；<strong>寄存器x0恒为0</strong>。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200716193850876.png" class="" title="image-20200716193850876">
<h4 id="CSR-控制状态寄存器"><a href="#CSR-控制状态寄存器" class="headerlink" title="CSR 控制状态寄存器"></a>CSR 控制状态寄存器</h4><p>RISC-V设置<strong>CSR</strong>（<strong>控制状态寄存器</strong>）实现隔离：</p>
<ul>
<li>防止应用程序访问设备和敏感的CPU寄存器</li>
<li>例如地址空间配置寄存器</li>
</ul>
<h3 id="页表结构"><a href="#页表结构" class="headerlink" title="页表结构"></a>页表结构</h3><p>RISC-V的页表结构也相对来说更加整齐，没有历史包袱。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718130003731.png" class="" title="image-20200718130003731">
<h3 id="特权架构"><a href="#特权架构" class="headerlink" title="特权架构"></a>特权架构</h3><p><a href="https://blog.csdn.net/p340589344/article/details/82290920" target="_blank" rel="noopener external nofollow noreferrer">一种全新的指令集架构RISC-V</a></p>
<p>RISC-V采用四个特权级（Ring）：</p>
<ul>
<li>User (<strong>U</strong>-mode)：<code>00</code>。用户/应用程序。<strong>最低</strong>。</li>
<li>Supervisor (<strong>S</strong>-mode)：<code>01</code>。管理员。</li>
<li>Hypervisor (H-mode)：<code>10</code>。Hypervisor。</li>
<li>Machine (<strong>M</strong>-mode)：<code>11</code>。机器。<strong>最高</strong>。</li>
</ul>
<p>RISC-V更好地定义了各个层次之间的关系：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718125614536.png" class="" title="image-20200718125614536">
<p>高特权模式下的软件授权低特权模式软件处理中断。（x86实现<strong>用户态应用程序来响应中断</strong>很不方便）</p>
<blockquote>
<p>甚至可以实现用户态中断。（信号机制的实现将非常优美）</p>
<p>这部分工作仍然在不断演变中。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>其实跟MIPS差不多。。没细看。。</p>
<h2 id="OS实习第二次交流会"><a href="#OS实习第二次交流会" class="headerlink" title="OS实习第二次交流会"></a>OS实习第二次交流会</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1xb411E7Qm?from=search&amp;seid=5119372751065501986" target="_blank" rel="noopener external nofollow noreferrer">David Patterson：计算机体系结构新黄金时代：历史、挑战和机遇</a></p>
</blockquote>
<p>开场就放了鹏城实验室的宣传片。。</p>
<h3 id="鹏城实验室杨沙洲老师介绍鹏程实验室系统方面的研究现状"><a href="#鹏城实验室杨沙洲老师介绍鹏程实验室系统方面的研究现状" class="headerlink" title="鹏城实验室杨沙洲老师介绍鹏程实验室系统方面的研究现状"></a>鹏城实验室杨沙洲老师介绍鹏程实验室系统方面的研究现状</h3><p>立项两年。以<strong><font color=red>开源</font></strong>作为总的思路。</p>
<h4 id="三款芯片"><a href="#三款芯片" class="headerlink" title="三款芯片"></a>三款芯片</h4><p>目前设计了三款芯片：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719160839245.png" class="" title="image-20200719160839245">
<p>以上仍然是一个非常传统的架构，没有太多的改进。目前只是一个复现。已经送厂，下个月可以出实体。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719161104375.png" class="" title="image-20200719161104375">
<p>这个项目19年年底开始。目前基本上也是照搬Ariane项目。跑起来以后，做了一些简单的性能测试。同时还在增加其他的功能。总的来说是作为视频编码的控制器来设计的。可以做更多的工作，功耗也可以较低。</p>
<p>整个项目是一个生态项目，因此支持国产工艺。但目前技术还不成熟。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719161451853.png" class="" title="image-20200719161451853">
<p>在RISC-V芯片里面还算是佼佼者。该芯片的性能与ARM的A72、A76比较接近。</p>
<h4 id="CPU研发环境"><a href="#CPU研发环境" class="headerlink" title="CPU研发环境"></a>CPU研发环境</h4><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719161820963.png" class="" title="image-20200719161820963">
<h4 id="OS研发环境"><a href="#OS研发环境" class="headerlink" title="OS研发环境"></a>OS研发环境</h4><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719161935519.png" class="" title="image-20200719161935519">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719162004693.png" class="" title="image-20200719162004693">
<h4 id="三个研究方向"><a href="#三个研究方向" class="headerlink" title="三个研究方向"></a>三个研究方向</h4><ul>
<li>Many-Cores（多核、众核）<ul>
<li>基于OpenPiton正在学习</li>
<li>可能会应用到汽车、飞行器等多传感器的场景</li>
</ul>
</li>
<li>Virtualization（虚拟化）<ul>
<li>跟进Hypervisor Extension</li>
<li>CPU里面一般需要实现环境的隔离即可</li>
<li>目前还在观望是否有人实现了支持虚拟化的RISC-V芯片</li>
</ul>
</li>
<li>Interrupts<ul>
<li>跟进User-level Interrupts（“N”扩展）</li>
<li>User-level Interrupts：<strong>用户态</strong>直接接受<strong>中断</strong>。目前公开的CPU还没有实现。<ul>
<li>硬件设计上没有太大的难度</li>
<li>软件如何去响应这个中断——这方面没有支持</li>
<li>好处：1. 信号机制大大简化，提高性能；2. 可以把很多driver放到用户态去执行，不需要转发（把一些不必要的东西放到用户态，因为不需要管理资源）；用户进程所在的空间不一定存在，需要一些新的设计确保存在（安全性）。</li>
<li>硬件上不做，如果只是软件上去实现其实意义不大。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="国科大蒋德钧老师介绍基于RISC-V的OS本科课程教学情况"><a href="#国科大蒋德钧老师介绍基于RISC-V的OS本科课程教学情况" class="headerlink" title="国科大蒋德钧老师介绍基于RISC-V的OS本科课程教学情况"></a>国科大蒋德钧老师介绍基于RISC-V的OS本科课程教学情况</h3><p>国科大也弄RISC-V了。。2016年才开始招收本科生。在课程当中使用<strong>C语言</strong>编写。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719163356092.png" class="" title="image-20200719163356092">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719163606271.png" class="" title="image-20200719163606271">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719163619661.png" class="" title="image-20200719163619661">
<p>（<del>长的好像树莓派</del>。。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719163701449.png" class="" title="image-20200719163701449">
<p>然后就是介绍具体的每个部件（bootloader、IPC、需内管理……）。</p>
<p>一些实验注意事项：</p>
<ul>
<li>RISC-V的BBL（Berkeley Boot Loader）不支持SD卡读写。<ul>
<li>需要自行修改设计</li>
</ul>
</li>
<li>RISC-V中断常常需要sbi调用</li>
<li>RISC-V C ABI规定SP需要128位对齐</li>
<li>内核镜像大于64个secotrs需要多次读取（读SD卡有单次限制）</li>
<li>虚存用于标记进程ID的ASID位虽然官方文档有，但是实际上并没有实现</li>
<li>页表中的A和D两位，对于不同的环境可能有自动设置，也可能没有</li>
<li>虚存开启后的地址模式：<ul>
<li>Machine态必须是实地址</li>
<li>supervisor和user态都是虚地址</li>
</ul>
</li>
</ul>
<h3 id="涂轶翔助教介绍rcore-tutorial的lab实验练习内容"><a href="#涂轶翔助教介绍rcore-tutorial的lab实验练习内容" class="headerlink" title="涂轶翔助教介绍rcore tutorial的lab实验练习内容"></a>涂轶翔助教介绍rcore tutorial的lab实验练习内容</h3><p>涂轶翔：目前rcore tutorial第三版的维护者之一。来自于OS课程实验。</p>
<p>具体<strong>部署项目</strong>见：<a href="https://github.com/rcore-os/rCore-Tutorial-deploy" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/rCore-Tutorial-deploy</a></p>
<p><strong>参与项目</strong>可以到：<a href="https://github.com/rcore-os/rCore-Tutorial" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/rCore-Tutorial</a></p>
<h3 id="部分实习学生介绍学习经验和体会-amp-学生与助教老师的问答"><a href="#部分实习学生介绍学习经验和体会-amp-学生与助教老师的问答" class="headerlink" title="部分实习学生介绍学习经验和体会&amp;学生与助教老师的问答"></a>部分实习学生介绍学习经验和体会&amp;学生与助教老师的问答</h3><p>姚宇飞：根据教程最终的rcore代码实现了一些新功能。</p>
<p>李宇：跨专业考研考生。线段树实验似乎很难。</p>
<p>张文龙：做了一些PAT上的题目。</p>
<p><a href="https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/%E4%BA%91%E5%BE%AE%E7%9A%84-rCore-%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A.md" target="_blank" rel="noopener external nofollow noreferrer">郑昱笙</a>：。。（没听清）</p>
<p>华中大二：进度慢。慢慢来。不慌。</p>
<h1 id="rCore"><a href="#rCore" class="headerlink" title="rCore"></a>rCore</h1><blockquote>
<p><a href="https://www.bilibili.com/video/av44834267?from=search&amp;seid=4162693380754135939" target="_blank" rel="noopener external nofollow noreferrer">视频：半个世纪过去了，是时候用Rust重写操作系统了吗？（CC字幕）</a></p>
<p><a href="https://tuna.moe/event/2019/rcore-os/" target="_blank" rel="noopener external nofollow noreferrer">视频+PPT：金枪鱼之夜：陈嘉杰同学介绍 rCore v0.2.0 实现历程和进展, 2019</a></p>
<p><a href="https://cloud.tsinghua.edu.cn/f/530d03a556394fc6882c/" target="_blank" rel="noopener external nofollow noreferrer">王润基：RUST OS开发历程与心得体会</a></p>
<blockquote>
<p><a href="https://github.com/rcore-os/zCore/wiki/files/wrj-thesis.pdf" target="_blank" rel="noopener external nofollow noreferrer">Rust语言操作系统的设计与实现,王润基本科毕设论文,2019</a></p>
</blockquote>
<p><a href="https://www.bilibili.com/video/av47855780" target="_blank" rel="noopener external nofollow noreferrer">【TUNA】rCore v0.2.0 实现历程与进展</a></p>
<p><a href="https://github.com/rcore-os/zCore/wiki/files/pql-thesis.pdf" target="_blank" rel="noopener external nofollow noreferrer">zCore操作系统内核的设计与实现,潘庆霖本科毕设论文,2020</a></p>
<p><a href="https://github.com/LearningOS/rcore_step_by_step/wiki/Rust-OS-comparison" target="_blank" rel="noopener external nofollow noreferrer">Rust-OS-comparison</a></p>
<p><a href="https://s4plus.ustc.edu.cn/_upload/article/files/57/c6/a2ce9bd84b2ab411967842a1334d/27730908-ef69-4827-98a7-8e387875b39b.pdf" target="_blank" rel="noopener external nofollow noreferrer">PPT: 尝试用RUST写教学操作系统, 2018</a></p>
<p><a href="https://next.xuetangx.com/course/thu08091002729/3175284?fromArray=search_result" target="_blank" rel="noopener external nofollow noreferrer">操作系统(RISC-V)清华在线课程,2020春季</a></p>
<p><a href="https://os.phil-opp.com" target="_blank" rel="noopener external nofollow noreferrer"><strong>Writing an OS in Rust</strong></a></p>
<p><a href="https://github.com/redox-os/redox" target="_blank" rel="noopener external nofollow noreferrer">Redox</a> 开源界完成度最高的RustOS</p>
<p><a href="https://zhuanlan.zhihu.com/c_1086573713289347072" target="_blank" rel="noopener external nofollow noreferrer">从零开始写OS</a>，<a href="https://learningos.github.io/rcore_step_by_step_webdoc/" target="_blank" rel="noopener external nofollow noreferrer">rCore step by step</a></p>
<p><a href="https://github.com/rcore-os/rCore-Tutorial-deploy" target="_blank" rel="noopener external nofollow noreferrer">rCore Tutorial 2020</a>（<a href="https://rcore-os.github.io/rCore-Tutorial-deploy/" target="_blank" rel="noopener external nofollow noreferrer">gitpage</a>）</p>
</blockquote>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>rCore是用Rust语言实现的小型操作系统。</p>
<ul>
<li>兼容Alpine Linux(musl libc)：Busybox，GCC，Nginx……</li>
<li>支持四种指令集：x86_64，ARM64，RISC-V，MIPS32。</li>
</ul>
<p>rCore社区：<a href="https://github.com/rcore-os。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os。</a></p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713004923144.png" class="" title="image-20200713004923144">
<h3 id="uCore回顾"><a href="#uCore回顾" class="headerlink" title="uCore回顾"></a>uCore回顾</h3><p>uCore是C语言实现的小型操作系统。主要参考了：<a href="https://github.com/jserv/xv6-x86_64" target="_blank" rel="noopener external nofollow noreferrer">xv6</a>(<a href="https://th0ar.gitbooks.io/xv6-chinese/content/" target="_blank" rel="noopener external nofollow noreferrer">xv6中文文档</a>)，OS161，Linux。分为两个版本：</p>
<ul>
<li><a href="https://github.com/chyyuu/ucore_os_lab" target="_blank" rel="noopener external nofollow noreferrer">uCore Lab</a>：用于OS课程实验</li>
<li>uCore Plus：用于OS课程设计</li>
</ul>
<h3 id="从uCore到rCore"><a href="#从uCore到rCore" class="headerlink" title="从uCore到rCore"></a>从uCore到rCore</h3><p>C语言：内存不安全（SegmentFault），缺少现代语言特性和好用的工具链。</p>
<p>而Rust：内存+线程安全，高层语言特性，友好的工具链，蓬勃发展的社区生态。</p>
<blockquote>
<p><a href="https://github.com/rcore-os/rCore/blob/e1f93a179a4b2798247da9dd35277c2aa5f4ef14/docs/1_OS/FinalReport.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/rCore/blob/e1f93a179a4b2798247da9dd35277c2aa5f4ef14/docs/1_OS/FinalReport.md</a></p>
</blockquote>
<p>在此项目（rCore）开始时，开源界已经有不少RustOS的项目：</p>
<ul>
<li>Redox：这是目前完成度最高的RustOS，微内核架构，平台x86_64</li>
<li>《Writing an OS in Rust》&amp; blog_os：这是一个从零开始写RustOS的教程，平台x86_64</li>
<li>rv6：这是一个xv6的Rust移植，然而它止步于内存管理，并且是完全C风格的</li>
<li>CS140e：这是斯坦福2018年新开的实验性课程，用Rust写的教学OS，平台arm/RaspberryPi</li>
</ul>
<h3 id="反思rCore"><a href="#反思rCore" class="headerlink" title="反思rCore"></a>反思rCore</h3><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713004511979.png" class="" title="image-20200713004511979">
<h4 id="经验杂谈"><a href="#经验杂谈" class="headerlink" title="经验杂谈"></a>经验杂谈</h4><img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713010321508.png" class="" title="image-20200713010321508">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713010510052.png" class="" title="image-20200713010510052">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200713010551131.png" class="" title="image-20200713010551131">
<h2 id="环境安装-1"><a href="#环境安装-1" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/pre-lab/env.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/pre-lab/env.html</a></p>
</blockquote>
<p>linux环境安装总览：（在这之前<strong><font color=red>先将WSL2和Ubuntu环境装好</font></strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # bash功能增强（可选，注意！！！发现此功能会导致rustup环境变量索引失效。建议先不使用。）</span></span><br><span class="line"><span class="comment"># sudo apt install fish</span></span><br><span class="line"><span class="comment"># chsh -s $(which fish)</span></span><br><span class="line"><span class="comment"># # 解决方案（手动添加rust到环境变量）： export PATH="$HOME/.cargo/bin:$PATH"</span></span><br><span class="line"><span class="comment"># # 发现fish的设置容易产生bug，尽量不用把</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前置软件</span></span><br><span class="line">sudo apt install gcc g++ git make</span><br><span class="line">sudo apt install libglib2.0-dev libpixman-1-dev</span><br><span class="line">sudo apt install pkg-config</span><br><span class="line">sudo apt install flex bison</span><br><span class="line"></span><br><span class="line"><span class="comment"># qemu</span></span><br><span class="line">wget https://download.qemu.org/qemu-5.0.0.tar.xz</span><br><span class="line">tar xvJf qemu-5.0.0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> qemu-5.0.0</span><br><span class="line">./configure --target-list=riscv32-softmmu,riscv64-softmmu</span><br><span class="line">make -j$(nproc)             <span class="comment"># 如果你安装了fish，这里运行：make -j(nproc)</span></span><br><span class="line">sudo make install</span><br><span class="line">qemu-system-riscv64 --version</span><br><span class="line"><span class="comment"># 或：sudo apt install qemu（保证版本够新的情况下）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rust</span></span><br><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line"><span class="comment"># 若不行，可采用清华源，见：https://mirrors.tuna.tsinghua.edu.cn/help/rustup/</span></span><br><span class="line"><span class="comment"># 即：export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup</span></span><br><span class="line"><span class="comment"># 注意：在终端输入【export】只是【临时】命令，终端退出即失效，需要手动永久添加语句到 ~/.bashrc</span></span><br><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"><span class="comment"># WSL采用：curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</span></span><br><span class="line"><span class="comment"># 或者：curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile complete（获取最近的【完全】安装包）</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.cargo/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">rustup install nightly      <span class="comment"># rCore默认使用nightly版本</span></span><br><span class="line"><span class="comment"># 若出现缺失，比如rustfmt，运行：rustup component add rustfmt</span></span><br><span class="line">rustup default nightly      <span class="comment"># 或：rustup override set nightly</span></span><br><span class="line">rustc --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># rCore</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/rcore-os/rCore-Tutorial.git</span><br><span class="line"><span class="built_in">cd</span> rCore-Tutorial</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本更新加速（在首次make run的过程中可能会下载大量依赖）</span></span><br><span class="line">vi ~/.cargo/config     <span class="comment"># 修改该文件（内容见下述链接）</span></span><br><span class="line"><span class="comment"># 详情见：https://rcore-os.github.io/rCore-Tutorial-deploy/docs/pre-lab/env.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行工具集</span></span><br><span class="line">rustup target add riscv64imac-unknown-none-elf</span><br><span class="line">cargo install cargo-binutils</span><br><span class="line">rustup component add llvm-tools-preview</span><br><span class="line">rust-objdump --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译运行</span></span><br><span class="line">make run</span><br></pre></td></tr></table></figure>
<h3 id="Windows-WSL-amp-amp-Ubuntu"><a href="#Windows-WSL-amp-amp-Ubuntu" class="headerlink" title="Windows WSL &amp;&amp; Ubuntu"></a>Windows WSL &amp;&amp; Ubuntu</h3><blockquote>
<p><a href="https://dowww.spencerwoo.com/" target="_blank" rel="noopener external nofollow noreferrer">Dev on Windows with WSL - 在 Windows 上用 WSL 优雅开发</a></p>
<p><a href="https://www.jianshu.com/p/3e627ff45ccb" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/3e627ff45ccb</a></p>
<blockquote>
<p>Windows Subsystem for Linux（简称WSL）是一个为在Windows 10上能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，目标是使纯正的Ubuntu 14.04 “Trusty Tahr”映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。<br>我们简单的认为它在 Windows 上安装了一个 Linux 环境就好了。</p>
</blockquote>
</blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/" target="_blank" rel="noopener external nofollow noreferrer">WSL</a>（Windows Subsystem for Linux）是指 Windows 下构建 Linux 环境。你可以在使用 Windows 的同时，方便地进行 Linux 下的开发，并且 Linux 子系统上可以访问 Windows 的文件系统。但是，WSL 在安装rust时会出现环境配置方面的问题，因此这里我们采用新版的 WSL，即 WSL 2。</p>
<p>WSL 2 和 Ubuntu 环境安装步骤：（ <strong><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener external nofollow noreferrer">https://docs.microsoft.com/en-us/windows/wsl/install-win10</a></strong>）</p>
<ul>
<li>升级 Windows 10 到最新版（ <strong>Windows 10 版本 18917 或以后的<font color=red>内部</font>版本</strong>）<ul>
<li>如果不是 Windows 10 专业版，可能需要手动更新，在微软官网上下载。否则，可能 WSL 功能不能启动。</li>
<li>在 Powershell 中输入 <code>winver</code> 查看<strong>内部版本</strong>号。</li>
</ul>
</li>
<li>「Windows 设置 &gt; 更新和安全 &gt; Windows 预览体验计划」处选择加入，Dev开发者模式</li>
<li>打开 <strong>PowerShell</strong> 终端（<strong>管理员</strong>），输入：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用windows功能：“适用于Linux的Windows子系统”</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用windows功能：“已安装的虚拟机平台”</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认为WSL2，如果内部版本不够，这条命令会出错</span></span><br><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果先装了Ubuntu，则运行：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;Distro&gt;改为对应版本名，比如： `wsl --set-version Ubuntu 2`</span></span><br><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &lt;Distro&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在<strong>微软商店</strong>（Microsoft Store）中搜索 Ubuntu，安装第一个（或者你想要的版本）<ul>
<li>在 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel" target="_blank" rel="noopener external nofollow noreferrer">此处</a> 下载 WSL 2 的 Linux 内核更新包</li>
<li>安装完成后，打开 Ubuntu，进行<strong>初始化</strong></li>
</ul>
</li>
<li>回到 PowerShell 终端，输入：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 WSL 的版本是否为 2</span></span><br><span class="line"><span class="comment"># 可简写为 `wsl -l -v`</span></span><br><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>
<ul>
<li>若得到的版本信息正确，结束。<strong>WSL 2 和 Ubuntu 环境安装完毕</strong>。</li>
</ul>
<p>在构建完成 WSL 2 + Ubuntu 环境后，可以在 Windows 的 Linux 子系统下便捷地部署 Linux 环境。</p>
<blockquote>
<p>注意为了装rust，须<strong><font color=red>启用WSL 2</font></strong>！！！（<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10）" target="_blank" rel="noopener external nofollow noreferrer">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10）</a></p>
<blockquote>
<p>详见 <a href="https://vel.life/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/#rust%E5%B7%A5%E5%85%B7%E9%93%BE" target="_blank" rel="noopener external nofollow noreferrer"><em>rust工具链</em></a> 小节。</p>
</blockquote>
</blockquote>
<hr>
<p>微软商店加载页面失败：<a href="https://jingyan.baidu.com/article/c45ad29cf41577441753e2db.html。" target="_blank" rel="noopener external nofollow noreferrer">https://jingyan.baidu.com/article/c45ad29cf41577441753e2db.html。</a></p>
<blockquote>
<p>如果想在 Linux 查看其他分区，WSL 将其它盘符挂载在 <strong><code>/mnt</code></strong> 下。</p>
<p>如果想在 Windows 下查看 WSL 文件位置，文件位置在：<code>C:\Users\用户名\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</code> 下。</p>
</blockquote>
<hr>
<p>WSL的linux命令使用似乎与纯ubuntu有些差异：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ls ./            <span class="comment"># 查看当前目录下内容。在根目录须使用 ls /</span></span><br><span class="line">$ <span class="built_in">cd</span> folder        <span class="comment"># 进入文件夹，比如： cd /mnt进入windows目录</span></span><br></pre></td></tr></table></figure>
<p>为了方便访问windows磁盘文件夹，可能需要创建一个或多个软链接放到根目录。</p>
<p>比如：<code>sudo ln -s /mnt/c/Users/your_name/Desktop/ /</code>。</p>
<blockquote>
<p>删除软链接：<a href="http://c.biancheng.net/view/744.html" target="_blank" rel="noopener external nofollow noreferrer">http://c.biancheng.net/view/744.html</a></p>
</blockquote>
<h4 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h4><blockquote>
<p><a href="https://dowww.spencerwoo.com/1.1/2-cli/2-1-terminal.html#windows-terminal" target="_blank" rel="noopener external nofollow noreferrer">https://dowww.spencerwoo.com/1.1/2-cli/2-1-terminal.html#windows-terminal</a></p>
</blockquote>
<p>WSL项目组开发，可以方面统一管理WSL、Power Shell、Command Prompt等环境。</p>
<p>Windows Terminal 已经<strong>可以从 Microsoft Store 中直接下载</strong>。</p>
<blockquote>
<p>使用该软件还可以解决WSL的配色问题。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/microsoft/WSL/issues/5092" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/microsoft/WSL/issues/5092</a></p>
<p><a href="https://github.com/microsoft/WSL/issues/4904" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/microsoft/WSL/issues/4904</a> 因为更新导致的4294967295</p>
</blockquote>
<p>solve “<strong>process exited with code 4294967295</strong>“ , run <code>netsh winsock reset</code> as Administrator, then reboot your computer.<br> The result like below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">❯ netsh winsock reset</span><br><span class="line"></span><br><span class="line">Sucessfully reset the Winsock Catalog.</span><br><span class="line">You must restart the computer in order to complete the reset.</span><br></pre></td></tr></table></figure>
<h4 id="bash-zsh-fish"><a href="#bash-zsh-fish" class="headerlink" title="bash / zsh / fish"></a>bash / zsh / fish</h4><blockquote>
<p><a href="https://dowww.spencerwoo.com/1.1/2-cli/2-2-shell.html#bash" target="_blank" rel="noopener external nofollow noreferrer">https://dowww.spencerwoo.com/1.1/2-cli/2-2-shell.html#bash</a></p>
<p><a href="https://blog.csdn.net/liubenq/article/details/78446648" target="_blank" rel="noopener external nofollow noreferrer">Linux修改默认shell</a></p>
</blockquote>
<p>下载安装的 Windows Subsystem for Linux 默认就是 <code>bash</code> 的 Shell 环境。<code>bash</code> 是 Unix shell 的一种，是我们开发环境的基础。不过 <code>bash</code> 本身仅提供一个非常基础的命令行交互功能，没有类似 <code>zsh</code> 或 <code>fish</code> 等 Shell 的自动补全、命令提示等高阶功能。</p>
<p><code>zsh</code> 和 <code>fish</code>，都是 Unix-like 系统中不可或缺的好 Shell，它们都极大的拓展了我们命令行界面的交互体验。在命令行的世界中：</p>
<ul>
<li><code>fish</code> 更加注重「<strong>开箱即用</strong>」的体验，让我们安装完成即拥有一个包含了命令高亮、自动补全等强大功能的 Shell 环境</li>
<li><code>zsh</code> 则更加重视<strong>拓展性</strong>，借助于社区中优秀的 <code>zsh</code> 插件系统 oh-my-zsh 以及无数优秀的<strong>插件</strong>，<code>zsh</code> 同样能有比肩 <code>fish</code> 甚至比 <code>fish</code> 更高阶的功能和体验</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line"></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)    <span class="comment"># 作为默认的 Shell 环境</span></span><br></pre></td></tr></table></figure>
<p>zsh还需要单独安装自定义扩展才能达到较好的效果。也可以安装fish：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install fish</span><br><span class="line"></span><br><span class="line">chsh -s $(<span class="built_in">which</span> fish)</span><br></pre></td></tr></table></figure>
<p>切换回bash：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>
<p><strong><font color=red>此功能会导致rustup索引失效</font></strong>。（<a href="https://github.com/rust-lang/rustup/issues/686，https://github.com/rust-lang/vscode-rust/issues/675）" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rust-lang/rustup/issues/686，https://github.com/rust-lang/vscode-rust/issues/675）</a></p>
<ul>
<li>解决方案（手动添加rust到环境变量）： <code>export PATH=&quot;$HOME/.cargo/bin:$PATH&quot;</code></li>
<li>注意：export只能临时生效。需要<strong>修改环境变量文件</strong>。（<a href="https://blog.csdn.net/zhouyong0/article/details/8005520" target="_blank" rel="noopener external nofollow noreferrer">设置环境变量永久生效和临时生效 export PS1</a>）<ul>
<li><a href="https://www.cnblogs.com/swlip/p/11768651.html" target="_blank" rel="noopener external nofollow noreferrer">linux下ls、pwd等命令显示command not found</a></li>
<li>太烦了，<del>fish这什么辣鸡语法</del>，逼着我用zsh。</li>
<li>还是zsh好，添加环境变量的语法跟bash一致。省得折腾。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://www.zhihu.com/question/21418449" target="_blank" rel="noopener external nofollow noreferrer">为什么说 zsh 是 shell 中的极品？</a></p>
<p><a href="http://www.aloxaf.com/2019/11/zplugin_tutorial/" target="_blank" rel="noopener external nofollow noreferrer">加速你的 zsh —— 最强 zsh 插件管理器 zplugin/zinit 教程</a></p>
<p><a href="https://www.jianshu.com/p/d194d29e488c" target="_blank" rel="noopener external nofollow noreferrer">oh-my-zsh,让你的终端从未这么爽过</a></p>
<p><a href="https://linux.cn/article-11426-1.html" target="_blank" rel="noopener external nofollow noreferrer">给 Zsh 添加主题和插件</a></p>
</blockquote>
<h3 id="XServer-for-windows（可选）"><a href="#XServer-for-windows（可选）" class="headerlink" title="XServer for windows（可选）"></a>XServer for windows（可选）</h3><blockquote>
<p><a href="https://dowww.spencerwoo.com/1.1/4-advanced/4-1-gui.html#%E5%AE%89%E8%A3%85-xserver-for-windows" target="_blank" rel="noopener external nofollow noreferrer">https://dowww.spencerwoo.com/1.1/4-advanced/4-1-gui.html#%E5%AE%89%E8%A3%85-xserver-for-windows</a> GUI 图形化界面</p>
<p><a href="https://blog.csdn.net/qq_20084101/article/details/106423595" target="_blank" rel="noopener external nofollow noreferrer"><strong>在 WSL（Windows Subsystem for Linux） 2 中运行 Linux 图形界面应用</strong></a></p>
<p><a href="https://blog.csdn.net/kfeng632/article/details/102856346" target="_blank" rel="noopener external nofollow noreferrer">Windows 10 WSL2 安装Linux Xfce图形界面</a></p>
</blockquote>
<p>首先安装：<a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener external nofollow noreferrer">VcXsrv Windows X Server</a><a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener external nofollow noreferrer"> </a>。并按上述GUI教程配置打开。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge openssh-server</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</span><br><span class="line">sudo apt-get install -y openssh-server</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Port 222</span></span><br><span class="line"><span class="comment"># X11Forwarding yes</span></span><br><span class="line"><span class="comment"># X11DisplayOffset 10</span></span><br><span class="line">sudo service ssh start</span><br><span class="line"></span><br><span class="line">sudo vi ~/zshrc  <span class="comment"># 或者bashrc之类的</span></span><br><span class="line"><span class="comment"># export DISPLAY=$(awk '/nameserver / &#123;print $2; exit&#125;' /etc/resolv.conf 2&gt;/dev/null):0</span></span><br><span class="line"><span class="comment"># export LIBGL_ALWAYS_INDIRECT=1</span></span><br><span class="line"></span><br><span class="line">sudo apt install libgtk2.0-0 libxss1 libasound2</span><br><span class="line"></span><br><span class="line">vi ~/.profile</span><br><span class="line"><span class="comment"># # 添加以下内容：</span></span><br><span class="line"><span class="comment"># export DISPLAY=`cat /etc/resolv.conf | grep nameserver | awk '&#123;print $2&#125;'`:0</span></span><br><span class="line"><span class="comment"># export PULSE_SERVER=`cat /etc/resolv.conf | grep nameserver | awk '&#123;print $2&#125;'`</span></span><br><span class="line"><span class="comment"># # PULSE_SERVER一句是关于 PulseAudio 声音支持的，不需要可以删掉。</span></span><br><span class="line"></span><br><span class="line">sudo apt install x11-apps -y  <span class="comment"># 小眼睛工具</span></span><br><span class="line"></span><br><span class="line">xeyes <span class="comment"># 启动，看到小眼睛说明成功了</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于IP地址的设置：<a href="https://zhuanlan.zhihu.com/p/51270874。" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/51270874。</a></p>
</blockquote>
<h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line">sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line">sudo sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" &gt; /etc/apt/sources.list.d/vscode.list'</span></span><br><span class="line"></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入`code`启动VS Code到XServer的GUI上。</span></span><br><span class="line">code</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718003257896.png" class="" title="image-20200718003257896">
<p>VSCode命令行：<a href="https://code.visualstudio.com/docs/editor/command-line" target="_blank" rel="noopener external nofollow noreferrer">https://code.visualstudio.com/docs/editor/command-line</a></p>
<blockquote>
<p><code>code -h</code>获得帮助。</p>
</blockquote>
<hr>
<p><a href="https://blog.csdn.net/qq_30068487/article/details/82589347" target="_blank" rel="noopener external nofollow noreferrer">VSCode设置中文语言显示</a>：</p>
<ul>
<li>Ctrl+Shift+p，在搜索框中输入“configure display language”</li>
<li>选择安装更多语言 <code>-&gt;</code> 中文简体</li>
<li><a href="https://blog.csdn.net/qq_28120673/article/details/102087006" target="_blank" rel="noopener external nofollow noreferrer">vs code中使用remote wsl中文乱码问题</a></li>
</ul>
<hr>
<p><a href="https://github.com/microsoft/vscode/pull/80529/commits/08580a467153d620964c2b17d7a6c556ab13334e" target="_blank" rel="noopener external nofollow noreferrer">Skip WLS check if env var DONT_PROMPT_WSL_INSTALL is set.</a>:</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718033436446.png" class="" title="image-20200718033436446">
<ul>
<li>VSCode启动时总是有提示，专门去分析了一下此处的源码。了解了grep命令和if的用法：<ul>
<li><a href="https://www.cnblogs.com/end/archive/2012/02/21/2360965.html" target="_blank" rel="noopener external nofollow noreferrer">linux grep命令</a></li>
<li><a href="https://www.opencli.com/linux/shell-script-if-else-elseif" target="_blank" rel="noopener external nofollow noreferrer">Shell Script if / else 條件判斷式</a></li>
</ul>
</li>
<li>对于<code>if grep -qi Microsoft /proc/version &amp;&amp; [ -z &quot;$DONT_PROMPT_WSL_INSTALL&quot; ]; then</code><ul>
<li><code>grep -qi Microsoft /proc/version</code>：模式匹配，若在文件vesion中搜索到Microsoft则为true。不区分大小写。</li>
<li><code>[ -z &quot;$DONT_PROMPT_WSL_INSTALL&quot; ]</code>：當 $str 是 null, 回傳 true.</li>
</ul>
</li>
<li>修改并添加了环境变量<code>DONT_PROMPT_WSL_INSTALL=233</code>。没有起到预想中的效果。暂时<strong>放弃</strong>。</li>
<li><strong><font color=red>卸掉完事</font></strong>。</li>
</ul>
<hr>
<p><strong><font color=red>事实证明，根本不需要额外安装WSL里面的VSCode，WSL可以自动启动windows里面已经装好的VSCode！</font></strong></p>
<h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>下载地址：<a href="https://qemu.weilnetz.de/w64/" target="_blank" rel="noopener external nofollow noreferrer">https://qemu.weilnetz.de/w64/</a></p>
<blockquote>
<p><a href="https://download.qemu.org/" target="_blank" rel="noopener external nofollow noreferrer">https://download.qemu.org/</a></p>
</blockquote>
<p>windows安装后须配置环境变量：将安装目录添加到<code>path</code>中。</p>
<p>运行：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">qemu-system-riscv64 --version</span><br><span class="line"><span class="comment">// QEMU emulator version 5.0.0 (v5.0.0-11810-g8846fa22bb-dirty)</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers</span></span><br></pre></td></tr></table></figure>
<p>表明RISC-V 64 虚拟器安装成功。</p>
<hr>
<p>linux版本按照实验指导书安装即可。</p>
<blockquote>
<p>若tar.xz文件下载较慢，可以在<a href="https://download.qemu.org/手动科学下载。" target="_blank" rel="noopener external nofollow noreferrer">https://download.qemu.org/手动科学下载。</a></p>
</blockquote>
<p><code>ERROR: &quot;cc&quot; either does not exist or does not work</code>：</p>
<ul>
<li>说明没有安装<code>gcc</code>。（<a href="https://blog.csdn.net/feiyangyongran/article/details/46414517）" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/feiyangyongran/article/details/46414517）</a><ul>
<li>更换ubuntu软件源镜像：<a href="https://dowww.spencerwoo.com/1.1/2-cli/2-2-shell.html#%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%95%9C%E5%83%8F" target="_blank" rel="noopener external nofollow noreferrer">Here</a></li>
</ul>
</li>
<li>运行：<code>sudo apt install gcc</code></li>
</ul>
<blockquote>
<p>接下来可能还会有一堆not found和required。按提示依次<code>sudo apt install ...</code>即可。</p>
</blockquote>
<p><code>ERROR: glib-2.40 gthread-2.0 is required to compile</code>：</p>
<ul>
<li>使用<code>apt-cache search glib2</code><strong>查看应该安装哪个库</strong>。（<a href="https://blog.csdn.net/fuxy3/article/details/104732541）" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/fuxy3/article/details/104732541）</a><ul>
<li><code>sudo apt-get install libglib2.0-dev</code><ul>
<li>注：新版ubuntu（Ubuntu 16.04）引入了<code>apt</code>代替<code>apt-get</code>命令</li>
</ul>
</li>
</ul>
</li>
<li><strong><font color=red>注 - 软件包查找方法</font></strong>：<code>apt-cache search pixman</code>。<ul>
<li><code>sudo apt-get install libpixman-1-dev</code></li>
</ul>
</li>
</ul>
<hr>
<p>QEMU 可以使用 <code>ctrl+a</code> （macOS 为 <code>control+a</code>） 再按下 <code>x</code> 键退出。</p>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener external nofollow noreferrer">Make 命令教程</a></p>
<p><a href="https://blog.csdn.net/Nicholas_Liu2017/article/details/78323391" target="_blank" rel="noopener external nofollow noreferrer">Windows安装GNU编译器使用makefile</a>，<a href="https://blog.csdn.net/C2681595858/article/details/85554359" target="_blank" rel="noopener external nofollow noreferrer">【杂谈】windows10配置make命令</a></p>
</blockquote>
<p>自动化编译工具。</p>
<ul>
<li><code>sudo apt install make</code>。</li>
</ul>
<blockquote>
<p><code>make[1]: rust-objcopy: Command not found</code>：</p>
<ul>
<li>缺少binutils 工具集。</li>
<li><code>cargo install cargo-binutils</code><br><code>rustup component add llvm-tools-preview</code></li>
</ul>
</blockquote>
<h3 id="rust工具链"><a href="#rust工具链" class="headerlink" title="rust工具链"></a>rust工具链</h3><p>首先安装 Rust 版本管理器 rustup 和 Rust 包管理器 cargo，这个windows之前已经安装。</p>
<p>linux版可能再装一次。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>
<hr>
<p><code>thread panicked while panicking. aborting.
Illegal instruction (core dumped)</code>：（似乎是用WSL装rust的特有错误）</p>
<ul>
<li><a href="https://stackoverflow.com/questions/61603982/thread-main-panicked-at-assertion-failed-left-right-left-22-right" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/61603982/thread-main-panicked-at-assertion-failed-left-right-left-22-right</a></li>
<li><a href="https://github.com/rust-lang/rustup/issues/2245" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rust-lang/rustup/issues/2245</a> WLS 2才能正常装。。</li>
</ul>
<p>发现自己可能WSL装错了版本。</p>
<blockquote>
<p><strong>只有 Windows 10 版本 18917 或以后的版本才能够正常运行 WSL 2</strong>。需要明确，WSL 2  目前依旧只能在 Windows 10 预览体验计划的版本中使用，因此你需要在「Windows 设置 &gt; 更新和安全 &gt;  Windows 预览体验计划」处选择加入 Fast ring 或 Slow ring，这样才能使用正确的 Windows 10 版本安装 WSL 2。（<a href="https://dowww.spencerwoo.com/1.1/1-preparations/1-1-installation.html#windows-10" target="_blank" rel="noopener external nofollow noreferrer">Here</a>）</p>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener external nofollow noreferrer">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>
<p><a href="https://github.com/Lincyaw/Rust_os_summer/blob/master/readme.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Lincyaw/Rust_os_summer/blob/master/readme.md</a></p>
</blockquote>
<p>更新windows。装上了WSL2。发现linux无法切换到WSL2。卸载重装报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">WslRegisterDistribution failed with error: 0x800701bc</span><br><span class="line">Error: 0x800701bc WSL 2 ?????????????????? https:&#x2F;&#x2F;aka.ms&#x2F;wsl2kernel</span><br></pre></td></tr></table></figure>
<p>解决方案：<a href="https://github.com/microsoft/WSL/issues/5393" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/microsoft/WSL/issues/5393</a></p>
<blockquote>
<p>在此处下载WSL2 Linux内核更新包：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel" target="_blank" rel="noopener external nofollow noreferrer">https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel</a></p>
<p>更新后问题解决。</p>
</blockquote>
<p>然后重装一切。。</p>
<hr>
<hr>
<hr>
<p>在经过漫长的鏖战以后，凌晨三点半，终于，运行成功了！</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200717032528029.png" class="" title="image-20200717032528029">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200717032609113.png" class="" title="image-20200717032609113">
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p>运行GDB架构：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gdb --configuration    <span class="comment"># --target指定可以debug的类型</span></span><br></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev python python-dev texinfo libreadline-dev</span><br></pre></td></tr></table></figure>
<p>按照教程走即可。</p>
<hr>
<p><code>error: *** A compiler with support for C++11 language features is required.</code>：</p>
<ul>
<li><code>sudo apt install g++</code></li>
</ul>
<hr>
<h4 id="GDB调试语法"><a href="#GDB调试语法" class="headerlink" title="GDB调试语法"></a>GDB调试语法</h4><ul>
<li><code>b &lt;函数名&gt;</code> ：在函数进入时设置断点，例如 <code>b rust_main</code> 或 <code>b os::memory::heap::init</code></li>
<li><code>cont</code> ：继续执行</li>
<li><code>n</code> ：执行下一行代码，不进入函数</li>
<li><code>ni</code> ：执行下一条指令（跳转指令则执行至返回）</li>
<li><code>s</code> ：执行下一行代码，进入函数</li>
<li><code>si</code> ：执行下一条指令，包括跳转指令</li>
<li><code>layout</code>：如果没有安装 <code>gdb-dashboard</code>，可以通过 <code>layout</code> 指令来呈现寄存器等信息，具体查看 <code>help layout</code></li>
<li><code>x/&lt;格式&gt; &lt;地址&gt;</code> ：使用 <code>x/&lt;格式&gt; &lt;地址&gt;</code> 来查看内存，例如 <code>x/8i 0x80200000</code> 表示查看 <code>0x80200000</code> 起始的 8 条指令。具体格式查看 <code>help x</code></li>
</ul>
<h4 id="gdb-dashboard（可选）"><a href="#gdb-dashboard（可选）" class="headerlink" title="gdb-dashboard（可选）"></a>gdb-dashboard（可选）</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -P ~ git.io/.gdbinit</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GDB will automatically load <code>./.gdbinit</code> for current debugging.</p>
</blockquote>
<p><code>Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|0.0.0.0|:443... failed: Connection refused.</code>：（被墙了）</p>
<ul>
<li><a href="https://blog.csdn.net/littlehaes/article/details/103638711" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/littlehaes/article/details/103638711</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/144583887" target="_blank" rel="noopener external nofollow noreferrer">WSL2来了！但是能正常使用并不简单</a>【WSL和V2ray的防火墙设置】</li>
<li><a href="https://jiayaoo3o.github.io/2020/06/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1WSL2%E7%9A%84%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener external nofollow noreferrer">记录一次WSL2的网络代理配置</a>【V2ray】</li>
</ul>
<p><code>Error parsing proxy URL socks5://172.27.208.1:10808: Unsupported scheme ‘socks5’.</code>：</p>
<ul>
<li>wget不支持socks5。。。</li>
<li>搞来搞去。逼得没办法了。分析了一下<code>wget -P ~ git.io/.gdbinit</code>的含义，如下<ul>
<li><strong>用wget将网络文件<code>git.io/.gdbinit</code>保存到<code>~</code>根目录下</strong></li>
<li>` -P,  —directory-prefix=PREFIX   save files to PREFIX/..<pre><code>   --cut-dirs=NUMBER           ignore NUMBER remote directory components`
</code></pre></li>
<li>好了，这就好办，直接手动下载<code>.gdbinit</code>放到根目录！<ul>
<li><code>mv ./.gdbinit ~/</code>（<a href="https://gitee.com/dongbo_89/gdb-dashboard）" target="_blank" rel="noopener external nofollow noreferrer">https://gitee.com/dongbo_89/gdb-dashboard）</a></li>
<li>安装pip：<a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener external nofollow noreferrer">https://pip.pypa.io/en/stable/installing/</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install pygments <span class="comment"># Optionally install Pygments to enable syntax highlighting</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/42870537/zsh-command-cannot-found-pip" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/42870537/zsh-command-cannot-found-pip</a></p>
<ul>
<li><code>python -m pip install pygments</code></li>
</ul>
</blockquote>
<h2 id="Lab0：了解写RUST写OS的相关综述信息"><a href="#Lab0：了解写RUST写OS的相关综述信息" class="headerlink" title="Lab0：了解写RUST写OS的相关综述信息"></a>Lab0：了解写RUST写OS的相关综述信息</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-0/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab0 实验指导—rcore tutorial教程第三版</strong></a></p>
<p><a href="https://next.xuetangx.com/course/thu08091002729/3175284?fromArray=search_result" target="_blank" rel="noopener external nofollow noreferrer">操作系统(RISC-V)清华在线课程,2020春季</a> 了解一下RISC-V、rCore的知识</p>
<p><a href="https://github.com/rcore-os/zCore/wiki/files/wrj-thesis.pdf" target="_blank" rel="noopener external nofollow noreferrer">Rust语言操作系统的设计与实现,王润基本科毕设论文,2019</a></p>
<p><a href="https://github.com/rcore-os/zCore/wiki/files/pql-thesis.pdf" target="_blank" rel="noopener external nofollow noreferrer">zCore操作系统内核的设计与实现,潘庆霖本科毕设论文,2020</a></p>
<p><a href="https://github.com/LearningOS/rcore_step_by_step/wiki/Rust-OS-comparison" target="_blank" rel="noopener external nofollow noreferrer">Rust-OS-comparison</a></p>
<p><a href="https://www.bilibili.com/video/av44834267?from=search&amp;seid=4162693380754135939" target="_blank" rel="noopener external nofollow noreferrer">视频：半个世纪过去了，是时候用Rust重写操作系统了吗？（CC字幕）</a></p>
<p><a href="https://tuna.moe/event/2019/rcore-os/" target="_blank" rel="noopener external nofollow noreferrer">视频+PPT：金枪鱼之夜：陈嘉杰同学介绍 rCore v0.2.0 实现历程和进展, 2019</a></p>
<p><a href="https://s4plus.ustc.edu.cn/_upload/article/files/57/c6/a2ce9bd84b2ab411967842a1334d/27730908-ef69-4827-98a7-8e387875b39b.pdf" target="_blank" rel="noopener external nofollow noreferrer">PPT: 尝试用RUST写教学操作系统, 2018</a></p>
</blockquote>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir ./rcore_project</span><br><span class="line"><span class="built_in">cd</span> rcore_project</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"nightly-2020-06-27"</span> &gt;&gt; ./rust-toolchain</span><br><span class="line">cargo new os</span><br></pre></td></tr></table></figure>
<p>项目结构到此创建完毕。</p>
<p>运行测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> os</span><br><span class="line">cargo run</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718024308463.png" class="" title="image-20200718024308463">
<h3 id="移除标准库依赖"><a href="#移除标准库依赖" class="headerlink" title="移除标准库依赖"></a>移除标准库依赖</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![no_std]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用<code>#![no_std]</code>禁用标准库。产生三个<strong>error</strong>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">error: cannot find <span class="keyword">macro</span> `println` <span class="keyword">in</span> this scope</span><br><span class="line"> --&gt; src/main.rs:<span class="number">3</span>:<span class="number">5</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">7</span> |     <span class="built_in">println!</span>(<span class="string">"Hello, rCore-Tutorial!"</span>);</span><br><span class="line">  |     ^^^^^^^</span><br><span class="line">error: `<span class="meta">#[panic_handler]</span>` function required, but not found</span><br><span class="line">error: language item required, but not found: `eh_personality`</span><br></pre></td></tr></table></figure>
<p><strong>error1</strong>，删去println!宏即可。</p>
<p><strong>error2</strong>，自主实现panic函数（ <code>panic_handler</code> ）：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 当 panic 发生时会调用该函数</span></span><br><span class="line"><span class="keyword">use</span> core::panic::PanicInfo; <span class="comment">// 核心库 core，与标准库 std 不同，这个库不需要操作系统的支持</span></span><br><span class="line"><span class="meta">#[panic_handler]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">panic</span></span>(_info: &amp;PanicInfo) -&gt; ! &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;&#125;                 <span class="comment">// 我们暂时将它的实现为一个死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>error3</strong>，语义项（Language Item）缺失。（ <code>panic_handler</code> 也是一个语义项）</p>
<ul>
<li><code>eh_personality</code>：eh 是 Exception Handling 的缩写，它是一个标记某函数用来实现<strong>堆栈展开</strong>处理功能的语义项。</li>
<li>在<code>os/Cargo.toml</code>中：将 dev 配置和 release 配置的 panic 的处理策略设为直接终止，也就是直接调用我们的 <code>panic_handler</code> 而不是先进行堆栈展开等处理再调用。</li>
</ul>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># panic 时直接终止，因为我们没有实现堆栈展开的功能</span></span><br><span class="line"><span class="section">[profile.dev]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">"abort"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">"abort"</span></span><br></pre></td></tr></table></figure>
<p>运行：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718200833153.png" class="" title="image-20200718200833153">
<h3 id="移除运行时环境依赖"><a href="#移除运行时环境依赖" class="headerlink" title="移除运行时环境依赖"></a>移除运行时环境依赖</h3><p><strong>运行时系统</strong>（Runtime System）可能导致 <code>main</code> 函数并不是实际执行的第一个函数。</p>
<p>Rust 的运行时入口点被 <code>start</code> 语义项标记。Rust 运行时环境的<strong>入口点结束之后才会调用 <code>main</code> 函数</strong>进入主程序。</p>
<ul>
<li>重写覆盖整个 <code>crt0</code> 入口点。<ul>
<li>加上 <code>#![no_main]</code> 告诉编译器我们不用常规的入口点。</li>
<li>实现一个 <strong><code>_start</code></strong> 函数来代替 <code>crt0</code>，并加上 <code>#[no_mangle]</code> 告诉编译器对于此函数禁用编译期间的名称重整（Name Mangling）——确保编译器生成一个名为 <code>_start</code> 的函数。</li>
</ul>
</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! # 全局属性</span></span><br><span class="line"><span class="comment">//! - `#![no_std]`  </span></span><br><span class="line"><span class="comment">//!   禁用标准库</span></span><br><span class="line"><span class="meta">#![no_std]</span></span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="comment">//! - `#![no_main]`  </span></span><br><span class="line"><span class="comment">//!   不使用 `main` 函数等全部 Rust-level 入口点来作为程序入口</span></span><br><span class="line"><span class="meta">#![no_main]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 当 panic 发生时会调用该函数</span></span><br><span class="line"><span class="keyword">use</span> core::panic::PanicInfo; <span class="comment">// 核心库 core，与标准库 std 不同，这个库不需要操作系统的支持</span></span><br><span class="line"><span class="meta">#[panic_handler]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">panic</span></span>(_info: &amp;PanicInfo) -&gt; ! &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;&#125;                 <span class="comment">// 我们暂时将它的实现为一个死循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 覆盖 crt0 中的 _start 函数</span></span><br><span class="line"><span class="comment">/// 我们暂时将它的实现为一个死循环</span></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">fn</span> <span class="title">_start</span></span>() -&gt; ! &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718214654610.png" class="" title="image-20200718214654610">
<h3 id="编译为裸机目标"><a href="#编译为裸机目标" class="headerlink" title="编译为裸机目标"></a>编译为裸机目标</h3><p><strong>链接错误</strong>：链接器的默认配置假定程序依赖于 C 语言的运行时环境，但我们的程序并不依赖于它。</p>
<blockquote>
<p>为了解决这个错误，我们需要告诉链接器，它不应该包含 C 语言运行时环境。我们可以选择<strong>提供特定的链接器参数（Linker  Argument）</strong>，也可以选择<strong>编译为裸机目标（Bare Metal  Target）</strong>，我们将沿着后者的思路在后面解决这个问题，即直接编译为裸机目标不链接任何运行时环境。</p>
</blockquote>
<p><code>rustc --version --verbose</code>：查看当前系统的目标三元组。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718221104763.png" class="" title="image-20200718221104763">
<blockquote>
<p>host 字段的值为三元组 x86_64-unknown-linux-gnu，它包含了 CPU 架构 x86_64、供应商 unknown、操作系统 linux 和二进制接口 gnu。</p>
</blockquote>
<p>裸机环境：（底层没有操作系统的运行环境。这个其实之前已经装了）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rustup target add riscv64imac-unknown-none-elf</span><br><span class="line"><span class="comment"># 目标三元组 riscv64imac-unknown-none-elf 描述了一个 RISC-V 64 位指令集的系统。</span></span><br></pre></td></tr></table></figure>
<p><code>cargo build --target riscv64imac-unknown-none-elf</code>：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718224323452.png" class="" title="image-20200718224323452">
<p>编译后结果放在了 <code>os/target/riscv64imac-unknown-none-elf/debug</code> 文件夹中。其中有一个名为 <code>os</code> 的可执行文件。它的目标平台是 RISC-V 64，暂时还不能通过我们的开发环境执行它。</p>
<p>在 <code>os</code> 文件夹中创建一个 <code>.cargo</code> 文件夹，并在其中创建一个名为 <code>config</code> 的文件，在其中填入以下内容：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译的目标平台</span></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"><span class="attr">target</span> = <span class="string">"riscv64imac-unknown-none-elf"</span></span><br></pre></td></tr></table></figure>
<p>这指定了此项目编译时默认的目标。</p>
<p>以后可以直接使用 <code>cargo build</code> 来编译了。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718225757450.png" class="" title="image-20200718225757450">
<h3 id="生成内核镜像"><a href="#生成内核镜像" class="headerlink" title="生成内核镜像"></a>生成内核镜像</h3><p>为了查看和分析生成的可执行文件，我们首先需要安装一套名为 binutils 的命令行工具集，其中包含了 objdump 和 objcopy 等常用工具。这在之前已经安装完毕。</p>
<p>查看编译好的<code>os</code>可执行文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">file target/riscv64imac-unknown-none-elf/debug/os</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200718230007596.png" class="" title="image-20200718230007596">
<blockquote>
<p>它是一个 64 位的 elf 格式的可执行文件，架构是 RISC-V；链接方式为静态链接；not stripped 指的是里面符号表的信息未被剔除，而这些信息在调试程序时会用到，程序正常执行时通常不会使用。</p>
</blockquote>
<p>使用刚刚安装的工具链中的 rust-objdump 工具看看它的具体信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vel@LAPTOP-OD50F928 /Linux/rcore_project/os</span><br><span class="line"> % rust-objdump target/riscv64imac-unknown-none-elf/debug/os -x --arch-name=riscv64</span><br><span class="line"></span><br><span class="line">target/riscv64imac-unknown-none-elf/debug/os:   file format ELF64-riscv</span><br><span class="line"></span><br><span class="line">architecture: riscv64</span><br><span class="line">start address: 0x0000000000011120</span><br><span class="line"></span><br><span class="line">Program Header:</span><br><span class="line">    PHDR off    0x0000000000000040 vaddr 0x0000000000010040 paddr 0x0000000000010040 align 2**3</span><br><span class="line">         filesz 0x00000000000000e0 memsz 0x00000000000000e0 flags r--</span><br><span class="line">    LOAD off    0x0000000000000000 vaddr 0x0000000000010000 paddr 0x0000000000010000 align 2**12</span><br><span class="line">         filesz 0x0000000000000120 memsz 0x0000000000000120 flags r--</span><br><span class="line">    LOAD off    0x0000000000000120 vaddr 0x0000000000011120 paddr 0x0000000000011120 align 2**12</span><br><span class="line">         filesz 0x0000000000000004 memsz 0x0000000000000004 flags r-x</span><br><span class="line">   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**64</span><br><span class="line">         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-</span><br><span class="line"></span><br><span class="line">Dynamic Section:</span><br><span class="line">Sections:</span><br><span class="line">Idx Name            Size     VMA              Type</span><br><span class="line">  0                 00000000 0000000000000000</span><br><span class="line">  1 .text           00000004 0000000000011120 TEXT</span><br><span class="line">  2 .debug_str      00000403 0000000000000000</span><br><span class="line">  3 .debug_abbrev   00000113 0000000000000000</span><br><span class="line">  4 .debug_info     0000053c 0000000000000000</span><br><span class="line">  5 .debug_aranges  00000040 0000000000000000</span><br><span class="line">  6 .debug_ranges   00000030 0000000000000000</span><br><span class="line">  7 .debug_pubnames 000000a4 0000000000000000</span><br><span class="line">  8 .debug_pubtypes 00000308 0000000000000000</span><br><span class="line">  9 .debug_frame    00000050 0000000000000000</span><br><span class="line"> 10 .debug_line     0000005b 0000000000000000</span><br><span class="line"> 11 .comment        00000013 0000000000000000</span><br><span class="line"> 12 .symtab         00000108 0000000000000000</span><br><span class="line"> 13 .shstrtab       000000a5 0000000000000000</span><br><span class="line"> 14 .strtab         0000002d 0000000000000000</span><br><span class="line"></span><br><span class="line">SYMBOL TABLE:</span><br><span class="line">0000000000000000 l    df *ABS*  00000000 3gqd1qcioyc9uzqc</span><br><span class="line">0000000000011120         .text  00000000</span><br><span class="line">0000000000011120         .text  00000000</span><br><span class="line">0000000000011120         .text  00000000</span><br><span class="line">0000000000011124         .text  00000000</span><br><span class="line">0000000000000000         .debug_info    00000000</span><br><span class="line">0000000000000000         .debug_ranges  00000000</span><br><span class="line">0000000000000000         .debug_frame   00000000</span><br><span class="line">0000000000000000         .debug_line    00000000 .Lline_table_start0</span><br><span class="line">0000000000011120 g     F .text  00000004 _start</span><br></pre></td></tr></table></figure>
<p>按顺序逐个查看：</p>
<ul>
<li><code>start address</code>：程序的<strong>入口地址</strong></li>
<li><code>Sections</code>：从这里我们可以看到程序<strong>各段的各种信息</strong>。后面以 debug 开头的段是调试信息</li>
<li><code>SYMBOL TABLE</code>：符号表，从中我们可以看到程序中<strong>所有符号的地址</strong>。例如 <code>_start</code> 函数就位于入口地址上</li>
<li><code>Program Header</code>：程序加载时所需的<strong>段信息</strong><ul>
<li>其中的 <strong>off</strong> 是它在文件中的位置，<strong>vaddr 和 paddr</strong> 是要加载到的虚拟地址和物理地址，<strong>align</strong>  规定了地址的对齐，<strong>filesz 和 memsz</strong> 分别表示它在文件和内存中的大小，<strong>flags</strong> 描述了相关权限（r 表示可读，w 表示可写，x  表示可执行）</li>
</ul>
</li>
</ul>
<p>对于<code>rust-objdump</code>，<code>-x</code> 来、可以查看程序的元信息，下面我们用 <code>-d</code> 来对代码进行反汇编：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vel@LAPTOP-OD50F928 /Linux/rcore_project/os</span><br><span class="line"> % rust-objdump target/riscv64imac-unknown-none-elf/debug/os -d --arch-name=riscv64</span><br><span class="line"></span><br><span class="line">target/riscv64imac-unknown-none-elf/debug/os:   file format ELF64-riscv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000011120 _start:</span><br><span class="line">   11120: 09 a0                         j       2</span><br><span class="line">   11122: 01 a0                         j       0</span><br></pre></td></tr></table></figure>
<p>可以看到其中只有一个 <code>_start</code> 函数，里面什么都不做，就一个死循环。</p>
<blockquote>
<p>并没有看到类似的东西。</p>
</blockquote>
<h4 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rust-objcopy target/riscv64imac-unknown-none-elf/debug/os --strip-all -O binary target/riscv64imac-unknown-none-elf/debug/kernel.bin</span><br></pre></td></tr></table></figure>
<p>这里 <code>--strip-all</code> 表明丢弃所有符号表及调试信息，<code>-O binary</code> 表示输出为二进制文件。</p>
<p>至此，我们编译并生成了内核镜像 <code>kernel.bin</code> 文件。接下来，我们将使用 QEMU 模拟器真正将我们的内核镜像跑起来。</p>
<h3 id="调整内存布局"><a href="#调整内存布局" class="headerlink" title="调整内存布局"></a>调整内存布局</h3><p>一般来说，一个程序按照功能不同会分为下面这些段：</p>
<ul>
<li>.text 段：代码段，存放汇编代码</li>
<li>.rodata 段：只读数据段，顾名思义里面存放只读数据，通常是程序中的常量</li>
<li>.data 段：存放被初始化的可读写数据，通常保存程序中的全局变量</li>
<li>.bss 段：存放被初始化为 0 的可读写数据，与 .data 段的不同之处在于我们知道它要被初始化为 0，因此在可执行文件中只需记录这个段的大小以及所在位置即可，而不用记录里面的数据，也不会实际占用二进制文件的空间</li>
<li>Stack：栈，用来存储程序运行过程中的局部变量，以及负责函数调用时的各种机制。它从高地址向低地址增长</li>
<li>Heap：堆，用来支持程序<strong>运行过程中</strong>内存的<strong>动态分配</strong>，比如说你要读进来一个字符串，在你写程序的时候你也不知道它的长度究竟为多少，于是你只能在运行过程中，知道了字符串的长度之后，再在堆中给这个字符串分配内存</li>
</ul>
<p>内存布局，也就是指这些段各自所放的位置。一种典型的内存布局如下：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200719222922888.png" class="" title="image-20200719222922888">
<h4 id="编写链接脚本"><a href="#编写链接脚本" class="headerlink" title="编写链接脚本"></a>编写链接脚本</h4><p>使用<strong>链接脚本（Linker Script）</strong>来指定程序的内存布局。创建文件 <code>os/src/linker.ld</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch ./src/linker.ld</span><br><span class="line"><span class="built_in">cd</span> ./src</span><br></pre></td></tr></table></figure>
<p>写入下述内容：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 有关 Linker Script 可以参考：https://sourceware.org/binutils/docs/ld/Scripts.html */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 目标架构 */</span></span><br><span class="line"><span class="comment">// 使用 OUTPUT_ARCH 指定了架构</span></span><br><span class="line">OUTPUT_ARCH(riscv)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行入口 */</span></span><br><span class="line"><span class="comment">// 使用 ENTRY 指定了入口点为 _start 函数，即程序第一条被执行的指令所在之处</span></span><br><span class="line"><span class="comment">// 在这个链接脚本中我们并未看到 _start ，回忆上一章，我们为了移除运行时环境依赖，重写了入口 _start 。所以，链接脚本宣布整个程序会从那里开始运行。</span></span><br><span class="line">ENTRY(_start)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据存放起始地址 */</span></span><br><span class="line">BASE_ADDRESS = <span class="number">0x80200000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接脚本的整体写在 SECTION&#123; &#125; 中，里面有多个形如 output section: &#123; input section list &#125; 的语句，每个都描述了整个程序内存布局中的一个输出段 output section 是由各个文件中的哪些输入段 input section 组成的。</span></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* . 表示当前地址（location counter） */</span></span><br><span class="line">    . = BASE_ADDRESS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start 符号表示全部的开始位置 */</span></span><br><span class="line">    kernel_start = .;</span><br><span class="line"></span><br><span class="line">    text_start = .;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* .text 字段 */</span></span><br><span class="line">    .text : &#123;</span><br><span class="line">        <span class="comment">// 我们可以用 *( ) 来表示将各个文件中所有符合括号内要求的输入段放在当前的位置。而括号内，你可以直接使用段的名字，也可以包含通配符 *。</span></span><br><span class="line">        <span class="comment">/* 把 entry 函数放在最前面 */</span></span><br><span class="line">        *(.text.entry)</span><br><span class="line">        <span class="comment">/* 要链接的文件的 .text 字段集中放在这里 */</span></span><br><span class="line">        *(.text .text.*)</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 单独的一个 . 为当前地址（Location Counter），可以对其赋值来从设置的地址继续向高地址放置各个段。如果不进行赋值的话，则默认各个段会紧挨着向高地址放置。将一个符号赋值为 . 则会记录下这个符号的地址。</span></span><br><span class="line">    rodata_start = .;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* .rodata 字段 */</span></span><br><span class="line">    .rodata : &#123;</span><br><span class="line">        <span class="comment">/* 要链接的文件的 .rodata 字段集中放在这里 */</span></span><br><span class="line">        *(.rodata .rodata.*)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data_start = .;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* .data 字段 */</span></span><br><span class="line">    .data : &#123;</span><br><span class="line">        <span class="comment">/* 要链接的文件的 .data 字段集中放在这里 */</span></span><br><span class="line">        *(.data .data.*)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bss_start = .;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* .bss 字段 */</span></span><br><span class="line">    .bss : &#123;</span><br><span class="line">        <span class="comment">/* 要链接的文件的 .bss 字段集中放在这里 */</span></span><br><span class="line">        *(.sbss .bss .bss.*)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结束地址 */</span></span><br><span class="line">    kernel_end = .;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先是从 BASE_ADDRESS 即 0x80200000 开始向下放置各个段，依次是 .text，.rodata，.data，.stack 和 .bss。同时我们还记录下了每个段的开头和结尾地址，如 .text 段的开头、结尾地址分别就是符号 stext 和 etext 的值</span></span><br></pre></td></tr></table></figure>
<p>在 <code>.cargo/config</code> 文件中加入以下配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用我们的 linker script 来进行链接</span></span><br><span class="line"><span class="comment"># 在链接时传入一个参数 -T 来指定使用哪个链接脚本</span></span><br><span class="line">[target.riscv64imac-unknown-none-elf]</span><br><span class="line">rustflags = [</span><br><span class="line">    <span class="string">"-C"</span>, <span class="string">"link-arg=-Tsrc/linker.ld"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>重新编译：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cargo build</span><br><span class="line">rust-objdump target/riscv64imac-unknown-none-elf/debug/os -h --arch-name=riscv64</span><br><span class="line">rust-objdump target/riscv64imac-unknown-none-elf/debug/os -d --arch-name=riscv64</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200721142034340.png" class="" title="image-20200721142034340">
<h3 id="重写程序入口点-start"><a href="#重写程序入口点-start" class="headerlink" title="重写程序入口点 _start"></a>重写程序入口点 <code>_start</code></h3><p>在 <code>_start</code> 中设置内核的运行环境：（<code>os/src/entry.asm</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 操作系统启动时所需的指令以及字段</span><br><span class="line">#</span><br><span class="line"># 我们在 linker.ld 中将程序入口设置为了 _start，因此在这里我们将填充这个标签</span><br><span class="line"># 它将会执行一些必要操作，然后跳转至我们用 rust 编写的入口函数</span><br><span class="line">#</span><br><span class="line"># 关于 RISC-V 下的汇编语言，可以参考 https:&#x2F;&#x2F;github.com&#x2F;riscv&#x2F;riscv-asm-manual&#x2F;blob&#x2F;master&#x2F;riscv-asm.md</span><br><span class="line"></span><br><span class="line">    .section .text.entry</span><br><span class="line">    .globl _start</span><br><span class="line"># 目前 _start 的功能：将预留的栈空间写入 $sp，然后跳转至 rust_main</span><br><span class="line">_start:</span><br><span class="line">    la sp, boot_stack_top</span><br><span class="line">    call rust_main</span><br><span class="line"></span><br><span class="line">    # 回忆：bss 段是 ELF 文件中只记录长度，而全部初始化为 0 的一段内存空间</span><br><span class="line">    # 这里声明字段 .bss.stack 作为操作系统启动时的栈</span><br><span class="line">    .section .bss.stack</span><br><span class="line">    .global boot_stack</span><br><span class="line">boot_stack:</span><br><span class="line">    # 16K 启动栈大小</span><br><span class="line">    .space 4096 * 16</span><br><span class="line">    .global boot_stack_top</span><br><span class="line">boot_stack_top:</span><br><span class="line">    # 栈结尾</span><br></pre></td></tr></table></figure>
<p>将 <code>os/src/main.rs</code> 里面的 <code>_start</code> 函数删除，并换成 <code>rust_main</code>。</p>
<h3 id="使用-QEMU-运行内核"><a href="#使用-QEMU-运行内核" class="headerlink" title="使用 QEMU 运行内核"></a>使用 QEMU 运行内核</h3><p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-system-riscv64 \</span><br><span class="line">  --machine virt \</span><br><span class="line">  --nographic \</span><br><span class="line">  --bios default</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200721143738441.png" class="" title="image-20200721143738441">
<p>加入输出代码，以及Makefile。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200721150522668.png" class="" title="image-20200721150522668">
<hr>
<p><code>Makefile:16: *** missing separator.  Stop.</code>：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/16931770/makefile4-missing-separator-stop" target="_blank" rel="noopener external nofollow noreferrer">https://stackoverflow.com/questions/16931770/makefile4-missing-separator-stop</a><ul>
<li>makefile has a very stupid relation with tabs, all actions of every rule are identified by tabs. And no, 4 spaces don’t make a tab, only a tab  makes a tab.</li>
</ul>
</li>
<li>Makefile语法不支持4个空格代替Tab。</li>
</ul>
<h3 id="接口封装和代码整理"><a href="#接口封装和代码整理" class="headerlink" title="接口封装和代码整理"></a>接口封装和代码整理</h3><h4 id="使用-OpenSBI-提供的服务"><a href="#使用-OpenSBI-提供的服务" class="headerlink" title="使用 OpenSBI 提供的服务"></a>使用 OpenSBI 提供的服务</h4><p>OpenSBI 实际上不仅起到了 <strong>bootloader</strong>  的作用，还为我们提供了一些底层系统服务供我们在编写内核时使用，以简化内核实现并提高内核跨硬件细节的能力。这层底层系统服务接口称为  <strong>SBI</strong>（Supervisor Binary Interface），是 S Mode 的 OS 和 M Mode 执行环境之间的标准接口约定。</p>
<blockquote>
<p>参考 <a href="https://github.com/riscv/riscv-sbi-doc/blob/master/riscv-sbi.adoc#legacy-sbi-extension-extension-ids-0x00-through-0x0f" target="_blank" rel="noopener external nofollow noreferrer">OpenSBI 文档</a> ，里面包含了一些以 C 函数格式给出的我们可以调用的接口。</p>
</blockquote>
<p>建立<code>os/src/sbi.rs</code>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! 调用 Machine 层的操作</span></span><br><span class="line"><span class="comment">// 目前还不会用到全部的 SBI 调用，暂时允许未使用的变量或函数</span></span><br><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// SBI 调用</span></span><br><span class="line"><span class="meta">#[inline(always)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sbi_call</span></span>(which: <span class="number">4usize</span>, arg0: <span class="built_in">usize</span>, arg1: <span class="built_in">usize</span>, arg2: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        llvm_asm!(<span class="string">"ecall"</span></span><br><span class="line">            : <span class="string">"=&#123;x10&#125;"</span> (ret)</span><br><span class="line">            : <span class="string">"&#123;x10&#125;"</span> (arg0), <span class="string">"&#123;x11&#125;"</span> (arg1), <span class="string">"&#123;x12&#125;"</span> (arg2), <span class="string">"&#123;x17&#125;"</span> (which)</span><br><span class="line">            : <span class="string">"memory"</span>      <span class="comment">// 如果汇编可能改变内存，则需要加入 memory 选项</span></span><br><span class="line">            : <span class="string">"volatile"</span>);  <span class="comment">// 防止编译器做激进的优化（如调换指令顺序等破坏 SBI 调用行为的优化）</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SBI_SET_TIMER: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_CONSOLE_PUTCHAR: <span class="built_in">usize</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_CONSOLE_GETCHAR: <span class="built_in">usize</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_CLEAR_IPI: <span class="built_in">usize</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_SEND_IPI: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_REMOTE_FENCE_I: <span class="built_in">usize</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_REMOTE_SFENCE_VMA: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_REMOTE_SFENCE_VMA_ASID: <span class="built_in">usize</span> = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> SBI_SHUTDOWN: <span class="built_in">usize</span> = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 向控制台输出一个字符</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 需要注意我们不能直接使用 Rust 中的 char 类型</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">console_putchar</span></span>(c: <span class="built_in">usize</span>) &#123;</span><br><span class="line">    sbi_call(SBI_CONSOLE_PUTCHAR, c, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 从控制台中读取一个字符</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 没有读取到字符则返回 -1</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">console_getchar</span></span>() -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    sbi_call(SBI_CONSOLE_GETCHAR, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 调用 SBI_SHUTDOWN 来关闭操作系统（直接退出 QEMU）</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">shutdown</span></span>() -&gt; ! &#123;</span><br><span class="line">    sbi_call(SBI_SHUTDOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">unreachable!</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把整个 <code>print</code> 和 <code>println</code> 宏按照逻辑写出：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! 实现控制台的字符输入和输出</span></span><br><span class="line"><span class="comment">//! </span></span><br><span class="line"><span class="comment">//! # 格式化输出</span></span><br><span class="line"><span class="comment">//! </span></span><br><span class="line"><span class="comment">//! [`core::fmt::Write`] trait 包含</span></span><br><span class="line"><span class="comment">//! - 需要实现的 [`write_str`] 方法</span></span><br><span class="line"><span class="comment">//! - 自带实现，但依赖于 [`write_str`] 的 [`write_fmt`] 方法</span></span><br><span class="line"><span class="comment">//! </span></span><br><span class="line"><span class="comment">//! 我们声明一个类型，为其实现 [`write_str`] 方法后，就可以使用 [`write_fmt`] 来进行格式化输出</span></span><br><span class="line"><span class="comment">//! </span></span><br><span class="line"><span class="comment">//! [`write_str`]: core::fmt::Write::write_str</span></span><br><span class="line"><span class="comment">//! [`write_fmt`]: core::fmt::Write::write_fmt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::sbi::*;</span><br><span class="line"><span class="keyword">use</span> core::fmt::&#123;<span class="keyword">self</span>, Write&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 一个 [Zero-Sized Type]，实现 [`core::fmt::Write`] trait 来进行格式化输出</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// ZST 只可能有一个值（即为空），因此它本身就是一个单件</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stdout</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Write <span class="keyword">for</span> Stdout &#123;</span><br><span class="line">    <span class="comment">/// 打印一个字符串</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// [`console_putchar`] sbi 调用每次接受一个 `usize`，但实际上会把它作为 `u8` 来打印字符。</span></span><br><span class="line">    <span class="comment">/// 因此，如果字符串中存在非 ASCII 字符，需要在 utf-8 编码下，对于每一个 `u8` 调用一次 [`console_putchar`]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">write_str</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, s: &amp;<span class="built_in">str</span>) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> buffer = [<span class="number">0u8</span>; <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s.chars() &#123;</span><br><span class="line">            <span class="keyword">for</span> code_point <span class="keyword">in</span> c.encode_utf8(&amp;<span class="keyword">mut</span> buffer).as_bytes().iter() &#123;</span><br><span class="line">                console_putchar(*code_point <span class="keyword">as</span> <span class="built_in">usize</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 打印由 [`core::format_args!`] 格式化后的数据</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// [`print!`] 和 [`println!`] 宏都将展开成此函数</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// [`core::format_args!`]: https://doc.rust-lang.org/nightly/core/macro.format_args.html</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">print</span></span>(args: fmt::Arguments) &#123;</span><br><span class="line">    Stdout.write_fmt(args).unwrap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 实现类似于标准库中的 `print!` 宏</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// 使用实现了 [`core::fmt::Write`] trait 的 [`console::Stdout`]</span></span><br><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> print &#123;</span><br><span class="line">    ($fmt: literal $(, $($arg: tt)+)?) =&gt; &#123;</span><br><span class="line">        $crate::console::print(<span class="built_in">format_args!</span>($fmt $(, $($arg)+)?));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 实现类似于标准库中的 `println!` 宏</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// 使用实现了 [`core::fmt::Write`] trait 的 [`console::Stdout`]</span></span><br><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> println &#123;</span><br><span class="line">    ($fmt: literal $(, $($arg: tt)+)?) =&gt; &#123;</span><br><span class="line">        $crate::console::print(<span class="built_in">format_args!</span>(<span class="built_in">concat!</span>($fmt, <span class="string">"\n"</span>) $(, $($arg)+)?));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 <code>main.rs</code> 中处理 panic 的语义项抽取并完善到 <code>panic.rs</code> 中：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! 代替 std 库，实现 panic 和 abort 的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> core::panic::PanicInfo;</span><br><span class="line"><span class="keyword">use</span> crate::sbi::shutdown;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 打印 panic 的信息并 [`shutdown`]</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// ### `#[panic_handler]` 属性</span></span><br><span class="line"><span class="comment">/// 声明此函数是 panic 的回调</span></span><br><span class="line"><span class="meta">#[panic_handler]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">panic_handler</span></span>(info: &amp;PanicInfo) -&gt; ! &#123;</span><br><span class="line">    <span class="comment">// `\x1b[??m` 是控制终端字符输出格式的指令，在支持的平台上可以改变文字颜色等等，这里使用红色</span></span><br><span class="line">    <span class="comment">// 参考：https://misc.flogisoft.com/bash/tip_colors_and_formatting</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 需要全局开启 feature(panic_info_message) 才可以调用 .message() 函数</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"\x1b[1;31mpanic: '&#123;&#125;'\x1b[0m"</span>, info.message().unwrap());</span><br><span class="line">    shutdown()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 终止程序</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// 调用 [`panic_handler`]</span></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">fn</span> <span class="title">abort</span></span>() -&gt; ! &#123;</span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"abort()"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200721152846175.png" class="" title="image-20200721152846175">
<h2 id="Lab1：boot与中断"><a href="#Lab1：boot与中断" class="headerlink" title="Lab1：boot与中断"></a>Lab1：boot与中断</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-1/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab1 实验指导—rcore tutorial教程第三版</strong></a></p>
<p><a href="https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/riscv-overview.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/riscv-overview.md</a></p>
<p><a href="https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/toolchain-overview.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/toolchain-overview.md</a></p>
<p><a href="https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/lab1.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/chyyuu/ucore_os_lab/blob/riscv64-priv-1.10/docs/lab1.md</a></p>
</blockquote>
<p>广义的中断包括异常、系统调用（软中断）、硬件中断。</p>
<p>关于中断的分类：</p>
<blockquote>
<blockquote>
<p><a href="https://github.com/rcore-os/rCore-Tutorial/issues/97" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/rCore-Tutorial/issues/97</a></p>
</blockquote>
<p>interrupt</p>
<ul>
<li><strong>hardware</strong> interrupt (external, async)</li>
<li><strong>software</strong> interrupt (internal, sync)<ul>
<li><strong>syscall</strong>/<strong>trap</strong> (voluntarily yield to os)</li>
<li><strong>exception</strong> (involuntarily caught by os)</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="中断CSR"><a href="#中断CSR" class="headerlink" title="中断CSR"></a>中断CSR</h3><p>发生中断时，硬件<strong><font color=red>自动填写</font></strong>的寄存器：</p>
<ul>
<li><p><strong><code>sepc</code></strong>：即 Exception Program Counter，用来<strong>记录触发中断的指令的地址</strong>。</p>
<blockquote>
<p>和我们之前学的 MIPS 32 系统不同，RISC-V 中不需要考虑延迟槽的问题。但是 RISC-V 中的指令不定长，如果中断处理需要恢复到异常指令后一条指令执行，就<strong>需要正确判断将 <code>pc</code> 寄存器加上多少字节</strong>。</p>
</blockquote>
</li>
<li><p><strong><code>scause</code></strong>：记录中断<strong>是否是硬件中断</strong>，以及具体的<strong>中断原因</strong>。</p>
</li>
<li><p><strong><code>stval</code></strong>：scause 不足以存下中断所有的必须信息。例如<strong>缺页异常</strong>，就会将 <code>stval</code> 设置成需要访问但是不在内存中的地址，以便于操作系统将这个地址所在的页面加载进来。</p>
</li>
</ul>
<p>指导硬件<strong><font color=red>处理中断</font></strong>的寄存器：</p>
<ul>
<li><strong><code>stvec</code></strong>：设置<strong>内核态中断处理流程的入口地址</strong>。存储了一个基址 BASE 和模式 MODE：<ul>
<li>MODE 为 0 表示 Direct 模式，即遇到中断便跳转至 BASE 进行执行。</li>
<li>MODE 为 1 表示 Vectored 模式，此时 BASE 应当指向一个向量，存有不同处理流程的地址，遇到中断会跳转至 <code>BASE + 4 * cause</code> 进行处理流程。</li>
</ul>
</li>
<li><strong><code>sstatus</code></strong>：具有许多状态位，<strong>控制全局中断使能</strong>等。</li>
<li><strong><code>sie</code></strong>：即 Supervisor Interrupt Enable，用来<strong>控制具体类型中断的使能</strong>，<ul>
<li>例如其中的 STIE 控制时钟中断使能。</li>
</ul>
</li>
<li><strong><code>sip</code></strong>：即 Supervisor Interrupt Pending，和 <code>sie</code> 相对应，<strong>记录每种中断是否被触发</strong>。<ul>
<li>仅当 <code>sie</code> 和 <code>sip</code> 的对应位都为 1 时，意味着开中断且已发生中断，这时中断最终触发。</li>
</ul>
</li>
<li><strong><code>sscratch</code></strong>：在用户态，<code>sscratch</code> 保存<strong>内核栈的地址</strong>；在内核态，<code>sscratch</code> 的值为 0。<ul>
<li>在内核态中，<code>sp</code> 可以认为是一个安全的栈空间，<code>sscratch</code> 便不需要保存任何值。此时将其设为 0，可以在遇到中断时通过 <code>sscratch</code> 中的值判断中断前程序是否处于内核态。</li>
</ul>
</li>
</ul>
<h3 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h3><ul>
<li><strong><code>ecall</code></strong>：<strong>触发中断</strong>，进入更高一层的中断处理流程之中。用户态进行系统调用进入内核态中断处理流程，内核态进行 SBI 调用进入机器态中断处理流程，使用的都是这条指令。</li>
<li><strong><code>sret</code></strong>：<strong>从内核态返回用户态</strong>，同时将 <code>pc</code> 的值设置为 <code>sepc</code>。（如果需要返回到 <code>sepc</code> 后一条指令，就需要在 <code>sret</code> 之前修改 <code>sepc</code> 的值）</li>
<li><strong><code>ebreak</code></strong>：<strong>触发一个断点</strong>。</li>
<li><strong><code>mret</code></strong>：<strong>从机器态返回内核态</strong>，同时将 <code>pc</code> 的值设置为 <code>mepc</code>。</li>
<li><strong><code>csrrw dst, csr, src</code></strong>（CSR Read Write）<br><strong>同时读写</strong>的原子操作，将指定 CSR 的值写入 <code>dst</code>，同时将 <code>src</code> 的值写入 CSR。</li>
<li><strong><code>csrr dst, csr</code></strong>（CSR Read）<br>仅<strong>读取</strong>一个 CSR 寄存器。</li>
<li><strong><code>csrw csr, src</code></strong>（CSR Write）<br>仅<strong>写入</strong>一个 CSR 寄存器。</li>
<li><strong><code>csrc(i) csr, rs1</code></strong>（CSR Clear）<br>将 CSR 寄存器中<strong>指定的位 清零</strong>，<code>csrc</code> 使用通用寄存器作为 mask，<code>csrci</code> 则使用立即数。</li>
<li><strong><code>csrs(i) csr, rs1</code></strong>（CSR Set）<br>将 CSR 寄存器中<strong>指定的位 置 1</strong>，<code>csrc</code> 使用通用寄存器作为 mask，<code>csrci</code> 则使用立即数。</li>
</ul>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>设计Context的结构：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> riscv::register::&#123;sstatus::Sstatus, scause::Scause&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[repr(C)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Context</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> x: [<span class="built_in">usize</span>; <span class="number">32</span>],     <span class="comment">// 32 个通用寄存器</span></span><br><span class="line">    <span class="keyword">pub</span> sstatus: Sstatus,</span><br><span class="line">    <span class="keyword">pub</span> sepc: <span class="built_in">usize</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>os/Cargo.toml</code>添加依赖：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">riscv</span> = &#123; git = <span class="string">"https://github.com/rcore-os/riscv"</span>, features = [<span class="string">"inline-asm"</span>] &#125;</span><br></pre></td></tr></table></figure>
<p>上下文的保存与恢复：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 我们将会用一个宏来用循环保存寄存器。这是必要的设置</span><br><span class="line">.altmacro</span><br><span class="line"># 寄存器宽度对应的字节数</span><br><span class="line">.set    REG_SIZE, 8</span><br><span class="line"># Context 的大小</span><br><span class="line">.set    CONTEXT_SIZE, 34</span><br><span class="line"></span><br><span class="line"># 宏：将寄存器存到栈上</span><br><span class="line">.macro SAVE reg, offset</span><br><span class="line">    sd  \reg, \offset*8(sp)</span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line">.macro SAVE_N n</span><br><span class="line">    SAVE  x\n, \n</span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line"># 宏：将寄存器从栈中取出</span><br><span class="line">.macro LOAD reg, offset</span><br><span class="line">    ld  \reg, \offset*8(sp)</span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line">.macro LOAD_N n</span><br><span class="line">    LOAD  x\n, \n</span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line">    .section .text</span><br><span class="line">    .globl __interrupt</span><br><span class="line"># 进入中断</span><br><span class="line"># 保存 Context 并且进入 Rust 中的中断处理函数 interrupt::handler::handle_interrupt()</span><br><span class="line">__interrupt:</span><br><span class="line">    # 在栈上开辟 Context 所需的空间</span><br><span class="line">    addi    sp, sp, -34*8</span><br><span class="line"></span><br><span class="line">    # 保存通用寄存器，除了 x0（固定为 0）</span><br><span class="line">    SAVE    x1, 1</span><br><span class="line">    # 将原来的 sp（sp 又名 x2）写入 2 位置</span><br><span class="line">    addi    x1, sp, 34*8</span><br><span class="line">    SAVE    x1, 2</span><br><span class="line">    # 保存 x3 至 x31</span><br><span class="line">    .set    n, 3</span><br><span class="line">    .rept   29</span><br><span class="line">        SAVE_N  %n</span><br><span class="line">        .set    n, n + 1</span><br><span class="line">    .endr</span><br><span class="line"></span><br><span class="line">    # 取出 CSR 并保存</span><br><span class="line">    csrr    s1, sstatus</span><br><span class="line">    csrr    s2, sepc</span><br><span class="line">    SAVE    s1, 32</span><br><span class="line">    SAVE    s2, 33</span><br><span class="line"></span><br><span class="line">    # 调用 handle_interrupt，传入参数</span><br><span class="line">    # context: &amp;mut Context</span><br><span class="line">    mv      a0, sp</span><br><span class="line">    # scause: Scause</span><br><span class="line">    csrr    a1, scause</span><br><span class="line">    # stval: usize</span><br><span class="line">    csrr    a2, stval</span><br><span class="line">    jal  handle_interrupt</span><br><span class="line"></span><br><span class="line">    .globl __restore</span><br><span class="line"># 离开中断</span><br><span class="line"># 从 Context 中恢复所有寄存器，并跳转至 Context 中 sepc 的位置</span><br><span class="line">__restore:</span><br><span class="line">    # 恢复 CSR</span><br><span class="line">    LOAD    s1, 32</span><br><span class="line">    LOAD    s2, 33</span><br><span class="line">    csrw    sstatus, s1</span><br><span class="line">    csrw    sepc, s2</span><br><span class="line"></span><br><span class="line">    # 恢复通用寄存器</span><br><span class="line">    LOAD    x1, 1</span><br><span class="line">    # 恢复 x3 至 x31</span><br><span class="line">    .set    n, 3</span><br><span class="line">    .rept   29</span><br><span class="line">        LOAD_N  %n</span><br><span class="line">        .set    n, n + 1</span><br><span class="line">    .endr</span><br><span class="line"></span><br><span class="line">    # 恢复 sp（又名 x2）这里最后恢复是为了上面可以正常使用 LOAD 宏</span><br><span class="line">    LOAD    x2, 2</span><br><span class="line">    sret</span><br></pre></td></tr></table></figure>
<h3 id="中断处理流程"><a href="#中断处理流程" class="headerlink" title="中断处理流程"></a>中断处理流程</h3><p>在<code>os/src/interrupt/handler.rs</code>中初始化处理器：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> super::context::Context;</span><br><span class="line"><span class="keyword">use</span> riscv::register::&#123;stvec, scause::Scause&#125;;</span><br><span class="line"></span><br><span class="line">global_asm!(<span class="built_in">include_str!</span>(<span class="string">"./interrupt.asm"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">init</span></span>()&#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span> <span class="title">__interrupt</span></span>();  <span class="comment">// 调用interrupt.asm的接口</span></span><br><span class="line">        &#125;</span><br><span class="line">        stvec::write(__interrupt <span class="keyword">as</span> <span class="built_in">usize</span>, stvec::TrapMode::Direct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">handle_interrupt</span></span>(context: &amp;<span class="keyword">mut</span> Context, scause: Scause, stval: <span class="built_in">usize</span>) &#123;</span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"Interrupted: &#123;:?&#125;"</span>, scause.cause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并将之前的所有函数封装：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> handler;</span><br><span class="line"><span class="keyword">mod</span> context;</span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">init</span></span>() &#123;</span><br><span class="line">    handler::init();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"mod interrupt initialized"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在main函数中设置触发器：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">mod</span> interrupt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">fn</span> <span class="title">rust_main</span></span>() -&gt; ! &#123;</span><br><span class="line">    interrupt::init();</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        llvm_asm!(<span class="string">"ebreak"</span>::::<span class="string">"volatile"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">unreachable!</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200722194730988.png" class="" title="image-20200722194730988">
<h3 id="时钟中断"><a href="#时钟中断" class="headerlink" title="时钟中断"></a>时钟中断</h3><p>设计时钟中断处理器：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::sbi::set_timer;</span><br><span class="line"><span class="keyword">use</span> riscv::register::&#123;time, sie, sstatus&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">init</span></span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        sie::set_stimer(); </span><br><span class="line">        sstatus::set_sie();  <span class="comment">// 开启 sstatus 寄存器中的 SIE 位</span></span><br><span class="line">        <span class="comment">// SIE 位决定中断是否能够打断 supervisor 线程。在这里我们需要允许时钟中断打断 内核态线程，因此置 SIE 位为 1。</span></span><br><span class="line">    &#125;</span><br><span class="line">    set_next_timeout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> INTERVAL: <span class="built_in">usize</span> = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">set_next_timeout</span></span>() &#123;</span><br><span class="line">    set_timer(time::read() + INTERVAL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 触发时钟中断计数</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">static</span> <span class="keyword">mut</span> TICKS: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">tick</span></span>() &#123;</span><br><span class="line">    set_next_timeout();</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        TICKS += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> TICKS % <span class="number">100</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125; tick"</span>, TICKS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行教程中所示的微小调整，引入mod。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> handler;</span><br><span class="line"><span class="keyword">mod</span> context;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> timer;   <span class="comment">// 为了在main函数中测试，这里设置为pub</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">init</span></span>() &#123;</span><br><span class="line">    handler::init();</span><br><span class="line">    timer::init();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"mod interrupt initialized"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了在main函数中临时调用timer，我暂时将timer设置为了pub库。得到如下效果：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200722210015868.png" class="" title="image-20200722210015868">
<p>对比lab1关于context的内容，似乎lab1中的描述少了一部分关于Debug格式的代码。对比之后，我将此部分代码添加到了本地lab1的代码中。</p>
<h3 id="实验一实验题"><a href="#实验一实验题" class="headerlink" title="实验一实验题"></a>实验一实验题</h3><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-1/practice.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-1/practice.html</a></p>
</blockquote>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>原理：在 <code>rust_main</code> 函数中，执行 <code>ebreak</code> 命令后至函数结束前，<code>sp</code> 寄存器的值是怎样变化的？</p>
<blockquote>
<p><code>ebreak</code> 命令就是设置断点。它会调用中断服务例程。也就是说，涉及到 <code>Context</code> 上下文的存取。我们注意到，<code>sp</code> 是栈指针，如果需要存取 <code>Context</code> 上下文时，<code>sp</code> 的值便会发生变化。</p>
<ul>
<li>首先在中断保存 <code>Context</code> 的过程中，<code>sp</code> 减去一个 <code>Context</code> 的大小，从而执行中断服务例程将 <code>Context</code> 保存到栈中；</li>
<li>执行中断的过程中，<code>sp</code> 可能因为局部变量等操作有一些加加减减，但最后仍然总的来说保持不变；</li>
<li>从中断返回时，执行<code>_restore</code>，<code>sp</code> 加上一个 <code>Context</code> 的大小，并恢复上下文。</li>
</ul>
</blockquote>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>分析：如果去掉 <code>rust_main</code> 后的 <code>panic</code> 会发生什么，为什么？</p>
<blockquote>
<p>实际运行时发生如下错误：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724223712653.png" class="" title="image-20200724223712653">
<p>这说明 <code>panic!</code> 的返回值是必要的。</p>
<p>另外按照实验书的解释，<code>rust_main</code> 返回后，程序并没有停止。其执行完后会回到 <code>entry.asm</code> 中。但是，<code>entry.asm</code> 并没有在后面写任何指令，这意味着程序将接着向后执行内存中的任何指令。</p>
<p>执行 <code>rust-objdump -d -S os/target/riscv64imac-unknown-none-elf/debug/os | less</code> 来查看汇编代码，可以发现之后还有很长很长的各种函数。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724224316427.png" class="" title="image-20200724224316427">
</blockquote>
<h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>如果程序访问不存在的地址，会得到 <code>Exception::LoadFault</code>。模仿捕获 <code>ebreak</code> 和时钟中断的方法，捕获 <code>LoadFault</code>（之后 <code>panic</code> 即可）。</p>
<blockquote>
<p>添加如下match：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724224822935.png" class="" title="image-20200724224822935">
</blockquote>
<p>在处理异常的过程中，如果程序想要非法访问的地址是 <code>0x0</code>，则打印 <code>SUCCESS!</code>。</p>
<blockquote>
<p>用 <code>fault</code> 函数类似的机制，单独实现对 LoadFault 的处理函数：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724225553596.png" class="" title="image-20200724225553596">
</blockquote>
<p>添加或修改少量代码，使得运行时触发这个异常，并且打印出 <code>SUCCESS!</code>。</p>
<ul>
<li>要求：不允许添加或修改任何 unsafe 代码</li>
</ul>
<blockquote>
<p>这个实在是没什么经验，不过，看了看解答，可以通过汇编代码的方式实现（修改 <code>Context</code> 调用的那个方法虽然有效，但是具有破坏性）。</p>
<p>但是，不允许添加或修改任何 unsafe 代码，这个就有点过分。那这样就用不了跳转指令了。</p>
<blockquote>
<ul>
<li>解法 1：在 <code>interrupt/handler.rs</code> 的 <code>breakpoint</code> 函数中，将 <code>context.sepc += 2</code> 修改为 <code>context.sepc = 0</code>（则 <code>sret</code> 时程序会跳转到 <code>0x0</code>）</li>
<li>解法 2：去除 <code>rust_main</code> 中的 <code>panic</code> 语句，并在 <code>entry.asm</code> 的 <code>jal rust_main</code> 之后，添加一行读取 <code>0x0</code> 地址的指令（例如 <code>jr x0</code> 或 <code>ld x1, (x0)</code>）</li>
</ul>
</blockquote>
<p>照着解法2搞了搞没搞出来。照着解法1搞：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724232808726.png" class="" title="image-20200724232808726">
<p>没有如预料中的出现 <code>LoadFault</code>。。</p>
<p>可能是因为我用了lab3的代码吧。。<strong>用lab1的代码过了</strong>。（两种解法均有效）</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724235036288.png" class="" title="image-20200724235036288">
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725000104386.png" class="" title="image-20200725000104386">
</blockquote>
<h2 id="Lab2：物理内存管理"><a href="#Lab2：物理内存管理" class="headerlink" title="Lab2：物理内存管理"></a>Lab2：物理内存管理</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-2/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab2 实验指导—rcore tutorial教程第三版</strong></a></p>
</blockquote>
<h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>内核中需要<strong>动态内存分配</strong>。典型的应用场景有：</p>
<ul>
<li><code>Box&lt;T&gt;</code> ，你可以理解为它和 <code>malloc</code> 有着相同的功能；</li>
<li>引用计数 <code>Rc&lt;T&gt;</code>，原子引用计数 <code>Arc&lt;T&gt;</code>，主要用于在引用计数清零，即某对象不再被引用时，对该对象进行自动回收；</li>
<li>一些 Rust std 标准库中的数据结构，如 <code>Vec</code> 和 <code>HashMap</code> 等。</li>
</ul>
<p>动态内存分配需要操作系统的支持，也就需要手动实现。在 Rust 语言中，我们需要实现 <code>Trait GlobalAlloc</code>，并将这个类实例化，并使用语义项 <code>#[global_allocator]</code> 进行标记。这样的话，编译器就会知道如何使用我们提供的内存分配函数进行动态内存分配。</p>
<p>为了实现<code>Trait GlobalAlloc</code>，就需要实现以下两个方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">alloc</span></span>(&amp;<span class="keyword">self</span>, layout: Layout) -&gt; *<span class="keyword">mut</span> <span class="built_in">u8</span>;            <span class="comment">// 分配一块虚拟内存</span></span><br><span class="line"><span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">dealloc</span></span>(&amp;<span class="keyword">self</span>, ptr: *<span class="keyword">mut</span> <span class="built_in">u8</span>, layout: Layout);       <span class="comment">// 回收一块虚拟内存</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>Layout</code>：分配一块连续的、大小至少为 <code>size</code> 字节的虚拟内存，且对齐要求为 <code>align</code> 。它有两个字段：<code>size</code> 表示要分配的字节数，<code>align</code> 则表示分配的虚拟地址的最小对齐要求，即分配的地址要求是 <code>align</code> 的倍数。这里的 <code>align</code> 必须是 2 的幂次。</p>
<p><a href="https://doc.rust-lang.org/nightly/core/alloc/trait.GlobalAlloc.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/nightly/core/alloc/trait.GlobalAlloc.html</a></p>
<p><a href="https://doc.rust-lang.org/nightly/core/alloc/struct.Layout.html" target="_blank" rel="noopener external nofollow noreferrer">https://doc.rust-lang.org/nightly/core/alloc/struct.Layout.html</a></p>
<p>Layout的结构摘录如下：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Layout</span></span> &#123;</span><br><span class="line">    <span class="comment">// size of the requested block of memory, measured in bytes.</span></span><br><span class="line">    size_: <span class="built_in">usize</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alignment of the requested block of memory, measured in bytes.</span></span><br><span class="line">    <span class="comment">// we ensure that this is always a power-of-two, because API's</span></span><br><span class="line">    <span class="comment">// like `posix_memalign` require it and it is a reasonable</span></span><br><span class="line">    <span class="comment">// constraint to impose on Layout constructors.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// (However, we do not analogously require `align &gt;= sizeof(void*)`,</span></span><br><span class="line">    <span class="comment">//  even though that is *also* a requirement of `posix_memalign`.)</span></span><br><span class="line">    align_: NonZeroUsize,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立<code>config.rs</code>，设置堆空间大小：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开辟堆空间（8M）</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> KERNEL_HEAP_SIZE: <span class="built_in">usize</span> = <span class="number">0x80_0000</span>;</span><br></pre></td></tr></table></figure>
<p>建立<code>heap.rs</code>，实现堆空间的管理：</p>
<p>（关于buddy_sysytem：<a href="https://github.com/rcore-os/buddy_system_allocator）" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/buddy_system_allocator）</a></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> super::config::KERNEL_HEAP_SIZE;</span><br><span class="line"><span class="keyword">use</span> buddy_system_allocator::LockedHeap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆空间，放在 bss 段</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> HEAP_SPACE: [<span class="built_in">u8</span>; KERNEL_HEAP_SIZE] = [<span class="number">0</span>; KERNEL_HEAP_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="meta">#[global_allocator]</span></span><br><span class="line"><span class="keyword">static</span> HEAP: LockedHeap = LockedHeap::empty();</span><br><span class="line"><span class="comment">// [`LockedHeap`] 实现了 [`alloc::alloc::GlobalAlloc`] trait</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">init</span></span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        HEAP.lock().init(</span><br><span class="line">            HEAP_SPACE.as_ptr() <span class="keyword">as</span> <span class="built_in">usize</span>, KERNEL_HEAP_SIZE</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[alloc_error_handler]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">alloc_error_handler</span></span>(_: alloc::alloc::Layout) -&gt; ! &#123;</span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"alloc error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：[<code>LockedHeap</code>] 已经实现了 [<code>alloc::alloc::GlobalAlloc</code>] trait（Buddy System Allocator）。查看lab2源代码，发现 <code>heap2.rs</code> 实现了其他分配算法。但是 Trait 就要相应地自己去实现。</p>
<p>注意：这个<code>buddy_system_allocator</code>要在 <code>Cargo.toml</code> 中引入：（<a href="https://github.com/rcore-os/rCore-Tutorial/blob/master/os/Cargo.toml#L13）。我的建议是直接把这部分的配置搬过来，省得之后麻烦：" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/rCore-Tutorial/blob/master/os/Cargo.toml#L13）。我的建议是直接把这部分的配置搬过来，省得之后麻烦：</a></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="comment"># algorithm = &#123; path = 'src/algorithm' &#125;</span></span><br><span class="line"><span class="attr">bit_field</span> = <span class="string">"0.10.0"</span></span><br><span class="line"><span class="attr">bitflags</span> = <span class="string">"1.2.1"</span></span><br><span class="line"><span class="attr">buddy_system_allocator</span> = <span class="string">"0.3.9"</span>        <span class="comment"># 【就是这里】了</span></span><br><span class="line"><span class="attr">hashbrown</span> = <span class="string">"0.7.2"</span></span><br><span class="line"><span class="attr">lazy_static</span> = &#123; version = <span class="string">"1.4.0"</span>, features = [<span class="string">"spin_no_std"</span>] &#125;</span><br><span class="line"><span class="attr">riscv</span> = &#123; git = <span class="string">"https://github.com/rcore-os/riscv"</span>, features = [<span class="string">"inline-asm"</span>] &#125;</span><br><span class="line"><span class="attr">spin</span> = <span class="string">"0.5.2"</span></span><br><span class="line"><span class="attr">device_tree</span> = &#123; git = <span class="string">"https://github.com/rcore-os/device_tree-rs"</span> &#125;</span><br><span class="line"><span class="attr">virtio-drivers</span> = &#123; git = <span class="string">"https://github.com/rcore-os/virtio-drivers"</span> &#125;</span><br><span class="line"><span class="attr">rcore-fs</span> = &#123; git = <span class="string">"https://github.com/rcore-os/rcore-fs"</span>&#125;</span><br><span class="line"><span class="attr">rcore-fs-sfs</span> = &#123; git = <span class="string">"https://github.com/rcore-os/rcore-fs"</span>&#125;</span><br><span class="line"><span class="attr">xmas-elf</span> = <span class="string">"0.7.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># panic 时直接终止，因为我们没有实现堆栈展开的功能</span></span><br><span class="line"><span class="section">[profile.dev]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">"abort"</span></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">"abort"</span></span><br></pre></td></tr></table></figure>
<p>然后就是更新依赖。。。</p>
<p>然后把<code>#![feature(alloc_error_handler)]</code>添加到main.rs里面，启用相关特性。</p>
<hr>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200723172942494.png" class="" title="image-20200723172942494">
<h3 id="分配算法"><a href="#分配算法" class="headerlink" title="分配算法*"></a>分配算法*</h3><p>操作系统的分配算法当然是很多的。操作系统课上就学了不少了。。</p>
<p>这部分有时间可以写一个看看。有时间可以参考<a href="https://github.com/rcore-os/buddy_system_allocator看看。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/rcore-os/buddy_system_allocator看看。</a></p>
<h3 id="物理内存探测"><a href="#物理内存探测" class="headerlink" title="物理内存探测"></a>物理内存探测</h3><p>发现此处需要用到 <code>address.rs</code>，但是却没有提到。从终代码中获取了该部分的源码。</p>
<p>若出现以下的引用错误：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200723223643024.png" class="" title="image-20200723223643024">
<p>注意到super所指的对象是当前目录下的<code>mod.rs</code>文件，在<code>mod.rs</code>引用address模块即可。</p>
<hr>
<p>最终效果：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200723223921092.png" class="" title="image-20200723223921092">
<h3 id="物理内存管理"><a href="#物理内存管理" class="headerlink" title="物理内存管理"></a>物理内存管理</h3><p>注意动态内存分配，管理的是堆中的内存分配问题。而物理内存管理，是整个物理内存的页式存储管理。</p>
<p>实验指导写得不全，导致各种错误。和lab2得代码对比着调了半天过了。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200723235210795.png" class="" title="image-20200723235210795">
<p>注意到测试代码的内容：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200723235450099.png" class="" title="image-20200723235450099">
<p>这说明了内存的分配和自动回收是有效的。</p>
<h3 id="实验二实验题"><a href="#实验二实验题" class="headerlink" title="实验二实验题"></a>实验二实验题</h3><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-2/practice.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-2/practice.html</a></p>
</blockquote>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>原理：.bss 字段是什么含义？为什么我们要将动态分配的内存（堆）空间放在 .bss 字段？</p>
<blockquote>
<p>.bss 段：存放被初始化为 0 的可读写数据，与 .data 段的不同之处在于我们知道它要被初始化为 0，因此在可执行文件中只需记录这个段的大小以及所在位置即可，而不用记录里面的数据，也不会实际占用二进制文件的空间。</p>
<p><strong>并不是必须</strong>要将动态分配的内存（堆）空间放在 .bss 字段。任何一个其他的段也都是可以的。但是这样做可能在代码实现上会比较简单。并且保证堆空间在内核的二进制数据之中。</p>
</blockquote>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>分析：我们在动态内存分配中实现了一个堆，它允许我们在内核代码中使用动态分配的内存，例如 <code>Vec</code> <code>Box</code> 等。那么，如果我们在实现这个堆的过程中使用 <code>Vec</code> 而不是 <code>[u8]</code>，会出现什么结果？</p>
<ul>
<li>无法编译？</li>
<li>运行时错误？</li>
<li>正常运行？</li>
</ul>
<blockquote>
<p>没有看懂这个题。。不过看了解答之后。明白了是递归定义的锅。实现堆的过程中如果又用了堆，那么就会一直递归下去。。</p>
</blockquote>
<h4 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h4><p>回答：<code>algorithm/src/allocator</code> 下有一个 <code>Allocator</code> trait，我们之前用它实现了物理页面分配。这个算法的时间和空间复杂度是什么？</p>
<blockquote>
<p>这说的哪个算法？<code>stacked_allocator</code> 吧应该。。那么对于栈来说，时间复杂度O(1)，空间复杂度O(n)。</p>
</blockquote>
<p>二选一：实现基于线段树的物理页面分配算法（不需要考虑合并分配）；或尝试修改 <code>FrameAllocator</code>，令其使用未被分配的页面空间（而不是全局变量）来存放页面使用状态。</p>
<blockquote>
<p>线段树感觉之前的代码好像已经不小心搬运过来了。。</p>
<p>lab2的线段树应该是用位图的方式维护的。我不妨先将这个算法理解一般好了。<del>虽然肯定比不上自己实现</del>了。在大概理解了线段树的思路之后，随后自己手动实现了一遍：（能通过编译和测试，但是正确性不太好验证）</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> super::Allocator;</span><br><span class="line"><span class="keyword">use</span> alloc::&#123;vec, vec::<span class="built_in">Vec</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">MySegmentTreeAllocator</span></span> &#123;</span><br><span class="line">    tree: <span class="built_in">Vec</span>&lt;<span class="built_in">bool</span>&gt;,  <span class="comment">// 二叉堆标记法</span></span><br><span class="line">    capacity: <span class="built_in">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Allocator <span class="keyword">for</span> MySegmentTreeAllocator &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(capacity: <span class="built_in">usize</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="built_in">assert!</span>(capacity &gt;= <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next_power_of_two: 上取整为 最近的 2的幂</span></span><br><span class="line">        <span class="comment">// https://github.com/mattdesl/next-power-of-two</span></span><br><span class="line">        <span class="keyword">let</span> leaf_num = capacity.next_power_of_two();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始所有节点为空</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tree : <span class="built_in">Vec</span>&lt;<span class="built_in">bool</span>&gt; = <span class="built_in">vec!</span>[<span class="literal">false</span>; <span class="number">2</span>*leaf_num];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有超出capacity的节点为满</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (leaf_num - <span class="number">2</span> + capacity)..tree.len()&#123;</span><br><span class="line">            tree[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">Self</span> &#123; tree, capacity &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">alloc</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.tree[<span class="number">0</span>] == <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> id = <span class="number">0</span>; id = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">loop</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> id * <span class="number">2</span> + <span class="number">2</span> &lt; <span class="keyword">self</span>.tree.len()&#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.tree[id * <span class="number">2</span> + <span class="number">1</span>] == <span class="literal">false</span>&#123;</span><br><span class="line">                        id = id * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        id = id * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.tree[id] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">let</span> ret = id - <span class="keyword">self</span>.tree.len() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向上回溯</span></span><br><span class="line">            <span class="keyword">while</span> id &gt; <span class="number">0</span> &#123;</span><br><span class="line">                id = (id - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">self</span>.tree[id] = <span class="keyword">self</span>.tree[id * <span class="number">2</span> + <span class="number">1</span>] &amp;&amp; <span class="keyword">self</span>.tree[id * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">Some</span>(ret)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dealloc</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, index: <span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> id = <span class="keyword">self</span>.capacity.next_power_of_two() + index;</span><br><span class="line">        <span class="keyword">while</span> id &gt; <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">self</span>.tree[id] = <span class="literal">false</span>;</span><br><span class="line">            id = (id - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day15_lab2_practice.md。这位老哥好像用time这个模块实现了性能测试，mark一下。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day15_lab2_practice.md。这位老哥好像用time这个模块实现了性能测试，mark一下。</a></p>
<p>我看了看栈分配器，又对比实现了一个队列分配器（虽然实际上没有怎么改动）：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! 提供队列结构实现的分配器 [`QueueAllcator`]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> super::Allocator;</span><br><span class="line"><span class="keyword">use</span> alloc::&#123;vec, vec::<span class="built_in">Vec</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 使用队列实现分配器</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueAllcator</span></span> &#123;</span><br><span class="line">    list: <span class="built_in">Vec</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Allocator <span class="keyword">for</span> QueueAllcator &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(capacity: <span class="built_in">usize</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            list: <span class="built_in">vec!</span>[(<span class="number">0</span>, capacity)],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列从 左边 出队，从 右边 进队</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">alloc</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>((start, end)) = <span class="literal">Some</span>(<span class="keyword">self</span>.list[<span class="number">0</span>]) &#123;   <span class="comment">// 这里改动了一下</span></span><br><span class="line">            <span class="keyword">self</span>.list.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> end - start &gt; <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.list.push((start + <span class="number">1</span>, end));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">Some</span>(start)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dealloc</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, index: <span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.list.push((index, index + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="挑战实验（选做）"><a href="#挑战实验（选做）" class="headerlink" title="挑战实验（选做）"></a>挑战实验（选做）</h4><blockquote>
<p>既然是选做，那我就暂时不做了。。。QAQ</p>
</blockquote>
<p>挑战实验（选做）</p>
<ol>
<li>在 <code>memory/heap2.rs</code> 中，提供了一个手动实现堆的方法。它使用 <code>algorithm::VectorAllocator</code> 作为其根本分配算法，而我们目前提供了一个非常简单的 bitmap 算法（而且只开了很小的空间）。请在 <code>algorithm</code> crate 中利用伙伴算法实现 <code>VectorAllocator</code> trait。</li>
<li>前面说到，堆的实现本身不能完全使用动态内存分配。但有没有可能让堆能够利用动态分配的空间，这样做会带来什么好处？</li>
</ol>
<h2 id="Lab3：虚拟内存管理"><a href="#Lab3：虚拟内存管理" class="headerlink" title="Lab3：虚拟内存管理"></a>Lab3：虚拟内存管理</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-3/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab3 实验指导—rcore tutorial教程第三版</strong></a></p>
</blockquote>
<p>虚拟内存这一块的东西，包括各种映射、TLB之类的，我还是比较熟悉的。 </p>
<p>在实现虚拟地址结构后，调整为虚拟地址空间。</p>
<p>然后是各种映射的函数。。</p>
<p>运行：（注意到输出的是 VirtualAddress，虚拟地址生效了）</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200724185713088.png" class="" title="image-20200724185713088">
<h3 id="页面置换"><a href="#页面置换" class="headerlink" title="页面置换*"></a>页面置换*</h3><p>页面置换的部分暂时跳过了。</p>
<h3 id="实验三实验题"><a href="#实验三实验题" class="headerlink" title="实验三实验题"></a>实验三实验题</h3><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-3/practice.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-3/practice.html</a></p>
</blockquote>
<h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>原理：在 <code>os/src/entry.asm</code> 中，<code>boot_page_table</code> 的意义是什么？当跳转执行 <code>rust_main</code> 时，不考虑缓存，硬件通过哪些地址找到了 <code>rust_main</code> 的第一条指令？</p>
<blockquote>
<p><code>boot_page_table</code> 的意义自然是页表，具体来说，<code>boot_page_table</code> 指的是根页表。第一部分是低地址的恒等映射，用于维护 pc 的值，保证程序正常运行。第二部分是将高地址映射到低地址。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725143528166.png" class="" title="image-20200725143528166">
<p>然后就不会了。看了看解答，真的多。。</p>
<blockquote>
<p>我们在 <code>linker.ld</code> 中指定了起始地址为 <code>0xffff_ffff_8020_0000</code>，操作系统执行文件会认为所有的符号都是在这个高地址上的。但是我们在硬件上只能将内核加载到 <code>0x8020_0000</code> 开始的内存空间上，此时的 <code>pc</code> 也会调转到这里。</p>
<p>执行 <code>jal rust_main</code> 时，硬件需要加载 <code>rust_main</code> 对应的地址，大概是 <code>0xffff_ffff_802x_xxxx</code>。</p>
<ul>
<li><strong>页表已经启用</strong>，硬件先从 <code>satp</code> 高位置读取内存映射模式，再从 <code>satp</code> 低位置读取根页表页号，即 <code>boot_page_table</code> 的物理页号</li>
<li>对于 Sv39 模式，页号有三级共 27 位。对于 <code>rust_main</code> 而言，一级页号是其 [30:38] 位，即 510。硬件此时定位到根页表的第 510 项</li>
<li>这一项的标志为 XWR，说明它指向一个大页而不是指向下一级页表；目标的页号为 <code>0x8_0000</code>，即物理地址 <code>0x8000_0000</code> 开始的区间；这一项的 V 位为 1，说明目标在内存中。因此，硬件寻址到页基址 + 页内偏移，即 <code>0x8000_0000 + 0x2x_xxxx</code>，找到 <code>rust_main</code></li>
</ul>
</blockquote>
<p>总的来说，就是硬件获取到初始的内存映射模式以后，就通过 <code>rust_main</code> 的虚拟地址，进行一级一级的查表，最后查到了 <code>rust_main</code> 的物理地址所在的帧，这样就可以读取 <code>rust_main</code> 了。重点就是，这里需要进行虚实转换。</p>
<p>我通过反汇编 <code>rust-objdump -d -S ./target/riscv64imac-unknown-none-elf/debug/os &gt;&gt; ../debug.file</code>，将输出保存文件中，查找到了 <code>rust_main</code> 的地址：（左侧即虚拟地址）</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725145413476.png" class="" title="image-20200725145413476">
</blockquote>
<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>分析：为什么 <code>Mapping</code> 中的 <code>page_tables</code> 和 <code>mapped_pairs</code> 都保存了一些 <code>FrameTracker</code>？二者有何不同？</p>
<blockquote>
<p><code>FrameTracker</code> 的作用：方便管理所有的物理页，我们需要实现一个分配器可以进行分配和回收的操作。这个 <code>Tracker</code> 就是一个管理存储页的结构。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725150421443.png" class="" title="image-20200725150421443">
<p>保存了一些 <code>FrameTracker</code>，就是保存了一些物理页，也就是使用了一些内存。显然 <code>page_tables</code> 和 <code>mapped_pairs</code> 使用内存的目的是不同的，<code>page_tables</code> 存放了所有页表所用到的页面，而 <code>mapped_pairs</code> 则存放了进程所用到的页面。 </p>
</blockquote>
<p>分析：假设某进程需要虚拟地址 A 到物理地址 B 的映射，这需要操作系统来完成。那么操作系统在建立映射时有没有访问 B？如果有，它是怎么在还没有映射的情况下访问 B 的呢？</p>
<blockquote>
<p>建立映射不需要访问B，这是显然的，因为访问B必然要在得到B的物理地址以后进行。而我们只需要物理地址就可以建立映射，因此后来的访问步骤是不必要的——我们暂时不需要访问页面内的具体内容。</p>
<blockquote>
<p>不过，通常程序都会需要操作系统建立映射的同时向页面中加载一些数据。</p>
<blockquote>
<p>那么实操来说，还是需要访问B的。</p>
</blockquote>
<p>尽管 A→B 的映射尚不存在，因为我们将<strong>整个可用物理内存都建立了内核映射</strong>，所以操作系统仍然可以通过线性偏移量来访问到 B。</p>
<blockquote>
<p>都有物理地址了，有没有映射根本不影响访问嘛！</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h4><p>实验：了解并实现时钟页面置换算法（或任何你感兴趣的算法），可以自行设计样例来比较性能</p>
<ul>
<li>置换算法只需要修改 <code>os/src/memory/mapping/swapper.rs</code>，你可能需要在其中访问页表项</li>
<li>在 <code>main.rs</code> 中调用 <code>start_kernel_thread</code> 来创建线程，你可以任意修改其中运行的函数，以达到测试效果</li>
</ul>
<blockquote>
<p>怎么感觉这个东西需要lab4的内容。。。暂时做不了。</p>
<p>有点难度。。有时间再考虑。。</p>
<p>看了看<a href="https://github.com/chibinz/rCoreSummerOfCode/blob/master/DailySchedule.md" target="_blank" rel="noopener external nofollow noreferrer">Here</a>，确实虽然时间提前了，但也不必过于搞突击。尽力就好。不过我目前算是没有什么整理总结的压力吧。</p>
</blockquote>
<h2 id="Lab4：内核线程-amp-用户进程-amp-调度"><a href="#Lab4：内核线程-amp-用户进程-amp-调度" class="headerlink" title="Lab4：内核线程&amp;用户进程&amp;调度"></a>Lab4：内核线程&amp;用户进程&amp;调度</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-4/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab4 实验指导—rcore tutorial教程第三版</strong></a></p>
</blockquote>
<h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><p>线程与进程的一些东西。。之前学过。</p>
<p>每个线程都有自己独立的运行栈是，但它们可以在进程的尺度上共享资源，比如CPU时间、物理内存等等。</p>
<p>线程的表示需要用到控制块，线程如果我没记错的是线程控制块，进程则是PCB（进程控制块），每个控制块里面保存了识别一个线程、进程的关键信息。</p>
<p>比如实验书上提到的：</p>
<ul>
<li><strong>线程 ID</strong>：用于唯一确认一个线程，它会在系统调用等时刻用到。</li>
<li><strong>运行栈</strong>：每个线程都必须有一个独立的运行栈，保存运行时数据。</li>
<li><strong>线程执行上下文</strong>：当线程不在执行时，我们需要保存其上下文（其实就是一堆<strong>寄存器</strong>的值），这样之后才能够将其恢复，继续运行。和之前实现的中断一样，上下文由 <code>Context</code> 类型保存。（注：这里的<strong>线程执行上下文</strong>与前面提到的<strong>中断上下文</strong>是不同的概念）</li>
<li><strong>所属进程的记号</strong>：同一个进程中的多个线程，会共享页表、打开文件等信息。因此，我们将它们提取出来放到线程中。</li>
<li><strong>内核栈</strong>：除了线程运行必须有的运行栈，中断处理也必须有一个单独的栈。之前，我们的中断处理是直接在原来的栈上进行（我们直接将 <code>Context</code> 压入栈）。但是在后面我们会引入用户线程，这时就只有上帝才知道发生了什么——栈指针、程序指针都可能在跨国（<strong>国 == 特权态</strong>）旅游。为了确保中断处理能够进行（让操作系统能够接管这样的线程），中断处理必须运行在一个准备好的、安全的栈上。这就是内核栈。不过，内核栈并没有存储在线程信息中。（注：<strong>它的使用方法会有些复杂，我们会在后面讲解</strong>。）</li>
</ul>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725152929938.png" class="" title="image-20200725152929938">
<p>注意这里的Range就是分配虚拟地址的范围：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725153007458.png" class="" title="image-20200725153007458">
<blockquote>
<p>注意到，因为线程一般使用 <code>Arc&lt;Thread&gt;</code> 来保存，它是不可变的，所以其中再用 <code>Mutex</code> 来包装一部分，让这部分可以修改。</p>
</blockquote>
<p>同理，进程的结构：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725153252404.png" class="" title="image-20200725153252404">
<p>在完成了一些工作以后，可以看到输出：（由于各种依赖关系BUG太多，我直接用了最终版的rcore代码来进行测试，不再一个一个文件地修改了）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">test_restore_thread</span></span>()&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">__restore</span></span>(context: <span class="built_in">usize</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取第一个线程的 Context，具体原理后面讲解</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"获取第一个线程的 Context，具体原理后面讲解."</span>);</span><br><span class="line">    <span class="keyword">let</span> context = PROCESSOR.lock().prepare_next_thread();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动第一个线程</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"启动第一个线程"</span>);</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; __restore(context <span class="keyword">as</span> <span class="built_in">usize</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">unreachable!</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725163544551.png" class="" title="image-20200725163544551">
<p>在重新部署了lab4的代码之后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 6.98s</span><br><span class="line"></span><br><span class="line">OpenSBI v0.6</span><br><span class="line">   ____                    _____ ____ _____</span><br><span class="line">  / __ \                  / ____|  _ \_   _|</span><br><span class="line"> | |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line"> | |  | | <span class="string">'_ \ / _ \ '</span>_ \ \___ \|  _ &lt; | |</span><br><span class="line"> | |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line">  \____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">        | |</span><br><span class="line">        |_|</span><br><span class="line"></span><br><span class="line">Platform Name          : QEMU Virt Machine</span><br><span class="line">Platform HART Features : RV64ACDFIMSU</span><br><span class="line">Platform Max HARTs     : 8</span><br><span class="line">Current Hart           : 0</span><br><span class="line">Firmware Base          : 0x80000000</span><br><span class="line">Firmware Size          : 120 KB</span><br><span class="line">Runtime SBI Version    : 0.2</span><br><span class="line"></span><br><span class="line">MIDELEG : 0x0000000000000222</span><br><span class="line">MEDELEG : 0x000000000000b109</span><br><span class="line">PMP0    : 0x0000000080000000-0x000000008001ffff (A)</span><br><span class="line">PMP1    : 0x0000000000000000-0xffffffffffffffff (A,R,W,X)</span><br><span class="line">Hello rCore-Tutorial !!!</span><br><span class="line">mod interrupt initialized</span><br><span class="line">mod memory initialized</span><br><span class="line">测试</span><br><span class="line">hello from kernel thread 1</span><br><span class="line">hello from kernel thread 2</span><br><span class="line">hello from kernel thread 3</span><br><span class="line">hello from kernel thread 4</span><br><span class="line">hello from kernel thread 5</span><br><span class="line">hello from kernel thread 6</span><br><span class="line">hello from kernel thread 7</span><br><span class="line">hello from kernel thread 8</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x7,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1300000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1380000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 7</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x5,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1200000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1280000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 5</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x4,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1180000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1200000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 4</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x2,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1080000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1100000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 2</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x8,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1380000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1400000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 8</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x3,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1100000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1180000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 3</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x6,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1280000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1300000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 6</span><br><span class="line">Thread &#123;</span><br><span class="line">    thread_id: 0x1,</span><br><span class="line">    stack: Range &#123;</span><br><span class="line">        start: VirtualAddress(</span><br><span class="line">            0x1000000,</span><br><span class="line">        ),</span><br><span class="line">        end: VirtualAddress(</span><br><span class="line">            0x1080000,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    context: None,</span><br><span class="line">&#125; terminated: unimplemented interrupt <span class="built_in">type</span></span><br><span class="line">cause: Exception(InstructionPageFault), stval: 1</span><br><span class="line">src/process/processor.rs:87: <span class="string">'all threads terminated, shutting down'</span></span><br></pre></td></tr></table></figure>
<p>和实验指导上的输出结果不太一样。。不过算勉强可以了吧。。</p>
<p>又用lab-4分支的代码实验了一下，发现直接多了一个user目录。。（这个是lab6的内容。。）最终效果：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725184502172.png" class="" title="image-20200725184502172">
<h3 id="实验四实验题"><a href="#实验四实验题" class="headerlink" title="实验四实验题"></a>实验四实验题</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>原理：线程切换之中，页表是何时切换的？页表的切换会不会影响程序 / 操作系统的运行？为什么？</p>
<blockquote>
<p>页表是在 <code>Process::prepare_next_thread()</code> 中调用 <code>Thread::prepare()</code>，其中换入了新线程的页表。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725192355942.png" class="" title="image-20200725192355942">
<p>下面是线程中对应方法的实现，可以看到页表的切换过程：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725192243627.png" class="" title="image-20200725192243627">
<p>页表的切换<strong>不会</strong>影响程序 / 操作系统的运行。因为切换过程是通过中断完成的，而中断是操作系统实现的。同时页表切换后，只要之前保存的映射关系有效，程序也可以恢复到之前的状态，从而正确运行。</p>
</blockquote>
<h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><blockquote>
<p><a href="https://www.bookstack.cn/read/ucore_os_docs/lab6-lab6_3_6_1_basic_method.md" target="_blank" rel="noopener external nofollow noreferrer">https://www.bookstack.cn/read/ucore_os_docs/lab6-lab6_3_6_1_basic_method.md</a></p>
</blockquote>
<p>分析：</p>
<ul>
<li>在 Stride Scheduling 算法下，如果一个线程进入了一段时间的等待（例如等待输入，此时它不会被运行），会发生什么？</li>
</ul>
<blockquote>
<p>它被调用的可能性增加。（stride相对降低，因为其他线程会升高）</p>
<p>Stride Scheduling 算法的<strong>核心公式</strong>是：P.pass =BigStride / P.priority。也就是优先级越高，步长pass越小。</p>
<p>因为Stride Scheduling 算法的<strong>核心策略</strong>是：重新调度当前stride最小的进程。这样累加的stride越慢，就更加容易被调用。</p>
<p>参考：<a href="https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day21_lab4_practice.md。可以得到，这里的线程实际上是阻塞的，所以如果它的stride值很低时会抢占CPU而不能运行，导致其他线程不能获得资源。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day21_lab4_practice.md。可以得到，这里的线程实际上是阻塞的，所以如果它的stride值很低时会抢占CPU而不能运行，导致其他线程不能获得资源。</a></p>
</blockquote>
<ul>
<li>对于两个优先级分别为 9 和 1 的线程，连续 10 个时间片中，前者的运行次数一定更多吗？</li>
</ul>
<blockquote>
<p>不一定。比如，前者的stride现在是1000，而后者的stride是100。假设BigStride = 90; 这样，即使优先级更高，但总的stride仍然太大，后者仍然会被更多地运行。</p>
<p>也可能优先级分别为 9 的线程运行一次就结束了。</p>
</blockquote>
<ul>
<li>你认为 Stride Scheduling 算法有什么不合理之处？可以怎样改进？</li>
</ul>
<blockquote>
<p>stride累计对旧进程可能不太友好。如果stride累计太久了，那么新加入的进程将在一个时间段内长期占据CPU，从而让其他的进程无法运行。应该设计一种抑制措施：</p>
<ul>
<li>当一个进程等待时长每超过 T 秒时，此进程的 stride 累计值减半</li>
</ul>
<p>这样，等待过久的进程的stride值会很快恢复正常。</p>
<p>Stride Scheduling 算法不支持对进程状态的应对，比如优先级高的可能正处于阻塞状态。</p>
</blockquote>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>设计：如果不使用 <code>sscratch</code> 提供内核栈，而是像原来一样，遇到中断就直接将上下文压栈，请举出（思路即可，无需代码）：</p>
<ul>
<li>一种情况不会出现问题</li>
<li>一种情况导致异常无法处理（指无法进入 <code>handle_interrupt</code>）</li>
<li>一种情况导致产生嵌套异常（指第二个异常能够进行到调用 <code>handle_interrupt</code>，不考虑后续执行情况）</li>
<li>一种情况导致一个用户进程（先不考虑是怎么来的）可以将自己变为内核进程，或以内核态执行自己的代码</li>
</ul>
<blockquote>
<p>这个真是不会。。看了解答。</p>
<blockquote>
<ul>
<li>只运行一个非常善意的线程，比如 <code>loop {}</code><ul>
<li><code>jr 0</code> + <code>jr 2</code> 的那种，这样程序始终运行在局部，当然不会出现问题了</li>
</ul>
</li>
<li>线程把自己的 <code>sp</code> 搞丢了，比如 <code>mv sp, x0</code>。此时无法保存寄存器，也没有能够支持操作系统正常运行的栈<ul>
<li>这说明需要一个用户程序不能直接修改的栈来存储中断上下文</li>
</ul>
</li>
<li>运行两个线程。在两个线程切换的时候，会需要切换页表。但是此时操作系统运行在前一个线程的栈上，一旦切换，再访问栈就会导致缺页，因为每个线程的栈只在自己的页表中<ul>
<li>每个栈的访问需要借助虚拟地址</li>
<li>如果使用同一个栈，那么切换页表后的映射关系就不对了</li>
</ul>
</li>
<li>用户进程巧妙地设计 <code>sp</code>，使得它恰好落在内核的某些变量附近，于是在保存寄存器时就修改了变量的值。这相当于任意修改操作系统的控制信息<ul>
<li>还是不安全的问题，因为没有对系统信息进行隔离，同一个栈里面访问控制不好实施</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<h4 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h4><p>实验：当键盘按下 Ctrl + C 时，操作系统应该能够捕捉到中断。实现操作系统捕获该信号并结束当前运行的线程（你可能需要阅读一点在实验指导中没有提到的代码）</p>
<blockquote>
<blockquote>
<p>参考：<a href="https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day21_lab4_practice.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day21_lab4_practice.md</a></p>
</blockquote>
<p>这一题和下一题需要捕捉键盘输入。</p>
<p>首先 <code>handler.rs</code> 中找到外部中断：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725213235014.png" class="" title="image-20200725213235014">
<p>先了解 <code>Ctrl + C</code> 对应的键值：<a href="https://blog.csdn.net/softimite_zifeng/article/details/53259542。从中可以知道，Ctrl+C（3）。" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/softimite_zifeng/article/details/53259542。从中可以知道，Ctrl+C（3）。</a></p>
<p>故，我们需要特别处理键盘输入键值为3的情况。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725214512851.png" class="" title="image-20200725214512851">
</blockquote>
<p>实验：实现线程的 <code>clone()</code>。目前的内核线程不能进行系统调用，所以我们先简化地实现为“按 C 进行 clone”。clone 后应当为目前的线程复制一份几乎一样的拷贝，新线程与旧线程同属一个进程，公用页表和大部分内存空间，而新线程的栈是一份拷贝。</p>
<blockquote>
<p>首先，实现键盘中断响应：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725215011781.png" class="" title="image-20200725215011781">
<p>然后在进程控制中实现 clone 函数，</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725215351382.png" class="" title="image-20200725215351382">
<p>最后在线程中具体实现clone功能，（和线程里面的new类似地实现即可）注意：新线程与旧线程<strong>同属一个进程</strong>，<strong>公用页表和大部分内存空间</strong>，而新线程的<strong>栈是一份拷贝</strong>。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200725221124229.png" class="" title="image-20200725221124229">
<p>BUG：注意不能直接命名为 clone 函数，否则会与现有的克隆函数冲突。重命名为 <code>clone_</code>。</p>
</blockquote>
<p>实验：了解并实现 Stride Scheduling 调度算法，为不同线程设置不同优先级，使得其获得与优先级成正比的运行时间。</p>
<blockquote>
<blockquote>
<p><a href="https://www.bookstack.cn/read/ucore_os_docs/lab6-lab6_3_6_2_priority_queue.md" target="_blank" rel="noopener external nofollow noreferrer">https://www.bookstack.cn/read/ucore_os_docs/lab6-lab6_3_6_2_priority_queue.md</a></p>
</blockquote>
<p>Stride Scheduling 调度算法似乎需要用到优先队列结构。不妨先实现朴素的stride算法（<strong>无优先队列</strong>）。</p>
<p>新建<code>stride_scheduler.rs</code>：（有瑕疵）</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! Stride Scheduling的调度器 [`StrideSchduler`]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> super::Scheduler;</span><br><span class="line"><span class="keyword">use</span> alloc::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 将线程和调度信息打包</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StrideThread</span></span>&lt;ThreadType: <span class="built_in">Clone</span> + <span class="built_in">Eq</span>&gt; &#123;</span><br><span class="line">    stride: <span class="built_in">usize</span>,</span><br><span class="line">    BigStride: <span class="built_in">usize</span>,</span><br><span class="line">    priority: <span class="built_in">usize</span>,  <span class="comment">// pass = BigStride / priority</span></span><br><span class="line">    <span class="comment">/// 线程数据</span></span><br><span class="line">    <span class="keyword">pub</span> thread: ThreadType,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 采用 Stride Scheduling 算法的线程调度器</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">StrideScheduler</span></span>&lt;ThreadType: <span class="built_in">Clone</span> + <span class="built_in">Eq</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/// 带有调度信息的线程池</span></span><br><span class="line">    pool: <span class="built_in">Vec</span>::&lt;StrideThread&lt;ThreadType&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// `Default` 创建一个空的调度器</span></span><br><span class="line"><span class="keyword">impl</span>&lt;ThreadType: <span class="built_in">Clone</span> + <span class="built_in">Eq</span>&gt; <span class="built_in">Default</span> <span class="keyword">for</span> StrideScheduler&lt;ThreadType&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">default</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            pool:  <span class="built_in">Vec</span>::&lt;StrideThread&lt;ThreadType&gt;&gt;::new(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;ThreadType: <span class="built_in">Clone</span> + <span class="built_in">Eq</span>&gt; Scheduler&lt;ThreadType&gt; <span class="keyword">for</span> StrideScheduler&lt;ThreadType&gt; &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Priority</span></span> = ();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_thread</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, thread: ThreadType) &#123;</span><br><span class="line">        <span class="keyword">self</span>.pool.push(StrideThread &#123;</span><br><span class="line">            stride: <span class="number">0</span>,</span><br><span class="line">            BigStride: <span class="number">23333</span>,</span><br><span class="line">            priority: <span class="number">100</span>,    <span class="comment">// 暂时定为常数,因为ThreadType时抽象的，无法使用线程中保存的优先级</span></span><br><span class="line">            thread,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">get_next</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">Option</span>&lt;ThreadType&gt; &#123;</span><br><span class="line">        <span class="comment">// 遍历线程池，返回stride最小者</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(best) = <span class="keyword">self</span>.pool.iter_mut().min_by(|x, y| &#123;</span><br><span class="line">            x.stride.cmp(&amp; y.stride)</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            best.stride += best.BigStride / best.priority;</span><br><span class="line">            <span class="literal">Some</span>(best.thread.clone())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">remove_thread</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, thread: &amp;ThreadType) &#123;</span><br><span class="line">        <span class="comment">// 移除相应的线程并且确认恰移除一个线程</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> removed = <span class="keyword">self</span>.pool.drain_filter(|t| t.thread == *thread);</span><br><span class="line">        <span class="built_in">assert!</span>(removed.next().is_some() &amp;&amp; removed.next().is_none());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">set_priority</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, _thread: ThreadType, _priority: ()) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lab5：块设备和文件系统"><a href="#Lab5：块设备和文件系统" class="headerlink" title="Lab5：块设备和文件系统"></a>Lab5：块设备和文件系统</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-5/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab5 实验指导—rcore tutorial教程第三版</strong></a></p>
</blockquote>
<h3 id="设备树"><a href="#设备树" class="headerlink" title="设备树"></a>设备树</h3><p>在 RISC-V 中，操作系统通过 bootloader，即 OpenSBI 固件完成以设备树的格式管理全部已接入设备信息的功能。它来完成对于包括物理内存在内的各外设的扫描，将扫描结果以<strong>设备树二进制对象（DTB，Device Tree Blob）</strong>的格式保存在物理内存中的某个地方。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200726110115158.png" class="" title="image-20200726110115158">
<p>这个结构其实跟文件系统很像。</p>
<blockquote>
<p>每个设备在物理上连接到了父设备上最后再通过总线等连接起来构成一整个设备树，在每个节点上都描述了对应设备的信息，如支持的协议是什么类型等等。而操作系统就是通过这些节点上的信息来实现对设备的识别的。</p>
</blockquote>
<p>因为整个是一个树结构，所以在解析设备树获取节点信息时，可以直接采用简单的递归函数，即树遍历算法。如下代码所示：（其余代码参考实验书）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 递归遍历设备树</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">walk</span></span>(node: &amp;Node) &#123;</span><br><span class="line">    <span class="comment">// 检查设备的协议支持并初始化</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(compatible) = node.prop_str(<span class="string">"compatible"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> compatible == <span class="string">"virtio,mmio"</span> &#123;</span><br><span class="line">            <span class="comment">// 在遍历过程中，一旦发现了一个支持 "virtio,mmio" 的设备</span></span><br><span class="line">            <span class="comment">// （其实就是 QEMU 模拟的存储设备），就进入下一步加载驱动的逻辑。</span></span><br><span class="line">            virtio_probe(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历子树</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> node.children.iter() &#123;</span><br><span class="line">        walk(child);        <span class="comment">// 【递归】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>QEMU支持挂载设备树。只不过用了一个 <code>virtio</code> 半虚拟化技术架构：</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200726180311493.png" class="" title="image-20200726180311493">
<blockquote>
<p>以 virtio 为中心的总线下又挂载了 virtio-blk（块设备）总线、virtio-net（网络设备）总线、virtio-pci（PCI 设备）总线等，本身就构成一个设备树。</p>
</blockquote>
<p>当然，要启用QEMU挂载功能，需要调用相应的命令：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行 QEMU</span></span><br><span class="line"><span class="section">qemu: build</span></span><br><span class="line">    @qemu-system-riscv64 \</span><br><span class="line">            -machine virt \</span><br><span class="line">            -nographic \</span><br><span class="line">            -bios default \</span><br><span class="line">            -device loader,file=<span class="variable">$(BIN_FILE)</span>,addr=0x80200000 \</span><br><span class="line">            -drive file=<span class="variable">$(TEST_IMG)</span>,format=raw,id=sfs \      <span class="comment"># 模拟存储设备，TEST_IMG 是特定文件系统格式的磁盘镜像</span></span><br><span class="line">            -device virtio-blk-device,drive=sfs              <span class="comment"># 以 virtio Block Device 的形式挂载到 virtio 总线上</span></span><br></pre></td></tr></table></figure>
<p>接着便是一些驱动代码细节。。</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>为什么物理地址到虚拟地址转换直接线性映射，而虚拟地址到物理地址却要查表？</p>
<blockquote>
<p>答案中提到：在内核线程里面，只要一个物理地址加上偏移得到的虚拟地址肯定是可以访问对应的物理地址的。所以，把物理地址转为虚拟地址加个偏移既可。</p>
<p>这说明，如果物理地址有效，那么<strong>线性映射是肯定存在的</strong>，这时虚拟地址也一定有效（是可能的物理地址对应的虚拟地址之一）。但是反过来，虚拟地址却不一定是最初的线性映射形成的，因此不能直接读写，必须通过页表查询。</p>
</blockquote>
<h3 id="驱动、块设备"><a href="#驱动、块设备" class="headerlink" title="驱动、块设备"></a>驱动、块设备</h3><p><strong>块设备</strong>，即以块为单位进行单次读写操作，这样每次读取的效率更高。因为硬盘的读取具有局部性，如果每次只读一个字节，那么花在寻道时间等等上的成本就会很大。所以，一次读一波~</p>
<p><strong>驱动</strong>，就是负责对设备的管理和访问，在驱动中要实现诸如：获取设备类型信息，读取某个块到缓冲区，将缓冲区的数据写入某个块，获取设备树上的设备信息并保存等等。</p>
<p><strong>抽象块设备</strong>，其实就是提供给文件系统的一个高级接口，在这一层隐去了驱动、块设备的诸多细节，只保留了几个封装好的函数，供上层文件系统调用。</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200726183637116.png" class="" title="image-20200726183637116">
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><blockquote>
<p>之前我们在加载 QEMU 的时候引入了一个磁盘镜像文件，这个文件的打包是由 <a href="https://github.com/rcore-os/rcore-fs/tree/master/rcore-fs-fuse" target="_blank" rel="noopener external nofollow noreferrer">rcore-fs-fuse 工具</a> 来完成的，它会根据不同的格式把目录的文件封装成到一个文件系统中，并把文件系统封装为一个磁盘镜像文件。然后我们把这个镜像文件像设备一样挂载在 QEMU 上，QEMU 就把它模拟为一个块设备了。接下来我们需要让操作系统理解块设备里面的文件系统。</p>
</blockquote>
<p>由上述可知，我们需要在块设备中分析文件系统。</p>
<p>文件系统已经有了大量前人的实现。所以，采用了一个模板  Simple File System。（<a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-5/files/rcore-fs-analysis.pdf" target="_blank" rel="noopener external nofollow noreferrer">前人的分析</a>）</p>
<p>最后加入测试代码，试着运行一下，看看效果：（<code>PROCESSOR.lock().run()</code> 这个方法并没有任何地方实现了，所以要改成其他的方法）</p>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200726185907886.png" class="" title="image-20200726185907886">
<h3 id="实验五实验题"><a href="#实验五实验题" class="headerlink" title="实验五实验题"></a>实验五实验题</h3><blockquote>
<p>实验五暂时没有实验题</p>
</blockquote>
<h2 id="Lab6：加载执行文件形成用户进程"><a href="#Lab6：加载执行文件形成用户进程" class="headerlink" title="Lab6：加载执行文件形成用户进程"></a>Lab6：加载执行文件形成用户进程</h2><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-6/guide/intro.html" target="_blank" rel="noopener external nofollow noreferrer"><strong>Lab6 实验指导—rcore tutorial教程第三版</strong></a></p>
</blockquote>
<p>我们成功单独生成 ELF 格式的用户程序，并打包进文件系统中；同时，从中读取，创建并运行用户进程；而为了可以让用户程序享受到操作系统的功能，我们使用系统调用为用户程序提供服务。</p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>用户程序框架和实验准备中为操作系统「去除依赖」的工作十分类似。只不过需要新建一个 <code>user</code> 专用文件，与 <code>os</code> 文件夹相互独立、并列。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cargo new --bin user</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和操作系统一样，我们需要为用户程序移除 std 依赖，并且补充一些必要的功能。</p>
<p><code>lib.rs</code>：</p>
<ul>
<li><code>#![no_std]</code> 移除标准库</li>
<li><code>#![feature(...)]</code> 开启一些不稳定的功能</li>
<li><code>#[global_allocator]</code> 使用库来实现动态内存分配</li>
<li><code>#[panic_handler]</code> panic 时终止</li>
</ul>
<p>其他文件：</p>
<ul>
<li><code>.cargo/config</code> 设置编译目标为 RISC-V 64</li>
<li><code>console.rs</code> 实现 <code>print!</code> <code>println!</code> 宏</li>
</ul>
</blockquote>
<p>安装 <code>rcore-fs-fuse</code> 工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cargo install rcore-fs-fuse --git https://github.com/rcore-os/rcore-fs</span><br></pre></td></tr></table></figure>
<p>在 <code>user/Makefile</code> 里面设置打包的命令：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">build: dependency</span></span><br><span class="line">    <span class="comment"># 编译</span></span><br><span class="line">    @cargo build</span><br><span class="line">    @echo Targets: <span class="variable">$(<span class="built_in">patsubst</span> <span class="variable">$(SRC_DIR)</span>/%.rs, %, <span class="variable">$(SRC_FILES)</span>)</span></span><br><span class="line">    <span class="comment"># 移除原有的所有文件</span></span><br><span class="line">    @rm -rf <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    @mkdir -p <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    <span class="comment"># 复制编译生成的 ELF 至目标目录</span></span><br><span class="line">    @cp <span class="variable">$(BIN_FILES)</span> <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    <span class="comment"># 使用 rcore-fs-fuse 工具进行打包</span></span><br><span class="line">    @rcore-fs-fuse --fs sfs <span class="variable">$(IMG_FILE)</span> <span class="variable">$(OUT_DIR)</span> zip</span><br><span class="line">    <span class="comment"># 将镜像文件的格式转换为 QEMU 使用的高级格式</span></span><br><span class="line">    @qemu-img convert -f raw <span class="variable">$(IMG_FILE)</span> -O qcow2 <span class="variable">$(QCOW_FILE)</span></span><br><span class="line">    <span class="comment"># 提升镜像文件的容量（并非实际大小），来允许更多数据写入</span></span><br><span class="line">    @qemu-img resize <span class="variable">$(QCOW_FILE)</span> +1G</span><br></pre></td></tr></table></figure>
<h3 id="用户进程"><a href="#用户进程" class="headerlink" title="用户进程"></a>用户进程</h3><blockquote>
<p>在之前实现内核线程时，我们只需要为线程指定一个起始位置就够了，因为所有的代码都在操作系统之中。但是现在，我们需要从 ELF 文件中加载用户程序的代码和数据信息，并且映射到内存中。</p>
</blockquote>
<p>在 lab6 中，用户程序需要从文件中获取，而不是之前的手动创建了。对应的是 ELF 文件解析器，因为有 <code>xmas-elf</code> 这个 crate 替我们实现了 ELF 的解析，所以直接调用就行了。</p>
<p>读取文件内容：（将文件整个读到一个向量里面然后返回）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">readall</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// 从文件头读取长度</span></span><br><span class="line">    <span class="keyword">let</span> size = <span class="keyword">self</span>.metadata()?.size;</span><br><span class="line">    <span class="comment">// 构建 Vec 并读取</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = <span class="built_in">Vec</span>::with_capacity(size);</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; buffer.set_len(size) &#125;;</span><br><span class="line">    <span class="keyword">self</span>.read_at(<span class="number">0</span>, buffer.as_mut_slice())?;</span><br><span class="line">    <span class="literal">Ok</span>(buffer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后解析各个字段。。代码有点长就不贴了。</p>
<p>思考：我们在为用户程序建立映射时，虚拟地址是 ELF 文件中写明的，那物理地址是程序在磁盘中存储的地址吗？这样做有什么问题吗？</p>
<blockquote>
<p>肯定是不行的，这样搞的话，每次物理地址解析完还要访问磁盘，众所周知，磁盘的读写炒鸡慢。所以这样搞，系统的性能就太低了。所以要将文件内容加载进入内存，并以内存中的物理地址为准。这样，便也就涉及到了页面置换等等优化的问题。</p>
</blockquote>
<p>对于一个页面，有其<strong>物理地址</strong>、<strong>虚拟地址</strong>和<strong>待加载数据的地址</strong>。此时，是不是直接从<strong>待加载数据的地址</strong>拷贝到页面的<strong>虚拟地址</strong>，如同 <code>memcpy</code> 一样就可以呢？</p>
<blockquote>
<p>当然是不行的。因为首先一个页面可能具有多个虚拟地址！那么你要拷贝到那个虚拟地址呢？如果页表加载的不同，那么同一个虚拟地址可能有不同的映射，可能就访问不到页面所在的真正的物理地址了。所以这里必须用物理地址来写入数据，确保正确性。</p>
</blockquote>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>系统调用通过一些中断性的设计来完成一些功能。在后面实验题的部分也有做到。</p>
<p>首先系统调用底层需要用到一定的汇编。可以看指导书。系统调用通常会返回三类处理结果：一个数值、程序进入等待、程序被终止。</p>
<p>后面的条件变量暂时先这样把。。条件变量在这里的作用就是：</p>
<blockquote>
<p>为输入流加入条件变量后，就可以使得调用 <code>sys_read</code> 的线程在等待期间保持休眠，不被调度器选中，消耗 CPU 资源。</p>
</blockquote>
<p>这似乎是可以解决之前 Stride Scheduling 算法的缺陷，因为之前的调度算法没有对等待期的线程做处理，因此可能出现所有高 stride 的线程被迫等待，CPU 资源闲置的情况。</p>
<h3 id="实验六实验题"><a href="#实验六实验题" class="headerlink" title="实验六实验题"></a>实验六实验题</h3><blockquote>
<p><a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-6/practice.html" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-6/practice.html</a></p>
</blockquote>
<h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>原理：使用条件变量之后，分别从线程和操作系统的角度而言读取字符的系统调用是阻塞的还是非阻塞的？</p>
<blockquote>
<p>跟解答差不多。对于线程而言，是阻塞的，因为需要等待系统调用结束。对于操作系统，等待输入的时间完全分配给了其他线程，所以对于操作系统来说是非阻塞的（操作系统似乎很难发生阻塞，除非所有的进程都阻塞了，否则总是可以通过调度实现运行）。</p>
</blockquote>
<h4 id="设计-1"><a href="#设计-1" class="headerlink" title="设计*"></a>设计*</h4><p>设计：如果要让用户线程能够使用 <code>Vec</code> 等，需要做哪些工作？如果要让用户线程能够使用大于其栈大小的动态分配空间，需要做哪些工作？</p>
<blockquote>
<p>首先需要支持用户态的堆空间预分配，然后让 <code>Vec</code> 访问这个堆空间。</p>
<blockquote>
<p>应当要在用户部分实现 #[global_allocator] ：包含 [<code>alloc::alloc::GlobalAlloc</code>] trait等</p>
</blockquote>
<p>要让用户线程能够使用大于其栈大小的动态分配空间，需要设计一个相应的用户进程的堆空间实现。</p>
</blockquote>
<h4 id="实验-4"><a href="#实验-4" class="headerlink" title="实验"></a>实验</h4><blockquote>
<p>参考：<a href="https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day23_lab6_practice.md。" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/yunwei37/os-summer-of-code-daily/blob/master/daily_documents/Day23_lab6_practice.md。</a></p>
</blockquote>
<p>实验：实现 <code>get_tid</code> 系统调用，使得用户线程可以获取自身的线程 ID。</p>
<blockquote>
<p>随便设定一个获取自身的线程 ID 的系统调用号。</p>
<p>在 <code>user/src/syscall.rs</code> 添加对应的系统调用：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SYSCALL_GETTID: <span class="built_in">usize</span> = <span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sys_get_tid</span></span>() -&gt; <span class="built_in">isize</span> &#123;</span><br><span class="line">    syscall(SYSCALL_GETTID, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在 <code>os/src/kernel/syscall.rs</code> 中实现具体的系统调用接口：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> SYSCALL_GETTID: <span class="built_in">usize</span> = <span class="number">233</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">match</span> syscall_id &#123;</span><br><span class="line">        ...</span><br><span class="line">        SYS_GETTID =&gt; sys_get_tid(),</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后在 <code>os/src/kernel/process.rs</code> 中具体实现系统调用：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span>(<span class="keyword">super</span>) <span class="function"><span class="keyword">fn</span> <span class="title">sys_exit</span></span>(code: <span class="built_in">usize</span>) -&gt; SyscallResult &#123;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">"thread &#123;&#125; exit with code &#123;&#125;"</span>,</span><br><span class="line">        PROCESSOR.lock().current_thread().id,</span><br><span class="line">        code</span><br><span class="line">    );</span><br><span class="line">    SyscallResult::Kill</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span>(<span class="keyword">super</span>) <span class="function"><span class="keyword">fn</span> <span class="title">sys_get_tid</span></span>() -&gt; SyscallResult &#123;   <span class="comment">// sys_exit 已经描述了 id 如何获取</span></span><br><span class="line">    SyscallResult::Proceed(</span><br><span class="line">        PROCESSOR.lock().current_thread().id.clone()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实验：将你在实验四（上）实现的 <code>clone</code> 改进成为 <code>sys_clone</code> 系统调用，使得该系统调用为父进程返回自身的线程 ID，而为子线程返回 0。</p>
<blockquote>
<p>同理。随便设定一个 <code>sys_clone</code> 系统调用号。</p>
<p>在 <code>user/src/syscall.rs</code> 添加对应的系统调用：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SYS_CLONE: <span class="built_in">usize</span> = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sys_clone</span></span>() -&gt; <span class="built_in">isize</span> &#123;</span><br><span class="line">    syscall(SYS_CLONE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在 <code>os/src/kernel/syscall.rs</code> 中实现具体的系统调用接口：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> SYS_CLONE: <span class="built_in">usize</span> = <span class="number">110</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">match</span> syscall_id &#123;</span><br><span class="line">        ...</span><br><span class="line">        SYS_CLONE =&gt; sys_clone(context),</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后在 <code>os/src/kernel/process.rs</code> 中具体实现系统调用：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span>(<span class="keyword">super</span>) <span class="function"><span class="keyword">fn</span> <span class="title">sys_clone</span></span>(context: &amp;Context) -&gt; SyscallResult &#123;</span><br><span class="line">    <span class="keyword">let</span> id = PROCESSOR.lock().current_thread().id.clone();</span><br><span class="line">    PROCESSOR.lock().clone_current_thread(context);</span><br><span class="line">    <span class="keyword">if</span> PROCESSOR.lock().current_thread().id.clone() == id &#123;</span><br><span class="line">        SyscallResult::Proceed(id)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        SyscallResult::Proceed(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实验：将一个文件打包进用户镜像，并让一个用户进程读取它并打印其内容。需要实现 <code>sys_open</code>，将文件描述符加入进程的 <code>descriptors</code> 中，然后通过 <code>sys_read</code> 来读取。</p>
<blockquote>
<p>随便设定一个 <code>sys_open</code> 系统调用号。</p>
<p>在 <code>user/src/syscall.rs</code> 添加对应的系统调用：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SYSCALL_OPEN: <span class="built_in">usize</span> = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sys_open</span></span>(file: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">isize</span> &#123;</span><br><span class="line">    syscall(</span><br><span class="line">        SYSCALL_OPEN,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        file.as_ptr() <span class="keyword">as</span> *<span class="keyword">const</span> <span class="built_in">u8</span> <span class="keyword">as</span> <span class="built_in">usize</span>,</span><br><span class="line">        file.len(),</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在 <code>os/src/kernel/syscall.rs</code> 中实现具体的系统调用接口：</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> SYSCALL_OPEN: <span class="built_in">usize</span> = <span class="number">120</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">match</span> syscall_id &#123;</span><br><span class="line">        ...</span><br><span class="line">        SYSCALL_OPEN =&gt; sys_open(context),</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后在 <code>os/src/kernel/fs.rs</code> 文件系统中具体实现系统调用：（不太会。。）</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::ROOT_INODE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span>(<span class="keyword">super</span>) <span class="function"><span class="keyword">fn</span> <span class="title">sys_open</span></span>(buffer: *<span class="keyword">mut</span> <span class="built_in">u8</span>, size: <span class="built_in">usize</span>) -&gt; SyscallResult &#123;</span><br><span class="line">    <span class="keyword">let</span> file_name = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> slice = slice::from_raw_parts(buffer, size);</span><br><span class="line">        <span class="built_in">str</span>::from_utf8(slice).unwrap()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 从文件系统中找到文件描述符</span></span><br><span class="line">    <span class="keyword">let</span> file = ROOT_INODE.find(file_name).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> process = PROCESSOR.lock().current_thread().process.clone();</span><br><span class="line">    process.inner().descriptors.push(file);   <span class="comment">// 加入文件描述符</span></span><br><span class="line">    </span><br><span class="line">    SyscallResult::Proceed(</span><br><span class="line">        (PROCESSOR</span><br><span class="line">            .lock()</span><br><span class="line">            .current_thread()</span><br><span class="line">            .process</span><br><span class="line">            .clone()</span><br><span class="line">            .inner()</span><br><span class="line">            .descriptors</span><br><span class="line">            .len()</span><br><span class="line">            - <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">isize</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将一个文件打包进用户镜像：（根据实验指导书：<a href="https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-6/guide/part-2.html），编写MAkefile：" target="_blank" rel="noopener external nofollow noreferrer">https://rcore-os.github.io/rCore-Tutorial-deploy/docs/lab-6/guide/part-2.html），编写MAkefile：</a></p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TEST_FILE	:= test.file</span><br><span class="line"></span><br><span class="line"><span class="section">build: dependency</span></span><br><span class="line">    <span class="comment"># 编译</span></span><br><span class="line">    @cargo build</span><br><span class="line">    @echo Targets: <span class="variable">$(<span class="built_in">patsubst</span> <span class="variable">$(SRC_DIR)</span>/%.rs, %, <span class="variable">$(SRC_FILES)</span>)</span></span><br><span class="line">    <span class="comment"># 移除原有的所有文件</span></span><br><span class="line">    @rm -rf <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    @mkdir -p <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    <span class="comment"># 复制编译生成的 ELF 至目标目录</span></span><br><span class="line">    @cp <span class="variable">$(BIN_FILES)</span> <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    @cp <span class="variable">$(TEST_FILE)</span> <span class="variable">$(OUT_DIR)</span></span><br><span class="line">    <span class="comment"># 使用 rcore-fs-fuse 工具进行打包</span></span><br><span class="line">    @rcore-fs-fuse --fs sfs <span class="variable">$(IMG_FILE)</span> <span class="variable">$(OUT_DIR)</span> zip</span><br><span class="line">    <span class="comment"># 将镜像文件的格式转换为 QEMU 使用的高级格式</span></span><br><span class="line">    @qemu-img convert -f raw <span class="variable">$(IMG_FILE)</span> -O qcow2 <span class="variable">$(QCOW_FILE)</span></span><br><span class="line">    <span class="comment"># 提升镜像文件的容量（并非实际大小），来允许更多数据写入</span></span><br><span class="line">    @qemu-img resize <span class="variable">$(QCOW_FILE)</span> +1G</span><br></pre></td></tr></table></figure>
<img data-src="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE/image-20200726014415664.png" class="" title="image-20200726014415664">
<blockquote>
<p>最后在 main 函数中调试，遇到一些格式上的困难。暂时放弃了。</p>
</blockquote>
<h4 id="挑战实验"><a href="#挑战实验" class="headerlink" title="挑战实验"></a>挑战实验</h4><p>挑战实验：实现 <code>sys_pipe</code>，返回两个文件描述符，分别为一个管道的读和写端。用户线程调用完 <code>sys_pipe</code> 后调用 <code>sys_fork</code>，父线程写入管道，子线程可以读取。读取时尽量避免忙等待。</p>
<blockquote>
<p>先放着了。。</p>
</blockquote>
<h2 id="OS实习第三次交流会"><a href="#OS实习第三次交流会" class="headerlink" title="OS实习第三次交流会"></a>OS实习第三次交流会</h2><ul>
<li>老师介绍第二阶段鹏城实验室实习的准备工作<ul>
<li>15到20人的规模左右</li>
<li>28号左右完成一个check（26号提交问卷，27号修改完毕）</li>
<li>没有拿到《<strong>复课证明</strong>》的折衷方案：<ul>
<li>只要本人被同意而做好规划，但是只有<strong><font color=red>一周</font></strong>的时间（黑客马拉松的形式）<ul>
<li>有《复课证明》可以待一个月，发工牌</li>
</ul>
</li>
<li>每个同学签署自我安全协议书</li>
<li>来回车票、食宿<strong>报销</strong>，有实习劳务费<ul>
<li>高铁/航班（二等座、经济舱+登机牌）。</li>
<li>宿舍两人一间。</li>
<li>深圳天气较热。</li>
<li>实验室有食堂。</li>
</ul>
</li>
</ul>
</li>
<li><strong>总结报告</strong>：今天至少提交一个版本，可以继续更新</li>
<li>以后的实习机会优先考虑</li>
</ul>
</li>
<li>学生提问与交流</li>
</ul>
<h1 id="第一阶段总结"><a href="#第一阶段总结" class="headerlink" title="==第一阶段总结=="></a>==第一阶段总结==</h1><blockquote>
<p>博客记录：<a href="https://vel.life/操作系统暑期项目/" target="_blank" rel="noopener external nofollow noreferrer">操作系统暑期项目</a>。</p>
</blockquote>
<p>简要自身情况介绍：我是计算机科学爱好者，学生，机缘凑巧听说了 rCore 的暑期实习项目，本身也没有别的要紧的事情，于是决定来参与这个活动。可以说在很大的程度上达到了我想要的效果吧，虽然离群里的大佬还有很大的差距，但我对于我自己的收获还是比较认可的。虽然少，但是实在。</p>
<p>总的来说，第一阶段确实学了一些东西，但是相对来说，又学得偏少；Rust 只是掌握了最基础的一些语法，大概是那种能通过编译、有一定正确性的程度，但是离熟练掌握 Rust 还有一定距离。Rust的编译检查在最开始可能确实有些“反人类”，可是做完 rustlings，做完 15 道编程题，慢慢地通过编译变得容易多了，也会更加注重编译出错时地提示，通常这些提示都会很贴心。在这样的“与编译器作斗争”的过程中，编程水平也许有了无形的提高也说不定。虽然我选的编程题比较简单，都是从 LeetCode 上摘取的简单题、中等题。Rust的语法特性有一些确实很好用，比如模式匹配系列（<code>match</code>，<code>if let</code>，<code>while let</code>，……），用得好便会有奇妙的逻辑效果，尤其是与 <code>Option</code> 这种枚举类型配合时，更让人感觉到语言的有美感。Go 语言作为另一门现代系统级编程语言，通常有着非常固定的、专属的编程范式，那么 Rust 语言会不会在将来形成自己的编程范式呢？至少现在来看，<code>fmt</code> 相关的工具只是对代码的样式风格做了标准化，离代码的逻辑风格还差一些。具体的lab实验中，也会用到 Rust 的各种特性。在以后，如果有机会继续深入学习的话，可能会对语言的设计产生更深刻的理解。但是目前，到此为止也还不错。</p>
<p>而RISC-V方面我也只是粗看了皮毛，仗着自己在MIPS和x86汇编方面的知识，倒也暂时没有遇到太多的困难；但是，要说显著的进步，确实没有了。RISC-V作为精简指令集，在设计思路上其实跟 MIPS 的区别不大，可能它的优势就在于历史包袱小、开源，但说实话真正从技术层面上来分析却没有什么特别之处。RISC-V 更像是一个开源运动的产物，就像 Linux 一样，具有广泛的社区和生命力。RISC-V 在陈渝老师这边强调的是特权架构，不过也没感觉到什么特别的地方，跟 x86 的特权级体系还是蛮像的，也许是多了一两个特权级？我这里想到了网络的分层体系，有七层的 OSI 体系，也有五层的 TCP/IP 体系，其实操作系统的特权架构和网络系统的分层两者还是挺像的，从中也可以看出特权级究竟分多少级其实完全取决于现实需求，而没有什么理论上的特别限制，只要做到对不同层级之间的功能的清晰划分便足矣。</p>
<p>在做 rCore 实验方面，由于时间的提前，打乱了之前的计划，在研究了前几个 lab 之后（lab1 - lab3），只好匆匆地跑通后面几个 lab（然后做实验题去了），而实验书的对应章节却几乎来不及看了（得知延期一天，不妨抽点时间浅浅地看一番）。所以在实验方面，有大量的代码细节，没有时间去看，这可能会对第二阶段的 zCore（如果可能的话）产生比较严重的影响。在学习之余，我也参与了少量的微信群讨论和 issue 上的提问与回答，还提交了几个简单的 Pull Request，目前都已经被合并了。因为之前自学过操作系统和 ucore 系列实验，所以在实验的理论方面没有遇到太大的障碍，反倒是代码细节上能力有些捉襟见拙——操作系统真是一个注重实践大于理论的学科。目前来说，我感觉到操作系统的编写过程中，DEBUG 是一个非常要命的事情，我至今还不是很会用 gdb，由于禁用 std，在单元测试的时候也经常被迫只能选择 <code>assert!</code> 之类的断言的形式。至少以我以前维护 Java 项目和 Python 项目的经验来看，Rust 项目的测试功能还是比较麻烦的（也可能是我不熟悉或者不知道更好的 DEBUG 方法）。</p>
<p>这一个月，说快也快。中途还摸鱼划水了一段时间。整体来说，花在操作系统暑期实习上的时间并不是特别多，因此收获相对来说还是对得起付出的时间的。也许多花点精力，可以把实验做完；或者做一点微小的贡献和改进；或者帮助解决更多的问题……但是，时间都已经过去了。现在也只能唏嘘。不管怎么说，这一个阶段也总算结束了。不管之后能不能入选第二个阶段的实习，我都已经很满足了（即使不能入选，也有其它的事情要做，所以并不慌张~）。像我这样佛系的态度来面对科研可能差点火候，但是对于喜欢的、有兴趣的定西，这样的态度不也可能成为长燃的火烛么。许多年以后，我会庆幸自己曾经在某个夏伏天，写过一些文字，写过一些代码……那已经极好了。</p>
<h1 id="zCore"><a href="#zCore" class="headerlink" title="zCore"></a>zCore</h1><blockquote>
<p><a href="https://github.com/rcore-os/zCore/wiki/zcore-summer-of-code" target="_blank" rel="noopener external nofollow noreferrer">zCore操作系统实践与研究</a></p>
</blockquote>
<p>zCore 的研究分析部分打算另开一篇博文。这里暂时不记了。</p>
<p>地址：<a href="https://vel.life/zCore研究" target="_blank" rel="noopener external nofollow noreferrer">https://vel.life/zCore研究</a>。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
</search>
